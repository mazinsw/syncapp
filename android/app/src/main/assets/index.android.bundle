var __DEV__=true,__BUNDLE_START_TIME__=this.nativePerformanceNow?nativePerformanceNow():Date.now(),process=this.process||{};process.env=process.env||{};process.env.NODE_ENV='development';
(function (global) {
  'use strict';

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  }

  global.require = _require;
  global.__d = define;
  var modules = Object.create(null);

  if (__DEV__) {
    var verboseNamesToModuleIds = Object.create(null);
  }

  function define(factory, moduleId, dependencyMap) {
    if (moduleId in modules) {
      if (__DEV__) {
        var inverseDependencies = arguments[4];

        if (inverseDependencies) {
          global.__accept(moduleId, factory, dependencyMap, inverseDependencies);
        } else {
          console.warn("Trying to define twice module ID " + moduleId + " in the same bundle");
        }
      }

      return;
    }

    modules[moduleId] = {
      dependencyMap: dependencyMap,
      exports: undefined,
      factory: factory,
      hasError: false,
      isInitialized: false
    };

    if (__DEV__) {
      modules[moduleId].hot = createHotReloadingObject();
      var verboseName = arguments[3];

      if (verboseName) {
        modules[moduleId].verboseName = verboseName;
        verboseNamesToModuleIds[verboseName] = moduleId;
      }
    }
  }

  function _require(moduleId) {
    if (__DEV__ && typeof moduleId === 'string') {
      var verboseName = moduleId;
      moduleId = verboseNamesToModuleIds[verboseName];

      if (moduleId == null) {
        throw new Error("Unknown named module: '" + verboseName + "'");
      } else {
        console.warn("Requiring module '" + verboseName + "' by name is only supported for " + 'debugging purposes and will BREAK IN PRODUCTION!');
      }
    }

    var moduleIdReallyIsNumber = moduleId;
    var module = modules[moduleIdReallyIsNumber];
    return module && module.isInitialized ? module.exports : guardedLoadModule(moduleIdReallyIsNumber, module);
  }

  var inGuard = false;

  function guardedLoadModule(moduleId, module) {
    if (!inGuard && global.ErrorUtils) {
      inGuard = true;
      var returnValue = void 0;

      try {
        returnValue = loadModuleImplementation(moduleId, module);
      } catch (e) {
        global.ErrorUtils.reportFatalError(e);
      }

      inGuard = false;
      return returnValue;
    } else {
      return loadModuleImplementation(moduleId, module);
    }
  }

  var ID_MASK_SHIFT = 16;
  var LOCAL_ID_MASK = ~0 >>> ID_MASK_SHIFT;

  function unpackModuleId(moduleId) {
    var segmentId = moduleId >>> ID_MASK_SHIFT;
    var localId = moduleId & LOCAL_ID_MASK;
    return {
      segmentId: segmentId,
      localId: localId
    };
  }

  _require.unpackModuleId = unpackModuleId;

  function packModuleId(value) {
    return value.segmentId << ID_MASK_SHIFT + value.localId;
  }

  _require.packModuleId = packModuleId;

  function loadModuleImplementation(moduleId, module) {
    var nativeRequire = global.nativeRequire;

    if (!module && nativeRequire) {
      var _unpackModuleId = unpackModuleId(moduleId);

      var segmentId = _unpackModuleId.segmentId,
          localId = _unpackModuleId.localId;
      nativeRequire(localId, segmentId);
      module = modules[moduleId];
    }

    if (!module) {
      throw unknownModuleError(moduleId);
    }

    if (module.hasError) {
      throw moduleThrewError(moduleId, module.error);
    }

    if (__DEV__) {
      var Systrace = _require.Systrace;
    }

    module.isInitialized = true;
    var exports = module.exports = {};
    var _module = module;
    var factory = _module.factory,
        dependencyMap = _module.dependencyMap;

    try {
      if (__DEV__) {
        Systrace.beginEvent('JS_require_' + (module.verboseName || moduleId));
      }

      var moduleObject = {
        exports: exports
      };

      if (__DEV__ && module.hot) {
        moduleObject.hot = module.hot;
      }

      factory(global, _require, moduleObject, exports, dependencyMap);

      if (!__DEV__) {
        module.factory = undefined;
        module.dependencyMap = undefined;
      }

      if (__DEV__) {
        Systrace.endEvent();
      }

      return module.exports = moduleObject.exports;
    } catch (e) {
      module.hasError = true;
      module.error = e;
      module.isInitialized = false;
      module.exports = undefined;
      throw e;
    }
  }

  function unknownModuleError(id) {
    var message = 'Requiring unknown module "' + id + '".';

    if (__DEV__) {
      message += 'If you are sure the module is there, try restarting Metro Bundler. ' + 'You may also want to run `yarn`, or `npm install` (depending on your environment).';
    }

    return Error(message);
  }

  function moduleThrewError(id, error) {
    var displayName = __DEV__ && modules[id] && modules[id].verboseName || id;
    return Error('Requiring module "' + displayName + '", which threw an exception: ' + error);
  }

  if (__DEV__) {
    _require.Systrace = {
      beginEvent: function beginEvent() {},
      endEvent: function endEvent() {}
    };

    _require.getModules = function () {
      return modules;
    };

    var createHotReloadingObject = function createHotReloadingObject() {
      var hot = {
        acceptCallback: null,
        accept: function accept(callback) {
          hot.acceptCallback = callback;
        }
      };
      return hot;
    };

    var acceptAll = function acceptAll(dependentModules, inverseDependencies) {
      if (!dependentModules || dependentModules.length === 0) {
        return true;
      }

      var notAccepted = dependentModules.filter(function (module) {
        return !accept(module, undefined, undefined, inverseDependencies);
      });
      var parents = [];

      for (var i = 0; i < notAccepted.length; i++) {
        if (inverseDependencies[notAccepted[i]].length === 0) {
          return false;
        }

        parents.push.apply(parents, _toConsumableArray(inverseDependencies[notAccepted[i]]));
      }

      return acceptAll(parents, inverseDependencies);
    };

    var accept = function accept(id, factory, dependencyMap, inverseDependencies) {
      var mod = modules[id];

      if (!mod && factory) {
        return true;
      }

      var hot = mod.hot;

      if (!hot) {
        console.warn('Cannot accept module because Hot Module Replacement ' + 'API was not installed.');
        return false;
      }

      if (factory) {
        mod.factory = factory;
      }

      if (dependencyMap) {
        mod.dependencyMap = dependencyMap;
      }

      mod.hasError = false;
      mod.isInitialized = false;

      _require(id);

      if (hot.acceptCallback) {
        hot.acceptCallback();
        return true;
      } else {
        if (!inverseDependencies) {
          throw new Error('Undefined `inverseDependencies`');
        }

        return acceptAll(inverseDependencies[id], inverseDependencies);
      }
    };

    global.__accept = accept;
  }
})(this);
(function (global) {
  Object.assign = function (target, sources) {
    if (__DEV__) {
      if (target == null) {
        throw new TypeError('Object.assign target cannot be null or undefined');
      }

      if (typeof target !== 'object' && typeof target !== 'function') {
        throw new TypeError('In this environment the target of assign MUST be an object. ' + 'This error is a performance optimization and not spec compliant.');
      }
    }

    for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
      var nextSource = arguments[nextIndex];

      if (nextSource == null) {
        continue;
      }

      if (__DEV__) {
        if (typeof nextSource !== 'object' && typeof nextSource !== 'function') {
          throw new TypeError('In this environment the sources for assign MUST be an object. ' + 'This error is a performance optimization and not spec compliant.');
        }
      }

      for (var key in nextSource) {
        if (__DEV__) {
          var hasOwnProperty = Object.prototype.hasOwnProperty;

          if (!hasOwnProperty.call(nextSource, key)) {
            throw new TypeError('One of the sources for assign has an enumerable key on the ' + 'prototype chain. Are you trying to assign a prototype property? ' + 'We don\'t allow it, as this is an edge case that we do not support. ' + 'This error is a performance optimization and not spec compliant.');
          }
        }

        target[key] = nextSource[key];
      }
    }

    return target;
  };
})(this);
(function (global) {
  var inspect = function () {
    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      return formatValue(ctx, obj, opts.depth);
    }

    function stylizeNoColor(str, styleType) {
      return str;
    }

    function arrayToHash(array) {
      var hash = {};
      array.forEach(function (val, idx) {
        hash[val] = true;
      });
      return hash;
    }

    function formatValue(ctx, value, recurseTimes) {
      var primitive = formatPrimitive(ctx, value);

      if (primitive) {
        return primitive;
      }

      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);

      if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
        return formatError(value);
      }

      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }

        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }

        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }

        if (isError(value)) {
          return formatError(value);
        }
      }

      var base = '',
          array = false,
          braces = ['{', '}'];

      if (isArray(value)) {
        array = true;
        braces = ['[', ']'];
      }

      if (isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }

      if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }

      if (isDate(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }

      if (isError(value)) {
        base = ' ' + formatError(value);
      }

      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }

      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }

      ctx.seen.push(value);
      var output;

      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function (key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }

      ctx.seen.pop();
      return reduceToSingleString(output, base, braces);
    }

    function formatPrimitive(ctx, value) {
      if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

      if (isString(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, 'string');
      }

      if (isNumber(value)) return ctx.stylize('' + value, 'number');
      if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
      if (isNull(value)) return ctx.stylize('null', 'null');
    }

    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }

    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];

      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
        } else {
          output.push('');
        }
      }

      keys.forEach(function (key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
        }
      });
      return output;
    }

    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || {
        value: value[key]
      };

      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }

      if (!hasOwnProperty(visibleKeys, key)) {
        name = '[' + key + ']';
      }

      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }

          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function (line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function (line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }

      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }

        name = JSON.stringify('' + key);

        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }

      return name + ': ' + str;
    }

    function reduceToSingleString(output, base, braces) {
      var numLinesEst = 0;
      var length = output.reduce(function (prev, cur) {
        numLinesEst++;
        if (cur.indexOf('\n') >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
      }, 0);

      if (length > 60) {
        return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
      }

      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }

    function isArray(ar) {
      return Array.isArray(ar);
    }

    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }

    function isNull(arg) {
      return arg === null;
    }

    function isNullOrUndefined(arg) {
      return arg == null;
    }

    function isNumber(arg) {
      return typeof arg === 'number';
    }

    function isString(arg) {
      return typeof arg === 'string';
    }

    function isSymbol(arg) {
      return typeof arg === 'symbol';
    }

    function isUndefined(arg) {
      return arg === void 0;
    }

    function isRegExp(re) {
      return isObject(re) && objectToString(re) === '[object RegExp]';
    }

    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }

    function isDate(d) {
      return isObject(d) && objectToString(d) === '[object Date]';
    }

    function isError(e) {
      return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
    }

    function isFunction(arg) {
      return typeof arg === 'function';
    }

    function isPrimitive(arg) {
      return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || typeof arg === 'undefined';
    }

    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }

    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    return inspect;
  }();

  var OBJECT_COLUMN_NAME = '(index)';
  var LOG_LEVELS = {
    trace: 0,
    info: 1,
    warn: 2,
    error: 3
  };
  var INSPECTOR_LEVELS = [];
  INSPECTOR_LEVELS[LOG_LEVELS.trace] = 'debug';
  INSPECTOR_LEVELS[LOG_LEVELS.info] = 'log';
  INSPECTOR_LEVELS[LOG_LEVELS.warn] = 'warning';
  INSPECTOR_LEVELS[LOG_LEVELS.error] = 'error';
  var INSPECTOR_FRAMES_TO_SKIP = __DEV__ ? 2 : 1;

  if (global.nativeLoggingHook) {
    function getNativeLogFunction(level) {
      return function () {
        var str = void 0;

        if (arguments.length === 1 && typeof arguments[0] === 'string') {
          str = arguments[0];
        } else {
          str = Array.prototype.map.call(arguments, function (arg) {
            return inspect(arg, {
              depth: 10
            });
          }).join(', ');
        }

        var logLevel = level;

        if (str.slice(0, 9) === 'Warning: ' && logLevel >= LOG_LEVELS.error) {
          logLevel = LOG_LEVELS.warn;
        }

        if (global.__inspectorLog) {
          global.__inspectorLog(INSPECTOR_LEVELS[logLevel], str, [].slice.call(arguments), INSPECTOR_FRAMES_TO_SKIP);
        }

        global.nativeLoggingHook(str, logLevel);
      };
    }

    function repeat(element, n) {
      return Array.apply(null, Array(n)).map(function () {
        return element;
      });
    }

    function consoleTablePolyfill(rows) {
      if (!Array.isArray(rows)) {
        var data = rows;
        rows = [];

        for (var key in data) {
          if (data.hasOwnProperty(key)) {
            var row = data[key];
            row[OBJECT_COLUMN_NAME] = key;
            rows.push(row);
          }
        }
      }

      if (rows.length === 0) {
        global.nativeLoggingHook('', LOG_LEVELS.info);
        return;
      }

      var columns = Object.keys(rows[0]).sort();
      var stringRows = [];
      var columnWidths = [];
      columns.forEach(function (k, i) {
        columnWidths[i] = k.length;

        for (var j = 0; j < rows.length; j++) {
          var cellStr = (rows[j][k] || '?').toString();
          stringRows[j] = stringRows[j] || [];
          stringRows[j][i] = cellStr;
          columnWidths[i] = Math.max(columnWidths[i], cellStr.length);
        }
      });

      function joinRow(row, space) {
        var cells = row.map(function (cell, i) {
          var extraSpaces = repeat(' ', columnWidths[i] - cell.length).join('');
          return cell + extraSpaces;
        });
        space = space || ' ';
        return cells.join(space + '|' + space);
      }

      var separators = columnWidths.map(function (columnWidth) {
        return repeat('-', columnWidth).join('');
      });
      var separatorRow = joinRow(separators, '-');
      var header = joinRow(columns);
      var table = [header, separatorRow];

      for (var i = 0; i < rows.length; i++) {
        table.push(joinRow(stringRows[i]));
      }

      global.nativeLoggingHook('\n' + table.join('\n'), LOG_LEVELS.info);
    }

    var originalConsole = global.console;
    global.console = {
      error: getNativeLogFunction(LOG_LEVELS.error),
      info: getNativeLogFunction(LOG_LEVELS.info),
      log: getNativeLogFunction(LOG_LEVELS.info),
      warn: getNativeLogFunction(LOG_LEVELS.warn),
      trace: getNativeLogFunction(LOG_LEVELS.trace),
      debug: getNativeLogFunction(LOG_LEVELS.trace),
      table: consoleTablePolyfill
    };

    if (__DEV__ && originalConsole) {
      var descriptor = Object.getOwnPropertyDescriptor(global, 'console');

      if (descriptor) {
        Object.defineProperty(global, 'originalConsole', descriptor);
      }

      Object.keys(console).forEach(function (methodName) {
        var reactNativeMethod = console[methodName];

        if (originalConsole[methodName]) {
          console[methodName] = function () {
            originalConsole[methodName].apply(originalConsole, arguments);
            reactNativeMethod.apply(console, arguments);
          };
        }
      });
    }
  } else if (!global.console) {
    var log = global.print || function consoleLoggingStub() {};

    global.console = {
      error: log,
      info: log,
      log: log,
      warn: log,
      trace: log,
      debug: log,
      table: log
    };
  }
})(this);
(function (global) {
  var _inGuard = 0;

  var _globalHandler = function onError(e) {
    throw e;
  };

  var ErrorUtils = {
    setGlobalHandler: function setGlobalHandler(fun) {
      _globalHandler = fun;
    },
    getGlobalHandler: function getGlobalHandler() {
      return _globalHandler;
    },
    reportError: function reportError(error) {
      _globalHandler && _globalHandler(error);
    },
    reportFatalError: function reportFatalError(error) {
      _globalHandler && _globalHandler(error, true);
    },
    applyWithGuard: function applyWithGuard(fun, context, args) {
      try {
        _inGuard++;
        return fun.apply(context, args);
      } catch (e) {
        ErrorUtils.reportError(e);
      } finally {
        _inGuard--;
      }

      return null;
    },
    applyWithGuardIfNeeded: function applyWithGuardIfNeeded(fun, context, args) {
      if (ErrorUtils.inGuard()) {
        return fun.apply(context, args);
      } else {
        ErrorUtils.applyWithGuard(fun, context, args);
      }

      return null;
    },
    inGuard: function inGuard() {
      return _inGuard;
    },
    guard: function guard(fun, name, context) {
      if (typeof fun !== 'function') {
        console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
        return null;
      }

      name = name || fun.name || '<generated guard>';

      function guarded() {
        return ErrorUtils.applyWithGuard(fun, context || this, arguments, null, name);
      }

      return guarded;
    }
  };
  global.ErrorUtils = ErrorUtils;
})(this);
(function (global) {
  if (Number.EPSILON === undefined) {
    Object.defineProperty(Number, 'EPSILON', {
      value: Math.pow(2, -52)
    });
  }

  if (Number.MAX_SAFE_INTEGER === undefined) {
    Object.defineProperty(Number, 'MAX_SAFE_INTEGER', {
      value: Math.pow(2, 53) - 1
    });
  }

  if (Number.MIN_SAFE_INTEGER === undefined) {
    Object.defineProperty(Number, 'MIN_SAFE_INTEGER', {
      value: -(Math.pow(2, 53) - 1)
    });
  }

  if (!Number.isNaN) {
    var globalIsNaN = global.isNaN;
    Object.defineProperty(Number, 'isNaN', {
      configurable: true,
      enumerable: false,
      value: function isNaN(value) {
        return typeof value === 'number' && globalIsNaN(value);
      },
      writable: true
    });
  }
})(this);
(function (global) {
  if (!String.prototype.startsWith) {
    String.prototype.startsWith = function (search) {
      'use strict';

      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var pos = arguments.length > 1 ? Number(arguments[1]) || 0 : 0;
      var start = Math.min(Math.max(pos, 0), string.length);
      return string.indexOf(String(search), pos) === start;
    };
  }

  if (!String.prototype.endsWith) {
    String.prototype.endsWith = function (search) {
      'use strict';

      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var stringLength = string.length;
      var searchString = String(search);
      var pos = arguments.length > 1 ? Number(arguments[1]) || 0 : stringLength;
      var end = Math.min(Math.max(pos, 0), stringLength);
      var start = end - searchString.length;

      if (start < 0) {
        return false;
      }

      return string.lastIndexOf(searchString, start) === start;
    };
  }

  if (!String.prototype.repeat) {
    String.prototype.repeat = function (count) {
      'use strict';

      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      count = Number(count) || 0;

      if (count < 0 || count === Infinity) {
        throw RangeError();
      }

      if (count === 1) {
        return string;
      }

      var result = '';

      while (count) {
        if (count & 1) {
          result += string;
        }

        if (count >>= 1) {
          string += string;
        }
      }

      return result;
    };
  }

  if (!String.prototype.includes) {
    String.prototype.includes = function (search, start) {
      'use strict';

      if (typeof start !== 'number') {
        start = 0;
      }

      if (start + search.length > this.length) {
        return false;
      } else {
        return this.indexOf(search, start) !== -1;
      }
    };
  }

  if (!String.prototype.codePointAt) {
    String.prototype.codePointAt = function (position) {
      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var size = string.length;
      var index = position ? Number(position) : 0;

      if (Number.isNaN(index)) {
        index = 0;
      }

      if (index < 0 || index >= size) {
        return undefined;
      }

      var first = string.charCodeAt(index);
      var second;

      if (first >= 0xd800 && first <= 0xdbff && size > index + 1) {
          second = string.charCodeAt(index + 1);

          if (second >= 0xdc00 && second <= 0xdfff) {
            return (first - 0xd800) * 0x400 + second - 0xdc00 + 0x10000;
          }
        }

      return first;
    };
  }
})(this);
(function (global) {
  function findIndex(predicate, context) {
    if (this == null) {
      throw new TypeError('Array.prototype.findIndex called on null or undefined');
    }

    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }

    var list = Object(this);
    var length = list.length >>> 0;

    for (var i = 0; i < length; i++) {
      if (predicate.call(context, list[i], i, list)) {
        return i;
      }
    }

    return -1;
  }

  if (!Array.prototype.findIndex) {
    Object.defineProperty(Array.prototype, 'findIndex', {
      enumerable: false,
      writable: true,
      configurable: true,
      value: findIndex
    });
  }

  if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, 'find', {
      enumerable: false,
      writable: true,
      configurable: true,
      value: function value(predicate, context) {
        if (this == null) {
          throw new TypeError('Array.prototype.find called on null or undefined');
        }

        var index = findIndex.call(this, predicate, context);
        return index === -1 ? undefined : this[index];
      }
    });
  }

  if (!Array.prototype.includes) {
    Object.defineProperty(Array.prototype, 'includes', {
      enumerable: false,
      writable: true,
      configurable: true,
      value: function value(searchElement) {
        var O = Object(this);
        var len = parseInt(O.length) || 0;

        if (len === 0) {
          return false;
        }

        var n = parseInt(arguments[1]) || 0;
        var k;

        if (n >= 0) {
          k = n;
        } else {
          k = len + n;

          if (k < 0) {
            k = 0;
          }
        }

        var currentElement;

        while (k < len) {
          currentElement = O[k];

          if (searchElement === currentElement || searchElement !== searchElement && currentElement !== currentElement) {
            return true;
          }

          k++;
        }

        return false;
      }
    });
  }
})(this);
(function (global) {
  if (!Array.from) {
    Array.from = function (arrayLike) {
      if (arrayLike == null) {
        throw new TypeError('Object is null or undefined');
      }

      var mapFn = arguments[1];
      var thisArg = arguments[2];
      var C = this;
      var items = Object(arrayLike);
      var symbolIterator = typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator';
      var mapping = typeof mapFn === 'function';
      var usingIterator = typeof items[symbolIterator] === 'function';
      var key = 0;
      var ret;
      var value;

      if (usingIterator) {
        ret = typeof C === 'function' ? new C() : [];
        var it = items[symbolIterator]();
        var next;

        while (!(next = it.next()).done) {
          value = next.value;

          if (mapping) {
            value = mapFn.call(thisArg, value, key);
          }

          ret[key] = value;
          key += 1;
        }

        ret.length = key;
        return ret;
      }

      var len = items.length;

      if (isNaN(len) || len < 0) {
        len = 0;
      }

      ret = typeof C === 'function' ? new C(len) : new Array(len);

      while (key < len) {
        value = items[key];

        if (mapping) {
          value = mapFn.call(thisArg, value, key);
        }

        ret[key] = value;
        key += 1;
      }

      ret.length = key;
      return ret;
    };
  }
})(this);
(function (global) {
  (function () {
    'use strict';

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    if (typeof Object.entries !== 'function') {
      Object.entries = function (object) {
        if (object == null) {
          throw new TypeError('Object.entries called on non-object');
        }

        var entries = [];

        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            entries.push([key, object[key]]);
          }
        }

        return entries;
      };
    }

    if (typeof Object.values !== 'function') {
      Object.values = function (object) {
        if (object == null) {
          throw new TypeError('Object.values called on non-object');
        }

        var values = [];

        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            values.push(object[key]);
          }
        }

        return values;
      };
    }
  })();
})(this);
(function (global) {
  var babelHelpers = global.babelHelpers = {};
  babelHelpers.typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
  };

  babelHelpers.createRawReactElement = function () {
    var REACT_ELEMENT_TYPE = typeof Symbol === "function" && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") || 0xeac7;
    return function createRawReactElement(type, key, props) {
      return {
        $$typeof: REACT_ELEMENT_TYPE,
        type: type,
        key: key,
        ref: null,
        props: props,
        _owner: null
      };
    };
  }();

  babelHelpers.classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  babelHelpers.createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  babelHelpers.defineEnumerableProperties = function (obj, descs) {
    for (var key in descs) {
      var desc = descs[key];
      desc.configurable = desc.enumerable = true;
      if ('value' in desc) desc.writable = true;
      Object.defineProperty(obj, key, desc);
    }

    return obj;
  };

  babelHelpers.defineProperty = function (obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };

  babelHelpers._extends = babelHelpers.extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  babelHelpers.get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;
    var desc = Object.getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = Object.getPrototypeOf(object);

      if (parent === null) {
        return undefined;
      } else {
        return get(parent, property, receiver);
      }
    } else if ("value" in desc) {
      return desc.value;
    } else {
      var getter = desc.get;

      if (getter === undefined) {
        return undefined;
      }

      return getter.call(receiver);
    }
  };

  babelHelpers.inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  babelHelpers.interopRequireDefault = function (obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  };

  babelHelpers.interopRequireWildcard = function (obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  };

  babelHelpers.objectWithoutProperties = function (obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  };

  babelHelpers.possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  };

  babelHelpers.slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  babelHelpers.taggedTemplateLiteral = function (strings, raw) {
    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  };

  babelHelpers.toArray = function (arr) {
    return Array.isArray(arr) ? arr : Array.from(arr);
  };

  babelHelpers.toConsumableArray = function (arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  };
})(this);
__d(function (global, require, module, exports, _dependencyMap) {
  var _reactNative = require(_dependencyMap[0], "react-native");

  var _App = require(_dependencyMap[1], "./App");

  var _App2 = babelHelpers.interopRequireDefault(_App);

  _reactNative.AppRegistry.registerComponent('SyncAppMobile', function () {
    return _App2.default;
  });
},11,[12,333],"syncapp-mobile/index.android.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var ReactNative = {
    get AccessibilityInfo() {
      return require(_dependencyMap[1], 'AccessibilityInfo');
    },

    get ActivityIndicator() {
      return require(_dependencyMap[2], 'ActivityIndicator');
    },

    get ART() {
      return require(_dependencyMap[3], 'ReactNativeART');
    },

    get Button() {
      return require(_dependencyMap[4], 'Button');
    },

    get CheckBox() {
      return require(_dependencyMap[5], 'CheckBox');
    },

    get DatePickerIOS() {
      return require(_dependencyMap[6], 'DatePickerIOS');
    },

    get DrawerLayoutAndroid() {
      return require(_dependencyMap[7], 'DrawerLayoutAndroid');
    },

    get FlatList() {
      return require(_dependencyMap[8], 'FlatList');
    },

    get Image() {
      return require(_dependencyMap[9], 'Image');
    },

    get ImageBackground() {
      return require(_dependencyMap[10], 'ImageBackground');
    },

    get ImageEditor() {
      return require(_dependencyMap[11], 'ImageEditor');
    },

    get ImageStore() {
      return require(_dependencyMap[12], 'ImageStore');
    },

    get KeyboardAvoidingView() {
      return require(_dependencyMap[13], 'KeyboardAvoidingView');
    },

    get ListView() {
      return require(_dependencyMap[14], 'ListView');
    },

    get MaskedViewIOS() {
      return require(_dependencyMap[15], 'MaskedViewIOS');
    },

    get Modal() {
      return require(_dependencyMap[16], 'Modal');
    },

    get NavigatorIOS() {
      return require(_dependencyMap[17], 'NavigatorIOS');
    },

    get Picker() {
      return require(_dependencyMap[18], 'Picker');
    },

    get PickerIOS() {
      return require(_dependencyMap[19], 'PickerIOS');
    },

    get ProgressBarAndroid() {
      return require(_dependencyMap[20], 'ProgressBarAndroid');
    },

    get ProgressViewIOS() {
      return require(_dependencyMap[21], 'ProgressViewIOS');
    },

    get SafeAreaView() {
      return require(_dependencyMap[22], 'SafeAreaView');
    },

    get ScrollView() {
      return require(_dependencyMap[23], 'ScrollView');
    },

    get SectionList() {
      return require(_dependencyMap[24], 'SectionList');
    },

    get SegmentedControlIOS() {
      return require(_dependencyMap[25], 'SegmentedControlIOS');
    },

    get Slider() {
      return require(_dependencyMap[26], 'Slider');
    },

    get SnapshotViewIOS() {
      return require(_dependencyMap[27], 'SnapshotViewIOS');
    },

    get Switch() {
      return require(_dependencyMap[28], 'Switch');
    },

    get RefreshControl() {
      return require(_dependencyMap[29], 'RefreshControl');
    },

    get StatusBar() {
      return require(_dependencyMap[30], 'StatusBar');
    },

    get SwipeableFlatList() {
      return require(_dependencyMap[31], 'SwipeableFlatList');
    },

    get SwipeableListView() {
      return require(_dependencyMap[32], 'SwipeableListView');
    },

    get TabBarIOS() {
      return require(_dependencyMap[33], 'TabBarIOS');
    },

    get Text() {
      return require(_dependencyMap[34], 'Text');
    },

    get TextInput() {
      return require(_dependencyMap[35], 'TextInput');
    },

    get ToastAndroid() {
      return require(_dependencyMap[36], 'ToastAndroid');
    },

    get ToolbarAndroid() {
      return require(_dependencyMap[37], 'ToolbarAndroid');
    },

    get Touchable() {
      return require(_dependencyMap[38], 'Touchable');
    },

    get TouchableHighlight() {
      return require(_dependencyMap[39], 'TouchableHighlight');
    },

    get TouchableNativeFeedback() {
      return require(_dependencyMap[40], 'TouchableNativeFeedback');
    },

    get TouchableOpacity() {
      return require(_dependencyMap[41], 'TouchableOpacity');
    },

    get TouchableWithoutFeedback() {
      return require(_dependencyMap[42], 'TouchableWithoutFeedback');
    },

    get View() {
      return require(_dependencyMap[43], 'View');
    },

    get ViewPagerAndroid() {
      return require(_dependencyMap[44], 'ViewPagerAndroid');
    },

    get VirtualizedList() {
      return require(_dependencyMap[45], 'VirtualizedList');
    },

    get WebView() {
      return require(_dependencyMap[46], 'WebView');
    },

    get ActionSheetIOS() {
      return require(_dependencyMap[47], 'ActionSheetIOS');
    },

    get Alert() {
      return require(_dependencyMap[48], 'Alert');
    },

    get AlertIOS() {
      return require(_dependencyMap[49], 'AlertIOS');
    },

    get Animated() {
      return require(_dependencyMap[50], 'Animated');
    },

    get AppRegistry() {
      return require(_dependencyMap[51], 'AppRegistry');
    },

    get AppState() {
      return require(_dependencyMap[52], 'AppState');
    },

    get AsyncStorage() {
      return require(_dependencyMap[53], 'AsyncStorage');
    },

    get BackAndroid() {
      return require(_dependencyMap[54], 'BackAndroid');
    },

    get BackHandler() {
      return require(_dependencyMap[55], 'BackHandler');
    },

    get CameraRoll() {
      return require(_dependencyMap[56], 'CameraRoll');
    },

    get Clipboard() {
      return require(_dependencyMap[57], 'Clipboard');
    },

    get DatePickerAndroid() {
      return require(_dependencyMap[58], 'DatePickerAndroid');
    },

    get DeviceInfo() {
      return require(_dependencyMap[59], 'DeviceInfo');
    },

    get Dimensions() {
      return require(_dependencyMap[60], 'Dimensions');
    },

    get Easing() {
      return require(_dependencyMap[61], 'Easing');
    },

    get findNodeHandle() {
      return require(_dependencyMap[62], 'ReactNative').findNodeHandle;
    },

    get I18nManager() {
      return require(_dependencyMap[63], 'I18nManager');
    },

    get ImagePickerIOS() {
      return require(_dependencyMap[64], 'ImagePickerIOS');
    },

    get InteractionManager() {
      return require(_dependencyMap[65], 'InteractionManager');
    },

    get Keyboard() {
      return require(_dependencyMap[66], 'Keyboard');
    },

    get LayoutAnimation() {
      return require(_dependencyMap[67], 'LayoutAnimation');
    },

    get Linking() {
      return require(_dependencyMap[68], 'Linking');
    },

    get NativeEventEmitter() {
      return require(_dependencyMap[69], 'NativeEventEmitter');
    },

    get NetInfo() {
      return require(_dependencyMap[70], 'NetInfo');
    },

    get PanResponder() {
      return require(_dependencyMap[71], 'PanResponder');
    },

    get PermissionsAndroid() {
      return require(_dependencyMap[72], 'PermissionsAndroid');
    },

    get PixelRatio() {
      return require(_dependencyMap[73], 'PixelRatio');
    },

    get PushNotificationIOS() {
      return require(_dependencyMap[74], 'PushNotificationIOS');
    },

    get Settings() {
      return require(_dependencyMap[75], 'Settings');
    },

    get Share() {
      return require(_dependencyMap[76], 'Share');
    },

    get StatusBarIOS() {
      return require(_dependencyMap[77], 'StatusBarIOS');
    },

    get StyleSheet() {
      return require(_dependencyMap[78], 'StyleSheet');
    },

    get Systrace() {
      return require(_dependencyMap[79], 'Systrace');
    },

    get TimePickerAndroid() {
      return require(_dependencyMap[80], 'TimePickerAndroid');
    },

    get TVEventHandler() {
      return require(_dependencyMap[81], 'TVEventHandler');
    },

    get UIManager() {
      return require(_dependencyMap[82], 'UIManager');
    },

    get unstable_batchedUpdates() {
      return require(_dependencyMap[62], 'ReactNative').unstable_batchedUpdates;
    },

    get Vibration() {
      return require(_dependencyMap[83], 'Vibration');
    },

    get VibrationIOS() {
      return require(_dependencyMap[84], 'VibrationIOS');
    },

    get YellowBox() {
      return require(_dependencyMap[85], 'YellowBox');
    },

    get DeviceEventEmitter() {
      return require(_dependencyMap[86], 'RCTDeviceEventEmitter');
    },

    get NativeAppEventEmitter() {
      return require(_dependencyMap[87], 'RCTNativeAppEventEmitter');
    },

    get NativeModules() {
      return require(_dependencyMap[88], 'NativeModules');
    },

    get Platform() {
      return require(_dependencyMap[89], 'Platform');
    },

    get processColor() {
      return require(_dependencyMap[90], 'processColor');
    },

    get requireNativeComponent() {
      return require(_dependencyMap[91], 'requireNativeComponent');
    },

    get takeSnapshot() {
      return require(_dependencyMap[92], 'takeSnapshot');
    },

    get ColorPropType() {
      return require(_dependencyMap[93], 'ColorPropType');
    },

    get EdgeInsetsPropType() {
      return require(_dependencyMap[94], 'EdgeInsetsPropType');
    },

    get PointPropType() {
      return require(_dependencyMap[95], 'PointPropType');
    },

    get ViewPropTypes() {
      return require(_dependencyMap[96], 'ViewPropTypes');
    },

    get Navigator() {
      invariant(false, 'Navigator is deprecated and has been removed from this package. It can now be installed ' + 'and imported from `react-native-deprecated-custom-components` instead of `react-native`. ' + 'Learn about alternative navigation solutions at http://facebook.github.io/react-native/docs/navigation.html');
    }

  };
  module.exports = ReactNative;
},12,[13,14,122,174,180,236,237,238,240,222,253,255,256,257,242,258,260,281,282,283,126,285,279,224,286,288,289,290,291,247,239,292,296,298,181,300,97,307,182,271,189,193,190,170,308,248,309,310,84,85,194,311,99,317,318,316,319,320,321,165,164,219,21,280,322,202,228,229,323,69,324,294,88,163,325,326,327,328,168,19,329,186,107,330,331,278,70,92,15,52,152,145,332,123,132,225,131],"react-native-implementation");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var validateFormat = function validateFormat(format) {};

  if (process.env.NODE_ENV !== 'production') {
    validateFormat = function validateFormat(format) {
      if (format === undefined) {
        throw new Error('invariant requires an error message argument');
      }
    };
  }

  function invariant(condition, format, a, b, c, d, e, f) {
    validateFormat(format);

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  }

  module.exports = invariant;
},13,[],"fbjs/lib/invariant.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = require(_dependencyMap[0], 'NativeModules');

  var RCTDeviceEventEmitter = require(_dependencyMap[1], 'RCTDeviceEventEmitter');

  var RCTAccessibilityInfo = NativeModules.AccessibilityInfo;
  var TOUCH_EXPLORATION_EVENT = 'touchExplorationDidChange';

  var _subscriptions = new Map();

  var AccessibilityInfo = {
    fetch: function fetch() {
      return new Promise(function (resolve, reject) {
        RCTAccessibilityInfo.isTouchExplorationEnabled(function (resp) {
          resolve(resp);
        });
      });
    },
    addEventListener: function addEventListener(eventName, handler) {
      var listener = RCTDeviceEventEmitter.addListener(TOUCH_EXPLORATION_EVENT, function (enabled) {
        handler(enabled);
      });

      _subscriptions.set(handler, listener);
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      var listener = _subscriptions.get(handler);

      if (!listener) {
        return;
      }

      listener.remove();

      _subscriptions.delete(handler);
    }
  };
  module.exports = AccessibilityInfo;
},14,[15,70],"AccessibilityInfo");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = require(_dependencyMap[0], 'BatchedBridge');

  var invariant = require(_dependencyMap[1], 'fbjs/lib/invariant');

  function genModule(config, moduleID) {
    if (!config) {
      return null;
    }

    var _config = babelHelpers.slicedToArray(config, 5),
        moduleName = _config[0],
        constants = _config[1],
        methods = _config[2],
        promiseMethods = _config[3],
        syncMethods = _config[4];

    invariant(!moduleName.startsWith('RCT') && !moduleName.startsWith('RK'), 'Module name prefixes should\'ve been stripped by the native side ' + 'but wasn\'t for ' + moduleName);

    if (!constants && !methods) {
      return {
        name: moduleName
      };
    }

    var module = {};
    methods && methods.forEach(function (methodName, methodID) {
      var isPromise = promiseMethods && arrayContains(promiseMethods, methodID);
      var isSync = syncMethods && arrayContains(syncMethods, methodID);
      invariant(!isPromise || !isSync, 'Cannot have a method that is both async and a sync hook');
      var methodType = isPromise ? 'promise' : isSync ? 'sync' : 'async';
      module[methodName] = genMethod(moduleID, methodID, methodType);
    });
    babelHelpers.extends(module, constants);

    if (__DEV__) {
      BatchedBridge.createDebugLookup(moduleID, moduleName, methods);
    }

    return {
      name: moduleName,
      module: module
    };
  }

  global.__fbGenNativeModule = genModule;

  function loadModule(name, moduleID) {
    invariant(global.nativeRequireModuleConfig, 'Can\'t lazily create module without nativeRequireModuleConfig');
    var config = global.nativeRequireModuleConfig(name);
    var info = genModule(config, moduleID);
    return info && info.module;
  }

  function genMethod(moduleID, methodID, type) {
    var fn = null;

    if (type === 'promise') {
      fn = function fn() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return new Promise(function (resolve, reject) {
          BatchedBridge.enqueueNativeCall(moduleID, methodID, args, function (data) {
            return resolve(data);
          }, function (errorData) {
            return reject(createErrorFromErrorData(errorData));
          });
        });
      };
    } else if (type === 'sync') {
      fn = function fn() {
        if (__DEV__) {
          invariant(global.nativeCallSyncHook, 'Calling synchronous methods on native ' + 'modules is not supported in Chrome.\n\n Consider providing alternative ' + 'methods to expose this method in debug mode, e.g. by exposing constants ' + 'ahead-of-time.');
        }

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return global.nativeCallSyncHook(moduleID, methodID, args);
      };
    } else {
      fn = function fn() {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        var lastArg = args.length > 0 ? args[args.length - 1] : null;
        var secondLastArg = args.length > 1 ? args[args.length - 2] : null;
        var hasSuccessCallback = typeof lastArg === 'function';
        var hasErrorCallback = typeof secondLastArg === 'function';
        hasErrorCallback && invariant(hasSuccessCallback, 'Cannot have a non-function arg after a function arg.');
        var onSuccess = hasSuccessCallback ? lastArg : null;
        var onFail = hasErrorCallback ? secondLastArg : null;
        var callbackCount = hasSuccessCallback + hasErrorCallback;
        args = args.slice(0, args.length - callbackCount);
        BatchedBridge.enqueueNativeCall(moduleID, methodID, args, onFail, onSuccess);
      };
    }

    fn.type = type;
    return fn;
  }

  function arrayContains(array, value) {
    return array.indexOf(value) !== -1;
  }

  function createErrorFromErrorData(errorData) {
    var _ref = errorData || {},
        message = _ref.message,
        extraErrorInfo = babelHelpers.objectWithoutProperties(_ref, ["message"]);

    var error = new Error(message);
    error.framesToPop = 1;
    return babelHelpers.extends(error, extraErrorInfo);
  }

  var NativeModules = {};

  if (global.nativeModuleProxy) {
    NativeModules = global.nativeModuleProxy;
  } else {
    var bridgeConfig = global.__fbBatchedBridgeConfig;
    invariant(bridgeConfig, '__fbBatchedBridgeConfig is not set, cannot invoke native modules');

    var defineLazyObjectProperty = require(_dependencyMap[2], 'defineLazyObjectProperty');

    (bridgeConfig.remoteModuleConfig || []).forEach(function (config, moduleID) {
      var info = genModule(config, moduleID);

      if (!info) {
        return;
      }

      if (info.module) {
        NativeModules[info.name] = info.module;
      } else {
          defineLazyObjectProperty(NativeModules, info.name, {
            get: function get() {
              return loadModule(info.name, moduleID);
            }
          });
        }
    });
  }

  module.exports = NativeModules;
},15,[16,13,24],"NativeModules");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var MessageQueue = require(_dependencyMap[0], 'MessageQueue');

  var BatchedBridge = new MessageQueue(typeof __fbUninstallRNGlobalErrorHandler !== 'undefined' && __fbUninstallRNGlobalErrorHandler === true);
  Object.defineProperty(global, '__fbBatchedBridge', {
    configurable: true,
    value: BatchedBridge
  });
  module.exports = BatchedBridge;
},16,[17],"BatchedBridge");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ErrorUtils = require(_dependencyMap[0], 'ErrorUtils');

  var Systrace = require(_dependencyMap[1], 'Systrace');

  var deepFreezeAndThrowOnMutationInDev = require(_dependencyMap[2], 'deepFreezeAndThrowOnMutationInDev');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var stringifySafe = require(_dependencyMap[4], 'stringifySafe');

  var TO_JS = 0;
  var TO_NATIVE = 1;
  var MODULE_IDS = 0;
  var METHOD_IDS = 1;
  var PARAMS = 2;
  var MIN_TIME_BETWEEN_FLUSHES_MS = 5;
  var TRACE_TAG_REACT_APPS = 1 << 17;
  var DEBUG_INFO_LIMIT = 32;
  var JSTimers = null;

  var MessageQueue = function () {
    function MessageQueue() {
      var shouldUninstallGlobalErrorHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      babelHelpers.classCallCheck(this, MessageQueue);
      this._lazyCallableModules = {};
      this._queue = [[], [], [], 0];
      this._successCallbacks = [];
      this._failureCallbacks = [];
      this._callID = 0;
      this._lastFlush = 0;
      this._eventLoopStartTime = new Date().getTime();

      if (shouldUninstallGlobalErrorHandler) {
        this.uninstallGlobalErrorHandler();
      } else {
        this.installGlobalErrorHandler();
      }

      if (__DEV__) {
        this._debugInfo = {};
        this._remoteModuleTable = {};
        this._remoteMethodTable = {};
      }

      this.callFunctionReturnFlushedQueue = this.callFunctionReturnFlushedQueue.bind(this);
      this.callFunctionReturnResultAndFlushedQueue = this.callFunctionReturnResultAndFlushedQueue.bind(this);
      this.flushedQueue = this.flushedQueue.bind(this);
      this.invokeCallbackAndReturnFlushedQueue = this.invokeCallbackAndReturnFlushedQueue.bind(this);
    }

    babelHelpers.createClass(MessageQueue, [{
      key: "callFunctionReturnFlushedQueue",
      value: function callFunctionReturnFlushedQueue(module, method, args) {
        var _this = this;

        this.__guard(function () {
          _this.__callFunction(module, method, args);
        });

        return this.flushedQueue();
      }
    }, {
      key: "callFunctionReturnResultAndFlushedQueue",
      value: function callFunctionReturnResultAndFlushedQueue(module, method, args) {
        var _this2 = this;

        var result = void 0;

        this.__guard(function () {
          result = _this2.__callFunction(module, method, args);
        });

        return [result, this.flushedQueue()];
      }
    }, {
      key: "invokeCallbackAndReturnFlushedQueue",
      value: function invokeCallbackAndReturnFlushedQueue(cbID, args) {
        var _this3 = this;

        this.__guard(function () {
          _this3.__invokeCallback(cbID, args);
        });

        return this.flushedQueue();
      }
    }, {
      key: "flushedQueue",
      value: function flushedQueue() {
        var _this4 = this;

        this.__guard(function () {
          _this4.__callImmediates();
        });

        var queue = this._queue;
        this._queue = [[], [], [], this._callID];
        return queue[0].length ? queue : null;
      }
    }, {
      key: "getEventLoopRunningTime",
      value: function getEventLoopRunningTime() {
        return new Date().getTime() - this._eventLoopStartTime;
      }
    }, {
      key: "registerCallableModule",
      value: function registerCallableModule(name, module) {
        this._lazyCallableModules[name] = function () {
          return module;
        };
      }
    }, {
      key: "registerLazyCallableModule",
      value: function registerLazyCallableModule(name, factory) {
        var module = void 0;
        var getValue = factory;

        this._lazyCallableModules[name] = function () {
          if (getValue) {
            module = getValue();
            getValue = null;
          }

          return module;
        };
      }
    }, {
      key: "getCallableModule",
      value: function getCallableModule(name) {
        var getValue = this._lazyCallableModules[name];
        return getValue ? getValue() : null;
      }
    }, {
      key: "enqueueNativeCall",
      value: function enqueueNativeCall(moduleID, methodID, params, onFail, onSucc) {
        if (onFail || onSucc) {
          if (__DEV__) {
            this._debugInfo[this._callID] = [moduleID, methodID];

            if (this._callID > DEBUG_INFO_LIMIT) {
              delete this._debugInfo[this._callID - DEBUG_INFO_LIMIT];
            }
          }

          onFail && params.push(this._callID << 1);
          onSucc && params.push(this._callID << 1 | 1);
          this._successCallbacks[this._callID] = onSucc;
          this._failureCallbacks[this._callID] = onFail;
        }

        if (__DEV__) {
          global.nativeTraceBeginAsyncFlow && global.nativeTraceBeginAsyncFlow(TRACE_TAG_REACT_APPS, 'native', this._callID);
        }

        this._callID++;

        this._queue[MODULE_IDS].push(moduleID);

        this._queue[METHOD_IDS].push(methodID);

        if (__DEV__) {
          var isValidArgument = function isValidArgument(val) {
            var t = typeof val;

            if (t === 'undefined' || t === 'null' || t === 'boolean' || t === 'number' || t === 'string') {
              return true;
            }

            if (t === 'function' || t !== 'object') {
              return false;
            }

            if (Array.isArray(val)) {
              return val.every(isValidArgument);
            }

            for (var k in val) {
              if (typeof val[k] !== 'function' && !isValidArgument(val[k])) {
                return false;
              }
            }

            return true;
          };

          invariant(isValidArgument(params), '%s is not usable as a native method argument', params);
          deepFreezeAndThrowOnMutationInDev(params);
        }

        this._queue[PARAMS].push(params);

        var now = new Date().getTime();

        if (global.nativeFlushQueueImmediate && (now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS || this._inCall === 0)) {
          var queue = this._queue;
          this._queue = [[], [], [], this._callID];
          this._lastFlush = now;
          global.nativeFlushQueueImmediate(queue);
        }

        Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);

        if (__DEV__ && this.__spy && isFinite(moduleID)) {
          this.__spy({
            type: TO_NATIVE,
            module: this._remoteModuleTable[moduleID],
            method: this._remoteMethodTable[moduleID][methodID],
            args: params
          });
        } else if (this.__spy) {
          this.__spy({
            type: TO_NATIVE,
            module: moduleID + '',
            method: methodID,
            args: params
          });
        }
      }
    }, {
      key: "createDebugLookup",
      value: function createDebugLookup(moduleID, name, methods) {
        if (__DEV__) {
          this._remoteModuleTable[moduleID] = name;
          this._remoteMethodTable[moduleID] = methods;
        }
      }
    }, {
      key: "uninstallGlobalErrorHandler",
      value: function uninstallGlobalErrorHandler() {
        this.__guard = this.__guardUnsafe;
      }
    }, {
      key: "installGlobalErrorHandler",
      value: function installGlobalErrorHandler() {
        this.__guard = this.__guardSafe;
      }
    }, {
      key: "__guardUnsafe",
      value: function __guardUnsafe(fn) {
        this._inCall++;
        fn();
        this._inCall--;
      }
    }, {
      key: "__guardSafe",
      value: function __guardSafe(fn) {
        this._inCall++;

        try {
          fn();
        } catch (error) {
          ErrorUtils.reportFatalError(error);
        } finally {
          this._inCall--;
        }
      }
    }, {
      key: "__callImmediates",
      value: function __callImmediates() {
        Systrace.beginEvent('JSTimers.callImmediates()');

        if (!JSTimers) {
          JSTimers = require(_dependencyMap[5], 'JSTimers');
        }

        JSTimers.callImmediates();
        Systrace.endEvent();
      }
    }, {
      key: "__callFunction",
      value: function __callFunction(module, method, args) {
        this._lastFlush = new Date().getTime();
        this._eventLoopStartTime = this._lastFlush;
        Systrace.beginEvent(module + "." + method + "()");

        if (this.__spy) {
          this.__spy({
            type: TO_JS,
            module: module,
            method: method,
            args: args
          });
        }

        var moduleMethods = this.getCallableModule(module);
        invariant(!!moduleMethods, 'Module %s is not a registered callable module (calling %s)', module, method);
        invariant(!!moduleMethods[method], 'Method %s does not exist on module %s', method, module);
        var result = moduleMethods[method].apply(moduleMethods, args);
        Systrace.endEvent();
        return result;
      }
    }, {
      key: "__invokeCallback",
      value: function __invokeCallback(cbID, args) {
        this._lastFlush = new Date().getTime();
        this._eventLoopStartTime = this._lastFlush;
        var callID = cbID >>> 1;
        var isSuccess = cbID & 1;
        var callback = isSuccess ? this._successCallbacks[callID] : this._failureCallbacks[callID];

        if (__DEV__) {
          var debug = this._debugInfo[callID];

          var _module = debug && this._remoteModuleTable[debug[0]];

          var _method = debug && this._remoteMethodTable[debug[0]][debug[1]];

          if (!callback) {
            var errorMessage = "Callback with id " + cbID + ": " + _module + "." + _method + "() not found";

            if (_method) {
              errorMessage = "The callback " + _method + "() exists in module " + _module + ", " + 'but only one callback may be registered to a function in a native module.';
            }

            invariant(callback, errorMessage);
          }

          var profileName = debug ? '<callback for ' + _module + '.' + _method + '>' : cbID;

          if (callback && this.__spy) {
            this.__spy({
              type: TO_JS,
              module: null,
              method: profileName,
              args: args
            });
          }

          Systrace.beginEvent("MessageQueue.invokeCallback(" + profileName + ", " + stringifySafe(args) + ")");
        }

        if (!callback) {
          return;
        }

        this._successCallbacks[callID] = this._failureCallbacks[callID] = null;
        callback.apply(undefined, babelHelpers.toConsumableArray(args));

        if (__DEV__) {
          Systrace.endEvent();
        }
      }
    }], [{
      key: "spy",
      value: function spy(spyOrToggle) {
        if (spyOrToggle === true) {
          MessageQueue.prototype.__spy = function (info) {
            console.log((info.type === TO_JS ? 'N->JS' : 'JS->N') + " : " + ("" + (info.module ? info.module + '.' : '') + info.method) + ("(" + JSON.stringify(info.args) + ")"));
          };
        } else if (spyOrToggle === false) {
          MessageQueue.prototype.__spy = null;
        } else {
          MessageQueue.prototype.__spy = spyOrToggle;
        }
      }
    }]);
    return MessageQueue;
  }();

  module.exports = MessageQueue;
},17,[18,19,118,13,39,51],"MessageQueue");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = global.ErrorUtils;
},18,[],"ErrorUtils");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var TRACE_TAG_REACT_APPS = 1 << 17;
  var TRACE_TAG_JS_VM_CALLS = 1 << 27;
  var _enabled = false;
  var _asyncCookie = 0;
  var _markStack = [];

  var _markStackIndex = -1;

  var _canInstallReactHook = false;
  var _useFiber = false;
  var REACT_MARKER = "\u269B";
  var userTimingPolyfill = __DEV__ ? {
    mark: function mark(markName) {
      if (_enabled) {
        _markStackIndex++;
        _markStack[_markStackIndex] = markName;
        var systraceLabel = markName;

        if (markName[0] === REACT_MARKER) {
          var indexOfId = markName.lastIndexOf(' (#');
          var cutoffIndex = indexOfId !== -1 ? indexOfId : markName.length;
          systraceLabel = markName.slice(2, cutoffIndex);
        }

        Systrace.beginEvent(systraceLabel);
      }
    },
    measure: function measure(measureName, startMark, endMark) {
      if (_enabled) {
        invariant(typeof measureName === 'string' && typeof startMark === 'string' && typeof endMark === 'undefined', 'Only performance.measure(string, string) overload is supported.');
        var topMark = _markStack[_markStackIndex];
        invariant(startMark === topMark, 'There was a mismatching performance.measure() call. ' + 'Expected "%s" but got "%s."', topMark, startMark);
        _markStackIndex--;
        Systrace.endEvent();
      }
    },
    clearMarks: function clearMarks(markName) {
      if (_enabled) {
        if (_markStackIndex === -1) {
          return;
        }

        if (markName === _markStack[_markStackIndex]) {
          if (userTimingPolyfill != null) {
            userTimingPolyfill.measure(markName, markName);
          }
        }
      }
    },
    clearMeasures: function clearMeasures() {}
  } : null;
  var reactDebugToolHook = __DEV__ ? {
    onBeforeMountComponent: function onBeforeMountComponent(debugID) {
      var ReactComponentTreeHook = require(_dependencyMap[1], 'ReactGlobalSharedState').ReactComponentTreeHook;

      var displayName = ReactComponentTreeHook.getDisplayName(debugID);
      Systrace.beginEvent("ReactReconciler.mountComponent(" + displayName + ")");
    },
    onMountComponent: function onMountComponent(debugID) {
      Systrace.endEvent();
    },
    onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID) {
      var ReactComponentTreeHook = require(_dependencyMap[1], 'ReactGlobalSharedState').ReactComponentTreeHook;

      var displayName = ReactComponentTreeHook.getDisplayName(debugID);
      Systrace.beginEvent("ReactReconciler.updateComponent(" + displayName + ")");
    },
    onUpdateComponent: function onUpdateComponent(debugID) {
      Systrace.endEvent();
    },
    onBeforeUnmountComponent: function onBeforeUnmountComponent(debugID) {
      var ReactComponentTreeHook = require(_dependencyMap[1], 'ReactGlobalSharedState').ReactComponentTreeHook;

      var displayName = ReactComponentTreeHook.getDisplayName(debugID);
      Systrace.beginEvent("ReactReconciler.unmountComponent(" + displayName + ")");
    },
    onUnmountComponent: function onUnmountComponent(debugID) {
      Systrace.endEvent();
    },
    onBeginLifeCycleTimer: function onBeginLifeCycleTimer(debugID, timerType) {
      var ReactComponentTreeHook = require(_dependencyMap[1], 'ReactGlobalSharedState').ReactComponentTreeHook;

      var displayName = ReactComponentTreeHook.getDisplayName(debugID);
      Systrace.beginEvent(displayName + "." + timerType + "()");
    },
    onEndLifeCycleTimer: function onEndLifeCycleTimer(debugID, timerType) {
      Systrace.endEvent();
    }
  } : null;
  var Systrace = {
    installReactHook: function installReactHook(useFiber) {
      if (_enabled) {
        if (__DEV__) {
          if (useFiber) {
            global.performance = userTimingPolyfill;
          } else {
            require(_dependencyMap[2], 'ReactDebugTool').addHook(reactDebugToolHook);
          }
        }
      }

      _useFiber = useFiber;
      _canInstallReactHook = true;
    },
    setEnabled: function setEnabled(enabled) {
      if (_enabled !== enabled) {
        if (__DEV__) {
          if (enabled) {
            global.nativeTraceBeginLegacy && global.nativeTraceBeginLegacy(TRACE_TAG_JS_VM_CALLS);
          } else {
            global.nativeTraceEndLegacy && global.nativeTraceEndLegacy(TRACE_TAG_JS_VM_CALLS);
          }

          if (_canInstallReactHook) {
            if (_useFiber) {
              if (enabled && global.performance === undefined) {
                global.performance = userTimingPolyfill;
              }
            } else {
              var ReactDebugTool = require(_dependencyMap[2], 'ReactDebugTool');

              if (enabled) {
                ReactDebugTool.addHook(reactDebugToolHook);
              } else {
                ReactDebugTool.removeHook(reactDebugToolHook);
              }
            }
          }
        }

        _enabled = enabled;
      }
    },
    isEnabled: function isEnabled() {
      return _enabled;
    },
    beginEvent: function beginEvent(profileName, args) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, profileName, args);
      }
    },
    endEvent: function endEvent() {
      if (_enabled) {
        global.nativeTraceEndSection(TRACE_TAG_REACT_APPS);
      }
    },
    beginAsyncEvent: function beginAsyncEvent(profileName) {
      var cookie = _asyncCookie;

      if (_enabled) {
        _asyncCookie++;
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie);
      }

      return cookie;
    },
    endAsyncEvent: function endAsyncEvent(profileName, cookie) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie);
      }
    },
    counterEvent: function counterEvent(profileName, value) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceCounter && global.nativeTraceCounter(TRACE_TAG_REACT_APPS, profileName, value);
      }
    },
    attachToRelayProfiler: function attachToRelayProfiler(relayProfiler) {
      relayProfiler.attachProfileHandler('*', function (name) {
        var cookie = Systrace.beginAsyncEvent(name);
        return function () {
          Systrace.endAsyncEvent(name, cookie);
        };
      });
      relayProfiler.attachAggregateHandler('*', function (name, callback) {
        Systrace.beginEvent(name);
        callback();
        Systrace.endEvent();
      });
    },
    swizzleJSON: function swizzleJSON() {
      Systrace.measureMethods(JSON, 'JSON', ['parse', 'stringify']);
    },
    measureMethods: function measureMethods(object, objectName, methodNames) {
      if (!__DEV__) {
        return;
      }

      methodNames.forEach(function (methodName) {
        object[methodName] = Systrace.measure(objectName, methodName, object[methodName]);
      });
    },
    measure: function measure(objName, fnName, func) {
      if (!__DEV__) {
        return func;
      }

      var profileName = objName + "." + fnName;
      return function () {
        if (!_enabled) {
          return func.apply(this, arguments);
        }

        Systrace.beginEvent(profileName);
        var ret = func.apply(this, arguments);
        Systrace.endEvent();
        return ret;
      };
    }
  };

  if (__DEV__) {
    require.Systrace = Systrace;
  }

  module.exports = Systrace;
},19,[13,20,121],"Systrace");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactGlobalSharedState;
},20,[21],"ReactGlobalSharedState");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ReactNative = void 0;

  if (__DEV__) {
    ReactNative = require(_dependencyMap[0], 'ReactNativeRenderer-dev');
  } else {
    ReactNative = require(_dependencyMap[1], 'ReactNativeRenderer-prod');
  }

  module.exports = ReactNative;
},21,[22,120],"ReactNative");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  if (__DEV__) {
    (function () {
      "use strict";

      require(_dependencyMap[0], "InitializeCore");

      var invariant = require(_dependencyMap[1], "fbjs/lib/invariant");

      var warning = require(_dependencyMap[2], "fbjs/lib/warning");

      var emptyFunction = require(_dependencyMap[3], "fbjs/lib/emptyFunction");

      var RCTEventEmitter = require(_dependencyMap[4], "RCTEventEmitter");

      var UIManager = require(_dependencyMap[5], "UIManager");

      var React = require(_dependencyMap[6], "react");

      var ExceptionsManager = require(_dependencyMap[7], "ExceptionsManager");

      var TextInputState = require(_dependencyMap[8], "TextInputState");

      var deepDiffer = require(_dependencyMap[9], "deepDiffer");

      var flattenStyle = require(_dependencyMap[10], "flattenStyle");

      var emptyObject = require(_dependencyMap[11], "fbjs/lib/emptyObject");

      var checkPropTypes = require(_dependencyMap[12], "prop-types/checkPropTypes");

      var shallowEqual = require(_dependencyMap[13], "fbjs/lib/shallowEqual");

      var deepFreezeAndThrowOnMutationInDev = require(_dependencyMap[14], "deepFreezeAndThrowOnMutationInDev");

      var ReactErrorUtils = {
        _caughtError: null,
        _hasCaughtError: false,
        _rethrowError: null,
        _hasRethrowError: false,
        injection: {
          injectErrorUtils: function injectErrorUtils(injectedErrorUtils) {
            invariant(typeof injectedErrorUtils.invokeGuardedCallback === "function", "Injected invokeGuardedCallback() must be a function.");
            _invokeGuardedCallback = injectedErrorUtils.invokeGuardedCallback;
          }
        },
        invokeGuardedCallback: function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
          _invokeGuardedCallback.apply(ReactErrorUtils, arguments);
        },
        invokeGuardedCallbackAndCatchFirstError: function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
          ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);

          if (ReactErrorUtils.hasCaughtError()) {
            var error = ReactErrorUtils.clearCaughtError();

            if (!ReactErrorUtils._hasRethrowError) {
              ReactErrorUtils._hasRethrowError = true;
              ReactErrorUtils._rethrowError = error;
            }
          }
        },
        rethrowCaughtError: function rethrowCaughtError() {
          return _rethrowCaughtError.apply(ReactErrorUtils, arguments);
        },
        hasCaughtError: function hasCaughtError() {
          return ReactErrorUtils._hasCaughtError;
        },
        clearCaughtError: function clearCaughtError() {
          if (ReactErrorUtils._hasCaughtError) {
            var error = ReactErrorUtils._caughtError;
            ReactErrorUtils._caughtError = null;
            ReactErrorUtils._hasCaughtError = false;
            return error;
          } else {
            invariant(false, "clearCaughtError was called but no error was captured. This error " + "is likely caused by a bug in React. Please file an issue.");
          }
        }
      };

      var _invokeGuardedCallback = function _invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        ReactErrorUtils._hasCaughtError = false;
        ReactErrorUtils._caughtError = null;
        var funcArgs = Array.prototype.slice.call(arguments, 3);

        try {
          func.apply(context, funcArgs);
        } catch (error) {
          ReactErrorUtils._caughtError = error;
          ReactErrorUtils._hasCaughtError = true;
        }
      };

      {
        if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
          var fakeNode = document.createElement("react");

          var invokeGuardedCallbackDev = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            invariant(typeof document !== "undefined", "The `document` global was defined when React was initialized, but is not " + "defined anymore. This can happen in a test environment if a component " + "schedules an update from an asynchronous callback, but the test has already " + "finished running. To solve this, you can either unmount the component at " + "the end of your test (and ensure that any asynchronous operations get " + "canceled in `componentWillUnmount`), or you can change the test itself " + "to be asynchronous.");
            var evt = document.createEvent("Event");
            var didError = true;
            var funcArgs = Array.prototype.slice.call(arguments, 3);

            function callCallback() {
              fakeNode.removeEventListener(evtType, callCallback, false);
              func.apply(context, funcArgs);
              didError = false;
            }

            var error = void 0;
            var didSetError = false;
            var isCrossOriginError = false;

            function onError(event) {
              error = event.error;
              didSetError = true;

              if (error === null && event.colno === 0 && event.lineno === 0) {
                isCrossOriginError = true;
              }
            }

            var evtType = "react-" + (name ? name : "invokeguardedcallback");
            window.addEventListener("error", onError);
            fakeNode.addEventListener(evtType, callCallback, false);
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);

            if (didError) {
              if (!didSetError) {
                error = new Error("An error was thrown inside one of your components, but React " + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + "your browser. Try triggering the error in production mode, " + "or switching to a modern browser. If you suspect that this is " + "actually an issue with React, please file an issue.");
              } else if (isCrossOriginError) {
                error = new Error("A cross-origin error was thrown. React doesn't have access to " + "the actual error object in development. " + "See https://fb.me/react-crossorigin-error for more information.");
              }

              ReactErrorUtils._hasCaughtError = true;
              ReactErrorUtils._caughtError = error;
            } else {
              ReactErrorUtils._hasCaughtError = false;
              ReactErrorUtils._caughtError = null;
            }

            window.removeEventListener("error", onError);
          };

          _invokeGuardedCallback = invokeGuardedCallbackDev;
        }
      }

      var _rethrowCaughtError = function _rethrowCaughtError() {
        if (ReactErrorUtils._hasRethrowError) {
          var error = ReactErrorUtils._rethrowError;
          ReactErrorUtils._rethrowError = null;
          ReactErrorUtils._hasRethrowError = false;
          throw error;
        }
      };

      var eventPluginOrder = null;
      var namesToPlugins = {};

      function recomputePluginOrdering() {
        if (!eventPluginOrder) {
          return;
        }

        for (var pluginName in namesToPlugins) {
          var pluginModule = namesToPlugins[pluginName];
          var pluginIndex = eventPluginOrder.indexOf(pluginName);
          invariant(pluginIndex > -1, "EventPluginRegistry: Cannot inject event plugins that do not exist in " + "the plugin ordering, `%s`.", pluginName);

          if (plugins[pluginIndex]) {
            continue;
          }

          invariant(pluginModule.extractEvents, "EventPluginRegistry: Event plugins must implement an `extractEvents` " + "method, but `%s` does not.", pluginName);
          plugins[pluginIndex] = pluginModule;
          var publishedEvents = pluginModule.eventTypes;

          for (var eventName in publishedEvents) {
            invariant(publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName), "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", eventName, pluginName);
          }
        }
      }

      function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
        invariant(!eventNameDispatchConfigs.hasOwnProperty(eventName), "EventPluginHub: More than one plugin attempted to publish the same " + "event name, `%s`.", eventName);
        eventNameDispatchConfigs[eventName] = dispatchConfig;
        var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

        if (phasedRegistrationNames) {
          for (var phaseName in phasedRegistrationNames) {
            if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
              var phasedRegistrationName = phasedRegistrationNames[phaseName];
              publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
            }
          }

          return true;
        } else if (dispatchConfig.registrationName) {
          publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
          return true;
        }

        return false;
      }

      function publishRegistrationName(registrationName, pluginModule, eventName) {
        invariant(!registrationNameModules[registrationName], "EventPluginHub: More than one plugin attempted to publish the same " + "registration name, `%s`.", registrationName);
        registrationNameModules[registrationName] = pluginModule;
        registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
        {
          var lowerCasedName = registrationName.toLowerCase();
        }
      }

      var plugins = [];
      var eventNameDispatchConfigs = {};
      var registrationNameModules = {};
      var registrationNameDependencies = {};

      function injectEventPluginOrder(injectedEventPluginOrder) {
        invariant(!eventPluginOrder, "EventPluginRegistry: Cannot inject event plugin ordering more than " + "once. You are likely trying to load more than one copy of React.");
        eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
        recomputePluginOrdering();
      }

      function injectEventPluginsByName(injectedNamesToPlugins) {
        var isOrderingDirty = false;

        for (var pluginName in injectedNamesToPlugins) {
          if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
            continue;
          }

          var pluginModule = injectedNamesToPlugins[pluginName];

          if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
            invariant(!namesToPlugins[pluginName], "EventPluginRegistry: Cannot inject two different event plugins " + "using the same name, `%s`.", pluginName);
            namesToPlugins[pluginName] = pluginModule;
            isOrderingDirty = true;
          }
        }

        if (isOrderingDirty) {
          recomputePluginOrdering();
        }
      }

      var getFiberCurrentPropsFromNode = null;
      var getInstanceFromNode = null;
      var getNodeFromInstance = null;
      var injection$1 = {
        injectComponentTree: function injectComponentTree(Injected) {
          getFiberCurrentPropsFromNode = Injected.getFiberCurrentPropsFromNode;
          getInstanceFromNode = Injected.getInstanceFromNode;
          getNodeFromInstance = Injected.getNodeFromInstance;
          {
            warning(getNodeFromInstance && getInstanceFromNode, "EventPluginUtils.injection.injectComponentTree(...): Injected " + "module is missing getNodeFromInstance or getInstanceFromNode.");
          }
        }
      };

      function isEndish(topLevelType) {
        return topLevelType === "topMouseUp" || topLevelType === "topTouchEnd" || topLevelType === "topTouchCancel";
      }

      function isMoveish(topLevelType) {
        return topLevelType === "topMouseMove" || topLevelType === "topTouchMove";
      }

      function isStartish(topLevelType) {
        return topLevelType === "topMouseDown" || topLevelType === "topTouchStart";
      }

      var validateEventDispatches;
      {
        validateEventDispatches = function validateEventDispatches(event) {
          var dispatchListeners = event._dispatchListeners;
          var dispatchInstances = event._dispatchInstances;
          var listenersIsArr = Array.isArray(dispatchListeners);
          var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
          var instancesIsArr = Array.isArray(dispatchInstances);
          var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
          warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, "EventPluginUtils: Invalid `event`.");
        };
      }

      function executeDispatch(event, simulated, listener, inst) {
        var type = event.type || "unknown-event";
        event.currentTarget = getNodeFromInstance(inst);
        ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
      }

      function executeDispatchesInOrder(event, simulated) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        {
          validateEventDispatches(event);
        }

        if (Array.isArray(dispatchListeners)) {
          for (var i = 0; i < dispatchListeners.length; i++) {
            if (event.isPropagationStopped()) {
              break;
            }

            executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
          }
        } else if (dispatchListeners) {
          executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
        }

        event._dispatchListeners = null;
        event._dispatchInstances = null;
      }

      function executeDispatchesInOrderStopAtTrueImpl(event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        {
          validateEventDispatches(event);
        }

        if (Array.isArray(dispatchListeners)) {
          for (var i = 0; i < dispatchListeners.length; i++) {
            if (event.isPropagationStopped()) {
              break;
            }

            if (dispatchListeners[i](event, dispatchInstances[i])) {
              return dispatchInstances[i];
            }
          }
        } else if (dispatchListeners) {
          if (dispatchListeners(event, dispatchInstances)) {
            return dispatchInstances;
          }
        }

        return null;
      }

      function executeDispatchesInOrderStopAtTrue(event) {
        var ret = executeDispatchesInOrderStopAtTrueImpl(event);
        event._dispatchInstances = null;
        event._dispatchListeners = null;
        return ret;
      }

      function executeDirectDispatch(event) {
        {
          validateEventDispatches(event);
        }
        var dispatchListener = event._dispatchListeners;
        var dispatchInstance = event._dispatchInstances;
        invariant(!Array.isArray(dispatchListener), "executeDirectDispatch(...): Invalid `event`.");
        event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
        var res = dispatchListener ? dispatchListener(event) : null;
        event.currentTarget = null;
        event._dispatchListeners = null;
        event._dispatchInstances = null;
        return res;
      }

      function hasDispatches(event) {
        return !!event._dispatchListeners;
      }

      function accumulateInto(current, next) {
        invariant(next != null, "accumulateInto(...): Accumulated items must not be null or undefined.");

        if (current == null) {
          return next;
        }

        if (Array.isArray(current)) {
          if (Array.isArray(next)) {
            current.push.apply(current, next);
            return current;
          }

          current.push(next);
          return current;
        }

        if (Array.isArray(next)) {
          return [current].concat(next);
        }

        return [current, next];
      }

      function forEachAccumulated(arr, cb, scope) {
        if (Array.isArray(arr)) {
          arr.forEach(cb, scope);
        } else if (arr) {
          cb.call(scope, arr);
        }
      }

      var eventQueue = null;

      var executeDispatchesAndRelease = function executeDispatchesAndRelease(event, simulated) {
        if (event) {
          executeDispatchesInOrder(event, simulated);

          if (!event.isPersistent()) {
            event.constructor.release(event);
          }
        }
      };

      var executeDispatchesAndReleaseSimulated = function executeDispatchesAndReleaseSimulated(e) {
        return executeDispatchesAndRelease(e, true);
      };

      var executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
        return executeDispatchesAndRelease(e, false);
      };

      function isInteractive(tag) {
        return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
      }

      function shouldPreventMouseEvent(name, type, props) {
        switch (name) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
            return !!(props.disabled && isInteractive(type));

          default:
            return false;
        }
      }

      var injection = {
        injectEventPluginOrder: injectEventPluginOrder,
        injectEventPluginsByName: injectEventPluginsByName
      };

      function getListener(inst, registrationName) {
        var listener;
        var stateNode = inst.stateNode;

        if (!stateNode) {
          return null;
        }

        var props = getFiberCurrentPropsFromNode(stateNode);

        if (!props) {
          return null;
        }

        listener = props[registrationName];

        if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
          return null;
        }

        invariant(!listener || typeof listener === "function", "Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
        return listener;
      }

      function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var events;

        for (var i = 0; i < plugins.length; i++) {
          var possiblePlugin = plugins[i];

          if (possiblePlugin) {
            var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);

            if (extractedEvents) {
              events = accumulateInto(events, extractedEvents);
            }
          }
        }

        return events;
      }

      function enqueueEvents(events) {
        if (events) {
          eventQueue = accumulateInto(eventQueue, events);
        }
      }

      function processEventQueue(simulated) {
        var processingEventQueue = eventQueue;
        eventQueue = null;

        if (!processingEventQueue) {
          return;
        }

        if (simulated) {
          forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
        } else {
          forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
        }

        invariant(!eventQueue, "processEventQueue(): Additional events were enqueued while processing " + "an event queue. Support for this has not yet been implemented.");
        ReactErrorUtils.rethrowCaughtError();
      }

      var IndeterminateComponent = 0;
      var FunctionalComponent = 1;
      var ClassComponent = 2;
      var HostRoot = 3;
      var HostPortal = 4;
      var HostComponent = 5;
      var HostText = 6;
      var CallComponent = 7;
      var CallHandlerPhase = 8;
      var ReturnComponent = 9;
      var Fragment = 10;

      function getParent(inst) {
        do {
          inst = inst["return"];
        } while (inst && inst.tag !== HostComponent);

        if (inst) {
          return inst;
        }

        return null;
      }

      function getLowestCommonAncestor(instA, instB) {
        var depthA = 0;

        for (var tempA = instA; tempA; tempA = getParent(tempA)) {
          depthA++;
        }

        var depthB = 0;

        for (var tempB = instB; tempB; tempB = getParent(tempB)) {
          depthB++;
        }

        while (depthA - depthB > 0) {
          instA = getParent(instA);
          depthA--;
        }

        while (depthB - depthA > 0) {
          instB = getParent(instB);
          depthB--;
        }

        var depth = depthA;

        while (depth--) {
          if (instA === instB || instA === instB.alternate) {
            return instA;
          }

          instA = getParent(instA);
          instB = getParent(instB);
        }

        return null;
      }

      function isAncestor(instA, instB) {
        while (instB) {
          if (instA === instB || instA === instB.alternate) {
            return true;
          }

          instB = getParent(instB);
        }

        return false;
      }

      function getParentInstance(inst) {
        return getParent(inst);
      }

      function traverseTwoPhase(inst, fn, arg) {
        var path = [];

        while (inst) {
          path.push(inst);
          inst = getParent(inst);
        }

        var i;

        for (i = path.length; i-- > 0;) {
          fn(path[i], "captured", arg);
        }

        for (i = 0; i < path.length; i++) {
          fn(path[i], "bubbled", arg);
        }
      }

      function listenerAtPhase(inst, event, propagationPhase) {
        var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
        return getListener(inst, registrationName);
      }

      function accumulateDirectionalDispatches(inst, phase, event) {
        {
          warning(inst, "Dispatching inst must not be null");
        }
        var listener = listenerAtPhase(inst, event, phase);

        if (listener) {
          event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
          event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
        }
      }

      function accumulateTwoPhaseDispatchesSingle(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) {
          traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
        }
      }

      function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) {
          var targetInst = event._targetInst;
          var parentInst = targetInst ? getParentInstance(targetInst) : null;
          traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
        }
      }

      function accumulateDispatches(inst, ignoredDirection, event) {
        if (inst && event && event.dispatchConfig.registrationName) {
          var registrationName = event.dispatchConfig.registrationName;
          var listener = getListener(inst, registrationName);

          if (listener) {
            event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
            event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
          }
        }
      }

      function accumulateDirectDispatchesSingle(event) {
        if (event && event.dispatchConfig.registrationName) {
          accumulateDispatches(event._targetInst, null, event);
        }
      }

      function accumulateTwoPhaseDispatches(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
      }

      function accumulateTwoPhaseDispatchesSkipTarget(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
      }

      function accumulateDirectDispatches(events) {
        forEachAccumulated(events, accumulateDirectDispatchesSingle);
      }

      var didWarnForAddedNewProperty = false;
      var isProxySupported = typeof Proxy === "function";
      var EVENT_POOL_SIZE = 10;
      var shouldBeReleasedProperties = ["dispatchConfig", "_targetInst", "nativeEvent", "isDefaultPrevented", "isPropagationStopped", "_dispatchListeners", "_dispatchInstances"];
      var EventInterface = {
        type: null,
        target: null,
        currentTarget: emptyFunction.thatReturnsNull,
        eventPhase: null,
        bubbles: null,
        cancelable: null,
        timeStamp: function timeStamp(event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: null,
        isTrusted: null
      };

      function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
        {
          delete this.nativeEvent;
          delete this.preventDefault;
          delete this.stopPropagation;
        }
        this.dispatchConfig = dispatchConfig;
        this._targetInst = targetInst;
        this.nativeEvent = nativeEvent;
        var Interface = this.constructor.Interface;

        for (var propName in Interface) {
          if (!Interface.hasOwnProperty(propName)) {
            continue;
          }

          {
            delete this[propName];
          }
          var normalize = Interface[propName];

          if (normalize) {
            this[propName] = normalize(nativeEvent);
          } else {
            if (propName === "target") {
              this.target = nativeEventTarget;
            } else {
              this[propName] = nativeEvent[propName];
            }
          }
        }

        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

        if (defaultPrevented) {
          this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
        } else {
          this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
        }

        this.isPropagationStopped = emptyFunction.thatReturnsFalse;
        return this;
      }

      babelHelpers.extends(SyntheticEvent.prototype, {
        preventDefault: function preventDefault() {
          this.defaultPrevented = true;
          var event = this.nativeEvent;

          if (!event) {
            return;
          }

          if (event.preventDefault) {
            event.preventDefault();
          } else if (typeof event.returnValue !== "unknown") {
            event.returnValue = false;
          }

          this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
        },
        stopPropagation: function stopPropagation() {
          var event = this.nativeEvent;

          if (!event) {
            return;
          }

          if (event.stopPropagation) {
            event.stopPropagation();
          } else if (typeof event.cancelBubble !== "unknown") {
            event.cancelBubble = true;
          }

          this.isPropagationStopped = emptyFunction.thatReturnsTrue;
        },
        persist: function persist() {
          this.isPersistent = emptyFunction.thatReturnsTrue;
        },
        isPersistent: emptyFunction.thatReturnsFalse,
        destructor: function destructor() {
          var Interface = this.constructor.Interface;

          for (var propName in Interface) {
            {
              Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
            }
          }

          for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
            this[shouldBeReleasedProperties[i]] = null;
          }

          {
            Object.defineProperty(this, "nativeEvent", getPooledWarningPropertyDefinition("nativeEvent", null));
            Object.defineProperty(this, "preventDefault", getPooledWarningPropertyDefinition("preventDefault", emptyFunction));
            Object.defineProperty(this, "stopPropagation", getPooledWarningPropertyDefinition("stopPropagation", emptyFunction));
          }
        }
      });
      SyntheticEvent.Interface = EventInterface;

      SyntheticEvent.augmentClass = function (Class, Interface) {
        var Super = this;

        var E = function E() {};

        E.prototype = Super.prototype;
        var prototype = new E();
        babelHelpers.extends(prototype, Class.prototype);
        Class.prototype = prototype;
        Class.prototype.constructor = Class;
        Class.Interface = babelHelpers.extends({}, Super.Interface, Interface);
        Class.augmentClass = Super.augmentClass;
        addEventPoolingTo(Class);
      };

      {
        if (isProxySupported) {
          SyntheticEvent = new Proxy(SyntheticEvent, {
            construct: function construct(target, args) {
              return this.apply(target, Object.create(target.prototype), args);
            },
            apply: function apply(constructor, that, args) {
              return new Proxy(constructor.apply(that, args), {
                set: function set(target, prop, value) {
                  if (prop !== "isPersistent" && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
                    warning(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + "The property is never released. See " + "https://fb.me/react-event-pooling for more information.");
                    didWarnForAddedNewProperty = true;
                  }

                  target[prop] = value;
                  return true;
                }
              });
            }
          });
        }
      }
      addEventPoolingTo(SyntheticEvent);

      function getPooledWarningPropertyDefinition(propName, getVal) {
        var isFunction = typeof getVal === "function";
        return {
          configurable: true,
          set: set,
          get: get
        };

        function set(val) {
          var action = isFunction ? "setting the method" : "setting the property";
          warn(action, "This is effectively a no-op");
          return val;
        }

        function get() {
          var action = isFunction ? "accessing the method" : "accessing the property";
          var result = isFunction ? "This is a no-op function" : "This is set to null";
          warn(action, result);
          return getVal;
        }

        function warn(action, result) {
          var warningCondition = false;
          warning(warningCondition, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + "If you must keep the original synthetic event around, use event.persist(). " + "See https://fb.me/react-event-pooling for more information.", action, propName, result);
        }
      }

      function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
        var EventConstructor = this;

        if (EventConstructor.eventPool.length) {
          var instance = EventConstructor.eventPool.pop();
          EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
          return instance;
        }

        return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
      }

      function releasePooledEvent(event) {
        var EventConstructor = this;
        invariant(event instanceof EventConstructor, "Trying to release an event instance  into a pool of a different type.");
        event.destructor();

        if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
          EventConstructor.eventPool.push(event);
        }
      }

      function addEventPoolingTo(EventConstructor) {
        EventConstructor.eventPool = [];
        EventConstructor.getPooled = getPooledEvent;
        EventConstructor.release = releasePooledEvent;
      }

      var SyntheticEvent$1 = SyntheticEvent;
      var ResponderEventInterface = {
        touchHistory: function touchHistory(nativeEvent) {
          return null;
        }
      };

      function ResponderSyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
        return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
      }

      SyntheticEvent$1.augmentClass(ResponderSyntheticEvent, ResponderEventInterface);
      var MAX_TOUCH_BANK = 20;
      var touchBank = [];
      var touchHistory = {
        touchBank: touchBank,
        numberActiveTouches: 0,
        indexOfSingleActiveTouch: -1,
        mostRecentTimeStamp: 0
      };

      function timestampForTouch(touch) {
        return touch.timeStamp || touch.timestamp;
      }

      function createTouchRecord(touch) {
        return {
          touchActive: true,
          startPageX: touch.pageX,
          startPageY: touch.pageY,
          startTimeStamp: timestampForTouch(touch),
          currentPageX: touch.pageX,
          currentPageY: touch.pageY,
          currentTimeStamp: timestampForTouch(touch),
          previousPageX: touch.pageX,
          previousPageY: touch.pageY,
          previousTimeStamp: timestampForTouch(touch)
        };
      }

      function resetTouchRecord(touchRecord, touch) {
        touchRecord.touchActive = true;
        touchRecord.startPageX = touch.pageX;
        touchRecord.startPageY = touch.pageY;
        touchRecord.startTimeStamp = timestampForTouch(touch);
        touchRecord.currentPageX = touch.pageX;
        touchRecord.currentPageY = touch.pageY;
        touchRecord.currentTimeStamp = timestampForTouch(touch);
        touchRecord.previousPageX = touch.pageX;
        touchRecord.previousPageY = touch.pageY;
        touchRecord.previousTimeStamp = timestampForTouch(touch);
      }

      function getTouchIdentifier(_ref) {
        var identifier = _ref.identifier;
        invariant(identifier != null, "Touch object is missing identifier.");
        {
          warning(identifier <= MAX_TOUCH_BANK, "Touch identifier %s is greater than maximum supported %s which causes " + "performance issues backfilling array locations for all of the indices.", identifier, MAX_TOUCH_BANK);
        }
        return identifier;
      }

      function recordTouchStart(touch) {
        var identifier = getTouchIdentifier(touch);
        var touchRecord = touchBank[identifier];

        if (touchRecord) {
          resetTouchRecord(touchRecord, touch);
        } else {
          touchBank[identifier] = createTouchRecord(touch);
        }

        touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
      }

      function recordTouchMove(touch) {
        var touchRecord = touchBank[getTouchIdentifier(touch)];

        if (touchRecord) {
          touchRecord.touchActive = true;
          touchRecord.previousPageX = touchRecord.currentPageX;
          touchRecord.previousPageY = touchRecord.currentPageY;
          touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
          touchRecord.currentPageX = touch.pageX;
          touchRecord.currentPageY = touch.pageY;
          touchRecord.currentTimeStamp = timestampForTouch(touch);
          touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
        } else {
          console.error("Cannot record touch move without a touch start.\n" + "Touch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
        }
      }

      function recordTouchEnd(touch) {
        var touchRecord = touchBank[getTouchIdentifier(touch)];

        if (touchRecord) {
          touchRecord.touchActive = false;
          touchRecord.previousPageX = touchRecord.currentPageX;
          touchRecord.previousPageY = touchRecord.currentPageY;
          touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
          touchRecord.currentPageX = touch.pageX;
          touchRecord.currentPageY = touch.pageY;
          touchRecord.currentTimeStamp = timestampForTouch(touch);
          touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
        } else {
          console.error("Cannot record touch end without a touch start.\n" + "Touch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
        }
      }

      function printTouch(touch) {
        return JSON.stringify({
          identifier: touch.identifier,
          pageX: touch.pageX,
          pageY: touch.pageY,
          timestamp: timestampForTouch(touch)
        });
      }

      function printTouchBank() {
        var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));

        if (touchBank.length > MAX_TOUCH_BANK) {
          printed += " (original size: " + touchBank.length + ")";
        }

        return printed;
      }

      var ResponderTouchHistoryStore = {
        recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
          if (isMoveish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchMove);
          } else if (isStartish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchStart);
            touchHistory.numberActiveTouches = nativeEvent.touches.length;

            if (touchHistory.numberActiveTouches === 1) {
              touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;
            }
          } else if (isEndish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchEnd);
            touchHistory.numberActiveTouches = nativeEvent.touches.length;

            if (touchHistory.numberActiveTouches === 1) {
              for (var i = 0; i < touchBank.length; i++) {
                var touchTrackToCheck = touchBank[i];

                if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {
                  touchHistory.indexOfSingleActiveTouch = i;
                  break;
                }
              }

              {
                var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];
                warning(activeRecord != null && activeRecord.touchActive, "Cannot find single active touch.");
              }
            }
          }
        },
        touchHistory: touchHistory
      };

      function accumulate(current, next) {
        invariant(next != null, "accumulate(...): Accumulated items must be not be null or undefined.");

        if (current == null) {
          return next;
        }

        if (Array.isArray(current)) {
          return current.concat(next);
        }

        if (Array.isArray(next)) {
          return [current].concat(next);
        }

        return [current, next];
      }

      var responderInst = null;
      var trackedTouchCount = 0;
      var previousActiveTouches = 0;

      var changeResponder = function changeResponder(nextResponderInst, blockHostResponder) {
        var oldResponderInst = responderInst;
        responderInst = nextResponderInst;

        if (ResponderEventPlugin.GlobalResponderHandler !== null) {
          ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
        }
      };

      var eventTypes = {
        startShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onStartShouldSetResponder",
            captured: "onStartShouldSetResponderCapture"
          }
        },
        scrollShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onScrollShouldSetResponder",
            captured: "onScrollShouldSetResponderCapture"
          }
        },
        selectionChangeShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onSelectionChangeShouldSetResponder",
            captured: "onSelectionChangeShouldSetResponderCapture"
          }
        },
        moveShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onMoveShouldSetResponder",
            captured: "onMoveShouldSetResponderCapture"
          }
        },
        responderStart: {
          registrationName: "onResponderStart"
        },
        responderMove: {
          registrationName: "onResponderMove"
        },
        responderEnd: {
          registrationName: "onResponderEnd"
        },
        responderRelease: {
          registrationName: "onResponderRelease"
        },
        responderTerminationRequest: {
          registrationName: "onResponderTerminationRequest"
        },
        responderGrant: {
          registrationName: "onResponderGrant"
        },
        responderReject: {
          registrationName: "onResponderReject"
        },
        responderTerminate: {
          registrationName: "onResponderTerminate"
        }
      };

      function setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : topLevelType === "topSelectionChange" ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
        var bubbleShouldSetFrom = !responderInst ? targetInst : getLowestCommonAncestor(responderInst, targetInst);
        var skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst;
        var shouldSetEvent = ResponderSyntheticEvent.getPooled(shouldSetEventType, bubbleShouldSetFrom, nativeEvent, nativeEventTarget);
        shouldSetEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;

        if (skipOverBubbleShouldSetFrom) {
          accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent);
        } else {
          accumulateTwoPhaseDispatches(shouldSetEvent);
        }

        var wantsResponderInst = executeDispatchesInOrderStopAtTrue(shouldSetEvent);

        if (!shouldSetEvent.isPersistent()) {
          shouldSetEvent.constructor.release(shouldSetEvent);
        }

        if (!wantsResponderInst || wantsResponderInst === responderInst) {
          return null;
        }

        var extracted;
        var grantEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, wantsResponderInst, nativeEvent, nativeEventTarget);
        grantEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
        accumulateDirectDispatches(grantEvent);
        var blockHostResponder = executeDirectDispatch(grantEvent) === true;

        if (responderInst) {
          var terminationRequestEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget);
          terminationRequestEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
          accumulateDirectDispatches(terminationRequestEvent);
          var shouldSwitch = !hasDispatches(terminationRequestEvent) || executeDirectDispatch(terminationRequestEvent);

          if (!terminationRequestEvent.isPersistent()) {
            terminationRequestEvent.constructor.release(terminationRequestEvent);
          }

          if (shouldSwitch) {
            var terminateEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
            terminateEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(terminateEvent);
            extracted = accumulate(extracted, [grantEvent, terminateEvent]);
            changeResponder(wantsResponderInst, blockHostResponder);
          } else {
            var rejectEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, wantsResponderInst, nativeEvent, nativeEventTarget);
            rejectEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(rejectEvent);
            extracted = accumulate(extracted, rejectEvent);
          }
        } else {
          extracted = accumulate(extracted, grantEvent);
          changeResponder(wantsResponderInst, blockHostResponder);
        }

        return extracted;
      }

      function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {
        return topLevelInst && (topLevelType === "topScroll" && !nativeEvent.responderIgnoreScroll || trackedTouchCount > 0 && topLevelType === "topSelectionChange" || isStartish(topLevelType) || isMoveish(topLevelType));
      }

      function noResponderTouches(nativeEvent) {
        var touches = nativeEvent.touches;

        if (!touches || touches.length === 0) {
          return true;
        }

        for (var i = 0; i < touches.length; i++) {
          var activeTouch = touches[i];
          var target = activeTouch.target;

          if (target !== null && target !== undefined && target !== 0) {
            var targetInst = getInstanceFromNode(target);

            if (isAncestor(responderInst, targetInst)) {
              return false;
            }
          }
        }

        return true;
      }

      var ResponderEventPlugin = {
        _getResponder: function _getResponder() {
          return responderInst;
        },
        eventTypes: eventTypes,
        extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          if (isStartish(topLevelType)) {
            trackedTouchCount += 1;
          } else if (isEndish(topLevelType)) {
            if (trackedTouchCount >= 0) {
              trackedTouchCount -= 1;
            } else {
              console.error("Ended a touch event which was not counted in `trackedTouchCount`.");
              return null;
            }
          }

          ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);
          var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent) ? setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) : null;
          var isResponderTouchStart = responderInst && isStartish(topLevelType);
          var isResponderTouchMove = responderInst && isMoveish(topLevelType);
          var isResponderTouchEnd = responderInst && isEndish(topLevelType);
          var incrementalTouch = isResponderTouchStart ? eventTypes.responderStart : isResponderTouchMove ? eventTypes.responderMove : isResponderTouchEnd ? eventTypes.responderEnd : null;

          if (incrementalTouch) {
            var gesture = ResponderSyntheticEvent.getPooled(incrementalTouch, responderInst, nativeEvent, nativeEventTarget);
            gesture.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(gesture);
            extracted = accumulate(extracted, gesture);
          }

          var isResponderTerminate = responderInst && topLevelType === "topTouchCancel";
          var isResponderRelease = responderInst && !isResponderTerminate && isEndish(topLevelType) && noResponderTouches(nativeEvent);
          var finalTouch = isResponderTerminate ? eventTypes.responderTerminate : isResponderRelease ? eventTypes.responderRelease : null;

          if (finalTouch) {
            var finalEvent = ResponderSyntheticEvent.getPooled(finalTouch, responderInst, nativeEvent, nativeEventTarget);
            finalEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(finalEvent);
            extracted = accumulate(extracted, finalEvent);
            changeResponder(null);
          }

          var numberActiveTouches = ResponderTouchHistoryStore.touchHistory.numberActiveTouches;

          if (ResponderEventPlugin.GlobalInteractionHandler && numberActiveTouches !== previousActiveTouches) {
            ResponderEventPlugin.GlobalInteractionHandler.onChange(numberActiveTouches);
          }

          previousActiveTouches = numberActiveTouches;
          return extracted;
        },
        GlobalResponderHandler: null,
        GlobalInteractionHandler: null,
        injection: {
          injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
            ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
          },
          injectGlobalInteractionHandler: function injectGlobalInteractionHandler(GlobalInteractionHandler) {
            ResponderEventPlugin.GlobalInteractionHandler = GlobalInteractionHandler;
          }
        }
      };
      var customBubblingEventTypes = {};
      var customDirectEventTypes = {};
      var ReactNativeBridgeEventPlugin = {
        eventTypes: {},
        extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          var bubbleDispatchConfig = customBubblingEventTypes[topLevelType];
          var directDispatchConfig = customDirectEventTypes[topLevelType];
          invariant(bubbleDispatchConfig || directDispatchConfig, 'Unsupported top level event type "%s" dispatched', topLevelType);
          var event = SyntheticEvent$1.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);

          if (bubbleDispatchConfig) {
            accumulateTwoPhaseDispatches(event);
          } else if (directDispatchConfig) {
            accumulateDirectDispatches(event);
          } else {
            return null;
          }

          return event;
        },
        processEventTypes: function processEventTypes(viewConfig) {
          var bubblingEventTypes = viewConfig.bubblingEventTypes,
              directEventTypes = viewConfig.directEventTypes;
          {
            if (bubblingEventTypes != null && directEventTypes != null) {
              for (var topLevelType in directEventTypes) {
                invariant(bubblingEventTypes[topLevelType] == null, "Event cannot be both direct and bubbling: %s", topLevelType);
              }
            }
          }

          if (bubblingEventTypes != null) {
            for (var _topLevelType in bubblingEventTypes) {
              if (customBubblingEventTypes[_topLevelType] == null) {
                ReactNativeBridgeEventPlugin.eventTypes[_topLevelType] = customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType];
              }
            }
          }

          if (directEventTypes != null) {
            for (var _topLevelType2 in directEventTypes) {
              if (customDirectEventTypes[_topLevelType2] == null) {
                ReactNativeBridgeEventPlugin.eventTypes[_topLevelType2] = customDirectEventTypes[_topLevelType2] = directEventTypes[_topLevelType2];
              }
            }
          }
        }
      };
      var instanceCache = {};
      var instanceProps = {};

      function precacheFiberNode(hostInst, tag) {
        instanceCache[tag] = hostInst;
      }

      function uncacheFiberNode(tag) {
        delete instanceCache[tag];
        delete instanceProps[tag];
      }

      function getInstanceFromTag(tag) {
        return instanceCache[tag] || null;
      }

      function getTagFromInstance(inst) {
        var tag = inst.stateNode._nativeTag;
        invariant(tag, "All native instances should have a tag.");
        return tag;
      }

      function getFiberCurrentPropsFromNode$1(stateNode) {
        return instanceProps[stateNode._nativeTag] || null;
      }

      function updateFiberProps(tag, props) {
        instanceProps[tag] = props;
      }

      var ReactNativeComponentTree = Object.freeze({
        precacheFiberNode: precacheFiberNode,
        uncacheFiberNode: uncacheFiberNode,
        getClosestInstanceFromNode: getInstanceFromTag,
        getInstanceFromNode: getInstanceFromTag,
        getNodeFromInstance: getTagFromInstance,
        getFiberCurrentPropsFromNode: getFiberCurrentPropsFromNode$1,
        updateFiberProps: updateFiberProps
      });
      var fiberHostComponent = null;
      var restoreTarget = null;
      var restoreQueue = null;

      function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target);

        if (!internalInstance) {
          return;
        }

        invariant(fiberHostComponent && typeof fiberHostComponent.restoreControlledState === "function", "Fiber needs to be injected to handle a fiber target for controlled " + "events. This error is likely caused by a bug in React. Please file an issue.");
        var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
        fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
      }

      function restoreStateIfNeeded() {
        if (!restoreTarget) {
          return;
        }

        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);

        if (queuedTargets) {
          for (var i = 0; i < queuedTargets.length; i++) {
            restoreStateOfTarget(queuedTargets[i]);
          }
        }
      }

      var fiberBatchedUpdates = function fiberBatchedUpdates(fn, bookkeeping) {
        return fn(bookkeeping);
      };

      var isNestingBatched = false;

      function batchedUpdates(fn, bookkeeping) {
        if (isNestingBatched) {
          return fiberBatchedUpdates(fn, bookkeeping);
        }

        isNestingBatched = true;

        try {
          return fiberBatchedUpdates(fn, bookkeeping);
        } finally {
          isNestingBatched = false;
          restoreStateIfNeeded();
        }
      }

      var ReactGenericBatchingInjection = {
        injectFiberBatchedUpdates: function injectFiberBatchedUpdates(_batchedUpdates) {
          fiberBatchedUpdates = _batchedUpdates;
        }
      };
      var injection$2 = ReactGenericBatchingInjection;

      function runEventQueueInBatch(events) {
        enqueueEvents(events);
        processEventQueue(false);
      }

      function handleTopLevel(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        runEventQueueInBatch(events);
      }

      var INITIAL_TAG_COUNT = 1;
      var ReactNativeTagHandles = {
        tagsStartAt: INITIAL_TAG_COUNT,
        tagCount: INITIAL_TAG_COUNT,
        allocateTag: function allocateTag() {
          while (this.reactTagIsNativeTopRootID(ReactNativeTagHandles.tagCount)) {
            ReactNativeTagHandles.tagCount++;
          }

          var tag = ReactNativeTagHandles.tagCount;
          ReactNativeTagHandles.tagCount++;
          return tag;
        },
        assertRootTag: function assertRootTag(tag) {
          invariant(this.reactTagIsNativeTopRootID(tag), "Expect a native root tag, instead got %s", tag);
        },
        reactTagIsNativeTopRootID: function reactTagIsNativeTopRootID(reactTag) {
          return reactTag % 10 === 1;
        }
      };
      var EMPTY_NATIVE_EVENT = {};

      var touchSubsequence = function touchSubsequence(touches, indices) {
        var ret = [];

        for (var i = 0; i < indices.length; i++) {
          ret.push(touches[indices[i]]);
        }

        return ret;
      };

      var removeTouchesAtIndices = function removeTouchesAtIndices(touches, indices) {
        var rippedOut = [];
        var temp = touches;

        for (var i = 0; i < indices.length; i++) {
          var index = indices[i];
          rippedOut.push(touches[index]);
          temp[index] = null;
        }

        var fillAt = 0;

        for (var j = 0; j < temp.length; j++) {
          var cur = temp[j];

          if (cur !== null) {
            temp[fillAt++] = cur;
          }
        }

        temp.length = fillAt;
        return rippedOut;
      };

      function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
        var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT;
        var inst = getInstanceFromTag(rootNodeID);
        batchedUpdates(function () {
          handleTopLevel(topLevelType, inst, nativeEvent, nativeEvent.target);
        });
      }

      function receiveEvent(rootNodeID, topLevelType, nativeEventParam) {
        _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
      }

      function receiveTouches(eventTopLevelType, touches, changedIndices) {
        var changedTouches = eventTopLevelType === "topTouchEnd" || eventTopLevelType === "topTouchCancel" ? removeTouchesAtIndices(touches, changedIndices) : touchSubsequence(touches, changedIndices);

        for (var jj = 0; jj < changedTouches.length; jj++) {
          var touch = changedTouches[jj];
          touch.changedTouches = changedTouches;
          touch.touches = touches;
          var nativeEvent = touch;
          var rootNodeID = null;
          var target = nativeEvent.target;

          if (target !== null && target !== undefined) {
            if (target < ReactNativeTagHandles.tagsStartAt) {
              {
                warning(false, "A view is reporting that a touch occurred on tag zero.");
              }
            } else {
              rootNodeID = target;
            }
          }

          _receiveRootNodeIDEvent(rootNodeID, eventTopLevelType, nativeEvent);
        }
      }

      var ReactNativeEventEmitter = Object.freeze({
        getListener: getListener,
        registrationNames: registrationNameModules,
        _receiveRootNodeIDEvent: _receiveRootNodeIDEvent,
        receiveEvent: receiveEvent,
        receiveTouches: receiveTouches,
        handleTopLevel: handleTopLevel
      });
      var ReactNativeEventPluginOrder = ["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"];
      var ReactNativeGlobalResponderHandler = {
        onChange: function onChange(from, to, blockNativeResponder) {
          if (to !== null) {
            var tag = to.stateNode._nativeTag;
            UIManager.setJSResponder(tag, blockNativeResponder);
          } else {
            UIManager.clearJSResponder();
          }
        }
      };
      RCTEventEmitter.register(ReactNativeEventEmitter);
      injection.injectEventPluginOrder(ReactNativeEventPluginOrder);
      injection$1.injectComponentTree(ReactNativeComponentTree);
      ResponderEventPlugin.injection.injectGlobalResponderHandler(ReactNativeGlobalResponderHandler);
      injection.injectEventPluginsByName({
        ResponderEventPlugin: ResponderEventPlugin,
        ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin
      });

      var defaultShowDialog = function defaultShowDialog(capturedError) {
        return true;
      };

      var showDialog = defaultShowDialog;

      function logCapturedError(capturedError) {
        var logError = showDialog(capturedError);

        if (logError === false) {
          return;
        }

        var error = capturedError.error;
        var suppressLogging = error && error.suppressReactErrorLogging;

        if (suppressLogging) {
          return;
        }

        {
          var componentName = capturedError.componentName,
              componentStack = capturedError.componentStack,
              errorBoundaryName = capturedError.errorBoundaryName,
              errorBoundaryFound = capturedError.errorBoundaryFound,
              willRetry = capturedError.willRetry;
          var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
          var errorBoundaryMessage = void 0;

          if (errorBoundaryFound && errorBoundaryName) {
            if (willRetry) {
              errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            } else {
              errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\n" + "Recreating the tree from scratch failed so React will unmount the tree.";
            }
          } else {
            errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\n" + "Visit https://fb.me/react-error-boundaries to learn more about error boundaries.";
          }

          var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage);
          console.error(combinedMessage);
        }
      }

      var injection$4 = {
        injectDialog: function injectDialog(fn) {
          invariant(showDialog === defaultShowDialog, "The custom dialog was already injected.");
          invariant(typeof fn === "function", "Injected showDialog() must be a function.");
          showDialog = fn;
        }
      };
      var hasSymbol = typeof Symbol === "function" && Symbol["for"];
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol["for"]("react.element") : 0xeac7;
      var REACT_CALL_TYPE = hasSymbol ? Symbol["for"]("react.call") : 0xeac8;
      var REACT_RETURN_TYPE = hasSymbol ? Symbol["for"]("react.return") : 0xeac9;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol["for"]("react.portal") : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol["for"]("react.fragment") : 0xeacb;
      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");
      var FAUX_ITERATOR_SYMBOL = "@@iterator";

      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable === "undefined") {
          return null;
        }

        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }

        return null;
      }

      function _createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        return {
          $$typeof: REACT_PORTAL_TYPE,
          key: key == null ? null : "" + key,
          children: children,
          containerInfo: containerInfo,
          implementation: implementation
        };
      }

      var TouchHistoryMath = {
        centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
          var touchBank = touchHistory.touchBank;
          var total = 0;
          var count = 0;
          var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;

          if (oneTouchData !== null) {
            if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {
              total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;
              count = 1;
            }
          } else {
            for (var i = 0; i < touchBank.length; i++) {
              var touchTrack = touchBank[i];

              if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
                var toAdd;

                if (ofCurrent && isXAxis) {
                  toAdd = touchTrack.currentPageX;
                } else if (ofCurrent && !isXAxis) {
                  toAdd = touchTrack.currentPageY;
                } else if (!ofCurrent && isXAxis) {
                  toAdd = touchTrack.previousPageX;
                } else {
                  toAdd = touchTrack.previousPageY;
                }

                total += toAdd;
                count++;
              }
            }
          }

          return count > 0 ? total / count : TouchHistoryMath.noCentroid;
        },
        currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
          return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, true);
        },
        currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
          return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, true);
        },
        previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
          return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, false);
        },
        previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
          return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, false);
        },
        currentCentroidX: function currentCentroidX(touchHistory) {
          return TouchHistoryMath.centroidDimension(touchHistory, 0, true, true);
        },
        currentCentroidY: function currentCentroidY(touchHistory) {
          return TouchHistoryMath.centroidDimension(touchHistory, 0, false, true);
        },
        noCentroid: -1
      };
      var ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      var ReactCurrentOwner = ReactInternals.ReactCurrentOwner;
      var ReactDebugCurrentFrame = ReactInternals.ReactDebugCurrentFrame;
      var ReactGlobalSharedState = Object.freeze({
        ReactCurrentOwner: ReactCurrentOwner,
        ReactDebugCurrentFrame: ReactDebugCurrentFrame
      });
      var ReactVersion = "16.2.0";

      function showDialog$1(capturedError) {
        var componentStack = capturedError.componentStack,
            error = capturedError.error;
        var errorToHandle = void 0;

        if (error instanceof Error) {
          var message = error.message,
              name = error.name;
          var summary = message ? name + ": " + message : name;
          errorToHandle = error;

          try {
            errorToHandle.message = summary + "\n\nThis error is located at:" + componentStack;
          } catch (e) {}
        } else if (typeof error === "string") {
          errorToHandle = new Error(error + "\n\nThis error is located at:" + componentStack);
        } else {
          errorToHandle = new Error("Unspecified error at:" + componentStack);
        }

        ExceptionsManager.handleException(errorToHandle, false);
        return false;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      var objects = {};
      var uniqueID = 1;
      var emptyObject$2 = {};

      var ReactNativePropRegistry = function () {
        function ReactNativePropRegistry() {
          _classCallCheck(this, ReactNativePropRegistry);
        }

        ReactNativePropRegistry.register = function register(object) {
          var id = ++uniqueID;
          {
            Object.freeze(object);
          }
          objects[id] = object;
          return id;
        };

        ReactNativePropRegistry.getByID = function getByID(id) {
          if (!id) {
            return emptyObject$2;
          }

          var object = objects[id];

          if (!object) {
            console.warn("Invalid style with id `" + id + "`. Skipping ...");
            return emptyObject$2;
          }

          return object;
        };

        return ReactNativePropRegistry;
      }();

      var emptyObject$1 = {};
      var removedKeys = null;
      var removedKeyCount = 0;

      function defaultDiffer(prevProp, nextProp) {
        if (typeof nextProp !== "object" || nextProp === null) {
          return true;
        } else {
          return deepDiffer(prevProp, nextProp);
        }
      }

      function resolveObject(idOrObject) {
        if (typeof idOrObject === "number") {
          return ReactNativePropRegistry.getByID(idOrObject);
        }

        return idOrObject;
      }

      function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
        if (Array.isArray(node)) {
          var i = node.length;

          while (i-- && removedKeyCount > 0) {
            restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
          }
        } else if (node && removedKeyCount > 0) {
          var obj = resolveObject(node);

          for (var propKey in removedKeys) {
            if (!removedKeys[propKey]) {
              continue;
            }

            var nextProp = obj[propKey];

            if (nextProp === undefined) {
              continue;
            }

            var attributeConfig = validAttributes[propKey];

            if (!attributeConfig) {
              continue;
            }

            if (typeof nextProp === "function") {
              nextProp = true;
            }

            if (typeof nextProp === "undefined") {
              nextProp = null;
            }

            if (typeof attributeConfig !== "object") {
              updatePayload[propKey] = nextProp;
            } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
              var nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;
              updatePayload[propKey] = nextValue;
            }

            removedKeys[propKey] = false;
            removedKeyCount--;
          }
        }
      }

      function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {
        var minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;
        var i;

        for (i = 0; i < minLength; i++) {
          updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);
        }

        for (; i < prevArray.length; i++) {
          updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);
        }

        for (; i < nextArray.length; i++) {
          updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);
        }

        return updatePayload;
      }

      function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
        if (!updatePayload && prevProp === nextProp) {
          return updatePayload;
        }

        if (!prevProp || !nextProp) {
          if (nextProp) {
            return addNestedProperty(updatePayload, nextProp, validAttributes);
          }

          if (prevProp) {
            return clearNestedProperty(updatePayload, prevProp, validAttributes);
          }

          return updatePayload;
        }

        if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) {
          return diffProperties(updatePayload, resolveObject(prevProp), resolveObject(nextProp), validAttributes);
        }

        if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
          return diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes);
        }

        if (Array.isArray(prevProp)) {
          return diffProperties(updatePayload, flattenStyle(prevProp), resolveObject(nextProp), validAttributes);
        }

        return diffProperties(updatePayload, resolveObject(prevProp), flattenStyle(nextProp), validAttributes);
      }

      function addNestedProperty(updatePayload, nextProp, validAttributes) {
        if (!nextProp) {
          return updatePayload;
        }

        if (!Array.isArray(nextProp)) {
          return addProperties(updatePayload, resolveObject(nextProp), validAttributes);
        }

        for (var i = 0; i < nextProp.length; i++) {
          updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
        }

        return updatePayload;
      }

      function clearNestedProperty(updatePayload, prevProp, validAttributes) {
        if (!prevProp) {
          return updatePayload;
        }

        if (!Array.isArray(prevProp)) {
          return clearProperties(updatePayload, resolveObject(prevProp), validAttributes);
        }

        for (var i = 0; i < prevProp.length; i++) {
          updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
        }

        return updatePayload;
      }

      function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
        var attributeConfig;
        var nextProp;
        var prevProp;

        for (var propKey in nextProps) {
          attributeConfig = validAttributes[propKey];

          if (!attributeConfig) {
            continue;
          }

          prevProp = prevProps[propKey];
          nextProp = nextProps[propKey];

          if (typeof nextProp === "function") {
            nextProp = true;

            if (typeof prevProp === "function") {
              prevProp = true;
            }
          }

          if (typeof nextProp === "undefined") {
            nextProp = null;

            if (typeof prevProp === "undefined") {
              prevProp = null;
            }
          }

          if (removedKeys) {
            removedKeys[propKey] = false;
          }

          if (updatePayload && updatePayload[propKey] !== undefined) {
            if (typeof attributeConfig !== "object") {
              updatePayload[propKey] = nextProp;
            } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
              var nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;
              updatePayload[propKey] = nextValue;
            }

            continue;
          }

          if (prevProp === nextProp) {
            continue;
          }

          if (typeof attributeConfig !== "object") {
            if (defaultDiffer(prevProp, nextProp)) {
              (updatePayload || (updatePayload = {}))[propKey] = nextProp;
            }
          } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
            var shouldUpdate = prevProp === undefined || (typeof attributeConfig.diff === "function" ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));

            if (shouldUpdate) {
              nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;
              (updatePayload || (updatePayload = {}))[propKey] = nextValue;
            }
          } else {
            removedKeys = null;
            removedKeyCount = 0;
            updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig);

            if (removedKeyCount > 0 && updatePayload) {
              restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig);
              removedKeys = null;
            }
          }
        }

        for (propKey in prevProps) {
          if (nextProps[propKey] !== undefined) {
            continue;
          }

          attributeConfig = validAttributes[propKey];

          if (!attributeConfig) {
            continue;
          }

          if (updatePayload && updatePayload[propKey] !== undefined) {
            continue;
          }

          prevProp = prevProps[propKey];

          if (prevProp === undefined) {
            continue;
          }

          if (typeof attributeConfig !== "object" || typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
            (updatePayload || (updatePayload = {}))[propKey] = null;

            if (!removedKeys) {
              removedKeys = {};
            }

            if (!removedKeys[propKey]) {
              removedKeys[propKey] = true;
              removedKeyCount++;
            }
          } else {
            updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig);
          }
        }

        return updatePayload;
      }

      function addProperties(updatePayload, props, validAttributes) {
        return diffProperties(updatePayload, emptyObject$1, props, validAttributes);
      }

      function clearProperties(updatePayload, prevProps, validAttributes) {
        return diffProperties(updatePayload, prevProps, emptyObject$1, validAttributes);
      }

      function create(props, validAttributes) {
        return addProperties(null, props, validAttributes);
      }

      function diff(prevProps, nextProps, validAttributes) {
        return diffProperties(null, prevProps, nextProps, validAttributes);
      }

      function mountSafeCallback(context, callback) {
        return function () {
          if (!callback) {
            return undefined;
          }

          if (typeof context.__isMounted === "boolean") {
            if (!context.__isMounted) {
              return undefined;
            }
          } else if (typeof context.isMounted === "function") {
            if (!context.isMounted()) {
              return undefined;
            }
          }

          return callback.apply(context, arguments);
        };
      }

      function throwOnStylesProp(component, props) {
        if (props.styles !== undefined) {
          var owner = component._owner || null;
          var name = component.constructor.displayName;
          var msg = "`styles` is not a supported property of `" + name + "`, did " + "you mean `style` (singular)?";

          if (owner && owner.constructor && owner.constructor.displayName) {
            msg += "\n\nCheck the `" + owner.constructor.displayName + "` parent " + " component.";
          }

          throw new Error(msg);
        }
      }

      function warnForStyleProps(props, validAttributes) {
        for (var key in validAttributes.style) {
          if (!(validAttributes[key] || props[key] === undefined)) {
            console.error("You are setting the style `{ " + key + ": ... }` as a prop. You " + "should nest it in a style object. " + "E.g. `{ style: { " + key + ": ... } }`");
          }
        }
      }

      function get(key) {
        return key._reactInternalFiber;
      }

      function set(key, value) {
        key._reactInternalFiber = value;
      }

      function getComponentName(fiber) {
        var type = fiber.type;

        if (typeof type === "string") {
          return type;
        }

        if (typeof type === "function") {
          return type.displayName || type.name;
        }

        return null;
      }

      var _require = require(_dependencyMap[15], "ReactFeatureFlags");

      var debugRenderPhaseSideEffects = _require.debugRenderPhaseSideEffects;
      var enableAsyncSubtreeAPI = true;
      var enableUserTimingAPI = true;
      var enableMutatingReconciler = true;
      var enableNoopReconciler = false;
      var enablePersistentReconciler = false;
      var NoEffect = 0;
      var PerformedWork = 1;
      var Placement = 2;
      var Update = 4;
      var PlacementAndUpdate = 6;
      var Deletion = 8;
      var ContentReset = 16;
      var Callback = 32;
      var Err = 64;
      var Ref = 128;
      var MOUNTING = 1;
      var MOUNTED = 2;
      var UNMOUNTED = 3;

      function isFiberMountedImpl(fiber) {
        var node = fiber;

        if (!fiber.alternate) {
          if ((node.effectTag & Placement) !== NoEffect) {
            return MOUNTING;
          }

          while (node["return"]) {
            node = node["return"];

            if ((node.effectTag & Placement) !== NoEffect) {
              return MOUNTING;
            }
          }
        } else {
          while (node["return"]) {
            node = node["return"];
          }
        }

        if (node.tag === HostRoot) {
          return MOUNTED;
        }

        return UNMOUNTED;
      }

      function isFiberMounted(fiber) {
        return isFiberMountedImpl(fiber) === MOUNTED;
      }

      function isMounted(component) {
        {
          var owner = ReactCurrentOwner.current;

          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            warning(instance._warnedAboutRefsInRender, "%s is accessing isMounted inside its render() function. " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName(ownerFiber) || "A component");
            instance._warnedAboutRefsInRender = true;
          }
        }
        var fiber = get(component);

        if (!fiber) {
          return false;
        }

        return isFiberMountedImpl(fiber) === MOUNTED;
      }

      function assertIsMounted(fiber) {
        invariant(isFiberMountedImpl(fiber) === MOUNTED, "Unable to find node on an unmounted component.");
      }

      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;

        if (!alternate) {
          var state = isFiberMountedImpl(fiber);
          invariant(state !== UNMOUNTED, "Unable to find node on an unmounted component.");

          if (state === MOUNTING) {
            return null;
          }

          return fiber;
        }

        var a = fiber;
        var b = alternate;

        while (true) {
          var parentA = a["return"];
          var parentB = parentA ? parentA.alternate : null;

          if (!parentA || !parentB) {
            break;
          }

          if (parentA.child === parentB.child) {
            var child = parentA.child;

            while (child) {
              if (child === a) {
                assertIsMounted(parentA);
                return fiber;
              }

              if (child === b) {
                assertIsMounted(parentA);
                return alternate;
              }

              child = child.sibling;
            }

            invariant(false, "Unable to find node on an unmounted component.");
          }

          if (a["return"] !== b["return"]) {
            a = parentA;
            b = parentB;
          } else {
            var didFindChild = false;
            var _child = parentA.child;

            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentA;
                b = parentB;
                break;
              }

              if (_child === b) {
                didFindChild = true;
                b = parentA;
                a = parentB;
                break;
              }

              _child = _child.sibling;
            }

            if (!didFindChild) {
              _child = parentB.child;

              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentB;
                  b = parentA;
                  break;
                }

                if (_child === b) {
                  didFindChild = true;
                  b = parentB;
                  a = parentA;
                  break;
                }

                _child = _child.sibling;
              }

              invariant(didFindChild, "Child was not found in either parent set. This indicates a bug " + "in React related to the return pointer. Please file an issue.");
            }
          }

          invariant(a.alternate === b, "Return fibers should always be each others' alternates. " + "This error is likely caused by a bug in React. Please file an issue.");
        }

        invariant(a.tag === HostRoot, "Unable to find node on an unmounted component.");

        if (a.stateNode.current === a) {
          return fiber;
        }

        return alternate;
      }

      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);

        if (!currentParent) {
          return null;
        }

        var node = currentParent;

        while (true) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          } else if (node.child) {
            node.child["return"] = node;
            node = node.child;
            continue;
          }

          if (node === currentParent) {
            return null;
          }

          while (!node.sibling) {
            if (!node["return"] || node["return"] === currentParent) {
              return null;
            }

            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        }

        return null;
      }

      function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);

        if (!currentParent) {
          return null;
        }

        var node = currentParent;

        while (true) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          } else if (node.child && node.tag !== HostPortal) {
            node.child["return"] = node;
            node = node.child;
            continue;
          }

          if (node === currentParent) {
            return null;
          }

          while (!node.sibling) {
            if (!node["return"] || node["return"] === currentParent) {
              return null;
            }

            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        }

        return null;
      }

      var valueStack = [];
      {
        var fiberStack = [];
      }
      var index = -1;

      function createCursor(defaultValue) {
        return {
          current: defaultValue
        };
      }

      function pop(cursor, fiber) {
        if (index < 0) {
          {
            warning(false, "Unexpected pop.");
          }
          return;
        }

        {
          if (fiber !== fiberStack[index]) {
            warning(false, "Unexpected Fiber popped.");
          }
        }
        cursor.current = valueStack[index];
        valueStack[index] = null;
        {
          fiberStack[index] = null;
        }
        index--;
      }

      function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        {
          fiberStack[index] = fiber;
        }
        cursor.current = value;
      }

      function reset() {
        while (index > -1) {
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
      }

      var describeComponentFrame = function describeComponentFrame(name, source, ownerName) {
        return "\n    in " + (name || "Unknown") + (source ? " (at " + source.fileName.replace(/^.*[\\\/]/, "") + ":" + source.lineNumber + ")" : ownerName ? " (created by " + ownerName + ")" : "");
      };

      function describeFiber(fiber) {
        switch (fiber.tag) {
          case IndeterminateComponent:
          case FunctionalComponent:
          case ClassComponent:
          case HostComponent:
            var owner = fiber._debugOwner;
            var source = fiber._debugSource;
            var name = getComponentName(fiber);
            var ownerName = null;

            if (owner) {
              ownerName = getComponentName(owner);
            }

            return describeComponentFrame(name, source, ownerName);

          default:
            return "";
        }
      }

      function getStackAddendumByWorkInProgressFiber(workInProgress) {
        var info = "";
        var node = workInProgress;

        do {
          info += describeFiber(node);
          node = node["return"];
        } while (node);

        return info;
      }

      function getCurrentFiberOwnerName() {
        {
          var fiber = ReactDebugCurrentFiber.current;

          if (fiber === null) {
            return null;
          }

          var owner = fiber._debugOwner;

          if (owner !== null && typeof owner !== "undefined") {
            return getComponentName(owner);
          }
        }
        return null;
      }

      function getCurrentFiberStackAddendum() {
        {
          var fiber = ReactDebugCurrentFiber.current;

          if (fiber === null) {
            return null;
          }

          return getStackAddendumByWorkInProgressFiber(fiber);
        }
        return null;
      }

      function resetCurrentFiber() {
        ReactDebugCurrentFrame.getCurrentStack = null;
        ReactDebugCurrentFiber.current = null;
        ReactDebugCurrentFiber.phase = null;
      }

      function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackAddendum;
        ReactDebugCurrentFiber.current = fiber;
        ReactDebugCurrentFiber.phase = null;
      }

      function setCurrentPhase(phase) {
        ReactDebugCurrentFiber.phase = phase;
      }

      var ReactDebugCurrentFiber = {
        current: null,
        phase: null,
        resetCurrentFiber: resetCurrentFiber,
        setCurrentFiber: setCurrentFiber,
        setCurrentPhase: setCurrentPhase,
        getCurrentFiberOwnerName: getCurrentFiberOwnerName,
        getCurrentFiberStackAddendum: getCurrentFiberStackAddendum
      };
      var reactEmoji = "\u269B";
      var warningEmoji = "\u26D4";
      var supportsUserTiming = typeof performance !== "undefined" && typeof performance.mark === "function" && typeof performance.clearMarks === "function" && typeof performance.measure === "function" && typeof performance.clearMeasures === "function";
      var currentFiber = null;
      var currentPhase = null;
      var currentPhaseFiber = null;
      var isCommitting = false;
      var hasScheduledUpdateInCurrentCommit = false;
      var hasScheduledUpdateInCurrentPhase = false;
      var commitCountInCurrentWorkLoop = 0;
      var effectCountInCurrentCommit = 0;
      var isWaitingForCallback = false;
      var labelsInCurrentCommit = new Set();

      var formatMarkName = function formatMarkName(markName) {
        return reactEmoji + " " + markName;
      };

      var formatLabel = function formatLabel(label, warning$$1) {
        var prefix = warning$$1 ? warningEmoji + " " : reactEmoji + " ";
        var suffix = warning$$1 ? " Warning: " + warning$$1 : "";
        return "" + prefix + label + suffix;
      };

      var beginMark = function beginMark(markName) {
        performance.mark(formatMarkName(markName));
      };

      var clearMark = function clearMark(markName) {
        performance.clearMarks(formatMarkName(markName));
      };

      var endMark = function endMark(label, markName, warning$$1) {
        var formattedMarkName = formatMarkName(markName);
        var formattedLabel = formatLabel(label, warning$$1);

        try {
          performance.measure(formattedLabel, formattedMarkName);
        } catch (err) {}

        performance.clearMarks(formattedMarkName);
        performance.clearMeasures(formattedLabel);
      };

      var getFiberMarkName = function getFiberMarkName(label, debugID) {
        return label + " (#" + debugID + ")";
      };

      var getFiberLabel = function getFiberLabel(componentName, isMounted, phase) {
        if (phase === null) {
          return componentName + " [" + (isMounted ? "update" : "mount") + "]";
        } else {
          return componentName + "." + phase;
        }
      };

      var beginFiberMark = function beginFiberMark(fiber, phase) {
        var componentName = getComponentName(fiber) || "Unknown";
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);

        if (isCommitting && labelsInCurrentCommit.has(label)) {
          return false;
        }

        labelsInCurrentCommit.add(label);
        var markName = getFiberMarkName(label, debugID);
        beginMark(markName);
        return true;
      };

      var clearFiberMark = function clearFiberMark(fiber, phase) {
        var componentName = getComponentName(fiber) || "Unknown";
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);
        var markName = getFiberMarkName(label, debugID);
        clearMark(markName);
      };

      var endFiberMark = function endFiberMark(fiber, phase, warning$$1) {
        var componentName = getComponentName(fiber) || "Unknown";
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);
        var markName = getFiberMarkName(label, debugID);
        endMark(label, markName, warning$$1);
      };

      var shouldIgnoreFiber = function shouldIgnoreFiber(fiber) {
        switch (fiber.tag) {
          case HostRoot:
          case HostComponent:
          case HostText:
          case HostPortal:
          case ReturnComponent:
          case Fragment:
            return true;

          default:
            return false;
        }
      };

      var clearPendingPhaseMeasurement = function clearPendingPhaseMeasurement() {
        if (currentPhase !== null && currentPhaseFiber !== null) {
          clearFiberMark(currentPhaseFiber, currentPhase);
        }

        currentPhaseFiber = null;
        currentPhase = null;
        hasScheduledUpdateInCurrentPhase = false;
      };

      var pauseTimers = function pauseTimers() {
        var fiber = currentFiber;

        while (fiber) {
          if (fiber._debugIsCurrentlyTiming) {
            endFiberMark(fiber, null, null);
          }

          fiber = fiber["return"];
        }
      };

      var resumeTimersRecursively = function resumeTimersRecursively(fiber) {
        if (fiber["return"] !== null) {
          resumeTimersRecursively(fiber["return"]);
        }

        if (fiber._debugIsCurrentlyTiming) {
          beginFiberMark(fiber, null);
        }
      };

      var resumeTimers = function resumeTimers() {
        if (currentFiber !== null) {
          resumeTimersRecursively(currentFiber);
        }
      };

      function recordEffect() {
        if (enableUserTimingAPI) {
          effectCountInCurrentCommit++;
        }
      }

      function recordScheduleUpdate() {
        if (enableUserTimingAPI) {
          if (isCommitting) {
            hasScheduledUpdateInCurrentCommit = true;
          }

          if (currentPhase !== null && currentPhase !== "componentWillMount" && currentPhase !== "componentWillReceiveProps") {
            hasScheduledUpdateInCurrentPhase = true;
          }
        }
      }

      function startRequestCallbackTimer() {
        if (enableUserTimingAPI) {
          if (supportsUserTiming && !isWaitingForCallback) {
            isWaitingForCallback = true;
            beginMark("(Waiting for async callback...)");
          }
        }
      }

      function stopRequestCallbackTimer(didExpire) {
        if (enableUserTimingAPI) {
          if (supportsUserTiming) {
            isWaitingForCallback = false;
            var warning$$1 = didExpire ? "React was blocked by main thread" : null;
            endMark("(Waiting for async callback...)", "(Waiting for async callback...)", warning$$1);
          }
        }
      }

      function startWorkTimer(fiber) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          currentFiber = fiber;

          if (!beginFiberMark(fiber, null)) {
            return;
          }

          fiber._debugIsCurrentlyTiming = true;
        }
      }

      function cancelWorkTimer(fiber) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          fiber._debugIsCurrentlyTiming = false;
          clearFiberMark(fiber, null);
        }
      }

      function stopWorkTimer(fiber) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          currentFiber = fiber["return"];

          if (!fiber._debugIsCurrentlyTiming) {
            return;
          }

          fiber._debugIsCurrentlyTiming = false;
          endFiberMark(fiber, null, null);
        }
      }

      function stopFailedWorkTimer(fiber) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          currentFiber = fiber["return"];

          if (!fiber._debugIsCurrentlyTiming) {
            return;
          }

          fiber._debugIsCurrentlyTiming = false;
          var warning$$1 = "An error was thrown inside this error boundary";
          endFiberMark(fiber, null, warning$$1);
        }
      }

      function startPhaseTimer(fiber, phase) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          clearPendingPhaseMeasurement();

          if (!beginFiberMark(fiber, phase)) {
            return;
          }

          currentPhaseFiber = fiber;
          currentPhase = phase;
        }
      }

      function stopPhaseTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          if (currentPhase !== null && currentPhaseFiber !== null) {
            var warning$$1 = hasScheduledUpdateInCurrentPhase ? "Scheduled a cascading update" : null;
            endFiberMark(currentPhaseFiber, currentPhase, warning$$1);
          }

          currentPhase = null;
          currentPhaseFiber = null;
        }
      }

      function startWorkLoopTimer(nextUnitOfWork) {
        if (enableUserTimingAPI) {
          currentFiber = nextUnitOfWork;

          if (!supportsUserTiming) {
            return;
          }

          commitCountInCurrentWorkLoop = 0;
          beginMark("(React Tree Reconciliation)");
          resumeTimers();
        }
      }

      function stopWorkLoopTimer(interruptedBy) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          var warning$$1 = null;

          if (interruptedBy !== null) {
            if (interruptedBy.tag === HostRoot) {
              warning$$1 = "A top-level update interrupted the previous render";
            } else {
              var componentName = getComponentName(interruptedBy) || "Unknown";
              warning$$1 = "An update to " + componentName + " interrupted the previous render";
            }
          } else if (commitCountInCurrentWorkLoop > 1) {
            warning$$1 = "There were cascading updates";
          }

          commitCountInCurrentWorkLoop = 0;
          pauseTimers();
          endMark("(React Tree Reconciliation)", "(React Tree Reconciliation)", warning$$1);
        }
      }

      function startCommitTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          isCommitting = true;
          hasScheduledUpdateInCurrentCommit = false;
          labelsInCurrentCommit.clear();
          beginMark("(Committing Changes)");
        }
      }

      function stopCommitTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          var warning$$1 = null;

          if (hasScheduledUpdateInCurrentCommit) {
            warning$$1 = "Lifecycle hook scheduled a cascading update";
          } else if (commitCountInCurrentWorkLoop > 0) {
            warning$$1 = "Caused by a cascading update in earlier commit";
          }

          hasScheduledUpdateInCurrentCommit = false;
          commitCountInCurrentWorkLoop++;
          isCommitting = false;
          labelsInCurrentCommit.clear();
          endMark("(Committing Changes)", "(Committing Changes)", warning$$1);
        }
      }

      function startCommitHostEffectsTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          effectCountInCurrentCommit = 0;
          beginMark("(Committing Host Effects)");
        }
      }

      function stopCommitHostEffectsTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          var count = effectCountInCurrentCommit;
          effectCountInCurrentCommit = 0;
          endMark("(Committing Host Effects: " + count + " Total)", "(Committing Host Effects)", null);
        }
      }

      function startCommitLifeCyclesTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          effectCountInCurrentCommit = 0;
          beginMark("(Calling Lifecycle Methods)");
        }
      }

      function stopCommitLifeCyclesTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          var count = effectCountInCurrentCommit;
          effectCountInCurrentCommit = 0;
          endMark("(Calling Lifecycle Methods: " + count + " Total)", "(Calling Lifecycle Methods)", null);
        }
      }

      {
        var warnedAboutMissingGetChildContext = {};
      }
      var contextStackCursor = createCursor(emptyObject);
      var didPerformWorkStackCursor = createCursor(false);
      var previousContext = emptyObject;

      function getUnmaskedContext(workInProgress) {
        var hasOwnContext = isContextProvider(workInProgress);

        if (hasOwnContext) {
          return previousContext;
        }

        return contextStackCursor.current;
      }

      function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
      }

      function getMaskedContext(workInProgress, unmaskedContext) {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;

        if (!contextTypes) {
          return emptyObject;
        }

        var instance = workInProgress.stateNode;

        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
          return instance.__reactInternalMemoizedMaskedChildContext;
        }

        var context = {};

        for (var key in contextTypes) {
          context[key] = unmaskedContext[key];
        }

        {
          var name = getComponentName(workInProgress) || "Unknown";
          checkPropTypes(contextTypes, context, "context", name, ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
        }

        if (instance) {
          cacheContext(workInProgress, unmaskedContext, context);
        }

        return context;
      }

      function hasContextChanged() {
        return didPerformWorkStackCursor.current;
      }

      function isContextConsumer(fiber) {
        return fiber.tag === ClassComponent && fiber.type.contextTypes != null;
      }

      function isContextProvider(fiber) {
        return fiber.tag === ClassComponent && fiber.type.childContextTypes != null;
      }

      function popContextProvider(fiber) {
        if (!isContextProvider(fiber)) {
          return;
        }

        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
      }

      function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
      }

      function pushTopLevelContextObject(fiber, context, didChange) {
        invariant(contextStackCursor.cursor == null, "Unexpected context found on stack. " + "This error is likely caused by a bug in React. Please file an issue.");
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
      }

      function processChildContext(fiber, parentContext) {
        var instance = fiber.stateNode;
        var childContextTypes = fiber.type.childContextTypes;

        if (typeof instance.getChildContext !== "function") {
          {
            var componentName = getComponentName(fiber) || "Unknown";

            if (!warnedAboutMissingGetChildContext[componentName]) {
              warnedAboutMissingGetChildContext[componentName] = true;
              warning(false, "%s.childContextTypes is specified but there is no getChildContext() method " + "on the instance. You can either define getChildContext() on %s or remove " + "childContextTypes from it.", componentName, componentName);
            }
          }
          return parentContext;
        }

        var childContext = void 0;
        {
          ReactDebugCurrentFiber.setCurrentPhase("getChildContext");
        }
        startPhaseTimer(fiber, "getChildContext");
        childContext = instance.getChildContext();
        stopPhaseTimer();
        {
          ReactDebugCurrentFiber.setCurrentPhase(null);
        }

        for (var contextKey in childContext) {
          invariant(contextKey in childContextTypes, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(fiber) || "Unknown", contextKey);
        }

        {
          var name = getComponentName(fiber) || "Unknown";
          checkPropTypes(childContextTypes, childContext, "child context", name, ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
        }
        return babelHelpers.extends({}, parentContext, childContext);
      }

      function pushContextProvider(workInProgress) {
        if (!isContextProvider(workInProgress)) {
          return false;
        }

        var instance = workInProgress.stateNode;
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject;
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
      }

      function invalidateContextProvider(workInProgress, didChange) {
        var instance = workInProgress.stateNode;
        invariant(instance, "Expected to have an instance by this point. " + "This error is likely caused by a bug in React. Please file an issue.");

        if (didChange) {
          var mergedContext = processChildContext(workInProgress, previousContext);
          instance.__reactInternalMemoizedMergedChildContext = mergedContext;
          pop(didPerformWorkStackCursor, workInProgress);
          pop(contextStackCursor, workInProgress);
          push(contextStackCursor, mergedContext, workInProgress);
          push(didPerformWorkStackCursor, didChange, workInProgress);
        } else {
          pop(didPerformWorkStackCursor, workInProgress);
          push(didPerformWorkStackCursor, didChange, workInProgress);
        }
      }

      function resetContext() {
        previousContext = emptyObject;
        contextStackCursor.current = emptyObject;
        didPerformWorkStackCursor.current = false;
      }

      function findCurrentUnmaskedContext(fiber) {
        invariant(isFiberMounted(fiber) && fiber.tag === ClassComponent, "Expected subtree parent to be a mounted class component. " + "This error is likely caused by a bug in React. Please file an issue.");
        var node = fiber;

        while (node.tag !== HostRoot) {
          if (isContextProvider(node)) {
            return node.stateNode.__reactInternalMemoizedMergedChildContext;
          }

          var parent = node["return"];
          invariant(parent, "Found unexpected detached subtree parent. " + "This error is likely caused by a bug in React. Please file an issue.");
          node = parent;
        }

        return node.stateNode.context;
      }

      var NoWork = 0;
      var Sync = 1;
      var Never = 2147483647;
      var UNIT_SIZE = 10;
      var MAGIC_NUMBER_OFFSET = 2;

      function msToExpirationTime(ms) {
        return (ms / UNIT_SIZE | 0) + MAGIC_NUMBER_OFFSET;
      }

      function expirationTimeToMs(expirationTime) {
        return (expirationTime - MAGIC_NUMBER_OFFSET) * UNIT_SIZE;
      }

      function ceiling(num, precision) {
        return ((num / precision | 0) + 1) * precision;
      }

      function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
        return ceiling(currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
      }

      var NoContext = 0;
      var AsyncUpdates = 1;
      {
        var hasBadMapPolyfill = false;

        try {
          var nonExtensibleObject = Object.preventExtensions({});
          new Map([[nonExtensibleObject, null]]);
          new Set([nonExtensibleObject]);
        } catch (e) {
          hasBadMapPolyfill = true;
        }
      }
      {
        var debugCounter = 1;
      }

      function FiberNode(tag, pendingProps, key, internalContextTag) {
        this.tag = tag;
        this.key = key;
        this.type = null;
        this.stateNode = null;
        this["return"] = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.internalContextTag = internalContextTag;
        this.effectTag = NoEffect;
        this.nextEffect = null;
        this.firstEffect = null;
        this.lastEffect = null;
        this.expirationTime = NoWork;
        this.alternate = null;
        {
          this._debugID = debugCounter++;
          this._debugSource = null;
          this._debugOwner = null;
          this._debugIsCurrentlyTiming = false;

          if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
            Object.preventExtensions(this);
          }
        }
      }

      var createFiber = function createFiber(tag, pendingProps, key, internalContextTag) {
        return new FiberNode(tag, pendingProps, key, internalContextTag);
      };

      function shouldConstruct(Component) {
        return !!(Component.prototype && Component.prototype.isReactComponent);
      }

      function createWorkInProgress(current, pendingProps, expirationTime) {
        var workInProgress = current.alternate;

        if (workInProgress === null) {
          workInProgress = createFiber(current.tag, pendingProps, current.key, current.internalContextTag);
          workInProgress.type = current.type;
          workInProgress.stateNode = current.stateNode;
          {
            workInProgress._debugID = current._debugID;
            workInProgress._debugSource = current._debugSource;
            workInProgress._debugOwner = current._debugOwner;
          }
          workInProgress.alternate = current;
          current.alternate = workInProgress;
        } else {
          workInProgress.pendingProps = pendingProps;
          workInProgress.effectTag = NoEffect;
          workInProgress.nextEffect = null;
          workInProgress.firstEffect = null;
          workInProgress.lastEffect = null;
        }

        workInProgress.expirationTime = expirationTime;
        workInProgress.child = current.child;
        workInProgress.memoizedProps = current.memoizedProps;
        workInProgress.memoizedState = current.memoizedState;
        workInProgress.updateQueue = current.updateQueue;
        workInProgress.sibling = current.sibling;
        workInProgress.index = current.index;
        workInProgress.ref = current.ref;
        return workInProgress;
      }

      function createHostRootFiber() {
        var fiber = createFiber(HostRoot, null, NoContext);
        return fiber;
      }

      function createFiberFromElement(element, internalContextTag, expirationTime) {
        var owner = null;
        {
          owner = element._owner;
        }
        var fiber = void 0;
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;

        if (typeof type === "function") {
          fiber = shouldConstruct(type) ? createFiber(ClassComponent, pendingProps, key, internalContextTag) : createFiber(IndeterminateComponent, pendingProps, key, internalContextTag);
          fiber.type = type;
        } else if (typeof type === "string") {
          fiber = createFiber(HostComponent, pendingProps, key, internalContextTag);
          fiber.type = type;
        } else if (typeof type === "object" && type !== null && typeof type.tag === "number") {
          fiber = type;
          fiber.pendingProps = pendingProps;
        } else {
          var info = "";
          {
            if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file " + "it's defined in, or you might have mixed up default and named imports.";
            }

            var ownerName = owner ? getComponentName(owner) : null;

            if (ownerName) {
              info += "\n\nCheck the render method of `" + ownerName + "`.";
            }
          }
          invariant(false, "Element type is invalid: expected a string (for built-in components) " + "or a class/function (for composite components) but got: %s.%s", type == null ? type : typeof type, info);
        }

        {
          fiber._debugSource = element._source;
          fiber._debugOwner = element._owner;
        }
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromFragment(elements, internalContextTag, expirationTime, key) {
        var fiber = createFiber(Fragment, elements, key, internalContextTag);
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromText(content, internalContextTag, expirationTime) {
        var fiber = createFiber(HostText, content, null, internalContextTag);
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoContext);
        fiber.type = "DELETED";
        return fiber;
      }

      function createFiberFromCall(call, internalContextTag, expirationTime) {
        var fiber = createFiber(CallComponent, call, call.key, internalContextTag);
        fiber.type = call.handler;
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromReturn(returnNode, internalContextTag, expirationTime) {
        var fiber = createFiber(ReturnComponent, null, null, internalContextTag);
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromPortal(portal, internalContextTag, expirationTime) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, internalContextTag);
        fiber.expirationTime = expirationTime;
        fiber.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          implementation: portal.implementation
        };
        return fiber;
      }

      function createFiberRoot(containerInfo, hydrate) {
        var uninitializedFiber = createHostRootFiber();
        var root = {
          current: uninitializedFiber,
          containerInfo: containerInfo,
          pendingChildren: null,
          remainingExpirationTime: NoWork,
          isReadyForCommit: false,
          finishedWork: null,
          context: null,
          pendingContext: null,
          hydrate: hydrate,
          firstBatch: null,
          nextScheduledRoot: null
        };
        uninitializedFiber.stateNode = root;
        return root;
      }

      var onCommitFiberRoot = null;
      var onCommitFiberUnmount = null;
      var hasLoggedError = false;

      function catchErrors(fn) {
        return function (arg) {
          try {
            return fn(arg);
          } catch (err) {
            if (true && !hasLoggedError) {
              hasLoggedError = true;
              warning(false, "React DevTools encountered an error: %s", err);
            }
          }
        };
      }

      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
          return false;
        }

        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

        if (hook.isDisabled) {
          return true;
        }

        if (!hook.supportsFiber) {
          {
            warning(false, "The installed version of React DevTools is too old and will not work " + "with the current version of React. Please update React DevTools. " + "https://fb.me/react-devtools");
          }
          return true;
        }

        try {
          var rendererID = hook.inject(internals);
          onCommitFiberRoot = catchErrors(function (root) {
            return hook.onCommitFiberRoot(rendererID, root);
          });
          onCommitFiberUnmount = catchErrors(function (fiber) {
            return hook.onCommitFiberUnmount(rendererID, fiber);
          });
        } catch (err) {
          {
            warning(false, "React DevTools encountered an error: %s.", err);
          }
        }

        return true;
      }

      function onCommitRoot(root) {
        if (typeof onCommitFiberRoot === "function") {
          onCommitFiberRoot(root);
        }
      }

      function onCommitUnmount(fiber) {
        if (typeof onCommitFiberUnmount === "function") {
          onCommitFiberUnmount(fiber);
        }
      }

      {
        var didWarnUpdateInsideUpdate = false;
      }

      function createUpdateQueue(baseState) {
        var queue = {
          baseState: baseState,
          expirationTime: NoWork,
          first: null,
          last: null,
          callbackList: null,
          hasForceUpdate: false,
          isInitialized: false
        };
        {
          queue.isProcessing = false;
        }
        return queue;
      }

      function insertUpdateIntoQueue(queue, update) {
        if (queue.last === null) {
          queue.first = queue.last = update;
        } else {
          queue.last.next = update;
          queue.last = update;
        }

        if (queue.expirationTime === NoWork || queue.expirationTime > update.expirationTime) {
          queue.expirationTime = update.expirationTime;
        }
      }

      function insertUpdateIntoFiber(fiber, update) {
        var alternateFiber = fiber.alternate;
        var queue1 = fiber.updateQueue;

        if (queue1 === null) {
          queue1 = fiber.updateQueue = createUpdateQueue(null);
        }

        var queue2 = void 0;

        if (alternateFiber !== null) {
          queue2 = alternateFiber.updateQueue;

          if (queue2 === null) {
            queue2 = alternateFiber.updateQueue = createUpdateQueue(null);
          }
        } else {
          queue2 = null;
        }

        queue2 = queue2 !== queue1 ? queue2 : null;
        {
          if ((queue1.isProcessing || queue2 !== null && queue2.isProcessing) && !didWarnUpdateInsideUpdate) {
            warning(false, "An update (setState, replaceState, or forceUpdate) was scheduled " + "from inside an update function. Update functions should be pure, " + "with zero side-effects. Consider using componentDidUpdate or a " + "callback.");
            didWarnUpdateInsideUpdate = true;
          }
        }

        if (queue2 === null) {
          insertUpdateIntoQueue(queue1, update);
          return;
        }

        if (queue1.last === null || queue2.last === null) {
          insertUpdateIntoQueue(queue1, update);
          insertUpdateIntoQueue(queue2, update);
          return;
        }

        insertUpdateIntoQueue(queue1, update);
        queue2.last = update;
      }

      function getUpdateExpirationTime(fiber) {
        if (fiber.tag !== ClassComponent && fiber.tag !== HostRoot) {
          return NoWork;
        }

        var updateQueue = fiber.updateQueue;

        if (updateQueue === null) {
          return NoWork;
        }

        return updateQueue.expirationTime;
      }

      function getStateFromUpdate(update, instance, prevState, props) {
        var partialState = update.partialState;

        if (typeof partialState === "function") {
          var updateFn = partialState;

          if (debugRenderPhaseSideEffects) {
            updateFn.call(instance, prevState, props);
          }

          return updateFn.call(instance, prevState, props);
        } else {
          return partialState;
        }
      }

      function processUpdateQueue(current, workInProgress, queue, instance, props, renderExpirationTime) {
        if (current !== null && current.updateQueue === queue) {
          var currentQueue = queue;
          queue = workInProgress.updateQueue = {
            baseState: currentQueue.baseState,
            expirationTime: currentQueue.expirationTime,
            first: currentQueue.first,
            last: currentQueue.last,
            isInitialized: currentQueue.isInitialized,
            callbackList: null,
            hasForceUpdate: false
          };
        }

        {
          queue.isProcessing = true;
        }
        queue.expirationTime = NoWork;
        var state = void 0;

        if (queue.isInitialized) {
          state = queue.baseState;
        } else {
          state = queue.baseState = workInProgress.memoizedState;
          queue.isInitialized = true;
        }

        var dontMutatePrevState = true;
        var update = queue.first;
        var didSkip = false;

        while (update !== null) {
          var updateExpirationTime = update.expirationTime;

          if (updateExpirationTime > renderExpirationTime) {
            var remainingExpirationTime = queue.expirationTime;

            if (remainingExpirationTime === NoWork || remainingExpirationTime > updateExpirationTime) {
              queue.expirationTime = updateExpirationTime;
            }

            if (!didSkip) {
              didSkip = true;
              queue.baseState = state;
            }

            update = update.next;
            continue;
          }

          if (!didSkip) {
            queue.first = update.next;

            if (queue.first === null) {
              queue.last = null;
            }
          }

          var _partialState = void 0;

          if (update.isReplace) {
            state = getStateFromUpdate(update, instance, state, props);
            dontMutatePrevState = true;
          } else {
            _partialState = getStateFromUpdate(update, instance, state, props);

            if (_partialState) {
              if (dontMutatePrevState) {
                state = babelHelpers.extends({}, state, _partialState);
              } else {
                state = babelHelpers.extends(state, _partialState);
              }

              dontMutatePrevState = false;
            }
          }

          if (update.isForced) {
            queue.hasForceUpdate = true;
          }

          if (update.callback !== null) {
            var _callbackList = queue.callbackList;

            if (_callbackList === null) {
              _callbackList = queue.callbackList = [];
            }

            _callbackList.push(update);
          }

          update = update.next;
        }

        if (queue.callbackList !== null) {
          workInProgress.effectTag |= Callback;
        } else if (queue.first === null && !queue.hasForceUpdate) {
          workInProgress.updateQueue = null;
        }

        if (!didSkip) {
          didSkip = true;
          queue.baseState = state;
        }

        {
          queue.isProcessing = false;
        }
        return state;
      }

      function commitCallbacks(queue, context) {
        var callbackList = queue.callbackList;

        if (callbackList === null) {
          return;
        }

        queue.callbackList = null;

        for (var i = 0; i < callbackList.length; i++) {
          var update = callbackList[i];
          var _callback = update.callback;
          update.callback = null;
          invariant(typeof _callback === "function", "Invalid argument passed as callback. Expected a function. Instead " + "received: %s", _callback);

          _callback.call(context);
        }
      }

      var fakeInternalInstance = {};
      var isArray = Array.isArray;
      {
        var didWarnAboutStateAssignmentForComponent = {};

        var warnOnInvalidCallback = function warnOnInvalidCallback(callback, callerName) {
          warning(callback === null || typeof callback === "function", "%s(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callerName, callback);
        };

        Object.defineProperty(fakeInternalInstance, "_processChildContext", {
          enumerable: false,
          value: function value() {
            invariant(false, "_processChildContext is not available in React 16+. This likely " + "means you have multiple copies of React and are attempting to nest " + "a React 15 tree inside a React 16 tree using " + "unstable_renderSubtreeIntoContainer, which isn't supported. Try " + "to make sure you have only one copy of React (and ideally, switch " + "to ReactDOM.createPortal).");
          }
        });
        Object.freeze(fakeInternalInstance);
      }

      var ReactFiberClassComponent = function ReactFiberClassComponent(scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState) {
        var updater = {
          isMounted: isMounted,
          enqueueSetState: function enqueueSetState(instance, partialState, callback) {
            var fiber = get(instance);
            callback = callback === undefined ? null : callback;
            {
              warnOnInvalidCallback(callback, "setState");
            }
            var expirationTime = computeExpirationForFiber(fiber);
            var update = {
              expirationTime: expirationTime,
              partialState: partialState,
              callback: callback,
              isReplace: false,
              isForced: false,
              nextCallback: null,
              next: null
            };
            insertUpdateIntoFiber(fiber, update);
            scheduleWork(fiber, expirationTime);
          },
          enqueueReplaceState: function enqueueReplaceState(instance, state, callback) {
            var fiber = get(instance);
            callback = callback === undefined ? null : callback;
            {
              warnOnInvalidCallback(callback, "replaceState");
            }
            var expirationTime = computeExpirationForFiber(fiber);
            var update = {
              expirationTime: expirationTime,
              partialState: state,
              callback: callback,
              isReplace: true,
              isForced: false,
              nextCallback: null,
              next: null
            };
            insertUpdateIntoFiber(fiber, update);
            scheduleWork(fiber, expirationTime);
          },
          enqueueForceUpdate: function enqueueForceUpdate(instance, callback) {
            var fiber = get(instance);
            callback = callback === undefined ? null : callback;
            {
              warnOnInvalidCallback(callback, "forceUpdate");
            }
            var expirationTime = computeExpirationForFiber(fiber);
            var update = {
              expirationTime: expirationTime,
              partialState: null,
              callback: callback,
              isReplace: false,
              isForced: true,
              nextCallback: null,
              next: null
            };
            insertUpdateIntoFiber(fiber, update);
            scheduleWork(fiber, expirationTime);
          }
        };

        function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {
          if (oldProps === null || workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate) {
            return true;
          }

          var instance = workInProgress.stateNode;
          var type = workInProgress.type;

          if (typeof instance.shouldComponentUpdate === "function") {
            startPhaseTimer(workInProgress, "shouldComponentUpdate");
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, newContext);
            stopPhaseTimer();

            if (debugRenderPhaseSideEffects) {
              instance.shouldComponentUpdate(newProps, newState, newContext);
            }

            {
              warning(shouldUpdate !== undefined, "%s.shouldComponentUpdate(): Returned undefined instead of a " + "boolean value. Make sure to return true or false.", getComponentName(workInProgress) || "Unknown");
            }
            return shouldUpdate;
          }

          if (type.prototype && type.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }

          return true;
        }

        function checkClassInstance(workInProgress) {
          var instance = workInProgress.stateNode;
          var type = workInProgress.type;
          {
            var name = getComponentName(workInProgress);
            var renderPresent = instance.render;

            if (!renderPresent) {
              if (type.prototype && typeof type.prototype.render === "function") {
                warning(false, "%s(...): No `render` method found on the returned component " + "instance: did you accidentally return an object from the constructor?", name);
              } else {
                warning(false, "%s(...): No `render` method found on the returned component " + "instance: you may have forgotten to define `render`.", name);
              }
            }

            var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
            warning(noGetInitialStateOnES6, "getInitialState was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Did you mean to define a state property instead?", name);
            var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
            warning(noGetDefaultPropsOnES6, "getDefaultProps was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Use a static property to define defaultProps instead.", name);
            var noInstancePropTypes = !instance.propTypes;
            warning(noInstancePropTypes, "propTypes was defined as an instance property on %s. Use a static " + "property to define propTypes instead.", name);
            var noInstanceContextTypes = !instance.contextTypes;
            warning(noInstanceContextTypes, "contextTypes was defined as an instance property on %s. Use a static " + "property to define contextTypes instead.", name);
            var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== "function";
            warning(noComponentShouldUpdate, "%s has a method called " + "componentShouldUpdate(). Did you mean shouldComponentUpdate()? " + "The name is phrased as a question because the function is " + "expected to return a value.", name);

            if (type.prototype && type.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              warning(false, "%s has a method called shouldComponentUpdate(). " + "shouldComponentUpdate should not be used when extending React.PureComponent. " + "Please extend React.Component if shouldComponentUpdate is used.", getComponentName(workInProgress) || "A pure component");
            }

            var noComponentDidUnmount = typeof instance.componentDidUnmount !== "function";
            warning(noComponentDidUnmount, "%s has a method called " + "componentDidUnmount(). But there is no such lifecycle method. " + "Did you mean componentWillUnmount()?", name);
            var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== "function";
            warning(noComponentDidReceiveProps, "%s has a method called " + "componentDidReceiveProps(). But there is no such lifecycle method. " + "If you meant to update the state in response to changing props, " + "use componentWillReceiveProps(). If you meant to fetch data or " + "run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== "function";
            warning(noComponentWillRecieveProps, "%s has a method called " + "componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            var hasMutatedProps = instance.props !== workInProgress.pendingProps;
            warning(instance.props === undefined || !hasMutatedProps, "%s(...): When calling super() in `%s`, make sure to pass " + "up the same props that your component's constructor was passed.", name, name);
            var noInstanceDefaultProps = !instance.defaultProps;
            warning(noInstanceDefaultProps, "Setting defaultProps as an instance property on %s is not supported and will be ignored." + " Instead, define defaultProps as a static property on %s.", name, name);
          }
          var state = instance.state;

          if (state && (typeof state !== "object" || isArray(state))) {
            warning(false, "%s.state: must be set to an object or null", getComponentName(workInProgress));
          }

          if (typeof instance.getChildContext === "function") {
            warning(typeof workInProgress.type.childContextTypes === "object", "%s.getChildContext(): childContextTypes must be defined in order to " + "use getChildContext().", getComponentName(workInProgress));
          }
        }

        function resetInputPointers(workInProgress, instance) {
          instance.props = workInProgress.memoizedProps;
          instance.state = workInProgress.memoizedState;
        }

        function adoptClassInstance(workInProgress, instance) {
          instance.updater = updater;
          workInProgress.stateNode = instance;
          set(instance, workInProgress);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }

        function constructClassInstance(workInProgress, props) {
          var ctor = workInProgress.type;
          var unmaskedContext = getUnmaskedContext(workInProgress);
          var needsContext = isContextConsumer(workInProgress);
          var context = needsContext ? getMaskedContext(workInProgress, unmaskedContext) : emptyObject;
          var instance = new ctor(props, context);
          adoptClassInstance(workInProgress, instance);

          if (needsContext) {
            cacheContext(workInProgress, unmaskedContext, context);
          }

          return instance;
        }

        function callComponentWillMount(workInProgress, instance) {
          startPhaseTimer(workInProgress, "componentWillMount");
          var oldState = instance.state;
          instance.componentWillMount();
          stopPhaseTimer();

          if (debugRenderPhaseSideEffects) {
            instance.componentWillMount();
          }

          if (oldState !== instance.state) {
            {
              warning(false, "%s.componentWillMount(): Assigning directly to this.state is " + "deprecated (except inside a component's " + "constructor). Use setState instead.", getComponentName(workInProgress));
            }
            updater.enqueueReplaceState(instance, instance.state, null);
          }
        }

        function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {
          startPhaseTimer(workInProgress, "componentWillReceiveProps");
          var oldState = instance.state;
          instance.componentWillReceiveProps(newProps, newContext);
          stopPhaseTimer();

          if (debugRenderPhaseSideEffects) {
            instance.componentWillReceiveProps(newProps, newContext);
          }

          if (instance.state !== oldState) {
            {
              var componentName = getComponentName(workInProgress) || "Component";

              if (!didWarnAboutStateAssignmentForComponent[componentName]) {
                warning(false, "%s.componentWillReceiveProps(): Assigning directly to " + "this.state is deprecated (except inside a component's " + "constructor). Use setState instead.", componentName);
                didWarnAboutStateAssignmentForComponent[componentName] = true;
              }
            }
            updater.enqueueReplaceState(instance, instance.state, null);
          }
        }

        function mountClassInstance(workInProgress, renderExpirationTime) {
          var current = workInProgress.alternate;
          {
            checkClassInstance(workInProgress);
          }
          var instance = workInProgress.stateNode;
          var state = instance.state || null;
          var props = workInProgress.pendingProps;
          var unmaskedContext = getUnmaskedContext(workInProgress);
          instance.props = props;
          instance.state = workInProgress.memoizedState = state;
          instance.refs = emptyObject;
          instance.context = getMaskedContext(workInProgress, unmaskedContext);

          if (enableAsyncSubtreeAPI && workInProgress.type != null && workInProgress.type.prototype != null && workInProgress.type.prototype.unstable_isAsyncReactComponent === true) {
            workInProgress.internalContextTag |= AsyncUpdates;
          }

          if (typeof instance.componentWillMount === "function") {
            callComponentWillMount(workInProgress, instance);
            var updateQueue = workInProgress.updateQueue;

            if (updateQueue !== null) {
              instance.state = processUpdateQueue(current, workInProgress, updateQueue, instance, props, renderExpirationTime);
            }
          }

          if (typeof instance.componentDidMount === "function") {
            workInProgress.effectTag |= Update;
          }
        }

        function updateClassInstance(current, workInProgress, renderExpirationTime) {
          var instance = workInProgress.stateNode;
          resetInputPointers(workInProgress, instance);
          var oldProps = workInProgress.memoizedProps;
          var newProps = workInProgress.pendingProps;
          var oldContext = instance.context;
          var newUnmaskedContext = getUnmaskedContext(workInProgress);
          var newContext = getMaskedContext(workInProgress, newUnmaskedContext);

          if (typeof instance.componentWillReceiveProps === "function" && (oldProps !== newProps || oldContext !== newContext)) {
            callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);
          }

          var oldState = workInProgress.memoizedState;
          var newState = void 0;

          if (workInProgress.updateQueue !== null) {
            newState = processUpdateQueue(current, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime);
          } else {
            newState = oldState;
          }

          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !(workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate)) {
            if (typeof instance.componentDidUpdate === "function") {
              if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                workInProgress.effectTag |= Update;
              }
            }

            return false;
          }

          var shouldUpdate = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);

          if (shouldUpdate) {
            if (typeof instance.componentWillUpdate === "function") {
              startPhaseTimer(workInProgress, "componentWillUpdate");
              instance.componentWillUpdate(newProps, newState, newContext);
              stopPhaseTimer();

              if (debugRenderPhaseSideEffects) {
                instance.componentWillUpdate(newProps, newState, newContext);
              }
            }

            if (typeof instance.componentDidUpdate === "function") {
              workInProgress.effectTag |= Update;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                workInProgress.effectTag |= Update;
              }
            }

            memoizeProps(workInProgress, newProps);
            memoizeState(workInProgress, newState);
          }

          instance.props = newProps;
          instance.state = newState;
          instance.context = newContext;
          return shouldUpdate;
        }

        return {
          adoptClassInstance: adoptClassInstance,
          constructClassInstance: constructClassInstance,
          mountClassInstance: mountClassInstance,
          updateClassInstance: updateClassInstance
        };
      };

      var getCurrentFiberStackAddendum$1 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;
      {
        var didWarnAboutMaps = false;
        var ownerHasKeyUseWarning = {};
        var ownerHasFunctionTypeWarning = {};

        var warnForMissingKey = function warnForMissingKey(child) {
          if (child === null || typeof child !== "object") {
            return;
          }

          if (!child._store || child._store.validated || child.key != null) {
            return;
          }

          invariant(typeof child._store === "object", "React Component in warnForMissingKey should have a _store. " + "This error is likely caused by a bug in React. Please file an issue.");
          child._store.validated = true;
          var currentComponentErrorInfo = "Each child in an array or iterator should have a unique " + '"key" prop. See https://fb.me/react-warning-keys for ' + "more information." + (getCurrentFiberStackAddendum$1() || "");

          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }

          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          warning(false, "Each child in an array or iterator should have a unique " + '"key" prop. See https://fb.me/react-warning-keys for ' + "more information.%s", getCurrentFiberStackAddendum$1());
        };
      }
      var isArray$1 = Array.isArray;

      function coerceRef(current, element) {
        var mixedRef = element.ref;

        if (mixedRef !== null && typeof mixedRef !== "function") {
          if (element._owner) {
            var owner = element._owner;
            var inst = void 0;

            if (owner) {
              var ownerFiber = owner;
              invariant(ownerFiber.tag === ClassComponent, "Stateless function components cannot have refs.");
              inst = ownerFiber.stateNode;
            }

            invariant(inst, "Missing owner for string ref %s. This error is likely caused by a " + "bug in React. Please file an issue.", mixedRef);
            var stringRef = "" + mixedRef;

            if (current !== null && current.ref !== null && current.ref._stringRef === stringRef) {
              return current.ref;
            }

            var ref = function ref(value) {
              var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;

              if (value === null) {
                delete refs[stringRef];
              } else {
                refs[stringRef] = value;
              }
            };

            ref._stringRef = stringRef;
            return ref;
          } else {
            invariant(typeof mixedRef === "string", "Expected ref to be a function or a string.");
            invariant(element._owner, "Element ref was specified as a string (%s) but no owner was " + "set. You may have multiple copies of React loaded. " + "(details: https://fb.me/react-refs-must-have-owner).", mixedRef);
          }
        }

        return mixedRef;
      }

      function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== "textarea") {
          var addendum = "";
          {
            addendum = " If you meant to render a collection of children, use an array " + "instead." + (getCurrentFiberStackAddendum$1() || "");
          }
          invariant(false, "Objects are not valid as a React child (found: %s).%s", Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild, addendum);
        }
      }

      function warnOnFunctionType() {
        var currentComponentErrorInfo = "Functions are not valid as a React child. This may happen if " + "you return a Component instead of <Component /> from render. " + "Or maybe you meant to call this function rather than return it." + (getCurrentFiberStackAddendum$1() || "");

        if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
          return;
        }

        ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
        warning(false, "Functions are not valid as a React child. This may happen if " + "you return a Component instead of <Component /> from render. " + "Or maybe you meant to call this function rather than return it.%s", getCurrentFiberStackAddendum$1() || "");
      }

      function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (!shouldTrackSideEffects) {
            return;
          }

          var last = returnFiber.lastEffect;

          if (last !== null) {
            last.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }

          childToDelete.nextEffect = null;
          childToDelete.effectTag = Deletion;
        }

        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects) {
            return null;
          }

          var childToDelete = currentFirstChild;

          while (childToDelete !== null) {
            deleteChild(returnFiber, childToDelete);
            childToDelete = childToDelete.sibling;
          }

          return null;
        }

        function mapRemainingChildren(returnFiber, currentFirstChild) {
          var existingChildren = new Map();
          var existingChild = currentFirstChild;

          while (existingChild !== null) {
            if (existingChild.key !== null) {
              existingChildren.set(existingChild.key, existingChild);
            } else {
              existingChildren.set(existingChild.index, existingChild);
            }

            existingChild = existingChild.sibling;
          }

          return existingChildren;
        }

        function useFiber(fiber, pendingProps, expirationTime) {
          var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
          clone.index = 0;
          clone.sibling = null;
          return clone;
        }

        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex;

          if (!shouldTrackSideEffects) {
            return lastPlacedIndex;
          }

          var current = newFiber.alternate;

          if (current !== null) {
            var oldIndex = current.index;

            if (oldIndex < lastPlacedIndex) {
              newFiber.effectTag = Placement;
              return lastPlacedIndex;
            } else {
              return oldIndex;
            }
          } else {
            newFiber.effectTag = Placement;
            return lastPlacedIndex;
          }
        }

        function placeSingleChild(newFiber) {
          if (shouldTrackSideEffects && newFiber.alternate === null) {
            newFiber.effectTag = Placement;
          }

          return newFiber;
        }

        function updateTextNode(returnFiber, current, textContent, expirationTime) {
          if (current === null || current.tag !== HostText) {
            var created = createFiberFromText(textContent, returnFiber.internalContextTag, expirationTime);
            created["return"] = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, textContent, expirationTime);
            existing["return"] = returnFiber;
            return existing;
          }
        }

        function updateElement(returnFiber, current, element, expirationTime) {
          if (current !== null && current.type === element.type) {
            var existing = useFiber(current, element.props, expirationTime);
            existing.ref = coerceRef(current, element);
            existing["return"] = returnFiber;
            {
              existing._debugSource = element._source;
              existing._debugOwner = element._owner;
            }
            return existing;
          } else {
            var created = createFiberFromElement(element, returnFiber.internalContextTag, expirationTime);
            created.ref = coerceRef(current, element);
            created["return"] = returnFiber;
            return created;
          }
        }

        function updateCall(returnFiber, current, call, expirationTime) {
          if (current === null || current.tag !== CallComponent) {
            var created = createFiberFromCall(call, returnFiber.internalContextTag, expirationTime);
            created["return"] = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, call, expirationTime);
            existing["return"] = returnFiber;
            return existing;
          }
        }

        function updateReturn(returnFiber, current, returnNode, expirationTime) {
          if (current === null || current.tag !== ReturnComponent) {
            var created = createFiberFromReturn(returnNode, returnFiber.internalContextTag, expirationTime);
            created.type = returnNode.value;
            created["return"] = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, null, expirationTime);
            existing.type = returnNode.value;
            existing["return"] = returnFiber;
            return existing;
          }
        }

        function updatePortal(returnFiber, current, portal, expirationTime) {
          if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal(portal, returnFiber.internalContextTag, expirationTime);
            created["return"] = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, portal.children || [], expirationTime);
            existing["return"] = returnFiber;
            return existing;
          }
        }

        function updateFragment(returnFiber, current, fragment, expirationTime, key) {
          if (current === null || current.tag !== Fragment) {
            var created = createFiberFromFragment(fragment, returnFiber.internalContextTag, expirationTime, key);
            created["return"] = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, fragment, expirationTime);
            existing["return"] = returnFiber;
            return existing;
          }
        }

        function createChild(returnFiber, newChild, expirationTime) {
          if (typeof newChild === "string" || typeof newChild === "number") {
            var created = createFiberFromText("" + newChild, returnFiber.internalContextTag, expirationTime);
            created["return"] = returnFiber;
            return created;
          }

          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    var _created = createFiberFromFragment(newChild.props.children, returnFiber.internalContextTag, expirationTime, newChild.key);

                    _created["return"] = returnFiber;
                    return _created;
                  } else {
                    var _created2 = createFiberFromElement(newChild, returnFiber.internalContextTag, expirationTime);

                    _created2.ref = coerceRef(null, newChild);
                    _created2["return"] = returnFiber;
                    return _created2;
                  }
                }

              case REACT_CALL_TYPE:
                {
                  var _created3 = createFiberFromCall(newChild, returnFiber.internalContextTag, expirationTime);

                  _created3["return"] = returnFiber;
                  return _created3;
                }

              case REACT_RETURN_TYPE:
                {
                  var _created4 = createFiberFromReturn(newChild, returnFiber.internalContextTag, expirationTime);

                  _created4.type = newChild.value;
                  _created4["return"] = returnFiber;
                  return _created4;
                }

              case REACT_PORTAL_TYPE:
                {
                  var _created5 = createFiberFromPortal(newChild, returnFiber.internalContextTag, expirationTime);

                  _created5["return"] = returnFiber;
                  return _created5;
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              var _created6 = createFiberFromFragment(newChild, returnFiber.internalContextTag, expirationTime, null);

              _created6["return"] = returnFiber;
              return _created6;
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }
          return null;
        }

        function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
          var key = oldFiber !== null ? oldFiber.key : null;

          if (typeof newChild === "string" || typeof newChild === "number") {
            if (key !== null) {
              return null;
            }

            return updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);
          }

          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  if (newChild.key === key) {
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                    }

                    return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }

              case REACT_CALL_TYPE:
                {
                  if (newChild.key === key) {
                    return updateCall(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }

              case REACT_RETURN_TYPE:
                {
                  if (key === null) {
                    return updateReturn(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }

              case REACT_PORTAL_TYPE:
                {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              if (key !== null) {
                return null;
              }

              return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }
          return null;
        }

        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
          if (typeof newChild === "string" || typeof newChild === "number") {
            var matchedFiber = existingChildren.get(newIdx) || null;
            return updateTextNode(returnFiber, matchedFiber, "" + newChild, expirationTime);
          }

          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                  }

                  return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
                }

              case REACT_CALL_TYPE:
                {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                  return updateCall(returnFiber, _matchedFiber2, newChild, expirationTime);
                }

              case REACT_RETURN_TYPE:
                {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;

                  return updateReturn(returnFiber, _matchedFiber3, newChild, expirationTime);
                }

              case REACT_PORTAL_TYPE:
                {
                  var _matchedFiber4 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                  return updatePortal(returnFiber, _matchedFiber4, newChild, expirationTime);
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber5 = existingChildren.get(newIdx) || null;

              return updateFragment(returnFiber, _matchedFiber5, newChild, expirationTime, null);
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }
          return null;
        }

        function warnOnInvalidKey(child, knownKeys) {
          {
            if (typeof child !== "object" || child === null) {
              return knownKeys;
            }

            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_CALL_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child);
                var key = child.key;

                if (typeof key !== "string") {
                  break;
                }

                if (knownKeys === null) {
                  knownKeys = new Set();
                  knownKeys.add(key);
                  break;
                }

                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }

                warning(false, "Encountered two children with the same key, `%s`. " + "Keys should be unique so that components maintain their identity " + "across updates. Non-unique keys may cause children to be " + "duplicated and/or omitted — the behavior is unsupported and " + "could change in a future version.%s", key, getCurrentFiberStackAddendum$1());
                break;

              default:
                break;
            }
          }
          return knownKeys;
        }

        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
          {
            var knownKeys = null;

            for (var i = 0; i < newChildren.length; i++) {
              var child = newChildren[i];
              knownKeys = warnOnInvalidKey(child, knownKeys);
            }
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;

          for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }

            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }

              break;
            }

            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }

            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }

            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }

          if (newIdx === newChildren.length) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }

          if (oldFiber === null) {
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);

              if (!_newFiber) {
                continue;
              }

              lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber;
              } else {
                previousNewFiber.sibling = _newFiber;
              }

              previousNewFiber = _newFiber;
            }

            return resultingFirstChild;
          }

          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);

            if (_newFiber2) {
              if (shouldTrackSideEffects) {
                if (_newFiber2.alternate !== null) {
                  existingChildren["delete"](_newFiber2.key === null ? newIdx : _newFiber2.key);
                }
              }

              lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber2;
              } else {
                previousNewFiber.sibling = _newFiber2;
              }

              previousNewFiber = _newFiber2;
            }
          }

          if (shouldTrackSideEffects) {
            existingChildren.forEach(function (child) {
              return deleteChild(returnFiber, child);
            });
          }

          return resultingFirstChild;
        }

        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
          var iteratorFn = getIteratorFn(newChildrenIterable);
          invariant(typeof iteratorFn === "function", "An object is not an iterable. This error is likely caused by a bug in " + "React. Please file an issue.");
          {
            if (typeof newChildrenIterable.entries === "function") {
              var possibleMap = newChildrenIterable;

              if (possibleMap.entries === iteratorFn) {
                warning(didWarnAboutMaps, "Using Maps as children is unsupported and will likely yield " + "unexpected results. Convert it to a sequence/iterable of keyed " + "ReactElements instead.%s", getCurrentFiberStackAddendum$1());
                didWarnAboutMaps = true;
              }
            }

            var _newChildren = iteratorFn.call(newChildrenIterable);

            if (_newChildren) {
              var knownKeys = null;

              var _step = _newChildren.next();

              for (; !_step.done; _step = _newChildren.next()) {
                var child = _step.value;
                knownKeys = warnOnInvalidKey(child, knownKeys);
              }
            }
          }
          var newChildren = iteratorFn.call(newChildrenIterable);
          invariant(newChildren != null, "An iterable object provided no iterator.");
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          var step = newChildren.next();

          for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }

            var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

            if (newFiber === null) {
              if (!oldFiber) {
                oldFiber = nextOldFiber;
              }

              break;
            }

            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }

            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }

            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }

          if (step.done) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }

          if (oldFiber === null) {
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step.value, expirationTime);

              if (_newFiber3 === null) {
                continue;
              }

              lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber3;
              } else {
                previousNewFiber.sibling = _newFiber3;
              }

              previousNewFiber = _newFiber3;
            }

            return resultingFirstChild;
          }

          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);

            if (_newFiber4 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber4.alternate !== null) {
                  existingChildren["delete"](_newFiber4.key === null ? newIdx : _newFiber4.key);
                }
              }

              lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber4;
              } else {
                previousNewFiber.sibling = _newFiber4;
              }

              previousNewFiber = _newFiber4;
            }
          }

          if (shouldTrackSideEffects) {
            existingChildren.forEach(function (child) {
              return deleteChild(returnFiber, child);
            });
          }

          return resultingFirstChild;
        }

        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, textContent, expirationTime);
            existing["return"] = returnFiber;
            return existing;
          }

          deleteRemainingChildren(returnFiber, currentFirstChild);
          var created = createFiberFromText(textContent, returnFiber.internalContextTag, expirationTime);
          created["return"] = returnFiber;
          return created;
        }

        function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
          var key = element.key;
          var child = currentFirstChild;

          while (child !== null) {
            if (child.key === key) {
              if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.type === element.type) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
                existing.ref = coerceRef(child, element);
                existing["return"] = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }

            child = child.sibling;
          }

          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(element.props.children, returnFiber.internalContextTag, expirationTime, element.key);
            created["return"] = returnFiber;
            return created;
          } else {
            var _created7 = createFiberFromElement(element, returnFiber.internalContextTag, expirationTime);

            _created7.ref = coerceRef(currentFirstChild, element);
            _created7["return"] = returnFiber;
            return _created7;
          }
        }

        function reconcileSingleCall(returnFiber, currentFirstChild, call, expirationTime) {
          var key = call.key;
          var child = currentFirstChild;

          while (child !== null) {
            if (child.key === key) {
              if (child.tag === CallComponent) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, call, expirationTime);
                existing["return"] = returnFiber;
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }

            child = child.sibling;
          }

          var created = createFiberFromCall(call, returnFiber.internalContextTag, expirationTime);
          created["return"] = returnFiber;
          return created;
        }

        function reconcileSingleReturn(returnFiber, currentFirstChild, returnNode, expirationTime) {
          var child = currentFirstChild;

          if (child !== null) {
            if (child.tag === ReturnComponent) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, null, expirationTime);
              existing.type = returnNode.value;
              existing["return"] = returnFiber;
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
            }
          }

          var created = createFiberFromReturn(returnNode, returnFiber.internalContextTag, expirationTime);
          created.type = returnNode.value;
          created["return"] = returnFiber;
          return created;
        }

        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
          var key = portal.key;
          var child = currentFirstChild;

          while (child !== null) {
            if (child.key === key) {
              if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, portal.children || [], expirationTime);
                existing["return"] = returnFiber;
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }

            child = child.sibling;
          }

          var created = createFiberFromPortal(portal, returnFiber.internalContextTag, expirationTime);
          created["return"] = returnFiber;
          return created;
        }

        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
          if (typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null) {
            newChild = newChild.props.children;
          }

          var isObject = typeof newChild === "object" && newChild !== null;

          if (isObject) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

              case REACT_CALL_TYPE:
                return placeSingleChild(reconcileSingleCall(returnFiber, currentFirstChild, newChild, expirationTime));

              case REACT_RETURN_TYPE:
                return placeSingleChild(reconcileSingleReturn(returnFiber, currentFirstChild, newChild, expirationTime));

              case REACT_PORTAL_TYPE:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
            }
          }

          if (typeof newChild === "string" || typeof newChild === "number") {
            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, expirationTime));
          }

          if (isArray$1(newChild)) {
            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
          }

          if (getIteratorFn(newChild)) {
            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
          }

          if (isObject) {
            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }

          if (typeof newChild === "undefined") {
            switch (returnFiber.tag) {
              case ClassComponent:
                {
                  {
                    var instance = returnFiber.stateNode;

                    if (instance.render._isMockFunction) {
                      break;
                    }
                  }
                }

              case FunctionalComponent:
                {
                  var Component = returnFiber.type;
                  invariant(false, "%s(...): Nothing was returned from render. This usually means a " + "return statement is missing. Or, to render nothing, " + "return null.", Component.displayName || Component.name || "Component");
                }
            }
          }

          return deleteRemainingChildren(returnFiber, currentFirstChild);
        }

        return reconcileChildFibers;
      }

      var reconcileChildFibers = ChildReconciler(true);
      var mountChildFibers = ChildReconciler(false);

      function cloneChildFibers(current, workInProgress) {
        invariant(current === null || workInProgress.child === current.child, "Resuming work not yet implemented.");

        if (workInProgress.child === null) {
          return;
        }

        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
        workInProgress.child = newChild;
        newChild["return"] = workInProgress;

        while (currentChild.sibling !== null) {
          currentChild = currentChild.sibling;
          newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
          newChild["return"] = workInProgress;
        }

        newChild.sibling = null;
      }

      {
        var warnedAboutStatelessRefs = {};
      }

      var ReactFiberBeginWork = function ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber) {
        var shouldSetTextContent = config.shouldSetTextContent,
            useSyncScheduling = config.useSyncScheduling,
            shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree;
        var pushHostContext = hostContext.pushHostContext,
            pushHostContainer = hostContext.pushHostContainer;
        var enterHydrationState = hydrationContext.enterHydrationState,
            resetHydrationState = hydrationContext.resetHydrationState,
            tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance;

        var _ReactFiberClassCompo = ReactFiberClassComponent(scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState),
            adoptClassInstance = _ReactFiberClassCompo.adoptClassInstance,
            constructClassInstance = _ReactFiberClassCompo.constructClassInstance,
            mountClassInstance = _ReactFiberClassCompo.mountClassInstance,
            updateClassInstance = _ReactFiberClassCompo.updateClassInstance;

        function reconcileChildren(current, workInProgress, nextChildren) {
          reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, workInProgress.expirationTime);
        }

        function reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime) {
          if (current === null) {
            workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
          } else {
            workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
          }
        }

        function updateFragment(current, workInProgress) {
          var nextChildren = workInProgress.pendingProps;

          if (hasContextChanged()) {} else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          reconcileChildren(current, workInProgress, nextChildren);
          memoizeProps(workInProgress, nextChildren);
          return workInProgress.child;
        }

        function markRef(current, workInProgress) {
          var ref = workInProgress.ref;

          if (ref !== null && (!current || current.ref !== ref)) {
            workInProgress.effectTag |= Ref;
          }
        }

        function updateFunctionalComponent(current, workInProgress) {
          var fn = workInProgress.type;
          var nextProps = workInProgress.pendingProps;

          if (hasContextChanged()) {} else {
            if (workInProgress.memoizedProps === nextProps) {
              return bailoutOnAlreadyFinishedWork(current, workInProgress);
            }
          }

          var unmaskedContext = getUnmaskedContext(workInProgress);
          var context = getMaskedContext(workInProgress, unmaskedContext);
          var nextChildren;
          {
            ReactCurrentOwner.current = workInProgress;
            ReactDebugCurrentFiber.setCurrentPhase("render");
            nextChildren = fn(nextProps, context);
            ReactDebugCurrentFiber.setCurrentPhase(null);
          }
          workInProgress.effectTag |= PerformedWork;
          reconcileChildren(current, workInProgress, nextChildren);
          memoizeProps(workInProgress, nextProps);
          return workInProgress.child;
        }

        function updateClassComponent(current, workInProgress, renderExpirationTime) {
          var hasContext = pushContextProvider(workInProgress);
          var shouldUpdate = void 0;

          if (current === null) {
            if (!workInProgress.stateNode) {
              constructClassInstance(workInProgress, workInProgress.pendingProps);
              mountClassInstance(workInProgress, renderExpirationTime);
              shouldUpdate = true;
            } else {
              invariant(false, "Resuming work not yet implemented.");
            }
          } else {
            shouldUpdate = updateClassInstance(current, workInProgress, renderExpirationTime);
          }

          return finishClassComponent(current, workInProgress, shouldUpdate, hasContext);
        }

        function finishClassComponent(current, workInProgress, shouldUpdate, hasContext) {
          markRef(current, workInProgress);

          if (!shouldUpdate) {
            if (hasContext) {
              invalidateContextProvider(workInProgress, false);
            }

            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          var instance = workInProgress.stateNode;
          ReactCurrentOwner.current = workInProgress;
          var nextChildren = void 0;
          {
            ReactDebugCurrentFiber.setCurrentPhase("render");
            nextChildren = instance.render();

            if (debugRenderPhaseSideEffects) {
              instance.render();
            }

            ReactDebugCurrentFiber.setCurrentPhase(null);
          }
          workInProgress.effectTag |= PerformedWork;
          reconcileChildren(current, workInProgress, nextChildren);
          memoizeState(workInProgress, instance.state);
          memoizeProps(workInProgress, instance.props);

          if (hasContext) {
            invalidateContextProvider(workInProgress, true);
          }

          return workInProgress.child;
        }

        function pushHostRootContext(workInProgress) {
          var root = workInProgress.stateNode;

          if (root.pendingContext) {
            pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
          } else if (root.context) {
            pushTopLevelContextObject(workInProgress, root.context, false);
          }

          pushHostContainer(workInProgress, root.containerInfo);
        }

        function updateHostRoot(current, workInProgress, renderExpirationTime) {
          pushHostRootContext(workInProgress);
          var updateQueue = workInProgress.updateQueue;

          if (updateQueue !== null) {
            var prevState = workInProgress.memoizedState;
            var state = processUpdateQueue(current, workInProgress, updateQueue, null, null, renderExpirationTime);

            if (prevState === state) {
              resetHydrationState();
              return bailoutOnAlreadyFinishedWork(current, workInProgress);
            }

            var element = state.element;
            var root = workInProgress.stateNode;

            if ((current === null || current.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
              workInProgress.effectTag |= Placement;
              workInProgress.child = mountChildFibers(workInProgress, null, element, renderExpirationTime);
            } else {
              resetHydrationState();
              reconcileChildren(current, workInProgress, element);
            }

            memoizeState(workInProgress, state);
            return workInProgress.child;
          }

          resetHydrationState();
          return bailoutOnAlreadyFinishedWork(current, workInProgress);
        }

        function updateHostComponent(current, workInProgress, renderExpirationTime) {
          pushHostContext(workInProgress);

          if (current === null) {
            tryToClaimNextHydratableInstance(workInProgress);
          }

          var type = workInProgress.type;
          var memoizedProps = workInProgress.memoizedProps;
          var nextProps = workInProgress.pendingProps;
          var prevProps = current !== null ? current.memoizedProps : null;

          if (hasContextChanged()) {} else if (memoizedProps === nextProps) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);

          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps && shouldSetTextContent(type, prevProps)) {
            workInProgress.effectTag |= ContentReset;
          }

          markRef(current, workInProgress);

          if (renderExpirationTime !== Never && !useSyncScheduling && shouldDeprioritizeSubtree(type, nextProps)) {
            workInProgress.expirationTime = Never;
            return null;
          }

          reconcileChildren(current, workInProgress, nextChildren);
          memoizeProps(workInProgress, nextProps);
          return workInProgress.child;
        }

        function updateHostText(current, workInProgress) {
          if (current === null) {
            tryToClaimNextHydratableInstance(workInProgress);
          }

          var nextProps = workInProgress.pendingProps;
          memoizeProps(workInProgress, nextProps);
          return null;
        }

        function mountIndeterminateComponent(current, workInProgress, renderExpirationTime) {
          invariant(current === null, "An indeterminate component should never have mounted. This error is " + "likely caused by a bug in React. Please file an issue.");
          var fn = workInProgress.type;
          var props = workInProgress.pendingProps;
          var unmaskedContext = getUnmaskedContext(workInProgress);
          var context = getMaskedContext(workInProgress, unmaskedContext);
          var value;
          {
            if (fn.prototype && typeof fn.prototype.render === "function") {
              var componentName = getComponentName(workInProgress);
              warning(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + "This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
            }

            ReactCurrentOwner.current = workInProgress;
            value = fn(props, context);
          }
          workInProgress.effectTag |= PerformedWork;

          if (typeof value === "object" && value !== null && typeof value.render === "function") {
            workInProgress.tag = ClassComponent;
            var hasContext = pushContextProvider(workInProgress);
            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, renderExpirationTime);
            return finishClassComponent(current, workInProgress, true, hasContext);
          } else {
            workInProgress.tag = FunctionalComponent;
            {
              var Component = workInProgress.type;

              if (Component) {
                warning(!Component.childContextTypes, "%s(...): childContextTypes cannot be defined on a functional component.", Component.displayName || Component.name || "Component");
              }

              if (workInProgress.ref !== null) {
                var info = "";
                var ownerName = ReactDebugCurrentFiber.getCurrentFiberOwnerName();

                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }

                var warningKey = ownerName || workInProgress._debugID || "";
                var debugSource = workInProgress._debugSource;

                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }

                if (!warnedAboutStatelessRefs[warningKey]) {
                  warnedAboutStatelessRefs[warningKey] = true;
                  warning(false, "Stateless function components cannot be given refs. " + "Attempts to access this ref will fail.%s%s", info, ReactDebugCurrentFiber.getCurrentFiberStackAddendum());
                }
              }
            }
            reconcileChildren(current, workInProgress, value);
            memoizeProps(workInProgress, props);
            return workInProgress.child;
          }
        }

        function updateCallComponent(current, workInProgress, renderExpirationTime) {
          var nextCall = workInProgress.pendingProps;

          if (hasContextChanged()) {} else if (workInProgress.memoizedProps === nextCall) {
            nextCall = workInProgress.memoizedProps;
          }

          var nextChildren = nextCall.children;

          if (current === null) {
            workInProgress.stateNode = mountChildFibers(workInProgress, workInProgress.stateNode, nextChildren, renderExpirationTime);
          } else {
            workInProgress.stateNode = reconcileChildFibers(workInProgress, workInProgress.stateNode, nextChildren, renderExpirationTime);
          }

          memoizeProps(workInProgress, nextCall);
          return workInProgress.stateNode;
        }

        function updatePortalComponent(current, workInProgress, renderExpirationTime) {
          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
          var nextChildren = workInProgress.pendingProps;

          if (hasContextChanged()) {} else if (workInProgress.memoizedProps === nextChildren) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          if (current === null) {
            workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
            memoizeProps(workInProgress, nextChildren);
          } else {
            reconcileChildren(current, workInProgress, nextChildren);
            memoizeProps(workInProgress, nextChildren);
          }

          return workInProgress.child;
        }

        function bailoutOnAlreadyFinishedWork(current, workInProgress) {
          cancelWorkTimer(workInProgress);
          cloneChildFibers(current, workInProgress);
          return workInProgress.child;
        }

        function bailoutOnLowPriority(current, workInProgress) {
          cancelWorkTimer(workInProgress);

          switch (workInProgress.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress);
              break;

            case ClassComponent:
              pushContextProvider(workInProgress);
              break;

            case HostPortal:
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              break;
          }

          return null;
        }

        function memoizeProps(workInProgress, nextProps) {
          workInProgress.memoizedProps = nextProps;
        }

        function memoizeState(workInProgress, nextState) {
          workInProgress.memoizedState = nextState;
        }

        function beginWork(current, workInProgress, renderExpirationTime) {
          if (workInProgress.expirationTime === NoWork || workInProgress.expirationTime > renderExpirationTime) {
            return bailoutOnLowPriority(current, workInProgress);
          }

          switch (workInProgress.tag) {
            case IndeterminateComponent:
              return mountIndeterminateComponent(current, workInProgress, renderExpirationTime);

            case FunctionalComponent:
              return updateFunctionalComponent(current, workInProgress);

            case ClassComponent:
              return updateClassComponent(current, workInProgress, renderExpirationTime);

            case HostRoot:
              return updateHostRoot(current, workInProgress, renderExpirationTime);

            case HostComponent:
              return updateHostComponent(current, workInProgress, renderExpirationTime);

            case HostText:
              return updateHostText(current, workInProgress);

            case CallHandlerPhase:
              workInProgress.tag = CallComponent;

            case CallComponent:
              return updateCallComponent(current, workInProgress, renderExpirationTime);

            case ReturnComponent:
              return null;

            case HostPortal:
              return updatePortalComponent(current, workInProgress, renderExpirationTime);

            case Fragment:
              return updateFragment(current, workInProgress);

            default:
              invariant(false, "Unknown unit of work tag. This error is likely caused by a bug in " + "React. Please file an issue.");
          }
        }

        function beginFailedWork(current, workInProgress, renderExpirationTime) {
          switch (workInProgress.tag) {
            case ClassComponent:
              pushContextProvider(workInProgress);
              break;

            case HostRoot:
              pushHostRootContext(workInProgress);
              break;

            default:
              invariant(false, "Invalid type of work. This error is likely caused by a bug in React. " + "Please file an issue.");
          }

          workInProgress.effectTag |= Err;

          if (current === null) {
            workInProgress.child = null;
          } else if (workInProgress.child !== current.child) {
            workInProgress.child = current.child;
          }

          if (workInProgress.expirationTime === NoWork || workInProgress.expirationTime > renderExpirationTime) {
            return bailoutOnLowPriority(current, workInProgress);
          }

          workInProgress.firstEffect = null;
          workInProgress.lastEffect = null;
          var nextChildren = null;
          reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime);

          if (workInProgress.tag === ClassComponent) {
            var instance = workInProgress.stateNode;
            workInProgress.memoizedProps = instance.props;
            workInProgress.memoizedState = instance.state;
          }

          return workInProgress.child;
        }

        return {
          beginWork: beginWork,
          beginFailedWork: beginFailedWork
        };
      };

      var ReactFiberCompleteWork = function ReactFiberCompleteWork(config, hostContext, hydrationContext) {
        var createInstance = config.createInstance,
            createTextInstance = config.createTextInstance,
            appendInitialChild = config.appendInitialChild,
            finalizeInitialChildren = config.finalizeInitialChildren,
            prepareUpdate = config.prepareUpdate,
            mutation = config.mutation,
            persistence = config.persistence;
        var getRootHostContainer = hostContext.getRootHostContainer,
            popHostContext = hostContext.popHostContext,
            getHostContext = hostContext.getHostContext,
            popHostContainer = hostContext.popHostContainer;
        var prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance,
            prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance,
            popHydrationState = hydrationContext.popHydrationState;

        function markUpdate(workInProgress) {
          workInProgress.effectTag |= Update;
        }

        function markRef(workInProgress) {
          workInProgress.effectTag |= Ref;
        }

        function appendAllReturns(returns, workInProgress) {
          var node = workInProgress.stateNode;

          if (node) {
            node["return"] = workInProgress;
          }

          while (node !== null) {
            if (node.tag === HostComponent || node.tag === HostText || node.tag === HostPortal) {
              invariant(false, "A call cannot have host component children.");
            } else if (node.tag === ReturnComponent) {
              returns.push(node.type);
            } else if (node.child !== null) {
              node.child["return"] = node;
              node = node.child;
              continue;
            }

            while (node.sibling === null) {
              if (node["return"] === null || node["return"] === workInProgress) {
                return;
              }

              node = node["return"];
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
        }

        function moveCallToHandlerPhase(current, workInProgress, renderExpirationTime) {
          var call = workInProgress.memoizedProps;
          invariant(call, "Should be resolved by now. This error is likely caused by a bug in " + "React. Please file an issue.");
          workInProgress.tag = CallHandlerPhase;
          var returns = [];
          appendAllReturns(returns, workInProgress);
          var fn = call.handler;
          var props = call.props;
          var nextChildren = fn(props, returns);
          var currentFirstChild = current !== null ? current.child : null;
          workInProgress.child = reconcileChildFibers(workInProgress, currentFirstChild, nextChildren, renderExpirationTime);
          return workInProgress.child;
        }

        function appendAllChildren(parent, workInProgress) {
          var node = workInProgress.child;

          while (node !== null) {
            if (node.tag === HostComponent || node.tag === HostText) {
              appendInitialChild(parent, node.stateNode);
            } else if (node.tag === HostPortal) {} else if (node.child !== null) {
              node.child["return"] = node;
              node = node.child;
              continue;
            }

            if (node === workInProgress) {
              return;
            }

            while (node.sibling === null) {
              if (node["return"] === null || node["return"] === workInProgress) {
                return;
              }

              node = node["return"];
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
        }

        var updateHostContainer = void 0;
        var updateHostComponent = void 0;
        var updateHostText = void 0;

        if (mutation) {
          if (enableMutatingReconciler) {
            updateHostContainer = function updateHostContainer(workInProgress) {};

            updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {
              workInProgress.updateQueue = updatePayload;

              if (updatePayload) {
                markUpdate(workInProgress);
              }
            };

            updateHostText = function updateHostText(current, workInProgress, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress);
              }
            };
          } else {
            invariant(false, "Mutating reconciler is disabled.");
          }
        } else if (persistence) {
          if (enablePersistentReconciler) {
            var cloneInstance = persistence.cloneInstance,
                createContainerChildSet = persistence.createContainerChildSet,
                appendChildToContainerChildSet = persistence.appendChildToContainerChildSet,
                finalizeContainerChildren = persistence.finalizeContainerChildren;

            var appendAllChildrenToContainer = function appendAllChildrenToContainer(containerChildSet, workInProgress) {
              var node = workInProgress.child;

              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendChildToContainerChildSet(containerChildSet, node.stateNode);
                } else if (node.tag === HostPortal) {} else if (node.child !== null) {
                  node.child["return"] = node;
                  node = node.child;
                  continue;
                }

                if (node === workInProgress) {
                  return;
                }

                while (node.sibling === null) {
                  if (node["return"] === null || node["return"] === workInProgress) {
                    return;
                  }

                  node = node["return"];
                }

                node.sibling["return"] = node["return"];
                node = node.sibling;
              }
            };

            updateHostContainer = function updateHostContainer(workInProgress) {
              var portalOrRoot = workInProgress.stateNode;
              var childrenUnchanged = workInProgress.firstEffect === null;

              if (childrenUnchanged) {} else {
                var container = portalOrRoot.containerInfo;
                var newChildSet = createContainerChildSet(container);

                if (finalizeContainerChildren(container, newChildSet)) {
                  markUpdate(workInProgress);
                }

                portalOrRoot.pendingChildren = newChildSet;
                appendAllChildrenToContainer(newChildSet, workInProgress);
                markUpdate(workInProgress);
              }
            };

            updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {
              var childrenUnchanged = workInProgress.firstEffect === null;
              var currentInstance = current.stateNode;

              if (childrenUnchanged && updatePayload === null) {
                workInProgress.stateNode = currentInstance;
              } else {
                var recyclableInstance = workInProgress.stateNode;
                var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);

                if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance)) {
                  markUpdate(workInProgress);
                }

                workInProgress.stateNode = newInstance;

                if (childrenUnchanged) {
                  markUpdate(workInProgress);
                } else {
                  appendAllChildren(newInstance, workInProgress);
                }
              }
            };

            updateHostText = function updateHostText(current, workInProgress, oldText, newText) {
              if (oldText !== newText) {
                var rootContainerInstance = getRootHostContainer();
                var currentHostContext = getHostContext();
                workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);
                markUpdate(workInProgress);
              }
            };
          } else {
            invariant(false, "Persistent reconciler is disabled.");
          }
        } else {
          if (enableNoopReconciler) {
            updateHostContainer = function updateHostContainer(workInProgress) {};

            updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {};

            updateHostText = function updateHostText(current, workInProgress, oldText, newText) {};
          } else {
            invariant(false, "Noop reconciler is disabled.");
          }
        }

        function completeWork(current, workInProgress, renderExpirationTime) {
          var newProps = workInProgress.pendingProps;

          switch (workInProgress.tag) {
            case FunctionalComponent:
              return null;

            case ClassComponent:
              {
                popContextProvider(workInProgress);
                return null;
              }

            case HostRoot:
              {
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                var fiberRoot = workInProgress.stateNode;

                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }

                if (current === null || current.child === null) {
                  popHydrationState(workInProgress);
                  workInProgress.effectTag &= ~Placement;
                }

                updateHostContainer(workInProgress);
                return null;
              }

            case HostComponent:
              {
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;

                if (current !== null && workInProgress.stateNode != null) {
                  var oldProps = current.memoizedProps;
                  var instance = workInProgress.stateNode;
                  var currentHostContext = getHostContext();
                  var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
                  updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance);

                  if (current.ref !== workInProgress.ref) {
                    markRef(workInProgress);
                  }
                } else {
                  if (!newProps) {
                    invariant(workInProgress.stateNode !== null, "We must have new props for new mounts. This error is likely " + "caused by a bug in React. Please file an issue.");
                    return null;
                  }

                  var _currentHostContext = getHostContext();

                  var wasHydrated = popHydrationState(workInProgress);

                  if (wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, _currentHostContext)) {
                      markUpdate(workInProgress);
                    }
                  } else {
                    var _instance = createInstance(type, newProps, rootContainerInstance, _currentHostContext, workInProgress);

                    appendAllChildren(_instance, workInProgress);

                    if (finalizeInitialChildren(_instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress);
                    }

                    workInProgress.stateNode = _instance;
                  }

                  if (workInProgress.ref !== null) {
                    markRef(workInProgress);
                  }
                }

                return null;
              }

            case HostText:
              {
                var newText = newProps;

                if (current && workInProgress.stateNode != null) {
                  var oldText = current.memoizedProps;
                  updateHostText(current, workInProgress, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    invariant(workInProgress.stateNode !== null, "We must have new props for new mounts. This error is likely " + "caused by a bug in React. Please file an issue.");
                    return null;
                  }

                  var _rootContainerInstance = getRootHostContainer();

                  var _currentHostContext2 = getHostContext();

                  var _wasHydrated = popHydrationState(workInProgress);

                  if (_wasHydrated) {
                    if (prepareToHydrateHostTextInstance(workInProgress)) {
                      markUpdate(workInProgress);
                    }
                  } else {
                    workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext2, workInProgress);
                  }
                }

                return null;
              }

            case CallComponent:
              return moveCallToHandlerPhase(current, workInProgress, renderExpirationTime);

            case CallHandlerPhase:
              workInProgress.tag = CallComponent;
              return null;

            case ReturnComponent:
              return null;

            case Fragment:
              return null;

            case HostPortal:
              popHostContainer(workInProgress);
              updateHostContainer(workInProgress);
              return null;

            case IndeterminateComponent:
              invariant(false, "An indeterminate component should have become determinate before " + "completing. This error is likely caused by a bug in React. Please " + "file an issue.");

            default:
              invariant(false, "Unknown unit of work tag. This error is likely caused by a bug in " + "React. Please file an issue.");
          }
        }

        return {
          completeWork: completeWork
        };
      };

      var invokeGuardedCallback$2 = ReactErrorUtils.invokeGuardedCallback;
      var hasCaughtError$1 = ReactErrorUtils.hasCaughtError;
      var clearCaughtError$1 = ReactErrorUtils.clearCaughtError;

      var ReactFiberCommitWork = function ReactFiberCommitWork(config, captureError) {
        var getPublicInstance = config.getPublicInstance,
            mutation = config.mutation,
            persistence = config.persistence;

        var callComponentWillUnmountWithTimer = function callComponentWillUnmountWithTimer(current, instance) {
          startPhaseTimer(current, "componentWillUnmount");
          instance.props = current.memoizedProps;
          instance.state = current.memoizedState;
          instance.componentWillUnmount();
          stopPhaseTimer();
        };

        function safelyCallComponentWillUnmount(current, instance) {
          {
            invokeGuardedCallback$2(null, callComponentWillUnmountWithTimer, null, current, instance);

            if (hasCaughtError$1()) {
              var unmountError = clearCaughtError$1();
              captureError(current, unmountError);
            }
          }
        }

        function safelyDetachRef(current) {
          var ref = current.ref;

          if (ref !== null) {
            {
              invokeGuardedCallback$2(null, ref, null, null);

              if (hasCaughtError$1()) {
                var refError = clearCaughtError$1();
                captureError(current, refError);
              }
            }
          }
        }

        function commitLifeCycles(current, finishedWork) {
          switch (finishedWork.tag) {
            case ClassComponent:
              {
                var instance = finishedWork.stateNode;

                if (finishedWork.effectTag & Update) {
                  if (current === null) {
                    startPhaseTimer(finishedWork, "componentDidMount");
                    instance.props = finishedWork.memoizedProps;
                    instance.state = finishedWork.memoizedState;
                    instance.componentDidMount();
                    stopPhaseTimer();
                  } else {
                    var prevProps = current.memoizedProps;
                    var prevState = current.memoizedState;
                    startPhaseTimer(finishedWork, "componentDidUpdate");
                    instance.props = finishedWork.memoizedProps;
                    instance.state = finishedWork.memoizedState;
                    instance.componentDidUpdate(prevProps, prevState);
                    stopPhaseTimer();
                  }
                }

                var updateQueue = finishedWork.updateQueue;

                if (updateQueue !== null) {
                  commitCallbacks(updateQueue, instance);
                }

                return;
              }

            case HostRoot:
              {
                var _updateQueue = finishedWork.updateQueue;

                if (_updateQueue !== null) {
                  var _instance = finishedWork.child !== null ? finishedWork.child.stateNode : null;

                  commitCallbacks(_updateQueue, _instance);
                }

                return;
              }

            case HostComponent:
              {
                var _instance2 = finishedWork.stateNode;

                if (current === null && finishedWork.effectTag & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props, finishedWork);
                }

                return;
              }

            case HostText:
              {
                return;
              }

            case HostPortal:
              {
                return;
              }

            default:
              {
                invariant(false, "This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
              }
          }
        }

        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;

          if (ref !== null) {
            var instance = finishedWork.stateNode;

            switch (finishedWork.tag) {
              case HostComponent:
                ref(getPublicInstance(instance));
                break;

              default:
                ref(instance);
            }
          }
        }

        function commitDetachRef(current) {
          var currentRef = current.ref;

          if (currentRef !== null) {
            currentRef(null);
          }
        }

        function commitUnmount(current) {
          if (typeof onCommitUnmount === "function") {
            onCommitUnmount(current);
          }

          switch (current.tag) {
            case ClassComponent:
              {
                safelyDetachRef(current);
                var instance = current.stateNode;

                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(current, instance);
                }

                return;
              }

            case HostComponent:
              {
                safelyDetachRef(current);
                return;
              }

            case CallComponent:
              {
                commitNestedUnmounts(current.stateNode);
                return;
              }

            case HostPortal:
              {
                if (enableMutatingReconciler && mutation) {
                  unmountHostComponents(current);
                } else if (enablePersistentReconciler && persistence) {
                  emptyPortalContainer(current);
                }

                return;
              }
          }
        }

        function commitNestedUnmounts(root) {
          var node = root;

          while (true) {
            commitUnmount(node);

            if (node.child !== null && (!mutation || node.tag !== HostPortal)) {
              node.child["return"] = node;
              node = node.child;
              continue;
            }

            if (node === root) {
              return;
            }

            while (node.sibling === null) {
              if (node["return"] === null || node["return"] === root) {
                return;
              }

              node = node["return"];
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
        }

        function detachFiber(current) {
          current["return"] = null;
          current.child = null;

          if (current.alternate) {
            current.alternate.child = null;
            current.alternate["return"] = null;
          }
        }

        if (!mutation) {
          var commitContainer = void 0;

          if (persistence) {
            var replaceContainerChildren = persistence.replaceContainerChildren,
                createContainerChildSet = persistence.createContainerChildSet;

            var emptyPortalContainer = function emptyPortalContainer(current) {
              var portal = current.stateNode;
              var containerInfo = portal.containerInfo;
              var emptyChildSet = createContainerChildSet(containerInfo);
              replaceContainerChildren(containerInfo, emptyChildSet);
            };

            commitContainer = function commitContainer(finishedWork) {
              switch (finishedWork.tag) {
                case ClassComponent:
                  {
                    return;
                  }

                case HostComponent:
                  {
                    return;
                  }

                case HostText:
                  {
                    return;
                  }

                case HostRoot:
                case HostPortal:
                  {
                    var portalOrRoot = finishedWork.stateNode;
                    var containerInfo = portalOrRoot.containerInfo,
                        _pendingChildren = portalOrRoot.pendingChildren;
                    replaceContainerChildren(containerInfo, _pendingChildren);
                    return;
                  }

                default:
                  {
                    invariant(false, "This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
                  }
              }
            };
          } else {
            commitContainer = function commitContainer(finishedWork) {};
          }

          if (enablePersistentReconciler || enableNoopReconciler) {
            return {
              commitResetTextContent: function commitResetTextContent(finishedWork) {},
              commitPlacement: function commitPlacement(finishedWork) {},
              commitDeletion: function commitDeletion(current) {
                commitNestedUnmounts(current);
                detachFiber(current);
              },
              commitWork: function commitWork(current, finishedWork) {
                commitContainer(finishedWork);
              },
              commitLifeCycles: commitLifeCycles,
              commitAttachRef: commitAttachRef,
              commitDetachRef: commitDetachRef
            };
          } else if (persistence) {
            invariant(false, "Persistent reconciler is disabled.");
          } else {
            invariant(false, "Noop reconciler is disabled.");
          }
        }

        var commitMount = mutation.commitMount,
            commitUpdate = mutation.commitUpdate,
            resetTextContent = mutation.resetTextContent,
            commitTextUpdate = mutation.commitTextUpdate,
            appendChild = mutation.appendChild,
            appendChildToContainer = mutation.appendChildToContainer,
            insertBefore = mutation.insertBefore,
            insertInContainerBefore = mutation.insertInContainerBefore,
            removeChild = mutation.removeChild,
            removeChildFromContainer = mutation.removeChildFromContainer;

        function getHostParentFiber(fiber) {
          var parent = fiber["return"];

          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }

            parent = parent["return"];
          }

          invariant(false, "Expected to find a host parent. This error is likely caused by a bug " + "in React. Please file an issue.");
        }

        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }

        function getHostSibling(fiber) {
          var node = fiber;

          siblings: while (true) {
            while (node.sibling === null) {
              if (node["return"] === null || isHostParent(node["return"])) {
                return null;
              }

              node = node["return"];
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;

            while (node.tag !== HostComponent && node.tag !== HostText) {
              if (node.effectTag & Placement) {
                continue siblings;
              }

              if (node.child === null || node.tag === HostPortal) {
                continue siblings;
              } else {
                node.child["return"] = node;
                node = node.child;
              }
            }

            if (!(node.effectTag & Placement)) {
              return node.stateNode;
            }
          }
        }

        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          var parent = void 0;
          var isContainer = void 0;

          switch (parentFiber.tag) {
            case HostComponent:
              parent = parentFiber.stateNode;
              isContainer = false;
              break;

            case HostRoot:
              parent = parentFiber.stateNode.containerInfo;
              isContainer = true;
              break;

            case HostPortal:
              parent = parentFiber.stateNode.containerInfo;
              isContainer = true;
              break;

            default:
              invariant(false, "Invalid host parent fiber. This error is likely caused by a bug " + "in React. Please file an issue.");
          }

          if (parentFiber.effectTag & ContentReset) {
            resetTextContent(parent);
            parentFiber.effectTag &= ~ContentReset;
          }

          var before = getHostSibling(finishedWork);
          var node = finishedWork;

          while (true) {
            if (node.tag === HostComponent || node.tag === HostText) {
              if (before) {
                if (isContainer) {
                  insertInContainerBefore(parent, node.stateNode, before);
                } else {
                  insertBefore(parent, node.stateNode, before);
                }
              } else {
                if (isContainer) {
                  appendChildToContainer(parent, node.stateNode);
                } else {
                  appendChild(parent, node.stateNode);
                }
              }
            } else if (node.tag === HostPortal) {} else if (node.child !== null) {
              node.child["return"] = node;
              node = node.child;
              continue;
            }

            if (node === finishedWork) {
              return;
            }

            while (node.sibling === null) {
              if (node["return"] === null || node["return"] === finishedWork) {
                return;
              }

              node = node["return"];
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
        }

        function unmountHostComponents(current) {
          var node = current;
          var currentParentIsValid = false;
          var currentParent = void 0;
          var currentParentIsContainer = void 0;

          while (true) {
            if (!currentParentIsValid) {
              var parent = node["return"];

              findParent: while (true) {
                invariant(parent !== null, "Expected to find a host parent. This error is likely caused by " + "a bug in React. Please file an issue.");

                switch (parent.tag) {
                  case HostComponent:
                    currentParent = parent.stateNode;
                    currentParentIsContainer = false;
                    break findParent;

                  case HostRoot:
                    currentParent = parent.stateNode.containerInfo;
                    currentParentIsContainer = true;
                    break findParent;

                  case HostPortal:
                    currentParent = parent.stateNode.containerInfo;
                    currentParentIsContainer = true;
                    break findParent;
                }

                parent = parent["return"];
              }

              currentParentIsValid = true;
            }

            if (node.tag === HostComponent || node.tag === HostText) {
              commitNestedUnmounts(node);

              if (currentParentIsContainer) {
                removeChildFromContainer(currentParent, node.stateNode);
              } else {
                removeChild(currentParent, node.stateNode);
              }
            } else if (node.tag === HostPortal) {
              currentParent = node.stateNode.containerInfo;

              if (node.child !== null) {
                node.child["return"] = node;
                node = node.child;
                continue;
              }
            } else {
              commitUnmount(node);

              if (node.child !== null) {
                node.child["return"] = node;
                node = node.child;
                continue;
              }
            }

            if (node === current) {
              return;
            }

            while (node.sibling === null) {
              if (node["return"] === null || node["return"] === current) {
                return;
              }

              node = node["return"];

              if (node.tag === HostPortal) {
                currentParentIsValid = false;
              }
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
        }

        function commitDeletion(current) {
          unmountHostComponents(current);
          detachFiber(current);
        }

        function commitWork(current, finishedWork) {
          switch (finishedWork.tag) {
            case ClassComponent:
              {
                return;
              }

            case HostComponent:
              {
                var instance = finishedWork.stateNode;

                if (instance != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current !== null ? current.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;

                  if (updatePayload !== null) {
                    commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
                  }
                }

                return;
              }

            case HostText:
              {
                invariant(finishedWork.stateNode !== null, "This should have a text node initialized. This error is likely " + "caused by a bug in React. Please file an issue.");
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current !== null ? current.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }

            case HostRoot:
              {
                return;
              }

            default:
              {
                invariant(false, "This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
              }
          }
        }

        function commitResetTextContent(current) {
          resetTextContent(current.stateNode);
        }

        if (enableMutatingReconciler) {
          return {
            commitResetTextContent: commitResetTextContent,
            commitPlacement: commitPlacement,
            commitDeletion: commitDeletion,
            commitWork: commitWork,
            commitLifeCycles: commitLifeCycles,
            commitAttachRef: commitAttachRef,
            commitDetachRef: commitDetachRef
          };
        } else {
          invariant(false, "Mutating reconciler is disabled.");
        }
      };

      var NO_CONTEXT = {};

      var ReactFiberHostContext = function ReactFiberHostContext(config) {
        var getChildHostContext = config.getChildHostContext,
            getRootHostContext = config.getRootHostContext;
        var contextStackCursor = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);

        function requiredContext(c) {
          invariant(c !== NO_CONTEXT, "Expected host context to exist. This error is likely caused by a bug " + "in React. Please file an issue.");
          return c;
        }

        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }

        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor, nextRootContext, fiber);
        }

        function popHostContainer(fiber) {
          pop(contextStackCursor, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }

        function getHostContext() {
          var context = requiredContext(contextStackCursor.current);
          return context;
        }

        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor.current);
          var nextContext = getChildHostContext(context, fiber.type, rootInstance);

          if (context === nextContext) {
            return;
          }

          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor, nextContext, fiber);
        }

        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }

          pop(contextStackCursor, fiber);
          pop(contextFiberStackCursor, fiber);
        }

        function resetHostContainer() {
          contextStackCursor.current = NO_CONTEXT;
          rootInstanceStackCursor.current = NO_CONTEXT;
        }

        return {
          getHostContext: getHostContext,
          getRootHostContainer: getRootHostContainer,
          popHostContainer: popHostContainer,
          popHostContext: popHostContext,
          pushHostContainer: pushHostContainer,
          pushHostContext: pushHostContext,
          resetHostContainer: resetHostContainer
        };
      };

      var ReactFiberHydrationContext = function ReactFiberHydrationContext(config) {
        var shouldSetTextContent = config.shouldSetTextContent,
            hydration = config.hydration;

        if (!hydration) {
          return {
            enterHydrationState: function enterHydrationState() {
              return false;
            },
            resetHydrationState: function resetHydrationState() {},
            tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance() {},
            prepareToHydrateHostInstance: function prepareToHydrateHostInstance() {
              invariant(false, "Expected prepareToHydrateHostInstance() to never be called. " + "This error is likely caused by a bug in React. Please file an issue.");
            },
            prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance() {
              invariant(false, "Expected prepareToHydrateHostTextInstance() to never be called. " + "This error is likely caused by a bug in React. Please file an issue.");
            },
            popHydrationState: function popHydrationState(fiber) {
              return false;
            }
          };
        }

        var canHydrateInstance = hydration.canHydrateInstance,
            canHydrateTextInstance = hydration.canHydrateTextInstance,
            getNextHydratableSibling = hydration.getNextHydratableSibling,
            getFirstHydratableChild = hydration.getFirstHydratableChild,
            hydrateInstance = hydration.hydrateInstance,
            hydrateTextInstance = hydration.hydrateTextInstance,
            didNotMatchHydratedContainerTextInstance = hydration.didNotMatchHydratedContainerTextInstance,
            didNotMatchHydratedTextInstance = hydration.didNotMatchHydratedTextInstance,
            didNotHydrateContainerInstance = hydration.didNotHydrateContainerInstance,
            didNotHydrateInstance = hydration.didNotHydrateInstance,
            didNotFindHydratableContainerInstance = hydration.didNotFindHydratableContainerInstance,
            didNotFindHydratableContainerTextInstance = hydration.didNotFindHydratableContainerTextInstance,
            didNotFindHydratableInstance = hydration.didNotFindHydratableInstance,
            didNotFindHydratableTextInstance = hydration.didNotFindHydratableTextInstance;
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;

        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChild(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          return true;
        }

        function deleteHydratableInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;

              case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
            }
          }
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete["return"] = returnFiber;
          childToDelete.effectTag = Deletion;

          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }
        }

        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.effectTag |= Placement;
          {
            switch (returnFiber.tag) {
              case HostRoot:
                {
                  var parentContainer = returnFiber.stateNode.containerInfo;

                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableContainerInstance(parentContainer, type, props);
                      break;

                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableContainerTextInstance(parentContainer, text);
                      break;
                  }

                  break;
                }

              case HostComponent:
                {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;

                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
                      break;

                    case HostText:
                      var _text = fiber.pendingProps;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                      break;
                  }

                  break;
                }

              default:
                return;
            }
          }
        }

        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent:
              {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type, props);

                if (instance !== null) {
                  fiber.stateNode = instance;
                  return true;
                }

                return false;
              }

            case HostText:
              {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);

                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  return true;
                }

                return false;
              }

            default:
              return false;
          }
        }

        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }

          var nextInstance = nextHydratableInstance;

          if (!nextInstance) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }

          if (!tryHydrate(fiber, nextInstance)) {
            nextInstance = getNextHydratableSibling(nextInstance);

            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }

            deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);
          }

          hydrationParentFiber = fiber;
          nextHydratableInstance = getFirstHydratableChild(nextInstance);
        }

        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
          fiber.updateQueue = updatePayload;

          if (updatePayload !== null) {
            return true;
          }

          return false;
        }

        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          {
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;

              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot:
                    {
                      var parentContainer = returnFiber.stateNode.containerInfo;
                      didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                      break;
                    }

                  case HostComponent:
                    {
                      var parentType = returnFiber.type;
                      var parentProps = returnFiber.memoizedProps;
                      var parentInstance = returnFiber.stateNode;
                      didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                      break;
                    }
                }
              }
            }
          }
          return shouldUpdate;
        }

        function popToNextHostParent(fiber) {
          var parent = fiber["return"];

          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot) {
            parent = parent["return"];
          }

          hydrationParentFiber = parent;
        }

        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }

          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }

          var type = fiber.type;

          if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;

            while (nextInstance) {
              deleteHydratableInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }

          popToNextHostParent(fiber);
          nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          return true;
        }

        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
        }

        return {
          enterHydrationState: enterHydrationState,
          resetHydrationState: resetHydrationState,
          tryToClaimNextHydratableInstance: tryToClaimNextHydratableInstance,
          prepareToHydrateHostInstance: prepareToHydrateHostInstance,
          prepareToHydrateHostTextInstance: prepareToHydrateHostTextInstance,
          popHydrationState: popHydrationState
        };
      };

      var ReactFiberInstrumentation = {
        debugTool: null
      };
      var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;
      var invokeGuardedCallback$1 = ReactErrorUtils.invokeGuardedCallback;
      var hasCaughtError = ReactErrorUtils.hasCaughtError;
      var clearCaughtError = ReactErrorUtils.clearCaughtError;
      {
        var didWarnAboutStateTransition = false;
        var didWarnSetStateChildContext = false;
        var didWarnStateUpdateForUnmountedComponent = {};

        var warnAboutUpdateOnUnmounted = function warnAboutUpdateOnUnmounted(fiber) {
          var componentName = getComponentName(fiber) || "ReactClass";

          if (didWarnStateUpdateForUnmountedComponent[componentName]) {
            return;
          }

          warning(false, "Can only update a mounted or mounting " + "component. This usually means you called setState, replaceState, " + "or forceUpdate on an unmounted component. This is a no-op.\n\nPlease " + "check the code for the %s component.", componentName);
          didWarnStateUpdateForUnmountedComponent[componentName] = true;
        };

        var warnAboutInvalidUpdates = function warnAboutInvalidUpdates(instance) {
          switch (ReactDebugCurrentFiber.phase) {
            case "getChildContext":
              if (didWarnSetStateChildContext) {
                return;
              }

              warning(false, "setState(...): Cannot call setState() inside getChildContext()");
              didWarnSetStateChildContext = true;
              break;

            case "render":
              if (didWarnAboutStateTransition) {
                return;
              }

              warning(false, "Cannot update during an existing state transition (such as within " + "`render` or another component's constructor). Render methods should " + "be a pure function of props and state; constructor side-effects are " + "an anti-pattern, but can be moved to `componentWillMount`.");
              didWarnAboutStateTransition = true;
              break;
          }
        };
      }

      var ReactFiberScheduler = function ReactFiberScheduler(config) {
        var hostContext = ReactFiberHostContext(config);
        var hydrationContext = ReactFiberHydrationContext(config);
        var popHostContainer = hostContext.popHostContainer,
            popHostContext = hostContext.popHostContext,
            resetHostContainer = hostContext.resetHostContainer;

        var _ReactFiberBeginWork = ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber),
            beginWork = _ReactFiberBeginWork.beginWork,
            beginFailedWork = _ReactFiberBeginWork.beginFailedWork;

        var _ReactFiberCompleteWo = ReactFiberCompleteWork(config, hostContext, hydrationContext),
            completeWork = _ReactFiberCompleteWo.completeWork;

        var _ReactFiberCommitWork = ReactFiberCommitWork(config, captureError),
            commitResetTextContent = _ReactFiberCommitWork.commitResetTextContent,
            commitPlacement = _ReactFiberCommitWork.commitPlacement,
            commitDeletion = _ReactFiberCommitWork.commitDeletion,
            commitWork = _ReactFiberCommitWork.commitWork,
            commitLifeCycles = _ReactFiberCommitWork.commitLifeCycles,
            commitAttachRef = _ReactFiberCommitWork.commitAttachRef,
            commitDetachRef = _ReactFiberCommitWork.commitDetachRef;

        var now = config.now,
            scheduleDeferredCallback = config.scheduleDeferredCallback,
            cancelDeferredCallback = config.cancelDeferredCallback,
            useSyncScheduling = config.useSyncScheduling,
            prepareForCommit = config.prepareForCommit,
            resetAfterCommit = config.resetAfterCommit;
        var startTime = now();
        var mostRecentCurrentTime = msToExpirationTime(0);
        var lastUniqueAsyncExpiration = 0;
        var expirationContext = NoWork;
        var isWorking = false;
        var nextUnitOfWork = null;
        var nextRoot = null;
        var nextRenderExpirationTime = NoWork;
        var nextEffect = null;
        var capturedErrors = null;
        var failedBoundaries = null;
        var commitPhaseBoundaries = null;
        var firstUncaughtError = null;
        var didFatal = false;
        var isCommitting = false;
        var isUnmounting = false;
        var interruptedBy = null;

        function resetContextStack() {
          reset();
          resetContext();
          resetHostContainer();
        }

        function commitAllHostEffects() {
          while (nextEffect !== null) {
            {
              ReactDebugCurrentFiber.setCurrentFiber(nextEffect);
            }
            recordEffect();
            var effectTag = nextEffect.effectTag;

            if (effectTag & ContentReset) {
              commitResetTextContent(nextEffect);
            }

            if (effectTag & Ref) {
              var current = nextEffect.alternate;

              if (current !== null) {
                commitDetachRef(current);
              }
            }

            var primaryEffectTag = effectTag & ~(Callback | Err | ContentReset | Ref | PerformedWork);

            switch (primaryEffectTag) {
              case Placement:
                {
                  commitPlacement(nextEffect);
                  nextEffect.effectTag &= ~Placement;
                  break;
                }

              case PlacementAndUpdate:
                {
                  commitPlacement(nextEffect);
                  nextEffect.effectTag &= ~Placement;
                  var _current = nextEffect.alternate;
                  commitWork(_current, nextEffect);
                  break;
                }

              case Update:
                {
                  var _current2 = nextEffect.alternate;
                  commitWork(_current2, nextEffect);
                  break;
                }

              case Deletion:
                {
                  isUnmounting = true;
                  commitDeletion(nextEffect);
                  isUnmounting = false;
                  break;
                }
            }

            nextEffect = nextEffect.nextEffect;
          }

          {
            ReactDebugCurrentFiber.resetCurrentFiber();
          }
        }

        function commitAllLifeCycles() {
          while (nextEffect !== null) {
            var effectTag = nextEffect.effectTag;

            if (effectTag & (Update | Callback)) {
              recordEffect();
              var current = nextEffect.alternate;
              commitLifeCycles(current, nextEffect);
            }

            if (effectTag & Ref) {
              recordEffect();
              commitAttachRef(nextEffect);
            }

            if (effectTag & Err) {
              recordEffect();
              commitErrorHandling(nextEffect);
            }

            var next = nextEffect.nextEffect;
            nextEffect.nextEffect = null;
            nextEffect = next;
          }
        }

        function commitRoot(finishedWork) {
          isWorking = true;
          isCommitting = true;
          startCommitTimer();
          var root = finishedWork.stateNode;
          invariant(root.current !== finishedWork, "Cannot commit the same tree as before. This is probably a bug " + "related to the return field. This error is likely caused by a bug " + "in React. Please file an issue.");
          root.isReadyForCommit = false;
          ReactCurrentOwner.current = null;
          var firstEffect = void 0;

          if (finishedWork.effectTag > PerformedWork) {
            if (finishedWork.lastEffect !== null) {
              finishedWork.lastEffect.nextEffect = finishedWork;
              firstEffect = finishedWork.firstEffect;
            } else {
              firstEffect = finishedWork;
            }
          } else {
            firstEffect = finishedWork.firstEffect;
          }

          prepareForCommit();
          nextEffect = firstEffect;
          startCommitHostEffectsTimer();

          while (nextEffect !== null) {
            var didError = false;

            var _error = void 0;

            {
              invokeGuardedCallback$1(null, commitAllHostEffects, null);

              if (hasCaughtError()) {
                didError = true;
                _error = clearCaughtError();
              }
            }

            if (didError) {
              invariant(nextEffect !== null, "Should have next effect. This error is likely caused by a bug " + "in React. Please file an issue.");
              captureError(nextEffect, _error);

              if (nextEffect !== null) {
                nextEffect = nextEffect.nextEffect;
              }
            }
          }

          stopCommitHostEffectsTimer();
          resetAfterCommit();
          root.current = finishedWork;
          nextEffect = firstEffect;
          startCommitLifeCyclesTimer();

          while (nextEffect !== null) {
            var _didError = false;

            var _error2 = void 0;

            {
              invokeGuardedCallback$1(null, commitAllLifeCycles, null);

              if (hasCaughtError()) {
                _didError = true;
                _error2 = clearCaughtError();
              }
            }

            if (_didError) {
              invariant(nextEffect !== null, "Should have next effect. This error is likely caused by a bug " + "in React. Please file an issue.");
              captureError(nextEffect, _error2);

              if (nextEffect !== null) {
                nextEffect = nextEffect.nextEffect;
              }
            }
          }

          isCommitting = false;
          isWorking = false;
          stopCommitLifeCyclesTimer();
          stopCommitTimer();

          if (typeof onCommitRoot === "function") {
            onCommitRoot(finishedWork.stateNode);
          }

          if (true && ReactFiberInstrumentation_1.debugTool) {
            ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);
          }

          if (commitPhaseBoundaries) {
            commitPhaseBoundaries.forEach(scheduleErrorRecovery);
            commitPhaseBoundaries = null;
          }

          if (firstUncaughtError !== null) {
            var _error3 = firstUncaughtError;
            firstUncaughtError = null;
            onUncaughtError(_error3);
          }

          var remainingTime = root.current.expirationTime;

          if (remainingTime === NoWork) {
            capturedErrors = null;
            failedBoundaries = null;
          }

          return remainingTime;
        }

        function resetExpirationTime(workInProgress, renderTime) {
          if (renderTime !== Never && workInProgress.expirationTime === Never) {
            return;
          }

          var newExpirationTime = getUpdateExpirationTime(workInProgress);
          var child = workInProgress.child;

          while (child !== null) {
            if (child.expirationTime !== NoWork && (newExpirationTime === NoWork || newExpirationTime > child.expirationTime)) {
              newExpirationTime = child.expirationTime;
            }

            child = child.sibling;
          }

          workInProgress.expirationTime = newExpirationTime;
        }

        function completeUnitOfWork(workInProgress) {
          while (true) {
            var current = workInProgress.alternate;
            {
              ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
            }
            var next = completeWork(current, workInProgress, nextRenderExpirationTime);
            {
              ReactDebugCurrentFiber.resetCurrentFiber();
            }
            var returnFiber = workInProgress["return"];
            var siblingFiber = workInProgress.sibling;
            resetExpirationTime(workInProgress, nextRenderExpirationTime);

            if (next !== null) {
              stopWorkTimer(workInProgress);

              if (true && ReactFiberInstrumentation_1.debugTool) {
                ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
              }

              return next;
            }

            if (returnFiber !== null) {
              if (returnFiber.firstEffect === null) {
                returnFiber.firstEffect = workInProgress.firstEffect;
              }

              if (workInProgress.lastEffect !== null) {
                if (returnFiber.lastEffect !== null) {
                  returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
                }

                returnFiber.lastEffect = workInProgress.lastEffect;
              }

              var effectTag = workInProgress.effectTag;

              if (effectTag > PerformedWork) {
                if (returnFiber.lastEffect !== null) {
                  returnFiber.lastEffect.nextEffect = workInProgress;
                } else {
                  returnFiber.firstEffect = workInProgress;
                }

                returnFiber.lastEffect = workInProgress;
              }
            }

            stopWorkTimer(workInProgress);

            if (true && ReactFiberInstrumentation_1.debugTool) {
              ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
            }

            if (siblingFiber !== null) {
              return siblingFiber;
            } else if (returnFiber !== null) {
              workInProgress = returnFiber;
              continue;
            } else {
              var root = workInProgress.stateNode;
              root.isReadyForCommit = true;
              return null;
            }
          }

          return null;
        }

        function performUnitOfWork(workInProgress) {
          var current = workInProgress.alternate;
          startWorkTimer(workInProgress);
          {
            ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
          }
          var next = beginWork(current, workInProgress, nextRenderExpirationTime);
          {
            ReactDebugCurrentFiber.resetCurrentFiber();
          }

          if (true && ReactFiberInstrumentation_1.debugTool) {
            ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
          }

          if (next === null) {
            next = completeUnitOfWork(workInProgress);
          }

          ReactCurrentOwner.current = null;
          return next;
        }

        function performFailedUnitOfWork(workInProgress) {
          var current = workInProgress.alternate;
          startWorkTimer(workInProgress);
          {
            ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
          }
          var next = beginFailedWork(current, workInProgress, nextRenderExpirationTime);
          {
            ReactDebugCurrentFiber.resetCurrentFiber();
          }

          if (true && ReactFiberInstrumentation_1.debugTool) {
            ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
          }

          if (next === null) {
            next = completeUnitOfWork(workInProgress);
          }

          ReactCurrentOwner.current = null;
          return next;
        }

        function workLoop(expirationTime) {
          if (capturedErrors !== null) {
            slowWorkLoopThatChecksForFailedWork(expirationTime);
            return;
          }

          if (nextRenderExpirationTime === NoWork || nextRenderExpirationTime > expirationTime) {
            return;
          }

          if (nextRenderExpirationTime <= mostRecentCurrentTime) {
            while (nextUnitOfWork !== null) {
              nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
            }
          } else {
            while (nextUnitOfWork !== null && !shouldYield()) {
              nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
            }
          }
        }

        function slowWorkLoopThatChecksForFailedWork(expirationTime) {
          if (nextRenderExpirationTime === NoWork || nextRenderExpirationTime > expirationTime) {
            return;
          }

          if (nextRenderExpirationTime <= mostRecentCurrentTime) {
            while (nextUnitOfWork !== null) {
              if (hasCapturedError(nextUnitOfWork)) {
                nextUnitOfWork = performFailedUnitOfWork(nextUnitOfWork);
              } else {
                nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
              }
            }
          } else {
            while (nextUnitOfWork !== null && !shouldYield()) {
              if (hasCapturedError(nextUnitOfWork)) {
                nextUnitOfWork = performFailedUnitOfWork(nextUnitOfWork);
              } else {
                nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
              }
            }
          }
        }

        function renderRootCatchBlock(root, failedWork, boundary, expirationTime) {
          unwindContexts(failedWork, boundary);
          nextUnitOfWork = performFailedUnitOfWork(boundary);
          workLoop(expirationTime);
        }

        function renderRoot(root, expirationTime) {
          invariant(!isWorking, "renderRoot was called recursively. This error is likely caused " + "by a bug in React. Please file an issue.");
          isWorking = true;
          root.isReadyForCommit = false;

          if (root !== nextRoot || expirationTime !== nextRenderExpirationTime || nextUnitOfWork === null) {
            resetContextStack();
            nextRoot = root;
            nextRenderExpirationTime = expirationTime;
            nextUnitOfWork = createWorkInProgress(nextRoot.current, null, expirationTime);
          }

          startWorkLoopTimer(nextUnitOfWork);
          var didError = false;
          var error = null;
          {
            invokeGuardedCallback$1(null, workLoop, null, expirationTime);

            if (hasCaughtError()) {
              didError = true;
              error = clearCaughtError();
            }
          }

          while (didError) {
            if (didFatal) {
              firstUncaughtError = error;
              break;
            }

            var failedWork = nextUnitOfWork;

            if (failedWork === null) {
              didFatal = true;
              continue;
            }

            var boundary = captureError(failedWork, error);
            invariant(boundary !== null, "Should have found an error boundary. This error is likely " + "caused by a bug in React. Please file an issue.");

            if (didFatal) {
              continue;
            }

            didError = false;
            error = null;
            {
              invokeGuardedCallback$1(null, renderRootCatchBlock, null, root, failedWork, boundary, expirationTime);

              if (hasCaughtError()) {
                didError = true;
                error = clearCaughtError();
                continue;
              }
            }
            break;
          }

          var uncaughtError = firstUncaughtError;
          stopWorkLoopTimer(interruptedBy);
          interruptedBy = null;
          isWorking = false;
          didFatal = false;
          firstUncaughtError = null;

          if (uncaughtError !== null) {
            onUncaughtError(uncaughtError);
          }

          return root.isReadyForCommit ? root.current.alternate : null;
        }

        function captureError(failedWork, error) {
          ReactCurrentOwner.current = null;
          {
            ReactDebugCurrentFiber.resetCurrentFiber();
          }
          var boundary = null;
          var errorBoundaryFound = false;
          var willRetry = false;
          var errorBoundaryName = null;

          if (failedWork.tag === HostRoot) {
            boundary = failedWork;

            if (isFailedBoundary(failedWork)) {
              didFatal = true;
            }
          } else {
            var node = failedWork["return"];

            while (node !== null && boundary === null) {
              if (node.tag === ClassComponent) {
                var instance = node.stateNode;

                if (typeof instance.componentDidCatch === "function") {
                  errorBoundaryFound = true;
                  errorBoundaryName = getComponentName(node);
                  boundary = node;
                  willRetry = true;
                }
              } else if (node.tag === HostRoot) {
                boundary = node;
              }

              if (isFailedBoundary(node)) {
                if (isUnmounting) {
                  return null;
                }

                if (commitPhaseBoundaries !== null && (commitPhaseBoundaries.has(node) || node.alternate !== null && commitPhaseBoundaries.has(node.alternate))) {
                  return null;
                }

                boundary = null;
                willRetry = false;
              }

              node = node["return"];
            }
          }

          if (boundary !== null) {
            if (failedBoundaries === null) {
              failedBoundaries = new Set();
            }

            failedBoundaries.add(boundary);

            var _componentStack = getStackAddendumByWorkInProgressFiber(failedWork);

            var _componentName = getComponentName(failedWork);

            if (capturedErrors === null) {
              capturedErrors = new Map();
            }

            var capturedError = {
              componentName: _componentName,
              componentStack: _componentStack,
              error: error,
              errorBoundary: errorBoundaryFound ? boundary.stateNode : null,
              errorBoundaryFound: errorBoundaryFound,
              errorBoundaryName: errorBoundaryName,
              willRetry: willRetry
            };
            capturedErrors.set(boundary, capturedError);

            try {
              logCapturedError(capturedError);
            } catch (e) {
              var suppressLogging = e && e.suppressReactErrorLogging;

              if (!suppressLogging) {
                console.error(e);
              }
            }

            if (isCommitting) {
              if (commitPhaseBoundaries === null) {
                commitPhaseBoundaries = new Set();
              }

              commitPhaseBoundaries.add(boundary);
            } else {
              scheduleErrorRecovery(boundary);
            }

            return boundary;
          } else if (firstUncaughtError === null) {
            firstUncaughtError = error;
          }

          return null;
        }

        function hasCapturedError(fiber) {
          return capturedErrors !== null && (capturedErrors.has(fiber) || fiber.alternate !== null && capturedErrors.has(fiber.alternate));
        }

        function isFailedBoundary(fiber) {
          return failedBoundaries !== null && (failedBoundaries.has(fiber) || fiber.alternate !== null && failedBoundaries.has(fiber.alternate));
        }

        function commitErrorHandling(effectfulFiber) {
          var capturedError = void 0;

          if (capturedErrors !== null) {
            capturedError = capturedErrors.get(effectfulFiber);
            capturedErrors["delete"](effectfulFiber);

            if (capturedError == null) {
              if (effectfulFiber.alternate !== null) {
                effectfulFiber = effectfulFiber.alternate;
                capturedError = capturedErrors.get(effectfulFiber);
                capturedErrors["delete"](effectfulFiber);
              }
            }
          }

          invariant(capturedError != null, "No error for given unit of work. This error is likely caused by a " + "bug in React. Please file an issue.");

          switch (effectfulFiber.tag) {
            case ClassComponent:
              var instance = effectfulFiber.stateNode;
              var info = {
                componentStack: capturedError.componentStack
              };
              instance.componentDidCatch(capturedError.error, info);
              return;

            case HostRoot:
              if (firstUncaughtError === null) {
                firstUncaughtError = capturedError.error;
              }

              return;

            default:
              invariant(false, "Invalid type of work. This error is likely caused by a bug in " + "React. Please file an issue.");
          }
        }

        function unwindContexts(from, to) {
          var node = from;

          while (node !== null) {
            switch (node.tag) {
              case ClassComponent:
                popContextProvider(node);
                break;

              case HostComponent:
                popHostContext(node);
                break;

              case HostRoot:
                popHostContainer(node);
                break;

              case HostPortal:
                popHostContainer(node);
                break;
            }

            if (node === to || node.alternate === to) {
              stopFailedWorkTimer(node);
              break;
            } else {
              stopWorkTimer(node);
            }

            node = node["return"];
          }
        }

        function computeAsyncExpiration() {
          var currentTime = recalculateCurrentTime();
          var expirationMs = 1000;
          var bucketSizeMs = 200;
          return computeExpirationBucket(currentTime, expirationMs, bucketSizeMs);
        }

        function computeUniqueAsyncExpiration() {
          var result = computeAsyncExpiration();

          if (result <= lastUniqueAsyncExpiration) {
            result = lastUniqueAsyncExpiration + 1;
          }

          lastUniqueAsyncExpiration = result;
          return lastUniqueAsyncExpiration;
        }

        function computeExpirationForFiber(fiber) {
          var expirationTime = void 0;

          if (expirationContext !== NoWork) {
            expirationTime = expirationContext;
          } else if (isWorking) {
            if (isCommitting) {
              expirationTime = Sync;
            } else {
              expirationTime = nextRenderExpirationTime;
            }
          } else {
            if (useSyncScheduling && !(fiber.internalContextTag & AsyncUpdates)) {
              expirationTime = Sync;
            } else {
              expirationTime = computeAsyncExpiration();
            }
          }

          return expirationTime;
        }

        function scheduleWork(fiber, expirationTime) {
          return scheduleWorkImpl(fiber, expirationTime, false);
        }

        function checkRootNeedsClearing(root, fiber, expirationTime) {
          if (!isWorking && root === nextRoot && expirationTime < nextRenderExpirationTime) {
            if (nextUnitOfWork !== null) {
              interruptedBy = fiber;
            }

            nextRoot = null;
            nextUnitOfWork = null;
            nextRenderExpirationTime = NoWork;
          }
        }

        function scheduleWorkImpl(fiber, expirationTime, isErrorRecovery) {
          recordScheduleUpdate();
          {
            if (!isErrorRecovery && fiber.tag === ClassComponent) {
              var instance = fiber.stateNode;
              warnAboutInvalidUpdates(instance);
            }
          }
          var node = fiber;

          while (node !== null) {
            if (node.expirationTime === NoWork || node.expirationTime > expirationTime) {
              node.expirationTime = expirationTime;
            }

            if (node.alternate !== null) {
              if (node.alternate.expirationTime === NoWork || node.alternate.expirationTime > expirationTime) {
                node.alternate.expirationTime = expirationTime;
              }
            }

            if (node["return"] === null) {
              if (node.tag === HostRoot) {
                var root = node.stateNode;
                checkRootNeedsClearing(root, fiber, expirationTime);
                requestWork(root, expirationTime);
                checkRootNeedsClearing(root, fiber, expirationTime);
              } else {
                {
                  if (!isErrorRecovery && fiber.tag === ClassComponent) {
                    warnAboutUpdateOnUnmounted(fiber);
                  }
                }
                return;
              }
            }

            node = node["return"];
          }
        }

        function scheduleErrorRecovery(fiber) {
          scheduleWorkImpl(fiber, Sync, true);
        }

        function recalculateCurrentTime() {
          var ms = now() - startTime;
          mostRecentCurrentTime = msToExpirationTime(ms);
          return mostRecentCurrentTime;
        }

        function deferredUpdates(fn) {
          var previousExpirationContext = expirationContext;
          expirationContext = computeAsyncExpiration();

          try {
            return fn();
          } finally {
            expirationContext = previousExpirationContext;
          }
        }

        function syncUpdates(fn) {
          var previousExpirationContext = expirationContext;
          expirationContext = Sync;

          try {
            return fn();
          } finally {
            expirationContext = previousExpirationContext;
          }
        }

        var firstScheduledRoot = null;
        var lastScheduledRoot = null;
        var callbackExpirationTime = NoWork;
        var callbackID = -1;
        var isRendering = false;
        var nextFlushedRoot = null;
        var nextFlushedExpirationTime = NoWork;
        var deadlineDidExpire = false;
        var hasUnhandledError = false;
        var unhandledError = null;
        var deadline = null;
        var isBatchingUpdates = false;
        var isUnbatchingUpdates = false;
        var completedBatches = null;
        var NESTED_UPDATE_LIMIT = 1000;
        var nestedUpdateCount = 0;
        var timeHeuristicForUnitOfWork = 1;

        function scheduleCallbackWithExpiration(expirationTime) {
          if (callbackExpirationTime !== NoWork) {
            if (expirationTime > callbackExpirationTime) {
              return;
            } else {
              cancelDeferredCallback(callbackID);
            }
          } else {
            startRequestCallbackTimer();
          }

          var currentMs = now() - startTime;
          var expirationMs = expirationTimeToMs(expirationTime);
          var timeout = expirationMs - currentMs;
          callbackExpirationTime = expirationTime;
          callbackID = scheduleDeferredCallback(performAsyncWork, {
            timeout: timeout
          });
        }

        function requestWork(root, expirationTime) {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            invariant(false, "Maximum update depth exceeded. This can happen when a " + "component repeatedly calls setState inside componentWillUpdate or " + "componentDidUpdate. React limits the number of nested updates to " + "prevent infinite loops.");
          }

          if (root.nextScheduledRoot === null) {
            root.remainingExpirationTime = expirationTime;

            if (lastScheduledRoot === null) {
              firstScheduledRoot = lastScheduledRoot = root;
              root.nextScheduledRoot = root;
            } else {
              lastScheduledRoot.nextScheduledRoot = root;
              lastScheduledRoot = root;
              lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
            }
          } else {
            var remainingExpirationTime = root.remainingExpirationTime;

            if (remainingExpirationTime === NoWork || expirationTime < remainingExpirationTime) {
              root.remainingExpirationTime = expirationTime;
            }
          }

          if (isRendering) {
            return;
          }

          if (isBatchingUpdates) {
            if (isUnbatchingUpdates) {
              nextFlushedRoot = root;
              nextFlushedExpirationTime = Sync;
              performWorkOnRoot(root, Sync, recalculateCurrentTime());
            }

            return;
          }

          if (expirationTime === Sync) {
            performWork(Sync, null);
          } else {
            scheduleCallbackWithExpiration(expirationTime);
          }
        }

        function findHighestPriorityRoot() {
          var highestPriorityWork = NoWork;
          var highestPriorityRoot = null;

          if (lastScheduledRoot !== null) {
            var previousScheduledRoot = lastScheduledRoot;
            var root = firstScheduledRoot;

            while (root !== null) {
              var remainingExpirationTime = root.remainingExpirationTime;

              if (remainingExpirationTime === NoWork) {
                invariant(previousScheduledRoot !== null && lastScheduledRoot !== null, "Should have a previous and last root. This error is likely " + "caused by a bug in React. Please file an issue.");

                if (root === root.nextScheduledRoot) {
                  root.nextScheduledRoot = null;
                  firstScheduledRoot = lastScheduledRoot = null;
                  break;
                } else if (root === firstScheduledRoot) {
                  var next = root.nextScheduledRoot;
                  firstScheduledRoot = next;
                  lastScheduledRoot.nextScheduledRoot = next;
                  root.nextScheduledRoot = null;
                } else if (root === lastScheduledRoot) {
                  lastScheduledRoot = previousScheduledRoot;
                  lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
                  root.nextScheduledRoot = null;
                  break;
                } else {
                  previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;
                  root.nextScheduledRoot = null;
                }

                root = previousScheduledRoot.nextScheduledRoot;
              } else {
                if (highestPriorityWork === NoWork || remainingExpirationTime < highestPriorityWork) {
                  highestPriorityWork = remainingExpirationTime;
                  highestPriorityRoot = root;
                }

                if (root === lastScheduledRoot) {
                  break;
                }

                previousScheduledRoot = root;
                root = root.nextScheduledRoot;
              }
            }
          }

          var previousFlushedRoot = nextFlushedRoot;

          if (previousFlushedRoot !== null && previousFlushedRoot === highestPriorityRoot) {
            nestedUpdateCount++;
          } else {
            nestedUpdateCount = 0;
          }

          nextFlushedRoot = highestPriorityRoot;
          nextFlushedExpirationTime = highestPriorityWork;
        }

        function performAsyncWork(dl) {
          performWork(NoWork, dl);
        }

        function performWork(minExpirationTime, dl) {
          deadline = dl;
          findHighestPriorityRoot();

          if (enableUserTimingAPI && deadline !== null) {
            var didExpire = nextFlushedExpirationTime < recalculateCurrentTime();
            stopRequestCallbackTimer(didExpire);
          }

          while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || nextFlushedExpirationTime <= minExpirationTime) && !deadlineDidExpire) {
            performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, recalculateCurrentTime());
            findHighestPriorityRoot();
          }

          if (deadline !== null) {
            callbackExpirationTime = NoWork;
            callbackID = -1;
          }

          if (nextFlushedExpirationTime !== NoWork) {
            scheduleCallbackWithExpiration(nextFlushedExpirationTime);
          }

          deadline = null;
          deadlineDidExpire = false;
          nestedUpdateCount = 0;
          finishRendering();
        }

        function flushRoot(root, expirationTime) {
          invariant(!isRendering, "work.commit(): Cannot commit while already rendering. This likely " + "means you attempted to commit from inside a lifecycle method.");
          performWorkOnRoot(root, expirationTime, expirationTime);
          finishRendering();
        }

        function finishRendering() {
          if (completedBatches !== null) {
            var batches = completedBatches;
            completedBatches = null;

            for (var i = 0; i < batches.length; i++) {
              var batch = batches[i];

              try {
                batch._onComplete();
              } catch (error) {
                if (!hasUnhandledError) {
                  hasUnhandledError = true;
                  unhandledError = error;
                }
              }
            }
          }

          if (hasUnhandledError) {
            var _error4 = unhandledError;
            unhandledError = null;
            hasUnhandledError = false;
            throw _error4;
          }
        }

        function performWorkOnRoot(root, expirationTime, currentTime) {
          invariant(!isRendering, "performWorkOnRoot was called recursively. This error is likely caused " + "by a bug in React. Please file an issue.");
          isRendering = true;

          if (expirationTime <= currentTime) {
            var finishedWork = root.finishedWork;

            if (finishedWork !== null) {
              completeRoot(root, finishedWork, expirationTime);
            } else {
              root.finishedWork = null;
              finishedWork = renderRoot(root, expirationTime);

              if (finishedWork !== null) {
                completeRoot(root, finishedWork, expirationTime);
              }
            }
          } else {
            var _finishedWork = root.finishedWork;

            if (_finishedWork !== null) {
              completeRoot(root, _finishedWork, expirationTime);
            } else {
              root.finishedWork = null;
              _finishedWork = renderRoot(root, expirationTime);

              if (_finishedWork !== null) {
                if (!shouldYield()) {
                  completeRoot(root, _finishedWork, expirationTime);
                } else {
                  root.finishedWork = _finishedWork;
                }
              }
            }
          }

          isRendering = false;
        }

        function completeRoot(root, finishedWork, expirationTime) {
          var firstBatch = root.firstBatch;

          if (firstBatch !== null && firstBatch._expirationTime <= expirationTime) {
            if (completedBatches === null) {
              completedBatches = [firstBatch];
            } else {
              completedBatches.push(firstBatch);
            }

            if (firstBatch._defer) {
              root.finishedWork = finishedWork;
              root.remainingExpirationTime = NoWork;
              return;
            }
          }

          root.finishedWork = null;
          root.remainingExpirationTime = commitRoot(finishedWork);
        }

        function shouldYield() {
          if (deadline === null) {
            return false;
          }

          if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
            return false;
          }

          deadlineDidExpire = true;
          return true;
        }

        function onUncaughtError(error) {
          invariant(nextFlushedRoot !== null, "Should be working on a root. This error is likely caused by a bug in " + "React. Please file an issue.");
          nextFlushedRoot.remainingExpirationTime = NoWork;

          if (!hasUnhandledError) {
            hasUnhandledError = true;
            unhandledError = error;
          }
        }

        function batchedUpdates(fn, a) {
          var previousIsBatchingUpdates = isBatchingUpdates;
          isBatchingUpdates = true;

          try {
            return fn(a);
          } finally {
            isBatchingUpdates = previousIsBatchingUpdates;

            if (!isBatchingUpdates && !isRendering) {
              performWork(Sync, null);
            }
          }
        }

        function unbatchedUpdates(fn) {
          if (isBatchingUpdates && !isUnbatchingUpdates) {
            isUnbatchingUpdates = true;

            try {
              return fn();
            } finally {
              isUnbatchingUpdates = false;
            }
          }

          return fn();
        }

        function flushSync(fn) {
          var previousIsBatchingUpdates = isBatchingUpdates;
          isBatchingUpdates = true;

          try {
            return syncUpdates(fn);
          } finally {
            isBatchingUpdates = previousIsBatchingUpdates;
            invariant(!isRendering, "flushSync was called from inside a lifecycle method. It cannot be " + "called when React is already rendering.");
            performWork(Sync, null);
          }
        }

        return {
          computeAsyncExpiration: computeAsyncExpiration,
          computeExpirationForFiber: computeExpirationForFiber,
          scheduleWork: scheduleWork,
          requestWork: requestWork,
          flushRoot: flushRoot,
          batchedUpdates: batchedUpdates,
          unbatchedUpdates: unbatchedUpdates,
          flushSync: flushSync,
          deferredUpdates: deferredUpdates,
          computeUniqueAsyncExpiration: computeUniqueAsyncExpiration
        };
      };

      {
        var didWarnAboutNestedUpdates = false;
      }

      function getContextForSubtree(parentComponent) {
        if (!parentComponent) {
          return emptyObject;
        }

        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        return isContextProvider(fiber) ? processChildContext(fiber, parentContext) : parentContext;
      }

      var ReactFiberReconciler$1 = function ReactFiberReconciler$1(config) {
        var getPublicInstance = config.getPublicInstance;

        var _ReactFiberScheduler = ReactFiberScheduler(config),
            computeAsyncExpiration = _ReactFiberScheduler.computeAsyncExpiration,
            computeUniqueAsyncExpiration = _ReactFiberScheduler.computeUniqueAsyncExpiration,
            computeExpirationForFiber = _ReactFiberScheduler.computeExpirationForFiber,
            scheduleWork = _ReactFiberScheduler.scheduleWork,
            requestWork = _ReactFiberScheduler.requestWork,
            flushRoot = _ReactFiberScheduler.flushRoot,
            batchedUpdates = _ReactFiberScheduler.batchedUpdates,
            unbatchedUpdates = _ReactFiberScheduler.unbatchedUpdates,
            flushSync = _ReactFiberScheduler.flushSync,
            deferredUpdates = _ReactFiberScheduler.deferredUpdates;

        function computeRootExpirationTime(current, element) {
          var expirationTime = void 0;

          if (enableAsyncSubtreeAPI && element != null && element.type != null && element.type.prototype != null && element.type.prototype.unstable_isAsyncReactComponent === true) {
            expirationTime = computeAsyncExpiration();
          } else {
            expirationTime = computeExpirationForFiber(current);
          }

          return expirationTime;
        }

        function scheduleRootUpdate(current, element, expirationTime, callback) {
          {
            if (ReactDebugCurrentFiber.phase === "render" && ReactDebugCurrentFiber.current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              warning(false, "Render methods should be a pure function of props and state; " + "triggering nested component updates from render is not allowed. " + "If necessary, trigger nested updates in componentDidUpdate.\n\n" + "Check the render method of %s.", getComponentName(ReactDebugCurrentFiber.current) || "Unknown");
            }
          }
          callback = callback === undefined ? null : callback;
          {
            warning(callback === null || typeof callback === "function", "render(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callback);
          }
          var update = {
            expirationTime: expirationTime,
            partialState: {
              element: element
            },
            callback: callback,
            isReplace: false,
            isForced: false,
            next: null
          };
          insertUpdateIntoFiber(current, update);
          scheduleWork(current, expirationTime);
          return expirationTime;
        }

        function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
          var current = container.current;
          {
            if (ReactFiberInstrumentation_1.debugTool) {
              if (current.alternate === null) {
                ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
              } else if (element === null) {
                ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
              } else {
                ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
              }
            }
          }
          var context = getContextForSubtree(parentComponent);

          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }

          return scheduleRootUpdate(current, element, expirationTime, callback);
        }

        function findHostInstance(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);

          if (hostFiber === null) {
            return null;
          }

          return hostFiber.stateNode;
        }

        return {
          createContainer: function createContainer(containerInfo, hydrate) {
            return createFiberRoot(containerInfo, hydrate);
          },
          updateContainer: function updateContainer(element, container, parentComponent, callback) {
            var current = container.current;
            var expirationTime = computeRootExpirationTime(current, element);
            return updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback);
          },
          updateContainerAtExpirationTime: updateContainerAtExpirationTime,
          flushRoot: flushRoot,
          requestWork: requestWork,
          computeUniqueAsyncExpiration: computeUniqueAsyncExpiration,
          batchedUpdates: batchedUpdates,
          unbatchedUpdates: unbatchedUpdates,
          deferredUpdates: deferredUpdates,
          flushSync: flushSync,
          getPublicRootInstance: function getPublicRootInstance(container) {
            var containerFiber = container.current;

            if (!containerFiber.child) {
              return null;
            }

            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);

              default:
                return containerFiber.child.stateNode;
            }
          },
          findHostInstance: findHostInstance,
          findHostInstanceWithNoPortals: function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

            if (hostFiber === null) {
              return null;
            }

            return hostFiber.stateNode;
          },
          injectIntoDevTools: function injectIntoDevTools(devToolsConfig) {
            var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            return injectInternals(babelHelpers.extends({}, devToolsConfig, {
              findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
                return findHostInstance(fiber);
              },
              findFiberByHostInstance: function findFiberByHostInstance(instance) {
                if (!_findFiberByHostInstance) {
                  return null;
                }

                return _findFiberByHostInstance(instance);
              }
            }));
          }
        };
      };

      var ReactFiberReconciler$2 = Object.freeze({
        default: ReactFiberReconciler$1
      });
      var ReactFiberReconciler$3 = ReactFiberReconciler$2 && ReactFiberReconciler$1 || ReactFiberReconciler$2;
      var reactReconciler = ReactFiberReconciler$3["default"] ? ReactFiberReconciler$3["default"] : ReactFiberReconciler$3;
      var viewConfigCallbacks = new Map();
      var viewConfigs = new Map();

      function register(name, callback) {
        invariant(!viewConfigCallbacks.has(name), "Tried to register two views with the same name %s", name);
        viewConfigCallbacks.set(name, callback);
        return name;
      }

      function get$1(name) {
        var viewConfig = void 0;

        if (!viewConfigs.has(name)) {
          var callback = viewConfigCallbacks.get(name);
          invariant(typeof callback === "function", "View config not found for name %s", name);
          viewConfigCallbacks.set(name, null);
          viewConfig = callback();
          viewConfigs.set(name, viewConfig);
        } else {
          viewConfig = viewConfigs.get(name);
        }

        invariant(viewConfig, "View config not found for name %s", name);
        return viewConfig;
      }

      function _classCallCheck$1(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      var ReactNativeFiberHostComponent = function () {
        function ReactNativeFiberHostComponent(tag, viewConfig) {
          _classCallCheck$1(this, ReactNativeFiberHostComponent);

          this._nativeTag = tag;
          this._children = [];
          this.viewConfig = viewConfig;
        }

        ReactNativeFiberHostComponent.prototype.blur = function blur() {
          TextInputState.blurTextInput(this._nativeTag);
        };

        ReactNativeFiberHostComponent.prototype.focus = function focus() {
          TextInputState.focusTextInput(this._nativeTag);
        };

        ReactNativeFiberHostComponent.prototype.measure = function measure(callback) {
          UIManager.measure(this._nativeTag, mountSafeCallback(this, callback));
        };

        ReactNativeFiberHostComponent.prototype.measureInWindow = function measureInWindow(callback) {
          UIManager.measureInWindow(this._nativeTag, mountSafeCallback(this, callback));
        };

        ReactNativeFiberHostComponent.prototype.measureLayout = function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          UIManager.measureLayout(this._nativeTag, relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
        };

        ReactNativeFiberHostComponent.prototype.setNativeProps = function setNativeProps(nativeProps) {
          {
            warnForStyleProps(nativeProps, this.viewConfig.validAttributes);
          }
          var updatePayload = create(nativeProps, this.viewConfig.validAttributes);

          if (updatePayload != null) {
            UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, updatePayload);
          }
        };

        return ReactNativeFiberHostComponent;
      }();

      var hasNativePerformanceNow = typeof performance === "object" && typeof performance.now === "function";
      var now = hasNativePerformanceNow ? function () {
        return performance.now();
      } : function () {
        return Date.now();
      };
      var scheduledCallback = null;
      var frameDeadline = 0;
      var frameDeadlineObject = {
        timeRemaining: function timeRemaining() {
          return frameDeadline - now();
        }
      };

      function setTimeoutCallback() {
        frameDeadline = now() + 5;
        var callback = scheduledCallback;
        scheduledCallback = null;

        if (callback !== null) {
          callback(frameDeadlineObject);
        }
      }

      function scheduleDeferredCallback(callback) {
        scheduledCallback = callback;
        return setTimeout(setTimeoutCallback, 1);
      }

      function cancelDeferredCallback(callbackID) {
        scheduledCallback = null;
        clearTimeout(callbackID);
      }

      function recursivelyUncacheFiberNode(node) {
        if (typeof node === "number") {
          uncacheFiberNode(node);
        } else {
          uncacheFiberNode(node._nativeTag);

          node._children.forEach(recursivelyUncacheFiberNode);
        }
      }

      var NativeRenderer = reactReconciler({
        appendInitialChild: function appendInitialChild(parentInstance, child) {
          parentInstance._children.push(child);
        },
        createInstance: function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var tag = ReactNativeTagHandles.allocateTag();
          var viewConfig = get$1(type);
          {
            for (var key in viewConfig.validAttributes) {
              if (props.hasOwnProperty(key)) {
                deepFreezeAndThrowOnMutationInDev(props[key]);
              }
            }
          }
          var updatePayload = create(props, viewConfig.validAttributes);
          UIManager.createView(tag, viewConfig.uiViewClassName, rootContainerInstance, updatePayload);
          var component = new ReactNativeFiberHostComponent(tag, viewConfig);
          precacheFiberNode(internalInstanceHandle, tag);
          updateFiberProps(tag, props);
          return component;
        },
        createTextInstance: function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          var tag = ReactNativeTagHandles.allocateTag();
          UIManager.createView(tag, "RCTRawText", rootContainerInstance, {
            text: text
          });
          precacheFiberNode(internalInstanceHandle, tag);
          return tag;
        },
        finalizeInitialChildren: function finalizeInitialChildren(parentInstance, type, props, rootContainerInstance) {
          if (parentInstance._children.length === 0) {
            return false;
          }

          var nativeTags = parentInstance._children.map(function (child) {
            return typeof child === "number" ? child : child._nativeTag;
          });

          UIManager.setChildren(parentInstance._nativeTag, nativeTags);
          return false;
        },
        getRootHostContext: function getRootHostContext() {
          return emptyObject;
        },
        getChildHostContext: function getChildHostContext() {
          return emptyObject;
        },
        getPublicInstance: function getPublicInstance(instance) {
          return instance;
        },
        now: now,
        prepareForCommit: function prepareForCommit() {},
        prepareUpdate: function prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, hostContext) {
          return emptyObject;
        },
        resetAfterCommit: function resetAfterCommit() {},
        scheduleDeferredCallback: scheduleDeferredCallback,
        cancelDeferredCallback: cancelDeferredCallback,
        shouldDeprioritizeSubtree: function shouldDeprioritizeSubtree(type, props) {
          return false;
        },
        shouldSetTextContent: function shouldSetTextContent(type, props) {
          return false;
        },
        useSyncScheduling: true,
        mutation: {
          appendChild: function appendChild(parentInstance, child) {
            var childTag = typeof child === "number" ? child : child._nativeTag;
            var children = parentInstance._children;
            var index = children.indexOf(child);

            if (index >= 0) {
              children.splice(index, 1);
              children.push(child);
              UIManager.manageChildren(parentInstance._nativeTag, [index], [children.length - 1], [], [], []);
            } else {
              children.push(child);
              UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [children.length - 1], []);
            }
          },
          appendChildToContainer: function appendChildToContainer(parentInstance, child) {
            var childTag = typeof child === "number" ? child : child._nativeTag;
            UIManager.setChildren(parentInstance, [childTag]);
          },
          commitTextUpdate: function commitTextUpdate(textInstance, oldText, newText) {
            UIManager.updateView(textInstance, "RCTRawText", {
              text: newText
            });
          },
          commitMount: function commitMount(instance, type, newProps, internalInstanceHandle) {},
          commitUpdate: function commitUpdate(instance, updatePayloadTODO, type, oldProps, newProps, internalInstanceHandle) {
            var viewConfig = instance.viewConfig;
            updateFiberProps(instance._nativeTag, newProps);
            var updatePayload = diff(oldProps, newProps, viewConfig.validAttributes);

            if (updatePayload != null) {
              UIManager.updateView(instance._nativeTag, viewConfig.uiViewClassName, updatePayload);
            }
          },
          insertBefore: function insertBefore(parentInstance, child, beforeChild) {
            var children = parentInstance._children;
            var index = children.indexOf(child);

            if (index >= 0) {
              children.splice(index, 1);
              var beforeChildIndex = children.indexOf(beforeChild);
              children.splice(beforeChildIndex, 0, child);
              UIManager.manageChildren(parentInstance._nativeTag, [index], [beforeChildIndex], [], [], []);
            } else {
              var _beforeChildIndex = children.indexOf(beforeChild);

              children.splice(_beforeChildIndex, 0, child);
              var childTag = typeof child === "number" ? child : child._nativeTag;
              UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [_beforeChildIndex], []);
            }
          },
          insertInContainerBefore: function insertInContainerBefore(parentInstance, child, beforeChild) {
            invariant(typeof parentInstance !== "number", "Container does not support insertBefore operation");
          },
          removeChild: function removeChild(parentInstance, child) {
            recursivelyUncacheFiberNode(child);
            var children = parentInstance._children;
            var index = children.indexOf(child);
            children.splice(index, 1);
            UIManager.manageChildren(parentInstance._nativeTag, [], [], [], [], [index]);
          },
          removeChildFromContainer: function removeChildFromContainer(parentInstance, child) {
            recursivelyUncacheFiberNode(child);
            UIManager.manageChildren(parentInstance, [], [], [], [], [0]);
          },
          resetTextContent: function resetTextContent(instance) {}
        }
      });

      function findNodeHandle(componentOrHandle) {
        {
          var owner = ReactCurrentOwner.current;

          if (owner !== null && owner.stateNode !== null) {
            warning(owner.stateNode._warnedAboutRefsInRender, "%s is accessing findNodeHandle inside its render(). " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName(owner) || "A component");
            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }

        if (componentOrHandle == null) {
          return null;
        }

        if (typeof componentOrHandle === "number") {
          return componentOrHandle;
        }

        var component = componentOrHandle;
        var internalInstance = get(component);

        if (internalInstance) {
          return NativeRenderer.findHostInstance(internalInstance);
        } else {
          if (component) {
            return component;
          } else {
            invariant(typeof component === "object" && "_nativeTag" in component || component.render != null && typeof component.render === "function", "findNodeHandle(...): Argument is not a component " + "(type: %s, keys: %s)", typeof component, Object.keys(component));
            invariant(false, "findNodeHandle(...): Unable to find node handle for unmounted " + "component.");
          }
        }
      }

      function findNumericNodeHandleFiber(componentOrHandle) {
        var instance = findNodeHandle(componentOrHandle);

        if (instance == null || typeof instance === "number") {
          return instance;
        }

        return instance._nativeTag;
      }

      var NativeMethodsMixin = {
        measure: function measure(callback) {
          UIManager.measure(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        },
        measureInWindow: function measureInWindow(callback) {
          UIManager.measureInWindow(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        },
        measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          UIManager.measureLayout(findNumericNodeHandleFiber(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
        },
        setNativeProps: function setNativeProps(nativeProps) {
          var maybeInstance = void 0;

          try {
            maybeInstance = findNodeHandle(this);
          } catch (error) {}

          if (maybeInstance == null) {
            return;
          }

          var viewConfig = maybeInstance.viewConfig;
          {
            warnForStyleProps(nativeProps, viewConfig.validAttributes);
          }
          var updatePayload = create(nativeProps, viewConfig.validAttributes);

          if (updatePayload != null) {
            UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
          }
        },
        focus: function focus() {
          TextInputState.focusTextInput(findNumericNodeHandleFiber(this));
        },
        blur: function blur() {
          TextInputState.blurTextInput(findNumericNodeHandleFiber(this));
        }
      };
      {
        var NativeMethodsMixin_DEV = NativeMethodsMixin;
        invariant(!NativeMethodsMixin_DEV.componentWillMount && !NativeMethodsMixin_DEV.componentWillReceiveProps, "Do not override existing functions.");

        NativeMethodsMixin_DEV.componentWillMount = function () {
          throwOnStylesProp(this, this.props);
        };

        NativeMethodsMixin_DEV.componentWillReceiveProps = function (newProps) {
          throwOnStylesProp(this, newProps);
        };
      }

      function _classCallCheck$2(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }

      var ReactNativeComponent = function (_React$Component) {
        _inherits(ReactNativeComponent, _React$Component);

        function ReactNativeComponent() {
          _classCallCheck$2(this, ReactNativeComponent);

          return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
        }

        ReactNativeComponent.prototype.blur = function blur() {
          TextInputState.blurTextInput(findNumericNodeHandleFiber(this));
        };

        ReactNativeComponent.prototype.focus = function focus() {
          TextInputState.focusTextInput(findNumericNodeHandleFiber(this));
        };

        ReactNativeComponent.prototype.measure = function measure(callback) {
          UIManager.measure(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        };

        ReactNativeComponent.prototype.measureInWindow = function measureInWindow(callback) {
          UIManager.measureInWindow(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        };

        ReactNativeComponent.prototype.measureLayout = function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          UIManager.measureLayout(findNumericNodeHandleFiber(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
        };

        ReactNativeComponent.prototype.setNativeProps = function setNativeProps(nativeProps) {
          var maybeInstance = void 0;

          try {
            maybeInstance = findNodeHandle(this);
          } catch (error) {}

          if (maybeInstance == null) {
            return;
          }

          var viewConfig = maybeInstance.viewConfig;
          var updatePayload = create(nativeProps, viewConfig.validAttributes);

          if (updatePayload != null) {
            UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
          }
        };

        return ReactNativeComponent;
      }(React.Component);

      var getInspectorDataForViewTag = void 0;
      {
        var traverseOwnerTreeUp = function traverseOwnerTreeUp(hierarchy, instance) {
          if (instance) {
            hierarchy.unshift(instance);
            traverseOwnerTreeUp(hierarchy, instance._debugOwner);
          }
        };

        var getOwnerHierarchy = function getOwnerHierarchy(instance) {
          var hierarchy = [];
          traverseOwnerTreeUp(hierarchy, instance);
          return hierarchy;
        };

        var lastNonHostInstance = function lastNonHostInstance(hierarchy) {
          for (var i = hierarchy.length - 1; i > 1; i--) {
            var instance = hierarchy[i];

            if (instance.tag !== HostComponent) {
              return instance;
            }
          }

          return hierarchy[0];
        };

        var getHostProps = function getHostProps(fiber) {
          var host = findCurrentHostFiber(fiber);

          if (host) {
            return host.memoizedProps || emptyObject;
          }

          return emptyObject;
        };

        var getHostNode = function getHostNode(fiber, findNodeHandle) {
          var hostNode = void 0;

          while (fiber) {
            if (fiber.stateNode !== null && fiber.tag === HostComponent) {
              hostNode = findNodeHandle(fiber.stateNode);
            }

            if (hostNode) {
              return hostNode;
            }

            fiber = fiber.child;
          }

          return null;
        };

        var createHierarchy = function createHierarchy(fiberHierarchy) {
          return fiberHierarchy.map(function (fiber) {
            return {
              name: getComponentName(fiber),
              getInspectorData: function getInspectorData(findNodeHandle) {
                return {
                  measure: function measure(callback) {
                    return UIManager.measure(getHostNode(fiber, findNodeHandle), callback);
                  },
                  props: getHostProps(fiber),
                  source: fiber._debugSource
                };
              }
            };
          });
        };

        getInspectorDataForViewTag = function getInspectorDataForViewTag(viewTag) {
          var closestInstance = getInstanceFromTag(viewTag);

          if (!closestInstance) {
            return {
              hierarchy: [],
              props: emptyObject,
              selection: null,
              source: null
            };
          }

          var fiber = findCurrentFiberUsingSlowPath(closestInstance);
          var fiberHierarchy = getOwnerHierarchy(fiber);
          var instance = lastNonHostInstance(fiberHierarchy);
          var hierarchy = createHierarchy(fiberHierarchy);
          var props = getHostProps(instance);
          var source = instance._debugSource;
          var selection = fiberHierarchy.indexOf(instance);
          return {
            hierarchy: hierarchy,
            props: props,
            selection: selection,
            source: source
          };
        };
      }

      var createReactNativeComponentClass = function createReactNativeComponentClass(name, callback) {
        return register(name, callback);
      };

      function takeSnapshot(view, options) {
        if (typeof view !== "number" && view !== "window") {
          view = findNumericNodeHandleFiber(view) || "window";
        }

        return UIManager.__takeSnapshot(view, options);
      }

      injection$2.injectFiberBatchedUpdates(NativeRenderer.batchedUpdates);
      var roots = new Map();
      injection$4.injectDialog(showDialog$1);
      var ReactNativeRenderer = {
        NativeComponent: ReactNativeComponent,
        findNodeHandle: findNumericNodeHandleFiber,
        render: function render(element, containerTag, callback) {
          var root = roots.get(containerTag);

          if (!root) {
            root = NativeRenderer.createContainer(containerTag, false);
            roots.set(containerTag, root);
          }

          NativeRenderer.updateContainer(element, root, null, callback);
          return NativeRenderer.getPublicRootInstance(root);
        },
        unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
          var root = roots.get(containerTag);

          if (root) {
            NativeRenderer.updateContainer(null, root, null, function () {
              roots["delete"](containerTag);
            });
          }
        },
        unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
          ReactNativeRenderer.unmountComponentAtNode(containerTag);
          UIManager.removeRootView(containerTag);
        },
        createPortal: function createPortal(children, containerTag) {
          var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
          return _createPortal(children, containerTag, null, key);
        },
        unstable_batchedUpdates: batchedUpdates,
        flushSync: NativeRenderer.flushSync,
        __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
          NativeMethodsMixin: NativeMethodsMixin,
          ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin,
          ReactGlobalSharedState: ReactGlobalSharedState,
          ReactNativeComponentTree: ReactNativeComponentTree,
          ReactNativePropRegistry: ReactNativePropRegistry,
          TouchHistoryMath: TouchHistoryMath,
          createReactNativeComponentClass: createReactNativeComponentClass,
          takeSnapshot: takeSnapshot
        }
      };
      {
        babelHelpers.extends(ReactNativeRenderer.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
          ReactDebugTool: {
            addHook: function addHook() {},
            removeHook: function removeHook() {}
          },
          ReactPerf: {
            start: function start() {},
            stop: function stop() {},
            printInclusive: function printInclusive() {},
            printWasted: function printWasted() {}
          }
        });
      }
      NativeRenderer.injectIntoDevTools({
        findFiberByHostInstance: getInstanceFromTag,
        getInspectorDataForViewTag: getInspectorDataForViewTag,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-native-renderer"
      });
      var ReactNativeRenderer$2 = Object.freeze({
        default: ReactNativeRenderer
      });
      var ReactNativeRenderer$3 = ReactNativeRenderer$2 && ReactNativeRenderer || ReactNativeRenderer$2;
      var reactNativeRenderer = ReactNativeRenderer$3["default"] ? ReactNativeRenderer$3["default"] : ReactNativeRenderer$3;
      module.exports = reactNativeRenderer;
    })();
  }
},22,[23,13,56,57,106,107,108,31,115,116,101,111,113,117,118,119],"ReactNativeRenderer-dev");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  if (global.GLOBAL === undefined) {
    global.GLOBAL = global;
  }

  if (global.window === undefined) {
    global.window = global;
  }

  var defineLazyObjectProperty = require(_dependencyMap[0], 'defineLazyObjectProperty');

  var _shouldPolyfillCollection = require(_dependencyMap[1], '_shouldPolyfillES6Collection');

  if (_shouldPolyfillCollection('Map')) {
    polyfillGlobal('Map', function () {
      return require(_dependencyMap[2], 'Map');
    });
  }

  if (_shouldPolyfillCollection('Set')) {
    polyfillGlobal('Set', function () {
      return require(_dependencyMap[3], 'Set');
    });
  }

  function defineLazyProperty(object, name, getValue) {
    var descriptor = Object.getOwnPropertyDescriptor(object, name);

    if (__DEV__ && descriptor) {
      var backupName = "original" + name[0].toUpperCase() + name.substr(1);
      Object.defineProperty(object, backupName, babelHelpers.extends({}, descriptor, {
        value: object[name]
      }));
    }

    var _ref = descriptor || {},
        enumerable = _ref.enumerable,
        writable = _ref.writable,
        configurable = _ref.configurable;

    if (descriptor && !configurable) {
      console.error('Failed to set polyfill. ' + name + ' is not configurable.');
      return;
    }

    defineLazyObjectProperty(object, name, {
      get: getValue,
      enumerable: enumerable !== false,
      writable: writable !== false
    });
  }

  function polyfillGlobal(name, getValue) {
    defineLazyProperty(global, name, getValue);
  }

  global.process = global.process || {};
  global.process.env = global.process.env || {};

  if (!global.process.env.NODE_ENV) {
    global.process.env.NODE_ENV = __DEV__ ? 'development' : 'production';
  }

  if (global.__RCTProfileIsProfiling) {
    var Systrace = require(_dependencyMap[4], 'Systrace');

    Systrace.installReactHook(true);
    Systrace.setEnabled(true);
  }

  var ExceptionsManager = require(_dependencyMap[5], 'ExceptionsManager');

  ExceptionsManager.installConsoleErrorReporter();

  if (!global.__fbDisableExceptionsManager) {
    var handleError = function handleError(e, isFatal) {
      try {
        ExceptionsManager.handleException(e, isFatal);
      } catch (ee) {
        console.log('Failed to print error: ', ee.message);
        throw e;
      }
    };

    var ErrorUtils = require(_dependencyMap[6], 'ErrorUtils');

    ErrorUtils.setGlobalHandler(handleError);
  }

  var ReactNativeVersionCheck = require(_dependencyMap[7], 'ReactNativeVersionCheck');

  ReactNativeVersionCheck.checkVersions();
  polyfillGlobal('Promise', function () {
    return require(_dependencyMap[8], 'Promise');
  });
  polyfillGlobal('regeneratorRuntime', function () {
    delete global.regeneratorRuntime;

    require(_dependencyMap[9], 'regenerator-runtime/runtime');

    return global.regeneratorRuntime;
  });

  var defineLazyTimer = function defineLazyTimer(name) {
    polyfillGlobal(name, function () {
      return require(_dependencyMap[10], 'JSTimers')[name];
    });
  };

  defineLazyTimer('setTimeout');
  defineLazyTimer('setInterval');
  defineLazyTimer('setImmediate');
  defineLazyTimer('clearTimeout');
  defineLazyTimer('clearInterval');
  defineLazyTimer('clearImmediate');
  defineLazyTimer('requestAnimationFrame');
  defineLazyTimer('cancelAnimationFrame');
  defineLazyTimer('requestIdleCallback');
  defineLazyTimer('cancelIdleCallback');
  polyfillGlobal('XMLHttpRequest', function () {
    return require(_dependencyMap[11], 'XMLHttpRequest');
  });
  polyfillGlobal('FormData', function () {
    return require(_dependencyMap[12], 'FormData');
  });
  polyfillGlobal('fetch', function () {
    return require(_dependencyMap[13], 'fetch').fetch;
  });
  polyfillGlobal('Headers', function () {
    return require(_dependencyMap[13], 'fetch').Headers;
  });
  polyfillGlobal('Request', function () {
    return require(_dependencyMap[13], 'fetch').Request;
  });
  polyfillGlobal('Response', function () {
    return require(_dependencyMap[13], 'fetch').Response;
  });
  polyfillGlobal('WebSocket', function () {
    return require(_dependencyMap[14], 'WebSocket');
  });
  polyfillGlobal('Blob', function () {
    return require(_dependencyMap[15], 'Blob');
  });
  polyfillGlobal('URL', function () {
    return require(_dependencyMap[16], 'URL');
  });

  if (!global.alert) {
    global.alert = function (text) {
      require(_dependencyMap[17], 'Alert').alert('Alert', '' + text);
    };
  }

  var navigator = global.navigator;

  if (navigator === undefined) {
    global.navigator = navigator = {};
  }

  defineLazyProperty(navigator, 'product', function () {
    return 'ReactNative';
  });
  defineLazyProperty(navigator, 'geolocation', function () {
    return require(_dependencyMap[18], 'Geolocation');
  });

  var BatchedBridge = require(_dependencyMap[19], 'BatchedBridge');

  BatchedBridge.registerLazyCallableModule('Systrace', function () {
    return require(_dependencyMap[4], 'Systrace');
  });
  BatchedBridge.registerLazyCallableModule('JSTimers', function () {
    return require(_dependencyMap[10], 'JSTimers');
  });
  BatchedBridge.registerLazyCallableModule('HeapCapture', function () {
    return require(_dependencyMap[20], 'HeapCapture');
  });
  BatchedBridge.registerLazyCallableModule('SamplingProfiler', function () {
    return require(_dependencyMap[21], 'SamplingProfiler');
  });
  BatchedBridge.registerLazyCallableModule('RCTLog', function () {
    return require(_dependencyMap[22], 'RCTLog');
  });
  BatchedBridge.registerLazyCallableModule('RCTDeviceEventEmitter', function () {
    return require(_dependencyMap[23], 'RCTDeviceEventEmitter');
  });
  BatchedBridge.registerLazyCallableModule('RCTNativeAppEventEmitter', function () {
    return require(_dependencyMap[24], 'RCTNativeAppEventEmitter');
  });
  BatchedBridge.registerLazyCallableModule('PerformanceLogger', function () {
    return require(_dependencyMap[25], 'PerformanceLogger');
  });

  global.fetchSegment = function (segmentId, callback) {
    var _require = require(_dependencyMap[26], 'NativeModules'),
        SegmentFetcher = _require.SegmentFetcher;

    if (!SegmentFetcher) {
      throw new Error('SegmentFetcher is missing. Please ensure that it is ' + 'included as a NativeModule.');
    }

    SegmentFetcher.fetchSegment(segmentId, function (errorObject) {
      if (errorObject) {
        var error = new Error(errorObject.message);
        error.code = errorObject.code;
        callback(error);
      }

      callback(null);
    });
  };

  if (__DEV__) {
    if (!global.__RCTProfileIsProfiling) {
      BatchedBridge.registerCallableModule('HMRClient', require(_dependencyMap[27], 'HMRClient'));

      if (!window.document) {
        require(_dependencyMap[28], 'setupDevtools');
      }

      var JSInspector = require(_dependencyMap[29], 'JSInspector');

      JSInspector.registerAgent(require(_dependencyMap[30], 'NetworkAgent'));
    }
  }
},23,[24,25,26,30,19,31,18,40,42,50,51,58,74,37,75,76,83,84,86,16,89,90,91,70,92,93,15,95,98,103,104],"InitializeCore");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function defineLazyObjectProperty(object, name, descriptor) {
    var get = descriptor.get;
    var enumerable = descriptor.enumerable !== false;
    var writable = descriptor.writable !== false;
    var value = void 0;
    var valueSet = false;

    function getValue() {
      if (!valueSet) {
        valueSet = true;
        setValue(get());
      }

      return value;
    }

    function setValue(newValue) {
      value = newValue;
      valueSet = true;
      Object.defineProperty(object, name, {
        value: newValue,
        configurable: true,
        enumerable: enumerable,
        writable: writable
      });
    }

    Object.defineProperty(object, name, {
      get: getValue,
      set: setValue,
      configurable: true,
      enumerable: enumerable
    });
  }

  module.exports = defineLazyObjectProperty;
},24,[],"defineLazyObjectProperty");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function _shouldActuallyPolyfillES6Collection(collectionName) {
    var Collection = global[collectionName];

    if (Collection == null) {
      return true;
    }

    if (typeof global.Symbol !== 'function') {
      return true;
    }

    var proto = Collection.prototype;
    return Collection == null || typeof Collection !== 'function' || typeof proto.clear !== 'function' || new Collection().size !== 0 || typeof proto.keys !== 'function' || typeof proto.forEach !== 'function';
  }

  var cache = {};

  function _shouldPolyfillES6Collection(collectionName) {
    var result = cache[collectionName];

    if (result !== undefined) {
      return result;
    }

    result = _shouldActuallyPolyfillES6Collection(collectionName);
    cache[collectionName] = result;
    return result;
  }

  module.exports = _shouldPolyfillES6Collection;
},25,[],"_shouldPolyfillES6Collection");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _shouldPolyfillES6Collection = require(_dependencyMap[0], '_shouldPolyfillES6Collection');

  var guid = require(_dependencyMap[1], 'guid');

  var isNode = require(_dependencyMap[2], 'fbjs/lib/isNode');

  var toIterator = require(_dependencyMap[3], 'toIterator');

  module.exports = function (global, undefined) {
    if (!_shouldPolyfillES6Collection('Map')) {
      return global.Map;
    }

    var KIND_KEY = 'key';
    var KIND_VALUE = 'value';
    var KIND_KEY_VALUE = 'key+value';
    var KEY_PREFIX = '$map_';
    var SECRET_SIZE_PROP;

    if (__DEV__) {
      SECRET_SIZE_PROP = '$size' + guid();
    }

    var OLD_IE_HASH_PREFIX = 'IE_HASH_';

    var Map = function () {
      function Map(iterable) {
        babelHelpers.classCallCheck(this, Map);

        if (!isObject(this)) {
          throw new TypeError('Wrong map object type.');
        }

        initMap(this);

        if (iterable != null) {
          var it = toIterator(iterable);
          var next;

          while (!(next = it.next()).done) {
            if (!isObject(next.value)) {
              throw new TypeError('Expected iterable items to be pair objects.');
            }

            this.set(next.value[0], next.value[1]);
          }
        }
      }

      babelHelpers.createClass(Map, [{
        key: "clear",
        value: function clear() {
          initMap(this);
        }
      }, {
        key: "has",
        value: function has(key) {
          var index = getIndex(this, key);
          return !!(index != null && this._mapData[index]);
        }
      }, {
        key: "set",
        value: function set(key, value) {
          var index = getIndex(this, key);

          if (index != null && this._mapData[index]) {
            this._mapData[index][1] = value;
          } else {
            index = this._mapData.push([key, value]) - 1;
            setIndex(this, key, index);

            if (__DEV__) {
              this[SECRET_SIZE_PROP] += 1;
            } else {
              this.size += 1;
            }
          }

          return this;
        }
      }, {
        key: "get",
        value: function get(key) {
          var index = getIndex(this, key);

          if (index == null) {
            return undefined;
          } else {
            return this._mapData[index][1];
          }
        }
      }, {
        key: "delete",
        value: function _delete(key) {
          var index = getIndex(this, key);

          if (index != null && this._mapData[index]) {
            setIndex(this, key, undefined);
            this._mapData[index] = undefined;

            if (__DEV__) {
              this[SECRET_SIZE_PROP] -= 1;
            } else {
              this.size -= 1;
            }

            return true;
          } else {
            return false;
          }
        }
      }, {
        key: "entries",
        value: function entries() {
          return new MapIterator(this, KIND_KEY_VALUE);
        }
      }, {
        key: "keys",
        value: function keys() {
          return new MapIterator(this, KIND_KEY);
        }
      }, {
        key: "values",
        value: function values() {
          return new MapIterator(this, KIND_VALUE);
        }
      }, {
        key: "forEach",
        value: function forEach(callback, thisArg) {
          if (typeof callback !== 'function') {
            throw new TypeError('Callback must be callable.');
          }

          var boundCallback = callback.bind(thisArg || undefined);
          var mapData = this._mapData;

          for (var i = 0; i < mapData.length; i++) {
            var entry = mapData[i];

            if (entry != null) {
              boundCallback(entry[1], entry[0], this);
            }
          }
        }
      }]);
      return Map;
    }();

    Map.prototype[toIterator.ITERATOR_SYMBOL] = Map.prototype.entries;

    var MapIterator = function () {
      function MapIterator(map, kind) {
        babelHelpers.classCallCheck(this, MapIterator);

        if (!(isObject(map) && map._mapData)) {
          throw new TypeError('Object is not a map.');
        }

        if ([KIND_KEY, KIND_KEY_VALUE, KIND_VALUE].indexOf(kind) === -1) {
          throw new Error('Invalid iteration kind.');
        }

        this._map = map;
        this._nextIndex = 0;
        this._kind = kind;
      }

      babelHelpers.createClass(MapIterator, [{
        key: "next",
        value: function next() {
          if (!this instanceof Map) {
            throw new TypeError('Expected to be called on a MapIterator.');
          }

          var map = this._map;
          var index = this._nextIndex;
          var kind = this._kind;

          if (map == null) {
            return createIterResultObject(undefined, true);
          }

          var entries = map._mapData;

          while (index < entries.length) {
            var record = entries[index];
            index += 1;
            this._nextIndex = index;

            if (record) {
              if (kind === KIND_KEY) {
                return createIterResultObject(record[0], false);
              } else if (kind === KIND_VALUE) {
                return createIterResultObject(record[1], false);
              } else if (kind) {
                return createIterResultObject(record, false);
              }
            }
          }

          this._map = undefined;
          return createIterResultObject(undefined, true);
        }
      }]);
      return MapIterator;
    }();

    MapIterator.prototype[toIterator.ITERATOR_SYMBOL] = function () {
      return this;
    };

    function getIndex(map, key) {
      if (isObject(key)) {
        var hash = getHash(key);
        return map._objectIndex[hash];
      } else {
        var prefixedKey = KEY_PREFIX + key;

        if (typeof key === 'string') {
          return map._stringIndex[prefixedKey];
        } else {
          return map._otherIndex[prefixedKey];
        }
      }
    }

    function setIndex(map, key, index) {
      var shouldDelete = index == null;

      if (isObject(key)) {
        var hash = getHash(key);

        if (shouldDelete) {
          delete map._objectIndex[hash];
        } else {
          map._objectIndex[hash] = index;
        }
      } else {
        var prefixedKey = KEY_PREFIX + key;

        if (typeof key === 'string') {
          if (shouldDelete) {
            delete map._stringIndex[prefixedKey];
          } else {
            map._stringIndex[prefixedKey] = index;
          }
        } else {
          if (shouldDelete) {
            delete map._otherIndex[prefixedKey];
          } else {
            map._otherIndex[prefixedKey] = index;
          }
        }
      }
    }

    function initMap(map) {
      map._mapData = [];
      map._objectIndex = {};
      map._stringIndex = {};
      map._otherIndex = {};

      if (__DEV__) {
        if (isES5) {
          if (map.hasOwnProperty(SECRET_SIZE_PROP)) {
            map[SECRET_SIZE_PROP] = 0;
          } else {
            Object.defineProperty(map, SECRET_SIZE_PROP, {
              value: 0,
              writable: true
            });
            Object.defineProperty(map, 'size', {
              set: function set(v) {
                console.error('PLEASE FIX ME: You are changing the map size property which ' + 'should not be writable and will break in production.');
                throw new Error('The map size property is not writable.');
              },
              get: function get() {
                return map[SECRET_SIZE_PROP];
              }
            });
          }

          return;
        }
      }

      map.size = 0;
    }

    function isObject(o) {
      return o != null && (typeof o === 'object' || typeof o === 'function');
    }

    function createIterResultObject(value, done) {
      return {
        value: value,
        done: done
      };
    }

    var isES5 = function () {
      try {
        Object.defineProperty({}, 'x', {});
        return true;
      } catch (e) {
        return false;
      }
    }();

    function isExtensible(o) {
      if (!isES5) {
        return true;
      } else {
        return Object.isExtensible(o);
      }
    }

    function getIENodeHash(node) {
      var uniqueID;

      switch (node.nodeType) {
        case 1:
          uniqueID = node.uniqueID;
          break;

        case 9:
          uniqueID = node.documentElement.uniqueID;
          break;

        default:
          return null;
      }

      if (uniqueID) {
        return OLD_IE_HASH_PREFIX + uniqueID;
      } else {
        return null;
      }
    }

    var getHash = function () {
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      var hashProperty = guid();
      var hashCounter = 0;
      return function getHash(o) {
        if (o[hashProperty]) {
          return o[hashProperty];
        } else if (!isES5 && o.propertyIsEnumerable && o.propertyIsEnumerable[hashProperty]) {
          return o.propertyIsEnumerable[hashProperty];
        } else if (!isES5 && isNode(o) && getIENodeHash(o)) {
          return getIENodeHash(o);
        } else if (!isES5 && o[hashProperty]) {
          return o[hashProperty];
        }

        if (isExtensible(o)) {
          hashCounter += 1;

          if (isES5) {
            Object.defineProperty(o, hashProperty, {
              enumerable: false,
              writable: false,
              configurable: false,
              value: hashCounter
            });
          } else if (o.propertyIsEnumerable) {
            o.propertyIsEnumerable = function () {
              return propIsEnumerable.apply(this, arguments);
            };

            o.propertyIsEnumerable[hashProperty] = hashCounter;
          } else if (isNode(o)) {
            o[hashProperty] = hashCounter;
          } else {
            throw new Error('Unable to set a non-enumerable property on object.');
          }

          return hashCounter;
        } else {
          throw new Error('Non-extensible objects are not allowed as keys.');
        }
      };
    }();

    return Map;
  }(Function('return this')());
},26,[25,27,28,29],"Map");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function guid() {
    return 'f' + (Math.random() * (1 << 30)).toString(16).replace('.', '');
  }

  module.exports = guid;
},27,[],"guid");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function isNode(object) {
    var doc = object ? object.ownerDocument || object : document;
    var defaultView = doc.defaultView || window;
    return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
  }

  module.exports = isNode;
},28,[],"fbjs/lib/isNode.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var KIND_KEY = 'key';
  var KIND_VALUE = 'value';
  var KIND_KEY_VAL = 'key+value';
  var ITERATOR_SYMBOL = typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator';

  var toIterator = function () {
    if (!(Array.prototype[ITERATOR_SYMBOL] && String.prototype[ITERATOR_SYMBOL])) {
      return function () {
        var ArrayIterator = function () {
          function ArrayIterator(array, kind) {
            babelHelpers.classCallCheck(this, ArrayIterator);

            if (!Array.isArray(array)) {
              throw new TypeError('Object is not an Array');
            }

            this._iteratedObject = array;
            this._kind = kind;
            this._nextIndex = 0;
          }

          babelHelpers.createClass(ArrayIterator, [{
            key: "next",
            value: function next() {
              if (!this instanceof ArrayIterator) {
                throw new TypeError('Object is not an ArrayIterator');
              }

              if (this._iteratedObject == null) {
                return createIterResultObject(undefined, true);
              }

              var array = this._iteratedObject;
              var len = this._iteratedObject.length;
              var index = this._nextIndex;
              var kind = this._kind;

              if (index >= len) {
                this._iteratedObject = undefined;
                return createIterResultObject(undefined, true);
              }

              this._nextIndex = index + 1;

              if (kind === KIND_KEY) {
                return createIterResultObject(index, false);
              } else if (kind === KIND_VALUE) {
                return createIterResultObject(array[index], false);
              } else if (kind === KIND_KEY_VAL) {
                return createIterResultObject([index, array[index]], false);
              }
            }
          }, {
            key: '@@iterator',
            value: function iterator() {
              return this;
            }
          }]);
          return ArrayIterator;
        }();

        var StringIterator = function () {
          function StringIterator(string) {
            babelHelpers.classCallCheck(this, StringIterator);

            if (typeof string !== 'string') {
              throw new TypeError('Object is not a string');
            }

            this._iteratedString = string;
            this._nextIndex = 0;
          }

          babelHelpers.createClass(StringIterator, [{
            key: "next",
            value: function next() {
              if (!this instanceof StringIterator) {
                throw new TypeError('Object is not a StringIterator');
              }

              if (this._iteratedString == null) {
                return createIterResultObject(undefined, true);
              }

              var index = this._nextIndex;
              var s = this._iteratedString;
              var len = s.length;

              if (index >= len) {
                this._iteratedString = undefined;
                return createIterResultObject(undefined, true);
              }

              var ret;
              var first = s.charCodeAt(index);

              if (first < 0xD800 || first > 0xDBFF || index + 1 === len) {
                ret = s[index];
              } else {
                var second = s.charCodeAt(index + 1);

                if (second < 0xDC00 || second > 0xDFFF) {
                  ret = s[index];
                } else {
                  ret = s[index] + s[index + 1];
                }
              }

              this._nextIndex = index + ret.length;
              return createIterResultObject(ret, false);
            }
          }, {
            key: '@@iterator',
            value: function iterator() {
              return this;
            }
          }]);
          return StringIterator;
        }();

        function createIterResultObject(value, done) {
          return {
            value: value,
            done: done
          };
        }

        return function (object, kind) {
          if (typeof object === 'string') {
            return new StringIterator(object);
          } else if (Array.isArray(object)) {
            return new ArrayIterator(object, kind || KIND_VALUE);
          } else {
            return object[ITERATOR_SYMBOL]();
          }
        };
      }();
    } else {
      return function (object) {
        return object[ITERATOR_SYMBOL]();
      };
    }
  }();

  babelHelpers.extends(toIterator, {
    KIND_KEY: KIND_KEY,
    KIND_VALUE: KIND_VALUE,
    KIND_KEY_VAL: KIND_KEY_VAL,
    ITERATOR_SYMBOL: ITERATOR_SYMBOL
  });
  module.exports = toIterator;
},29,[],"toIterator");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Map = require(_dependencyMap[0], 'Map');

  var _shouldPolyfillES6Collection = require(_dependencyMap[1], '_shouldPolyfillES6Collection');

  var toIterator = require(_dependencyMap[2], 'toIterator');

  module.exports = function (global) {
    if (!_shouldPolyfillES6Collection('Set')) {
      return global.Set;
    }

    var Set = function () {
      function Set(iterable) {
        babelHelpers.classCallCheck(this, Set);

        if (this == null || typeof this !== 'object' && typeof this !== 'function') {
          throw new TypeError('Wrong set object type.');
        }

        initSet(this);

        if (iterable != null) {
          var it = toIterator(iterable);
          var next;

          while (!(next = it.next()).done) {
            this.add(next.value);
          }
        }
      }

      babelHelpers.createClass(Set, [{
        key: "add",
        value: function add(value) {
          this._map.set(value, value);

          this.size = this._map.size;
          return this;
        }
      }, {
        key: "clear",
        value: function clear() {
          initSet(this);
        }
      }, {
        key: "delete",
        value: function _delete(value) {
          var ret = this._map.delete(value);

          this.size = this._map.size;
          return ret;
        }
      }, {
        key: "entries",
        value: function entries() {
          return this._map.entries();
        }
      }, {
        key: "forEach",
        value: function forEach(callback) {
          var thisArg = arguments[1];

          var it = this._map.keys();

          var next;

          while (!(next = it.next()).done) {
            callback.call(thisArg, next.value, next.value, this);
          }
        }
      }, {
        key: "has",
        value: function has(value) {
          return this._map.has(value);
        }
      }, {
        key: "values",
        value: function values() {
          return this._map.values();
        }
      }]);
      return Set;
    }();

    Set.prototype[toIterator.ITERATOR_SYMBOL] = Set.prototype.values;
    Set.prototype.keys = Set.prototype.values;

    function initSet(set) {
      set._map = new Map();
      set.size = set._map.size;
    }

    return Set;
  }(Function('return this')());
},30,[26,25,29],"Set");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var exceptionID = 0;

  function reportException(e, isFatal) {
    var _require = require(_dependencyMap[0], 'NativeModules'),
        ExceptionsManager = _require.ExceptionsManager;

    if (ExceptionsManager) {
      var parseErrorStack = require(_dependencyMap[1], 'parseErrorStack');

      var stack = parseErrorStack(e);
      var currentExceptionID = ++exceptionID;

      if (isFatal) {
        ExceptionsManager.reportFatalException(e.message, stack, currentExceptionID);
      } else {
        ExceptionsManager.reportSoftException(e.message, stack, currentExceptionID);
      }

      if (__DEV__) {
        var symbolicateStackTrace = require(_dependencyMap[2], 'symbolicateStackTrace');

        symbolicateStackTrace(stack).then(function (prettyStack) {
          if (prettyStack) {
            ExceptionsManager.updateExceptionMessage(e.message, prettyStack, currentExceptionID);
          } else {
            throw new Error('The stack is null');
          }
        }).catch(function (error) {
          return console.warn('Unable to symbolicate stack trace: ' + error.message);
        });
      }
    }
  }

  function handleException(e, isFatal) {
    if (!e.message) {
      e = new Error(e);
    }

    if (console._errorOriginal) {
      console._errorOriginal(e.message);
    } else {
      console.error(e.message);
    }

    reportException(e, isFatal);
  }

  function reactConsoleErrorHandler() {
    console._errorOriginal.apply(console, arguments);

    if (!console.reportErrorsAsExceptions) {
      return;
    }

    if (arguments[0] && arguments[0].stack) {
      reportException(arguments[0], false);
    } else {
      var stringifySafe = require(_dependencyMap[3], 'stringifySafe');

      var str = Array.prototype.map.call(arguments, stringifySafe).join(', ');

      if (str.slice(0, 10) === '"Warning: ') {
        return;
      }

      var error = new Error('console.error: ' + str);
      error.framesToPop = 1;
      reportException(error, false);
    }
  }

  function installConsoleErrorReporter() {
    if (console._errorOriginal) {
      return;
    }

    console._errorOriginal = console.error.bind(console);
    console.error = reactConsoleErrorHandler;

    if (console.reportErrorsAsExceptions === undefined) {
      console.reportErrorsAsExceptions = true;
    }
  }

  module.exports = {
    handleException: handleException,
    installConsoleErrorReporter: installConsoleErrorReporter
  };
},31,[15,32,35,39],"ExceptionsManager");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function parseErrorStack(e) {
    if (!e || !e.stack) {
      return [];
    }

    var stacktraceParser = require(_dependencyMap[0], 'stacktrace-parser');

    var stack = Array.isArray(e.stack) ? e.stack : stacktraceParser.parse(e.stack);
    var framesToPop = typeof e.framesToPop === 'number' ? e.framesToPop : 0;

    while (framesToPop--) {
      stack.shift();
    }

    return stack;
  }

  module.exports = parseErrorStack;
},32,[33],"parseErrorStack");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = require(_dependencyMap[0], './lib/stacktrace-parser.js');
},33,[34],"stacktrace-parser/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var UNKNOWN_FUNCTION = '<unknown>';
    var StackTraceParser = {
        parse: function parse(stackString) {
            var chrome = /^\s*at (?:(?:(?:Anonymous function)?|((?:\[object object\])?\S+(?: \[as \S+\])?)) )?\(?((?:file|http|https):.*?):(\d+)(?::(\d+))?\)?\s*$/i,
                gecko = /^(?:\s*([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i,
                node = /^\s*at (?:((?:\[object object\])?\S+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i,
                lines = stackString.split('\n'),
                stack = [],
                parts,
                element;

            for (var i = 0, j = lines.length; i < j; ++i) {
                if (parts = gecko.exec(lines[i])) {
                    element = {
                        'file': parts[3],
                        'methodName': parts[1] || UNKNOWN_FUNCTION,
                        'lineNumber': +parts[4],
                        'column': parts[5] ? +parts[5] : null
                    };
                } else if (parts = chrome.exec(lines[i])) {
                    element = {
                        'file': parts[2],
                        'methodName': parts[1] || UNKNOWN_FUNCTION,
                        'lineNumber': +parts[3],
                        'column': parts[4] ? +parts[4] : null
                    };
                } else if (parts = node.exec(lines[i])) {
                    element = {
                        'file': parts[2],
                        'methodName': parts[1] || UNKNOWN_FUNCTION,
                        'lineNumber': +parts[3],
                        'column': parts[4] ? +parts[4] : null
                    };
                } else {
                    continue;
                }

                stack.push(element);
            }

            return stack;
        }
    };
    module.exports = StackTraceParser;
},34,[],"stacktrace-parser/lib/stacktrace-parser.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var getDevServer = require(_dependencyMap[0], 'getDevServer');

  var _require = require(_dependencyMap[1], 'NativeModules'),
      SourceCode = _require.SourceCode;

  var fetch = void 0;

  function isSourcedFromDisk(sourcePath) {
    return !/^http/.test(sourcePath) && /[\\/]/.test(sourcePath);
  }

  function symbolicateStackTrace(stack) {
    var devServer, stackCopy, foundInternalSource, response, json;
    return regeneratorRuntime.async(function symbolicateStackTrace$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!fetch) {
              fetch = global.fetch || require(_dependencyMap[2], 'fetch').fetch;
            }

            devServer = getDevServer();

            if (devServer.bundleLoadedFromServer) {
              _context.next = 4;
              break;
            }

            throw new Error('Bundle was not loaded from the packager');

          case 4:
            stackCopy = stack;

            if (SourceCode.scriptURL) {
              foundInternalSource = false;
              stackCopy = stack.map(function (frame) {
                if (!foundInternalSource && isSourcedFromDisk(frame.file)) {
                  return babelHelpers.extends({}, frame, {
                    file: SourceCode.scriptURL
                  });
                }

                foundInternalSource = true;
                return frame;
              });
            }

            _context.next = 8;
            return regeneratorRuntime.awrap(fetch(devServer.url + 'symbolicate', {
              method: 'POST',
              body: JSON.stringify({
                stack: stackCopy
              })
            }));

          case 8:
            response = _context.sent;
            _context.next = 11;
            return regeneratorRuntime.awrap(response.json());

          case 11:
            json = _context.sent;
            return _context.abrupt("return", json.stack);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  module.exports = symbolicateStackTrace;
},35,[36,15,37],"symbolicateStackTrace");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], 'NativeModules'),
      SourceCode = _require.SourceCode;

  var _cachedDevServerURL = void 0;

  var FALLBACK = 'http://localhost:8081/';

  function getDevServer() {
    if (_cachedDevServerURL === undefined) {
      var match = SourceCode.scriptURL && SourceCode.scriptURL.match(/^https?:\/\/.*?\//);
      _cachedDevServerURL = match ? match[0] : null;
    }

    return {
      url: _cachedDevServerURL || FALLBACK,
      bundleLoadedFromServer: _cachedDevServerURL !== null
    };
  }

  module.exports = getDevServer;
},36,[15],"getDevServer");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _whatwgFetch = require(_dependencyMap[0], "whatwg-fetch");

  var _whatwgFetch2 = babelHelpers.interopRequireDefault(_whatwgFetch);

  if (_whatwgFetch2.default && _whatwgFetch2.default.fetch) {
    module.exports = _whatwgFetch2.default;
  } else {
    module.exports = {
      fetch: fetch,
      Headers: Headers,
      Request: Request,
      Response: Response
    };
  }
},37,[38],"fetch");
__d(function (global, require, module, exports, _dependencyMap) {
  (function (self) {
    'use strict';

    if (self.fetch) {
      return;
    }

    var support = {
      searchParams: 'URLSearchParams' in self,
      iterable: 'Symbol' in self && 'iterator' in Symbol,
      blob: 'FileReader' in self && 'Blob' in self && function () {
        try {
          new Blob();
          return true;
        } catch (e) {
          return false;
        }
      }(),
      formData: 'FormData' in self,
      arrayBuffer: 'ArrayBuffer' in self
    };

    if (support.arrayBuffer) {
      var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];

      var isDataView = function isDataView(obj) {
        return obj && DataView.prototype.isPrototypeOf(obj);
      };

      var isArrayBufferView = ArrayBuffer.isView || function (obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
      };
    }

    function normalizeName(name) {
      if (typeof name !== 'string') {
        name = String(name);
      }

      if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
        throw new TypeError('Invalid character in header field name');
      }

      return name.toLowerCase();
    }

    function normalizeValue(value) {
      if (typeof value !== 'string') {
        value = String(value);
      }

      return value;
    }

    function iteratorFor(items) {
      var iterator = {
        next: function next() {
          var value = items.shift();
          return {
            done: value === undefined,
            value: value
          };
        }
      };

      if (support.iterable) {
        iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = function () {
          return iterator;
        };
      }

      return iterator;
    }

    function Headers(headers) {
      this.map = {};

      if (headers instanceof Headers) {
        headers.forEach(function (value, name) {
          this.append(name, value);
        }, this);
      } else if (headers) {
        Object.getOwnPropertyNames(headers).forEach(function (name) {
          this.append(name, headers[name]);
        }, this);
      }
    }

    Headers.prototype.append = function (name, value) {
      name = normalizeName(name);
      value = normalizeValue(value);
      var list = this.map[name];

      if (!list) {
        list = [];
        this.map[name] = list;
      }

      list.push(value);
    };

    Headers.prototype['delete'] = function (name) {
      delete this.map[normalizeName(name)];
    };

    Headers.prototype.get = function (name) {
      var values = this.map[normalizeName(name)];
      return values ? values[0] : null;
    };

    Headers.prototype.getAll = function (name) {
      return this.map[normalizeName(name)] || [];
    };

    Headers.prototype.has = function (name) {
      return this.map.hasOwnProperty(normalizeName(name));
    };

    Headers.prototype.set = function (name, value) {
      this.map[normalizeName(name)] = [normalizeValue(value)];
    };

    Headers.prototype.forEach = function (callback, thisArg) {
      Object.getOwnPropertyNames(this.map).forEach(function (name) {
        this.map[name].forEach(function (value) {
          callback.call(thisArg, value, name, this);
        }, this);
      }, this);
    };

    Headers.prototype.keys = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push(name);
      });
      return iteratorFor(items);
    };

    Headers.prototype.values = function () {
      var items = [];
      this.forEach(function (value) {
        items.push(value);
      });
      return iteratorFor(items);
    };

    Headers.prototype.entries = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push([name, value]);
      });
      return iteratorFor(items);
    };

    if (support.iterable) {
      Headers.prototype[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = Headers.prototype.entries;
    }

    function consumed(body) {
      if (body.bodyUsed) {
        return Promise.reject(new TypeError('Already read'));
      }

      body.bodyUsed = true;
    }

    function fileReaderReady(reader) {
      return new Promise(function (resolve, reject) {
        reader.onload = function () {
          resolve(reader.result);
        };

        reader.onerror = function () {
          reject(reader.error);
        };
      });
    }

    function readBlobAsArrayBuffer(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsArrayBuffer(blob);
      return promise;
    }

    function readBlobAsText(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsText(blob);
      return promise;
    }

    function readArrayBufferAsText(buf) {
      var view = new Uint8Array(buf);
      var chars = new Array(view.length);

      for (var i = 0; i < view.length; i++) {
        chars[i] = String.fromCharCode(view[i]);
      }

      return chars.join('');
    }

    function bufferClone(buf) {
      if (buf.slice) {
        return buf.slice(0);
      } else {
        var view = new Uint8Array(buf.byteLength);
        view.set(new Uint8Array(buf));
        return view.buffer;
      }
    }

    function Body() {
      this.bodyUsed = false;

      this._initBody = function (body) {
        this._bodyInit = body;

        if (!body) {
          this._bodyText = '';
        } else if (typeof body === 'string') {
          this._bodyText = body;
        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
          this._bodyBlob = body;
        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
          this._bodyFormData = body;
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this._bodyText = body.toString();
        } else if (support.arrayBuffer && support.blob && isDataView(body)) {
          this._bodyArrayBuffer = bufferClone(body.buffer);
          this._bodyInit = new Blob([this._bodyArrayBuffer]);
        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
          this._bodyArrayBuffer = bufferClone(body);
        } else {
          throw new Error('unsupported BodyInit type');
        }

        if (!this.headers.get('content-type')) {
          if (typeof body === 'string') {
            this.headers.set('content-type', 'text/plain;charset=UTF-8');
          } else if (this._bodyBlob && this._bodyBlob.type) {
            this.headers.set('content-type', this._bodyBlob.type);
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
          }
        }
      };

      if (support.blob) {
        this.blob = function () {
          var rejected = consumed(this);

          if (rejected) {
            return rejected;
          }

          if (this._bodyBlob) {
            return Promise.resolve(this._bodyBlob);
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(new Blob([this._bodyArrayBuffer]));
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as blob');
          } else {
            return Promise.resolve(new Blob([this._bodyText]));
          }
        };

        this.arrayBuffer = function () {
          if (this._bodyArrayBuffer) {
            return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
          } else {
            return this.blob().then(readBlobAsArrayBuffer);
          }
        };
      }

      this.text = function () {
        var rejected = consumed(this);

        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text');
        } else {
          return Promise.resolve(this._bodyText);
        }
      };

      if (support.formData) {
        this.formData = function () {
          return this.text().then(decode);
        };
      }

      this.json = function () {
        return this.text().then(JSON.parse);
      };

      return this;
    }

    var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

    function normalizeMethod(method) {
      var upcased = method.toUpperCase();
      return methods.indexOf(upcased) > -1 ? upcased : method;
    }

    function Request(input, options) {
      options = options || {};
      var body = options.body;

      if (typeof input === 'string') {
        this.url = input;
      } else {
        if (input.bodyUsed) {
          throw new TypeError('Already read');
        }

        this.url = input.url;
        this.credentials = input.credentials;

        if (!options.headers) {
          this.headers = new Headers(input.headers);
        }

        this.method = input.method;
        this.mode = input.mode;

        if (!body && input._bodyInit != null) {
          body = input._bodyInit;
          input.bodyUsed = true;
        }
      }

      this.credentials = options.credentials || this.credentials || 'omit';

      if (options.headers || !this.headers) {
        this.headers = new Headers(options.headers);
      }

      this.method = normalizeMethod(options.method || this.method || 'GET');
      this.mode = options.mode || this.mode || null;
      this.referrer = null;

      if ((this.method === 'GET' || this.method === 'HEAD') && body) {
        throw new TypeError('Body not allowed for GET or HEAD requests');
      }

      this._initBody(body);
    }

    Request.prototype.clone = function () {
      return new Request(this, {
        body: this._bodyInit
      });
    };

    function decode(body) {
      var form = new FormData();
      body.trim().split('&').forEach(function (bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
      return form;
    }

    function parseHeaders(rawHeaders) {
      var headers = new Headers();
      rawHeaders.split('\r\n').forEach(function (line) {
        var parts = line.split(':');
        var key = parts.shift().trim();

        if (key) {
          var value = parts.join(':').trim();
          headers.append(key, value);
        }
      });
      return headers;
    }

    Body.call(Request.prototype);

    function Response(bodyInit, options) {
      if (!options) {
        options = {};
      }

      this.type = 'default';
      this.status = 'status' in options ? options.status : 200;
      this.ok = this.status >= 200 && this.status < 300;
      this.statusText = 'statusText' in options ? options.statusText : 'OK';
      this.headers = new Headers(options.headers);
      this.url = options.url || '';

      this._initBody(bodyInit);
    }

    Body.call(Response.prototype);

    Response.prototype.clone = function () {
      return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
      });
    };

    Response.error = function () {
      var response = new Response(null, {
        status: 0,
        statusText: ''
      });
      response.type = 'error';
      return response;
    };

    var redirectStatuses = [301, 302, 303, 307, 308];

    Response.redirect = function (url, status) {
      if (redirectStatuses.indexOf(status) === -1) {
        throw new RangeError('Invalid status code');
      }

      return new Response(null, {
        status: status,
        headers: {
          location: url
        }
      });
    };

    self.Headers = Headers;
    self.Request = Request;
    self.Response = Response;

    self.fetch = function (input, init) {
      return new Promise(function (resolve, reject) {
        var request = new Request(input, init);
        var xhr = new XMLHttpRequest();

        xhr.onload = function () {
          var options = {
            status: xhr.status,
            statusText: xhr.statusText,
            headers: parseHeaders(xhr.getAllResponseHeaders() || '')
          };
          options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
          var body = 'response' in xhr ? xhr.response : xhr.responseText;
          resolve(new Response(body, options));
        };

        xhr.onerror = function () {
          reject(new TypeError('Network request failed'));
        };

        xhr.ontimeout = function () {
          reject(new TypeError('Network request failed'));
        };

        xhr.open(request.method, request.url, true);

        if (request.credentials === 'include') {
          xhr.withCredentials = true;
        }

        if ('responseType' in xhr && support.blob) {
          xhr.responseType = 'blob';
        }

        request.headers.forEach(function (value, name) {
          xhr.setRequestHeader(name, value);
        });
        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
      });
    };

    self.fetch.polyfill = true;
  })(typeof self !== 'undefined' ? self : this);
},38,[],"whatwg-fetch/fetch.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function stringifySafe(arg) {
    var ret;
    var type = typeof arg;

    if (arg === undefined) {
      ret = 'undefined';
    } else if (arg === null) {
      ret = 'null';
    } else if (type === 'string') {
      ret = '"' + arg + '"';
    } else if (type === 'function') {
      try {
        ret = arg.toString();
      } catch (e) {
        ret = '[function unknown]';
      }
    } else {
      try {
        ret = JSON.stringify(arg);
      } catch (e) {
        if (typeof arg.toString === 'function') {
          try {
            ret = arg.toString();
          } catch (E) {}
        }
      }
    }

    return ret || '["' + type + '" failed to stringify]';
  }

  module.exports = stringifySafe;
},39,[],"stringifySafe");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], 'NativeModules'),
      PlatformConstants = _require.PlatformConstants;

  var ReactNativeVersion = require(_dependencyMap[1], 'ReactNativeVersion');

  exports.checkVersions = function checkVersions() {
    if (!PlatformConstants) {
      return;
    }

    var nativeVersion = PlatformConstants.reactNativeVersion;

    if (ReactNativeVersion.version.major !== nativeVersion.major || ReactNativeVersion.version.minor !== nativeVersion.minor) {
      console.error("React Native version mismatch.\n\nJavaScript version: " + _formatVersion(ReactNativeVersion.version) + "\n" + ("Native version: " + _formatVersion(nativeVersion) + "\n\n") + 'Make sure that you have rebuilt the native code. If the problem ' + 'persists try clearing the Watchman and packager caches with ' + '`watchman watch-del-all && react-native start --reset-cache`.');
    }
  };

  function _formatVersion(version) {
    return version.major + "." + version.minor + "." + version.patch + (version.prerelease !== null ? "-" + version.prerelease : '');
  }
},40,[15,41],"ReactNativeVersionCheck");
__d(function (global, require, module, exports, _dependencyMap) {
  exports.version = {
    major: 0,
    minor: 53,
    patch: 0,
    prerelease: null
  };
},41,[],"ReactNativeVersion");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = require(_dependencyMap[0], 'fbjs/lib/Promise.native');

  if (__DEV__) {
    require(_dependencyMap[1], 'promise/setimmediate/rejection-tracking').enable({
      allRejections: true,
      onUnhandled: function onUnhandled(id) {
        var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var message = void 0;
        var stack = void 0;
        var stringValue = Object.prototype.toString.call(error);

        if (stringValue === '[object Error]') {
          message = Error.prototype.toString.call(error);
          stack = error.stack;
        } else {
          message = require(_dependencyMap[2], 'pretty-format')(error);
        }

        var warning = "Possible Unhandled Promise Rejection (id: " + id + "):\n" + (message + "\n") + (stack == null ? '' : stack);
        console.warn(warning);
      },
      onHandled: function onHandled(id) {
        var warning = "Promise Rejection Handled (id: " + id + ")\n" + 'This means you can ignore any previous messages of the form ' + ("\"Possible Unhandled Promise Rejection (id: " + id + "):\"");
        console.warn(warning);
      }
    });
  }

  module.exports = Promise;
},42,[43,47,48],"Promise");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = require(_dependencyMap[0], 'promise/setimmediate/es6-extensions');

  require(_dependencyMap[1], 'promise/setimmediate/done');

  Promise.prototype['finally'] = function (onSettled) {
    return this.then(onSettled, onSettled);
  };

  module.exports = Promise;
},43,[44,46],"fbjs/lib/Promise.native.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = require(_dependencyMap[0], './core.js');

  module.exports = Promise;
  var TRUE = valuePromise(true);
  var FALSE = valuePromise(false);
  var NULL = valuePromise(null);
  var UNDEFINED = valuePromise(undefined);
  var ZERO = valuePromise(0);
  var EMPTYSTRING = valuePromise('');

  function valuePromise(value) {
    var p = new Promise(Promise._61);
    p._65 = 1;
    p._55 = value;
    return p;
  }

  Promise.resolve = function (value) {
    if (value instanceof Promise) return value;
    if (value === null) return NULL;
    if (value === undefined) return UNDEFINED;
    if (value === true) return TRUE;
    if (value === false) return FALSE;
    if (value === 0) return ZERO;
    if (value === '') return EMPTYSTRING;

    if (typeof value === 'object' || typeof value === 'function') {
      try {
        var then = value.then;

        if (typeof then === 'function') {
          return new Promise(then.bind(value));
        }
      } catch (ex) {
        return new Promise(function (resolve, reject) {
          reject(ex);
        });
      }
    }

    return valuePromise(value);
  };

  Promise.all = function (arr) {
    var args = Array.prototype.slice.call(arr);
    return new Promise(function (resolve, reject) {
      if (args.length === 0) return resolve([]);
      var remaining = args.length;

      function res(i, val) {
        if (val && (typeof val === 'object' || typeof val === 'function')) {
          if (val instanceof Promise && val.then === Promise.prototype.then) {
            while (val._65 === 3) {
              val = val._55;
            }

            if (val._65 === 1) return res(i, val._55);
            if (val._65 === 2) reject(val._55);
            val.then(function (val) {
              res(i, val);
            }, reject);
            return;
          } else {
            var then = val.then;

            if (typeof then === 'function') {
              var p = new Promise(then.bind(val));
              p.then(function (val) {
                res(i, val);
              }, reject);
              return;
            }
          }
        }

        args[i] = val;

        if (--remaining === 0) {
          resolve(args);
        }
      }

      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  };

  Promise.reject = function (value) {
    return new Promise(function (resolve, reject) {
      reject(value);
    });
  };

  Promise.race = function (values) {
    return new Promise(function (resolve, reject) {
      values.forEach(function (value) {
        Promise.resolve(value).then(resolve, reject);
      });
    });
  };

  Promise.prototype['catch'] = function (onRejected) {
    return this.then(null, onRejected);
  };
},44,[45],"promise/setimmediate/es6-extensions.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function noop() {}

  var LAST_ERROR = null;
  var IS_ERROR = {};

  function getThen(obj) {
    try {
      return obj.then;
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  function tryCallOne(fn, a) {
    try {
      return fn(a);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  function tryCallTwo(fn, a, b) {
    try {
      fn(a, b);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  module.exports = Promise;

  function Promise(fn) {
    if (typeof this !== 'object') {
      throw new TypeError('Promises must be constructed via new');
    }

    if (typeof fn !== 'function') {
      throw new TypeError('Promise constructor\'s argument is not a function');
    }

    this._40 = 0;
    this._65 = 0;
    this._55 = null;
    this._72 = null;
    if (fn === noop) return;
    doResolve(fn, this);
  }

  Promise._37 = null;
  Promise._87 = null;
  Promise._61 = noop;

  Promise.prototype.then = function (onFulfilled, onRejected) {
    if (this.constructor !== Promise) {
      return safeThen(this, onFulfilled, onRejected);
    }

    var res = new Promise(noop);
    handle(this, new Handler(onFulfilled, onRejected, res));
    return res;
  };

  function safeThen(self, onFulfilled, onRejected) {
    return new self.constructor(function (resolve, reject) {
      var res = new Promise(noop);
      res.then(resolve, reject);
      handle(self, new Handler(onFulfilled, onRejected, res));
    });
  }

  function handle(self, deferred) {
    while (self._65 === 3) {
      self = self._55;
    }

    if (Promise._37) {
      Promise._37(self);
    }

    if (self._65 === 0) {
      if (self._40 === 0) {
        self._40 = 1;
        self._72 = deferred;
        return;
      }

      if (self._40 === 1) {
        self._40 = 2;
        self._72 = [self._72, deferred];
        return;
      }

      self._72.push(deferred);

      return;
    }

    handleResolved(self, deferred);
  }

  function handleResolved(self, deferred) {
    setImmediate(function () {
      var cb = self._65 === 1 ? deferred.onFulfilled : deferred.onRejected;

      if (cb === null) {
        if (self._65 === 1) {
          resolve(deferred.promise, self._55);
        } else {
          reject(deferred.promise, self._55);
        }

        return;
      }

      var ret = tryCallOne(cb, self._55);

      if (ret === IS_ERROR) {
        reject(deferred.promise, LAST_ERROR);
      } else {
        resolve(deferred.promise, ret);
      }
    });
  }

  function resolve(self, newValue) {
    if (newValue === self) {
      return reject(self, new TypeError('A promise cannot be resolved with itself.'));
    }

    if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
      var then = getThen(newValue);

      if (then === IS_ERROR) {
        return reject(self, LAST_ERROR);
      }

      if (then === self.then && newValue instanceof Promise) {
        self._65 = 3;
        self._55 = newValue;
        finale(self);
        return;
      } else if (typeof then === 'function') {
        doResolve(then.bind(newValue), self);
        return;
      }
    }

    self._65 = 1;
    self._55 = newValue;
    finale(self);
  }

  function reject(self, newValue) {
    self._65 = 2;
    self._55 = newValue;

    if (Promise._87) {
      Promise._87(self, newValue);
    }

    finale(self);
  }

  function finale(self) {
    if (self._40 === 1) {
      handle(self, self._72);
      self._72 = null;
    }

    if (self._40 === 2) {
      for (var i = 0; i < self._72.length; i++) {
        handle(self, self._72[i]);
      }

      self._72 = null;
    }
  }

  function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
  }

  function doResolve(fn, promise) {
    var done = false;
    var res = tryCallTwo(fn, function (value) {
      if (done) return;
      done = true;
      resolve(promise, value);
    }, function (reason) {
      if (done) return;
      done = true;
      reject(promise, reason);
    });

    if (!done && res === IS_ERROR) {
      done = true;
      reject(promise, LAST_ERROR);
    }
  }
},45,[],"promise/setimmediate/core.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = require(_dependencyMap[0], './core.js');

  module.exports = Promise;

  Promise.prototype.done = function (onFulfilled, onRejected) {
    var self = arguments.length ? this.then.apply(this, arguments) : this;
    self.then(null, function (err) {
      setTimeout(function () {
        throw err;
      }, 0);
    });
  };
},46,[45],"promise/setimmediate/done.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = require(_dependencyMap[0], './core');

  var DEFAULT_WHITELIST = [ReferenceError, TypeError, RangeError];
  var enabled = false;
  exports.disable = disable;

  function disable() {
    enabled = false;
    Promise._37 = null;
    Promise._87 = null;
  }

  exports.enable = enable;

  function enable(options) {
    options = options || {};
    if (enabled) disable();
    enabled = true;
    var id = 0;
    var displayId = 0;
    var rejections = {};

    Promise._37 = function (promise) {
      if (promise._65 === 2 && rejections[promise._51]) {
        if (rejections[promise._51].logged) {
          onHandled(promise._51);
        } else {
          clearTimeout(rejections[promise._51].timeout);
        }

        delete rejections[promise._51];
      }
    };

    Promise._87 = function (promise, err) {
      if (promise._40 === 0) {
        promise._51 = id++;
        rejections[promise._51] = {
          displayId: null,
          error: err,
          timeout: setTimeout(onUnhandled.bind(null, promise._51), matchWhitelist(err, DEFAULT_WHITELIST) ? 100 : 2000),
          logged: false
        };
      }
    };

    function onUnhandled(id) {
      if (options.allRejections || matchWhitelist(rejections[id].error, options.whitelist || DEFAULT_WHITELIST)) {
        rejections[id].displayId = displayId++;

        if (options.onUnhandled) {
          rejections[id].logged = true;
          options.onUnhandled(rejections[id].displayId, rejections[id].error);
        } else {
          rejections[id].logged = true;
          logError(rejections[id].displayId, rejections[id].error);
        }
      }
    }

    function onHandled(id) {
      if (rejections[id].logged) {
        if (options.onHandled) {
          options.onHandled(rejections[id].displayId, rejections[id].error);
        } else if (!rejections[id].onUnhandled) {
          console.warn('Promise Rejection Handled (id: ' + rejections[id].displayId + '):');
          console.warn('  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id ' + rejections[id].displayId + '.');
        }
      }
    }
  }

  function logError(id, error) {
    console.warn('Possible Unhandled Promise Rejection (id: ' + id + '):');
    var errStr = (error && (error.stack || error)) + '';
    errStr.split('\n').forEach(function (line) {
      console.warn('  ' + line);
    });
  }

  function matchWhitelist(error, list) {
    return list.some(function (cls) {
      return error instanceof cls;
    });
  }
},47,[45],"promise/setimmediate/rejection-tracking.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var printString = require(_dependencyMap[0], './printString');

  var toString = Object.prototype.toString;
  var toISOString = Date.prototype.toISOString;
  var errorToString = Error.prototype.toString;
  var regExpToString = RegExp.prototype.toString;
  var symbolToString = (typeof Symbol === "function" ? Symbol.prototype : "@@prototype").toString;
  var SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
  var NEWLINE_REGEXP = /\n/ig;

  var getSymbols = Object.getOwnPropertySymbols || function (obj) {
    return [];
  };

  function isToStringedArrayType(toStringed) {
    return toStringed === '[object Array]' || toStringed === '[object ArrayBuffer]' || toStringed === '[object DataView]' || toStringed === '[object Float32Array]' || toStringed === '[object Float64Array]' || toStringed === '[object Int8Array]' || toStringed === '[object Int16Array]' || toStringed === '[object Int32Array]' || toStringed === '[object Uint8Array]' || toStringed === '[object Uint8ClampedArray]' || toStringed === '[object Uint16Array]' || toStringed === '[object Uint32Array]';
  }

  function printNumber(val) {
    if (val != +val) return 'NaN';
    var isNegativeZero = val === 0 && 1 / val < 0;
    return isNegativeZero ? '-0' : '' + val;
  }

  function printFunction(val, printFunctionName) {
    if (!printFunctionName) {
      return '[Function]';
    } else if (val.name === '') {
      return '[Function anonymous]';
    } else {
      return '[Function ' + val.name + ']';
    }
  }

  function printSymbol(val) {
    return symbolToString.call(val).replace(SYMBOL_REGEXP, 'Symbol($1)');
  }

  function printError(val) {
    return '[' + errorToString.call(val) + ']';
  }

  function printBasicValue(val, printFunctionName, escapeRegex) {
    if (val === true || val === false) return '' + val;
    if (val === undefined) return 'undefined';
    if (val === null) return 'null';
    var typeOf = typeof val;
    if (typeOf === 'number') return printNumber(val);
    if (typeOf === 'string') return '"' + printString(val) + '"';
    if (typeOf === 'function') return printFunction(val, printFunctionName);
    if (typeOf === 'symbol') return printSymbol(val);
    var toStringed = toString.call(val);
    if (toStringed === '[object WeakMap]') return 'WeakMap {}';
    if (toStringed === '[object WeakSet]') return 'WeakSet {}';
    if (toStringed === '[object Function]' || toStringed === '[object GeneratorFunction]') return printFunction(val, printFunctionName);
    if (toStringed === '[object Symbol]') return printSymbol(val);
    if (toStringed === '[object Date]') return toISOString.call(val);
    if (toStringed === '[object Error]') return printError(val);

    if (toStringed === '[object RegExp]') {
      if (escapeRegex) {
        return printString(regExpToString.call(val));
      }

      return regExpToString.call(val);
    }

    ;
    if (toStringed === '[object Arguments]' && val.length === 0) return 'Arguments []';
    if (isToStringedArrayType(toStringed) && val.length === 0) return val.constructor.name + ' []';
    if (val instanceof Error) return printError(val);
    return false;
  }

  function printList(list, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var body = '';

    if (list.length) {
      body += edgeSpacing;
      var innerIndent = prevIndent + indent;

      for (var i = 0; i < list.length; i++) {
        body += innerIndent + print(list[i], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);

        if (i < list.length - 1) {
          body += ',' + spacing;
        }
      }

      body += (min ? '' : ',') + edgeSpacing + prevIndent;
    }

    return '[' + body + ']';
  }

  function printArguments(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    return (min ? '' : 'Arguments ') + printList(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  }

  function printArray(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    return (min ? '' : val.constructor.name + ' ') + printList(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  }

  function printMap(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var result = 'Map {';
    var iterator = val.entries();
    var current = iterator.next();

    if (!current.done) {
      result += edgeSpacing;
      var innerIndent = prevIndent + indent;

      while (!current.done) {
        var key = print(current.value[0], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
        var value = print(current.value[1], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
        result += innerIndent + key + ' => ' + value;
        current = iterator.next();

        if (!current.done) {
          result += ',' + spacing;
        }
      }

      result += (min ? '' : ',') + edgeSpacing + prevIndent;
    }

    return result + '}';
  }

  function printObject(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var constructor = min ? '' : val.constructor ? val.constructor.name + ' ' : 'Object ';
    var result = constructor + '{';
    var keys = Object.keys(val).sort();
    var symbols = getSymbols(val);

    if (symbols.length) {
      keys = keys.filter(function (key) {
        return !(typeof key === 'symbol' || toString.call(key) === '[object Symbol]');
      }).concat(symbols);
    }

    if (keys.length) {
      result += edgeSpacing;
      var innerIndent = prevIndent + indent;

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var name = print(key, indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
        var value = print(val[key], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
        result += innerIndent + name + ': ' + value;

        if (i < keys.length - 1) {
          result += ',' + spacing;
        }
      }

      result += (min ? '' : ',') + edgeSpacing + prevIndent;
    }

    return result + '}';
  }

  function printSet(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var result = 'Set {';
    var iterator = val.entries();
    var current = iterator.next();

    if (!current.done) {
      result += edgeSpacing;
      var innerIndent = prevIndent + indent;

      while (!current.done) {
        result += innerIndent + print(current.value[1], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
        current = iterator.next();

        if (!current.done) {
          result += ',' + spacing;
        }
      }

      result += (min ? '' : ',') + edgeSpacing + prevIndent;
    }

    return result + '}';
  }

  function printComplexValue(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    refs = refs.slice();

    if (refs.indexOf(val) > -1) {
      return '[Circular]';
    } else {
      refs.push(val);
    }

    currentDepth++;
    var hitMaxDepth = currentDepth > maxDepth;

    if (callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON === 'function') {
      return print(val.toJSON(), indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    }

    var toStringed = toString.call(val);

    if (toStringed === '[object Arguments]') {
      return hitMaxDepth ? '[Arguments]' : printArguments(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    } else if (isToStringedArrayType(toStringed)) {
      return hitMaxDepth ? '[Array]' : printArray(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    } else if (toStringed === '[object Map]') {
      return hitMaxDepth ? '[Map]' : printMap(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    } else if (toStringed === '[object Set]') {
      return hitMaxDepth ? '[Set]' : printSet(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    } else if (typeof val === 'object') {
      return hitMaxDepth ? '[Object]' : printObject(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    }
  }

  function printPlugin(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var match = false;
    var plugin = void 0;

    for (var p = 0; p < plugins.length; p++) {
      plugin = plugins[p];

      if (plugin.test(val)) {
        match = true;
        break;
      }
    }

    if (!match) {
      return false;
    }

    function boundPrint(val) {
      return print(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    }

    function boundIndent(str) {
      var indentation = prevIndent + indent;
      return indentation + str.replace(NEWLINE_REGEXP, '\n' + indentation);
    }

    return plugin.print(val, boundPrint, boundIndent, {
      edgeSpacing: edgeSpacing,
      spacing: spacing
    });
  }

  function print(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var basic = printBasicValue(val, printFunctionName, escapeRegex);
    if (basic) return basic;
    var plugin = printPlugin(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    if (plugin) return plugin;
    return printComplexValue(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  }

  var DEFAULTS = {
    callToJSON: true,
    indent: 2,
    maxDepth: Infinity,
    min: false,
    plugins: [],
    printFunctionName: true,
    escapeRegex: false
  };

  function validateOptions(opts) {
    Object.keys(opts).forEach(function (key) {
      if (!DEFAULTS.hasOwnProperty(key)) {
        throw new Error('prettyFormat: Invalid option: ' + key);
      }
    });

    if (opts.min && opts.indent !== undefined && opts.indent !== 0) {
      throw new Error('prettyFormat: Cannot run with min option and indent');
    }
  }

  function normalizeOptions(opts) {
    var result = {};
    Object.keys(DEFAULTS).forEach(function (key) {
      return result[key] = opts.hasOwnProperty(key) ? opts[key] : DEFAULTS[key];
    });

    if (result.min) {
      result.indent = 0;
    }

    return result;
  }

  function createIndent(indent) {
    return new Array(indent + 1).join(' ');
  }

  function prettyFormat(val, opts) {
    if (!opts) {
      opts = DEFAULTS;
    } else {
      validateOptions(opts);
      opts = normalizeOptions(opts);
    }

    var indent = void 0;
    var refs = void 0;
    var prevIndent = '';
    var currentDepth = 0;
    var spacing = opts.min ? ' ' : '\n';
    var edgeSpacing = opts.min ? '' : '\n';

    if (opts && opts.plugins.length) {
      indent = createIndent(opts.indent);
      refs = [];
      var pluginsResult = printPlugin(val, indent, prevIndent, spacing, edgeSpacing, refs, opts.maxDepth, currentDepth, opts.plugins, opts.min, opts.callToJSON, opts.printFunctionName, opts.escapeRegex);
      if (pluginsResult) return pluginsResult;
    }

    var basicResult = printBasicValue(val, opts.printFunctionName, opts.escapeRegex);
    if (basicResult) return basicResult;
    if (!indent) indent = createIndent(opts.indent);
    if (!refs) refs = [];
    return printComplexValue(val, indent, prevIndent, spacing, edgeSpacing, refs, opts.maxDepth, currentDepth, opts.plugins, opts.min, opts.callToJSON, opts.printFunctionName, opts.escapeRegex);
  }

  module.exports = prettyFormat;
},48,[49],"pretty-format/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ESCAPED_CHARACTERS = /(\\|\"|\')/g;

  module.exports = function printString(val) {
    return val.replace(ESCAPED_CHARACTERS, '\\$1');
  };
},49,[],"pretty-format/printString.js");
__d(function (global, require, module, exports, _dependencyMap) {
  !function (global) {
    "use strict";

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined;
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    var inModule = typeof module === "object";
    var runtime = global.regeneratorRuntime;

    if (runtime) {
      if (inModule) {
        module.exports = runtime;
      }

      return;
    }

    runtime = global.regeneratorRuntime = inModule ? module.exports : {};

    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);
      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    runtime.wrap = wrap;

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}

    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        prototype[method] = function (arg) {
          return this._invoke(method, arg);
        };
      });
    }

    runtime.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    runtime.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;

        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    runtime.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return Promise.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return Promise.resolve(value).then(function (unwrapped) {
            result.value = unwrapped;
            resolve(result);
          }, reject);
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new Promise(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    runtime.AsyncIterator = AsyncIterator;

    runtime.async = function (innerFn, outerFn, self, tryLocsList) {
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
      return runtime.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined) {
        context.delegate = null;

        if (context.method === "throw") {
          if (delegate.iterator.return) {
            context.method = "return";
            context.arg = undefined;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        context[delegate.resultName] = info.value;
        context.next = delegate.nextLoc;

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
      } else {
        return info;
      }

      context.delegate = null;
      return ContinueSentinel;
    }

    defineIteratorMethods(Gp);
    Gp[toStringTagSymbol] = "Generator";

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    runtime.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse();
      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      }

      return {
        next: doneResult
      };
    }

    runtime.values = values;

    function doneResult() {
      return {
        value: undefined,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            context.method = "next";
            context.arg = undefined;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        }

        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          this.arg = undefined;
        }

        return ContinueSentinel;
      }
    };
  }(function () {
    return this;
  }() || Function("return this")());
},50,[],"regenerator-runtime/runtime.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = require(_dependencyMap[0], 'Platform');

  var Systrace = require(_dependencyMap[1], 'Systrace');

  var invariant = require(_dependencyMap[2], 'fbjs/lib/invariant');

  var _require = require(_dependencyMap[3], 'NativeModules'),
      Timing = _require.Timing;

  var _performanceNow = null;

  function performanceNow() {
    if (!_performanceNow) {
      _performanceNow = require(_dependencyMap[4], 'fbjs/lib/performanceNow');
    }

    return _performanceNow();
  }

  var FRAME_DURATION = 1000 / 60;
  var IDLE_CALLBACK_FRAME_DEADLINE = 1;
  var MAX_TIMER_DURATION_MS = 60 * 1000;
  var IS_ANDROID = Platform.OS === 'android';
  var ANDROID_LONG_TIMER_MESSAGE = 'Setting a timer for a long period of time, i.e. multiple minutes, is a ' + 'performance and correctness issue on Android as it keeps the timer ' + 'module awake, and timers can only be called when the app is in the foreground. ' + 'See https://github.com/facebook/react-native/issues/12981 for more info.';
  var callbacks = [];
  var types = [];
  var timerIDs = [];
  var immediates = [];
  var requestIdleCallbacks = [];
  var requestIdleCallbackTimeouts = {};
  var identifiers = [];
  var GUID = 1;
  var errors = null;
  var hasEmittedTimeDriftWarning = false;

  function _getFreeIndex() {
    var freeIndex = timerIDs.indexOf(null);

    if (freeIndex === -1) {
      freeIndex = timerIDs.length;
    }

    return freeIndex;
  }

  function _allocateCallback(func, type) {
    var id = GUID++;

    var freeIndex = _getFreeIndex();

    timerIDs[freeIndex] = id;
    callbacks[freeIndex] = func;
    types[freeIndex] = type;

    if (__DEV__) {
      var parseErrorStack = require(_dependencyMap[5], 'parseErrorStack');

      var error = new Error();
      error.framesToPop = 1;
      var stack = parseErrorStack(error);

      if (stack) {
        identifiers[freeIndex] = stack.shift();
      }
    }

    return id;
  }

  function _callTimer(timerID, frameTime, didTimeout) {
    require(_dependencyMap[6], 'fbjs/lib/warning')(timerID <= GUID, 'Tried to call timer with ID %s but no such timer exists.', timerID);

    var timerIndex = timerIDs.indexOf(timerID);

    if (timerIndex === -1) {
      return;
    }

    var type = types[timerIndex];
    var callback = callbacks[timerIndex];

    if (!callback || !type) {
      console.error('No callback found for timerID ' + timerID);
      return;
    }

    if (__DEV__) {
      var identifier = identifiers[timerIndex] || {};
      Systrace.beginEvent('Systrace.callTimer: ' + identifier.methodName);
    }

    if (type === 'setTimeout' || type === 'setImmediate' || type === 'requestAnimationFrame' || type === 'requestIdleCallback') {
      _clearIndex(timerIndex);
    }

    try {
      if (type === 'setTimeout' || type === 'setInterval' || type === 'setImmediate') {
        callback();
      } else if (type === 'requestAnimationFrame') {
        callback(performanceNow());
      } else if (type === 'requestIdleCallback') {
        callback({
          timeRemaining: function timeRemaining() {
            return Math.max(0, FRAME_DURATION - (performanceNow() - frameTime));
          },
          didTimeout: !!didTimeout
        });
      } else {
        console.error('Tried to call a callback with invalid type: ' + type);
      }
    } catch (e) {
      if (!errors) {
        errors = [e];
      } else {
        errors.push(e);
      }
    }

    if (__DEV__) {
      Systrace.endEvent();
    }
  }

  function _callImmediatesPass() {
    if (__DEV__) {
      Systrace.beginEvent('callImmediatesPass()');
    }

    if (immediates.length > 0) {
      var passImmediates = immediates.slice();
      immediates = [];

      for (var i = 0; i < passImmediates.length; ++i) {
        _callTimer(passImmediates[i], 0);
      }
    }

    if (__DEV__) {
      Systrace.endEvent();
    }

    return immediates.length > 0;
  }

  function _clearIndex(i) {
    timerIDs[i] = null;
    callbacks[i] = null;
    types[i] = null;
    identifiers[i] = null;
  }

  function _freeCallback(timerID) {
    if (timerID == null) {
      return;
    }

    var index = timerIDs.indexOf(timerID);

    if (index !== -1) {
      _clearIndex(index);

      var type = types[index];

      if (type !== 'setImmediate' && type !== 'requestIdleCallback') {
        Timing.deleteTimer(timerID);
      }
    }
  }

  var JSTimers = {
    setTimeout: function setTimeout(func, duration) {
      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      if (__DEV__ && IS_ANDROID && duration > MAX_TIMER_DURATION_MS) {
        console.warn(ANDROID_LONG_TIMER_MESSAGE + '\n' + '(Saw setTimeout with duration ' + duration + 'ms)');
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setTimeout');

      Timing.createTimer(id, duration || 0, Date.now(), false);
      return id;
    },
    setInterval: function setInterval(func, duration) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      if (__DEV__ && IS_ANDROID && duration > MAX_TIMER_DURATION_MS) {
        console.warn(ANDROID_LONG_TIMER_MESSAGE + '\n' + '(Saw setInterval with duration ' + duration + 'ms)');
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setInterval');

      Timing.createTimer(id, duration || 0, Date.now(), true);
      return id;
    },
    setImmediate: function setImmediate(func) {
      for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setImmediate');

      immediates.push(id);
      return id;
    },
    requestAnimationFrame: function requestAnimationFrame(func) {
      var id = _allocateCallback(func, 'requestAnimationFrame');

      Timing.createTimer(id, 1, Date.now(), false);
      return id;
    },
    requestIdleCallback: function requestIdleCallback(func, options) {
      if (requestIdleCallbacks.length === 0) {
        Timing.setSendIdleEvents(true);
      }

      var timeout = options && options.timeout;

      var id = _allocateCallback(timeout != null ? function (deadline) {
        var timeoutId = requestIdleCallbackTimeouts[id];

        if (timeoutId) {
          JSTimers.clearTimeout(timeoutId);
          delete requestIdleCallbackTimeouts[id];
        }

        return func(deadline);
      } : func, 'requestIdleCallback');

      requestIdleCallbacks.push(id);

      if (timeout != null) {
        var timeoutId = JSTimers.setTimeout(function () {
          var index = requestIdleCallbacks.indexOf(id);

          if (index > -1) {
            requestIdleCallbacks.splice(index, 1);

            _callTimer(id, performanceNow(), true);
          }

          delete requestIdleCallbackTimeouts[id];

          if (requestIdleCallbacks.length === 0) {
            Timing.setSendIdleEvents(false);
          }
        }, timeout);
        requestIdleCallbackTimeouts[id] = timeoutId;
      }

      return id;
    },
    cancelIdleCallback: function cancelIdleCallback(timerID) {
      _freeCallback(timerID);

      var index = requestIdleCallbacks.indexOf(timerID);

      if (index !== -1) {
        requestIdleCallbacks.splice(index, 1);
      }

      var timeoutId = requestIdleCallbackTimeouts[timerID];

      if (timeoutId) {
        JSTimers.clearTimeout(timeoutId);
        delete requestIdleCallbackTimeouts[timerID];
      }

      if (requestIdleCallbacks.length === 0) {
        Timing.setSendIdleEvents(false);
      }
    },
    clearTimeout: function clearTimeout(timerID) {
      _freeCallback(timerID);
    },
    clearInterval: function clearInterval(timerID) {
      _freeCallback(timerID);
    },
    clearImmediate: function clearImmediate(timerID) {
      _freeCallback(timerID);

      var index = immediates.indexOf(timerID);

      if (index !== -1) {
        immediates.splice(index, 1);
      }
    },
    cancelAnimationFrame: function cancelAnimationFrame(timerID) {
      _freeCallback(timerID);
    },
    callTimers: function callTimers(timersToCall) {
      invariant(timersToCall.length !== 0, 'Cannot call `callTimers` with an empty list of IDs.');
      errors = null;

      for (var i = 0; i < timersToCall.length; i++) {
        _callTimer(timersToCall[i], 0);
      }

      if (errors) {
        var errorCount = errors.length;

        if (errorCount > 1) {
          for (var ii = 1; ii < errorCount; ii++) {
            JSTimers.setTimeout(function (error) {
              throw error;
            }.bind(null, errors[ii]), 0);
          }
        }

        throw errors[0];
      }
    },
    callIdleCallbacks: function callIdleCallbacks(frameTime) {
      if (FRAME_DURATION - (performanceNow() - frameTime) < IDLE_CALLBACK_FRAME_DEADLINE) {
        return;
      }

      errors = null;

      if (requestIdleCallbacks.length > 0) {
        var passIdleCallbacks = requestIdleCallbacks.slice();
        requestIdleCallbacks = [];

        for (var i = 0; i < passIdleCallbacks.length; ++i) {
          _callTimer(passIdleCallbacks[i], frameTime);
        }
      }

      if (requestIdleCallbacks.length === 0) {
        Timing.setSendIdleEvents(false);
      }

      if (errors) {
        errors.forEach(function (error) {
          return JSTimers.setTimeout(function () {
            throw error;
          }, 0);
        });
      }
    },
    callImmediates: function callImmediates() {
      errors = null;

      while (_callImmediatesPass()) {}

      if (errors) {
        errors.forEach(function (error) {
          return JSTimers.setTimeout(function () {
            throw error;
          }, 0);
        });
      }
    },
    emitTimeDriftWarning: function emitTimeDriftWarning(warningMessage) {
      if (hasEmittedTimeDriftWarning) {
        return;
      }

      hasEmittedTimeDriftWarning = true;
      console.warn(warningMessage);
    }
  };

  if (!Timing) {
    console.warn("Timing native module is not available, can't set timers.");
    module.exports = {
      callImmediates: JSTimers.callImmediates,
      setImmediate: JSTimers.setImmediate
    };
  } else {
    module.exports = JSTimers;
  }
},51,[52,19,13,15,53,32,56],"JSTimers");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = require(_dependencyMap[0], 'NativeModules');

  var Platform = {
    OS: 'android',

    get Version() {
      var constants = NativeModules.PlatformConstants;
      return constants && constants.Version;
    },

    get isTesting() {
      var constants = NativeModules.PlatformConstants;
      return constants && constants.isTesting;
    },

    select: function select(obj) {
      return 'android' in obj ? obj.android : obj.default;
    }
  };
  module.exports = Platform;
},52,[15],"Platform");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var performance = require(_dependencyMap[0], './performance');

  var performanceNow;

  if (performance.now) {
    performanceNow = function performanceNow() {
      return performance.now();
    };
  } else {
    performanceNow = function performanceNow() {
      return Date.now();
    };
  }

  module.exports = performanceNow;
},53,[54],"fbjs/lib/performanceNow.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ExecutionEnvironment = require(_dependencyMap[0], './ExecutionEnvironment');

  var performance;

  if (ExecutionEnvironment.canUseDOM) {
    performance = window.performance || window.msPerformance || window.webkitPerformance;
  }

  module.exports = performance || {};
},54,[55],"fbjs/lib/performance.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
  var ExecutionEnvironment = {
    canUseDOM: canUseDOM,
    canUseWorkers: typeof Worker !== 'undefined',
    canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
    canUseViewport: canUseDOM && !!window.screen,
    isInWorker: !canUseDOM
  };
  module.exports = ExecutionEnvironment;
},55,[],"fbjs/lib/ExecutionEnvironment.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var emptyFunction = require(_dependencyMap[0], './emptyFunction');

  var warning = emptyFunction;

  if (process.env.NODE_ENV !== 'production') {
    var printWarning = function printWarning(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });

      if (typeof console !== 'undefined') {
        console.error(message);
      }

      try {
        throw new Error(message);
      } catch (x) {}
    };

    warning = function warning(condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }

      if (format.indexOf('Failed Composite propType: ') === 0) {
        return;
      }

      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }

        printWarning.apply(undefined, [format].concat(args));
      }
    };
  }

  module.exports = warning;
},56,[57],"fbjs/lib/warning.js");
__d(function (global, require, module, exports, _dependencyMap) {
  "use strict";

  function makeEmptyFunction(arg) {
    return function () {
      return arg;
    };
  }

  var emptyFunction = function emptyFunction() {};

  emptyFunction.thatReturns = makeEmptyFunction;
  emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
  emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
  emptyFunction.thatReturnsNull = makeEmptyFunction(null);

  emptyFunction.thatReturnsThis = function () {
    return this;
  };

  emptyFunction.thatReturnsArgument = function (arg) {
    return arg;
  };

  module.exports = emptyFunction;
},57,[],"fbjs/lib/emptyFunction.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EventTarget = require(_dependencyMap[0], 'event-target-shim');

  var RCTNetworking = require(_dependencyMap[1], 'RCTNetworking');

  var base64 = require(_dependencyMap[2], 'base64-js');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var warning = require(_dependencyMap[4], 'fbjs/lib/warning');

  var UNSENT = 0;
  var OPENED = 1;
  var HEADERS_RECEIVED = 2;
  var LOADING = 3;
  var DONE = 4;
  var SUPPORTED_RESPONSE_TYPES = {
    arraybuffer: typeof global.ArrayBuffer === 'function',
    blob: typeof global.Blob === 'function',
    document: false,
    json: true,
    text: true,
    '': true
  };
  var REQUEST_EVENTS = ['abort', 'error', 'load', 'loadstart', 'progress', 'timeout', 'loadend'];
  var XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');

  var XMLHttpRequestEventTarget = function (_EventTarget) {
    babelHelpers.inherits(XMLHttpRequestEventTarget, _EventTarget);

    function XMLHttpRequestEventTarget() {
      babelHelpers.classCallCheck(this, XMLHttpRequestEventTarget);
      return babelHelpers.possibleConstructorReturn(this, (XMLHttpRequestEventTarget.__proto__ || Object.getPrototypeOf(XMLHttpRequestEventTarget)).apply(this, arguments));
    }

    return XMLHttpRequestEventTarget;
  }(EventTarget.apply(undefined, REQUEST_EVENTS));

  var XMLHttpRequest = function (_EventTarget2) {
    babelHelpers.inherits(XMLHttpRequest, _EventTarget2);
    babelHelpers.createClass(XMLHttpRequest, null, [{
      key: "setInterceptor",
      value: function setInterceptor(interceptor) {
        XMLHttpRequest._interceptor = interceptor;
      }
    }]);

    function XMLHttpRequest() {
      babelHelpers.classCallCheck(this, XMLHttpRequest);

      var _this2 = babelHelpers.possibleConstructorReturn(this, (XMLHttpRequest.__proto__ || Object.getPrototypeOf(XMLHttpRequest)).call(this));

      _this2.UNSENT = UNSENT;
      _this2.OPENED = OPENED;
      _this2.HEADERS_RECEIVED = HEADERS_RECEIVED;
      _this2.LOADING = LOADING;
      _this2.DONE = DONE;
      _this2.readyState = UNSENT;
      _this2.status = 0;
      _this2.timeout = 0;
      _this2.withCredentials = true;
      _this2.upload = new XMLHttpRequestEventTarget();
      _this2._aborted = false;
      _this2._hasError = false;
      _this2._method = null;
      _this2._response = '';
      _this2._url = null;
      _this2._timedOut = false;
      _this2._trackingName = 'unknown';
      _this2._incrementalEvents = false;

      _this2._reset();

      return _this2;
    }

    babelHelpers.createClass(XMLHttpRequest, [{
      key: "_reset",
      value: function _reset() {
        this.readyState = this.UNSENT;
        this.responseHeaders = undefined;
        this.status = 0;
        delete this.responseURL;
        this._requestId = null;
        this._cachedResponse = undefined;
        this._hasError = false;
        this._headers = {};
        this._response = '';
        this._responseType = '';
        this._sent = false;
        this._lowerCaseResponseHeaders = {};

        this._clearSubscriptions();

        this._timedOut = false;
      }
    }, {
      key: "__didCreateRequest",
      value: function __didCreateRequest(requestId) {
        this._requestId = requestId;
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.requestSent(requestId, this._url || '', this._method || 'GET', this._headers);
      }
    }, {
      key: "__didUploadProgress",
      value: function __didUploadProgress(requestId, progress, total) {
        if (requestId === this._requestId) {
          this.upload.dispatchEvent({
            type: 'progress',
            lengthComputable: true,
            loaded: progress,
            total: total
          });
        }
      }
    }, {
      key: "__didReceiveResponse",
      value: function __didReceiveResponse(requestId, status, responseHeaders, responseURL) {
        if (requestId === this._requestId) {
          this.status = status;
          this.setResponseHeaders(responseHeaders);
          this.setReadyState(this.HEADERS_RECEIVED);

          if (responseURL || responseURL === '') {
            this.responseURL = responseURL;
          } else {
            delete this.responseURL;
          }

          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.responseReceived(requestId, responseURL || this._url || '', status, responseHeaders || {});
        }
      }
    }, {
      key: "__didReceiveData",
      value: function __didReceiveData(requestId, response) {
        if (requestId !== this._requestId) {
          return;
        }

        this._response = response;
        this._cachedResponse = undefined;
        this.setReadyState(this.LOADING);
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, response);
      }
    }, {
      key: "__didReceiveIncrementalData",
      value: function __didReceiveIncrementalData(requestId, responseText, progress, total) {
        if (requestId !== this._requestId) {
          return;
        }

        if (!this._response) {
          this._response = responseText;
        } else {
          this._response += responseText;
        }

        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, responseText);
        this.setReadyState(this.LOADING);

        this.__didReceiveDataProgress(requestId, progress, total);
      }
    }, {
      key: "__didReceiveDataProgress",
      value: function __didReceiveDataProgress(requestId, loaded, total) {
        if (requestId !== this._requestId) {
          return;
        }

        this.dispatchEvent({
          type: 'progress',
          lengthComputable: total >= 0,
          loaded: loaded,
          total: total
        });
      }
    }, {
      key: "__didCompleteResponse",
      value: function __didCompleteResponse(requestId, error, timeOutError) {
        if (requestId === this._requestId) {
          if (error) {
            if (this._responseType === '' || this._responseType === 'text') {
              this._response = error;
            }

            this._hasError = true;

            if (timeOutError) {
              this._timedOut = true;
            }
          }

          this._clearSubscriptions();

          this._requestId = null;
          this.setReadyState(this.DONE);

          if (error) {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFailed(requestId, error);
          } else {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFinished(requestId, this._response.length);
          }
        }
      }
    }, {
      key: "_clearSubscriptions",
      value: function _clearSubscriptions() {
        (this._subscriptions || []).forEach(function (sub) {
          if (sub) {
            sub.remove();
          }
        });
        this._subscriptions = [];
      }
    }, {
      key: "getAllResponseHeaders",
      value: function getAllResponseHeaders() {
        if (!this.responseHeaders) {
          return null;
        }

        var headers = this.responseHeaders || {};
        return Object.keys(headers).map(function (headerName) {
          return headerName + ': ' + headers[headerName];
        }).join('\r\n');
      }
    }, {
      key: "getResponseHeader",
      value: function getResponseHeader(header) {
        var value = this._lowerCaseResponseHeaders[header.toLowerCase()];

        return value !== undefined ? value : null;
      }
    }, {
      key: "setRequestHeader",
      value: function setRequestHeader(header, value) {
        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }

        this._headers[header.toLowerCase()] = String(value);
      }
    }, {
      key: "setTrackingName",
      value: function setTrackingName(trackingName) {
        this._trackingName = trackingName;
        return this;
      }
    }, {
      key: "open",
      value: function open(method, url, async) {
        if (this.readyState !== this.UNSENT) {
          throw new Error('Cannot open, already sending');
        }

        if (async !== undefined && !async) {
          throw new Error('Synchronous http requests are not supported');
        }

        if (!url) {
          throw new Error('Cannot load an empty url');
        }

        this._method = method.toUpperCase();
        this._url = url;
        this._aborted = false;
        this.setReadyState(this.OPENED);
      }
    }, {
      key: "send",
      value: function send(data) {
        var _this3 = this;

        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }

        if (this._sent) {
          throw new Error('Request has already been sent');
        }

        this._sent = true;
        var incrementalEvents = this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;

        this._subscriptions.push(RCTNetworking.addListener('didSendNetworkData', function (args) {
          return _this3.__didUploadProgress.apply(_this3, babelHelpers.toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkResponse', function (args) {
          return _this3.__didReceiveResponse.apply(_this3, babelHelpers.toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkData', function (args) {
          return _this3.__didReceiveData.apply(_this3, babelHelpers.toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkIncrementalData', function (args) {
          return _this3.__didReceiveIncrementalData.apply(_this3, babelHelpers.toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkDataProgress', function (args) {
          return _this3.__didReceiveDataProgress.apply(_this3, babelHelpers.toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didCompleteNetworkResponse', function (args) {
          return _this3.__didCompleteResponse.apply(_this3, babelHelpers.toConsumableArray(args));
        }));

        var nativeResponseType = 'text';

        if (this._responseType === 'arraybuffer' || this._responseType === 'blob') {
          nativeResponseType = 'base64';
        }

        invariant(this._method, 'Request method needs to be defined.');
        invariant(this._url, 'Request URL needs to be defined.');
        RCTNetworking.sendRequest(this._method, this._trackingName, this._url, this._headers, data, nativeResponseType, incrementalEvents, this.timeout, this.__didCreateRequest.bind(this), this.withCredentials);
      }
    }, {
      key: "abort",
      value: function abort() {
        this._aborted = true;

        if (this._requestId) {
          RCTNetworking.abortRequest(this._requestId);
        }

        if (!(this.readyState === this.UNSENT || this.readyState === this.OPENED && !this._sent || this.readyState === this.DONE)) {
          this._reset();

          this.setReadyState(this.DONE);
        }

        this._reset();
      }
    }, {
      key: "setResponseHeaders",
      value: function setResponseHeaders(responseHeaders) {
        this.responseHeaders = responseHeaders || null;
        var headers = responseHeaders || {};
        this._lowerCaseResponseHeaders = Object.keys(headers).reduce(function (lcaseHeaders, headerName) {
          lcaseHeaders[headerName.toLowerCase()] = headers[headerName];
          return lcaseHeaders;
        }, {});
      }
    }, {
      key: "setReadyState",
      value: function setReadyState(newState) {
        this.readyState = newState;
        this.dispatchEvent({
          type: 'readystatechange'
        });

        if (newState === this.DONE) {
          if (this._aborted) {
            this.dispatchEvent({
              type: 'abort'
            });
          } else if (this._hasError) {
            if (this._timedOut) {
              this.dispatchEvent({
                type: 'timeout'
              });
            } else {
              this.dispatchEvent({
                type: 'error'
              });
            }
          } else {
            this.dispatchEvent({
              type: 'load'
            });
          }

          this.dispatchEvent({
            type: 'loadend'
          });
        }
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, listener) {
        if (type === 'readystatechange' || type === 'progress') {
          this._incrementalEvents = true;
        }

        babelHelpers.get(XMLHttpRequest.prototype.__proto__ || Object.getPrototypeOf(XMLHttpRequest.prototype), "addEventListener", this).call(this, type, listener);
      }
    }, {
      key: "responseType",
      get: function get() {
        return this._responseType;
      },
      set: function set(responseType) {
        if (this._sent) {
          throw new Error('Failed to set the \'responseType\' property on \'XMLHttpRequest\': The ' + 'response type cannot be set after the request has been sent.');
        }

        if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {
          warning(false, "The provided value '" + responseType + "' is not a valid 'responseType'.");
          return;
        }

        invariant(SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document', "The provided value '" + responseType + "' is unsupported in this environment.");
        this._responseType = responseType;
      }
    }, {
      key: "responseText",
      get: function get() {
        if (this._responseType !== '' && this._responseType !== 'text') {
          throw new Error("The 'responseText' property is only available if 'responseType' " + ("is set to '' or 'text', but it is '" + this._responseType + "'."));
        }

        if (this.readyState < LOADING) {
          return '';
        }

        return this._response;
      }
    }, {
      key: "response",
      get: function get() {
        var responseType = this.responseType;

        if (responseType === '' || responseType === 'text') {
          return this.readyState < LOADING || this._hasError ? '' : this._response;
        }

        if (this.readyState !== DONE) {
          return null;
        }

        if (this._cachedResponse !== undefined) {
          return this._cachedResponse;
        }

        switch (responseType) {
          case 'document':
            this._cachedResponse = null;
            break;

          case 'arraybuffer':
            this._cachedResponse = base64.toByteArray(this._response).buffer;
            break;

          case 'blob':
            this._cachedResponse = new global.Blob([base64.toByteArray(this._response).buffer], {
              type: this.getResponseHeader('content-type') || ''
            });
            break;

          case 'json':
            try {
              this._cachedResponse = JSON.parse(this._response);
            } catch (_) {
              this._cachedResponse = null;
            }

            break;

          default:
            this._cachedResponse = null;
        }

        return this._cachedResponse;
      }
    }]);
    return XMLHttpRequest;
  }(EventTarget.apply(undefined, babelHelpers.toConsumableArray(XHR_EVENTS)));

  XMLHttpRequest.UNSENT = UNSENT;
  XMLHttpRequest.OPENED = OPENED;
  XMLHttpRequest.HEADERS_RECEIVED = HEADERS_RECEIVED;
  XMLHttpRequest.LOADING = LOADING;
  XMLHttpRequest.DONE = DONE;
  XMLHttpRequest._interceptor = null;
  module.exports = XMLHttpRequest;
},58,[59,63,73,13,56],"XMLHttpRequest");
__d(function (global, require, module, exports, _dependencyMap) {
    "use strict";

    var Commons = require(_dependencyMap[0], "./commons");

    var CustomEventTarget = require(_dependencyMap[1], "./custom-event-target");

    var EventWrapper = require(_dependencyMap[2], "./event-wrapper");

    var LISTENERS = Commons.LISTENERS;
    var CAPTURE = Commons.CAPTURE;
    var BUBBLE = Commons.BUBBLE;
    var ATTRIBUTE = Commons.ATTRIBUTE;
    var newNode = Commons.newNode;
    var defineCustomEventTarget = CustomEventTarget.defineCustomEventTarget;
    var createEventWrapper = EventWrapper.createEventWrapper;
    var STOP_IMMEDIATE_PROPAGATION_FLAG = EventWrapper.STOP_IMMEDIATE_PROPAGATION_FLAG;
    var HAS_EVENTTARGET_INTERFACE = typeof window !== "undefined" && typeof window.EventTarget !== "undefined";

    var EventTarget = module.exports = function EventTarget() {
        if (this instanceof EventTarget) {
            Object.defineProperty(this, LISTENERS, {
                value: Object.create(null)
            });
        } else if (arguments.length === 1 && Array.isArray(arguments[0])) {
            return defineCustomEventTarget(EventTarget, arguments[0]);
        } else if (arguments.length > 0) {
            var types = Array(arguments.length);

            for (var i = 0; i < arguments.length; ++i) {
                types[i] = arguments[i];
            }

            return defineCustomEventTarget(EventTarget, types);
        } else {
            throw new TypeError("Cannot call a class as a function");
        }
    };

    EventTarget.prototype = Object.create((HAS_EVENTTARGET_INTERFACE ? window.EventTarget : Object).prototype, {
        constructor: {
            value: EventTarget,
            writable: true,
            configurable: true
        },
        addEventListener: {
            value: function addEventListener(type, listener, capture) {
                if (listener == null) {
                    return false;
                }

                if (typeof listener !== "function" && typeof listener !== "object") {
                    throw new TypeError("\"listener\" is not an object.");
                }

                var kind = capture ? CAPTURE : BUBBLE;
                var node = this[LISTENERS][type];

                if (node == null) {
                    this[LISTENERS][type] = newNode(listener, kind);
                    return true;
                }

                var prev = null;

                while (node != null) {
                    if (node.listener === listener && node.kind === kind) {
                        return false;
                    }

                    prev = node;
                    node = node.next;
                }

                prev.next = newNode(listener, kind);
                return true;
            },
            configurable: true,
            writable: true
        },
        removeEventListener: {
            value: function removeEventListener(type, listener, capture) {
                if (listener == null) {
                    return false;
                }

                var kind = capture ? CAPTURE : BUBBLE;
                var prev = null;
                var node = this[LISTENERS][type];

                while (node != null) {
                    if (node.listener === listener && node.kind === kind) {
                        if (prev == null) {
                            this[LISTENERS][type] = node.next;
                        } else {
                            prev.next = node.next;
                        }

                        return true;
                    }

                    prev = node;
                    node = node.next;
                }

                return false;
            },
            configurable: true,
            writable: true
        },
        dispatchEvent: {
            value: function dispatchEvent(event) {
                var node = this[LISTENERS][event.type];

                if (node == null) {
                    return true;
                }

                var wrapped = createEventWrapper(event, this);

                while (node != null) {
                    if (typeof node.listener === "function") {
                        node.listener.call(this, wrapped);
                    } else if (node.kind !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
                        node.listener.handleEvent(wrapped);
                    }

                    if (wrapped[STOP_IMMEDIATE_PROPAGATION_FLAG]) {
                        break;
                    }

                    node = node.next;
                }

                return !wrapped.defaultPrevented;
            },
            configurable: true,
            writable: true
        }
    });
},59,[60,61,62],"event-target-shim/lib/event-target.js");
__d(function (global, require, module, exports, _dependencyMap) {
  "use strict";

  var createUniqueKey = exports.createUniqueKey = typeof Symbol !== "undefined" ? Symbol : function createUniqueKey(name) {
    return "[[" + name + "_" + Math.random().toFixed(8).slice(2) + "]]";
  };
  exports.LISTENERS = createUniqueKey("listeners");
  exports.CAPTURE = 1;
  exports.BUBBLE = 2;
  exports.ATTRIBUTE = 3;

  exports.newNode = function newNode(listener, kind) {
    return {
      listener: listener,
      kind: kind,
      next: null
    };
  };
},60,[],"event-target-shim/lib/commons.js");
__d(function (global, require, module, exports, _dependencyMap) {
    "use strict";

    var Commons = require(_dependencyMap[0], "./commons");

    var LISTENERS = Commons.LISTENERS;
    var ATTRIBUTE = Commons.ATTRIBUTE;
    var newNode = Commons.newNode;

    function getAttributeListener(eventTarget, type) {
        var node = eventTarget[LISTENERS][type];

        while (node != null) {
            if (node.kind === ATTRIBUTE) {
                return node.listener;
            }

            node = node.next;
        }

        return null;
    }

    function setAttributeListener(eventTarget, type, listener) {
        if (typeof listener !== "function" && typeof listener !== "object") {
            listener = null;
        }

        var prev = null;
        var node = eventTarget[LISTENERS][type];

        while (node != null) {
            if (node.kind === ATTRIBUTE) {
                if (prev == null) {
                    eventTarget[LISTENERS][type] = node.next;
                } else {
                    prev.next = node.next;
                }
            } else {
                prev = node;
            }

            node = node.next;
        }

        if (listener != null) {
            if (prev == null) {
                eventTarget[LISTENERS][type] = newNode(listener, ATTRIBUTE);
            } else {
                prev.next = newNode(listener, ATTRIBUTE);
            }
        }
    }

    exports.defineCustomEventTarget = function (EventTargetBase, types) {
        function EventTarget() {
            EventTargetBase.call(this);
        }

        var descripter = {
            constructor: {
                value: EventTarget,
                configurable: true,
                writable: true
            }
        };
        types.forEach(function (type) {
            descripter["on" + type] = {
                get: function get() {
                    return getAttributeListener(this, type);
                },
                set: function set(listener) {
                    setAttributeListener(this, type, listener);
                },
                configurable: true,
                enumerable: true
            };
        });
        EventTarget.prototype = Object.create(EventTargetBase.prototype, descripter);
        return EventTarget;
    };
},61,[60],"event-target-shim/lib/custom-event-target.js");
__d(function (global, require, module, exports, _dependencyMap) {
    "use strict";

    var createUniqueKey = require(_dependencyMap[0], "./commons").createUniqueKey;

    var STOP_IMMEDIATE_PROPAGATION_FLAG = createUniqueKey("stop_immediate_propagation_flag");
    var CANCELED_FLAG = createUniqueKey("canceled_flag");
    var ORIGINAL_EVENT = createUniqueKey("original_event");
    var wrapperPrototypeDefinition = Object.freeze({
        stopPropagation: Object.freeze({
            value: function stopPropagation() {
                var e = this[ORIGINAL_EVENT];

                if (typeof e.stopPropagation === "function") {
                    e.stopPropagation();
                }
            },
            writable: true,
            configurable: true
        }),
        stopImmediatePropagation: Object.freeze({
            value: function stopImmediatePropagation() {
                this[STOP_IMMEDIATE_PROPAGATION_FLAG] = true;
                var e = this[ORIGINAL_EVENT];

                if (typeof e.stopImmediatePropagation === "function") {
                    e.stopImmediatePropagation();
                }
            },
            writable: true,
            configurable: true
        }),
        preventDefault: Object.freeze({
            value: function preventDefault() {
                if (this.cancelable === true) {
                    this[CANCELED_FLAG] = true;
                }

                var e = this[ORIGINAL_EVENT];

                if (typeof e.preventDefault === "function") {
                    e.preventDefault();
                }
            },
            writable: true,
            configurable: true
        }),
        defaultPrevented: Object.freeze({
            get: function defaultPrevented() {
                return this[CANCELED_FLAG];
            },
            enumerable: true,
            configurable: true
        })
    });
    exports.STOP_IMMEDIATE_PROPAGATION_FLAG = STOP_IMMEDIATE_PROPAGATION_FLAG;

    exports.createEventWrapper = function createEventWrapper(event, eventTarget) {
        var timeStamp = typeof event.timeStamp === "number" ? event.timeStamp : Date.now();
        var propertyDefinition = {
            type: {
                value: event.type,
                enumerable: true
            },
            target: {
                value: eventTarget,
                enumerable: true
            },
            currentTarget: {
                value: eventTarget,
                enumerable: true
            },
            eventPhase: {
                value: 2,
                enumerable: true
            },
            bubbles: {
                value: Boolean(event.bubbles),
                enumerable: true
            },
            cancelable: {
                value: Boolean(event.cancelable),
                enumerable: true
            },
            timeStamp: {
                value: timeStamp,
                enumerable: true
            },
            isTrusted: {
                value: false,
                enumerable: true
            }
        };
        propertyDefinition[STOP_IMMEDIATE_PROPAGATION_FLAG] = {
            value: false,
            writable: true
        };
        propertyDefinition[CANCELED_FLAG] = {
            value: false,
            writable: true
        };
        propertyDefinition[ORIGINAL_EVENT] = {
            value: event
        };

        if (typeof event.detail !== "undefined") {
            propertyDefinition.detail = {
                value: event.detail,
                enumerable: true
            };
        }

        return Object.create(Object.create(event, wrapperPrototypeDefinition), propertyDefinition);
    };
},62,[60],"event-target-shim/lib/event-wrapper.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var MissingNativeEventEmitterShim = require(_dependencyMap[0], 'MissingNativeEventEmitterShim');

  var NativeEventEmitter = require(_dependencyMap[1], 'NativeEventEmitter');

  var RCTNetworkingNative = require(_dependencyMap[2], 'NativeModules').Networking;

  var convertRequestBody = require(_dependencyMap[3], 'convertRequestBody');

  function convertHeadersMapToArray(headers) {
    var headerArray = [];

    for (var name in headers) {
      headerArray.push([name, headers[name]]);
    }

    return headerArray;
  }

  var _requestId = 1;

  function generateRequestId() {
    return _requestId++;
  }

  var RCTNetworking = function (_NativeEventEmitter) {
    babelHelpers.inherits(RCTNetworking, _NativeEventEmitter);

    function RCTNetworking() {
      babelHelpers.classCallCheck(this, RCTNetworking);

      var _this = babelHelpers.possibleConstructorReturn(this, (RCTNetworking.__proto__ || Object.getPrototypeOf(RCTNetworking)).call(this, RCTNetworkingNative));

      _this.isAvailable = true;
      return _this;
    }

    babelHelpers.createClass(RCTNetworking, [{
      key: "sendRequest",
      value: function sendRequest(method, trackingName, url, headers, data, responseType, incrementalUpdates, timeout, callback, withCredentials) {
        var body = convertRequestBody(data);

        if (body && body.formData) {
          body.formData = body.formData.map(function (part) {
            return babelHelpers.extends({}, part, {
              headers: convertHeadersMapToArray(part.headers)
            });
          });
        }

        var requestId = generateRequestId();
        RCTNetworkingNative.sendRequest(method, url, requestId, convertHeadersMapToArray(headers), babelHelpers.extends({}, body, {
          trackingName: trackingName
        }), responseType, incrementalUpdates, timeout, withCredentials);
        callback(requestId);
      }
    }, {
      key: "abortRequest",
      value: function abortRequest(requestId) {
        RCTNetworkingNative.abortRequest(requestId);
      }
    }, {
      key: "clearCookies",
      value: function clearCookies(callback) {
        RCTNetworkingNative.clearCookies(callback);
      }
    }]);
    return RCTNetworking;
  }(NativeEventEmitter);

  if (__DEV__ && !RCTNetworkingNative) {
    var MissingNativeRCTNetworkingShim = function (_MissingNativeEventEm) {
      babelHelpers.inherits(MissingNativeRCTNetworkingShim, _MissingNativeEventEm);

      function MissingNativeRCTNetworkingShim() {
        babelHelpers.classCallCheck(this, MissingNativeRCTNetworkingShim);
        return babelHelpers.possibleConstructorReturn(this, (MissingNativeRCTNetworkingShim.__proto__ || Object.getPrototypeOf(MissingNativeRCTNetworkingShim)).call(this, 'RCTNetworking', 'Networking'));
      }

      babelHelpers.createClass(MissingNativeRCTNetworkingShim, [{
        key: "sendRequest",
        value: function sendRequest() {
          this.throwMissingNativeModule();
        }
      }, {
        key: "abortRequest",
        value: function abortRequest() {
          this.throwMissingNativeModule();
        }
      }, {
        key: "clearCookies",
        value: function clearCookies() {
          this.throwMissingNativeModule();
        }
      }]);
      return MissingNativeRCTNetworkingShim;
    }(MissingNativeEventEmitterShim);

    RCTNetworking = new MissingNativeRCTNetworkingShim();
  } else {
    RCTNetworking = new RCTNetworking();
  }

  module.exports = RCTNetworking;
},63,[64,69,15,71],"RCTNetworking");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EmitterSubscription = require(_dependencyMap[0], 'EmitterSubscription');

  var EventEmitter = require(_dependencyMap[1], 'EventEmitter');

  var invariant = require(_dependencyMap[2], 'fbjs/lib/invariant');

  var MissingNativeEventEmitterShim = function (_EventEmitter) {
    babelHelpers.inherits(MissingNativeEventEmitterShim, _EventEmitter);

    function MissingNativeEventEmitterShim(nativeModuleName, nativeEventEmitterName) {
      babelHelpers.classCallCheck(this, MissingNativeEventEmitterShim);

      var _this = babelHelpers.possibleConstructorReturn(this, (MissingNativeEventEmitterShim.__proto__ || Object.getPrototypeOf(MissingNativeEventEmitterShim)).call(this, null));

      _this.isAvailable = false;
      _this._nativeModuleName = nativeModuleName;
      _this._nativeEventEmitterName = nativeEventEmitterName;
      return _this;
    }

    babelHelpers.createClass(MissingNativeEventEmitterShim, [{
      key: "throwMissingNativeModule",
      value: function throwMissingNativeModule() {
        invariant(false, "Cannot use '" + this._nativeEventEmitterName + "' module when " + ("native '" + this._nativeModuleName + "' is not included in the build. ") + ("Either include it, or check '" + this._nativeEventEmitterName + "'.isAvailable ") + 'before calling any methods.');
      }
    }, {
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        this.throwMissingNativeModule();
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this.throwMissingNativeModule();
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        this.throwMissingNativeModule();
      }
    }]);
    return MissingNativeEventEmitterShim;
  }(EventEmitter);

  module.exports = MissingNativeEventEmitterShim;
},64,[65,67,13],"MissingNativeEventEmitterShim");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EventSubscription = require(_dependencyMap[0], 'EventSubscription');

  var EmitterSubscription = function (_EventSubscription) {
    babelHelpers.inherits(EmitterSubscription, _EventSubscription);

    function EmitterSubscription(emitter, subscriber, listener, context) {
      babelHelpers.classCallCheck(this, EmitterSubscription);

      var _this = babelHelpers.possibleConstructorReturn(this, (EmitterSubscription.__proto__ || Object.getPrototypeOf(EmitterSubscription)).call(this, subscriber));

      _this.emitter = emitter;
      _this.listener = listener;
      _this.context = context;
      return _this;
    }

    babelHelpers.createClass(EmitterSubscription, [{
      key: "remove",
      value: function remove() {
        this.emitter.removeSubscription(this);
      }
    }]);
    return EmitterSubscription;
  }(EventSubscription);

  module.exports = EmitterSubscription;
},65,[66],"EmitterSubscription");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EventSubscription = function () {
    function EventSubscription(subscriber) {
      babelHelpers.classCallCheck(this, EventSubscription);
      this.subscriber = subscriber;
    }

    babelHelpers.createClass(EventSubscription, [{
      key: "remove",
      value: function remove() {
        this.subscriber.removeSubscription(this);
      }
    }]);
    return EventSubscription;
  }();

  module.exports = EventSubscription;
},66,[],"EventSubscription");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EmitterSubscription = require(_dependencyMap[0], 'EmitterSubscription');

  var EventSubscriptionVendor = require(_dependencyMap[1], 'EventSubscriptionVendor');

  var emptyFunction = require(_dependencyMap[2], 'fbjs/lib/emptyFunction');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var EventEmitter = function () {
    function EventEmitter(subscriber) {
      babelHelpers.classCallCheck(this, EventEmitter);
      this._subscriber = subscriber || new EventSubscriptionVendor();
    }

    babelHelpers.createClass(EventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));
      }
    }, {
      key: "once",
      value: function once(eventType, listener, context) {
        var _this = this;

        return this.addListener(eventType, function () {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this.removeCurrentListener();

          listener.apply(context, args);
        });
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this._subscriber.removeAllSubscriptions(eventType);
      }
    }, {
      key: "removeCurrentListener",
      value: function removeCurrentListener() {
        invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');
        this.removeSubscription(this._currentSubscription);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');

        this._subscriber.removeSubscription(subscription);
      }
    }, {
      key: "listeners",
      value: function listeners(eventType) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {
          return subscription.listener;
        }) : [];
      }
    }, {
      key: "emit",
      value: function emit(eventType) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        if (subscriptions) {
          for (var i = 0, l = subscriptions.length; i < l; i++) {
            var subscription = subscriptions[i];

            if (subscription) {
              this._currentSubscription = subscription;
              subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));
            }
          }

          this._currentSubscription = null;
        }
      }
    }, {
      key: "removeListener",
      value: function removeListener(eventType, listener) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        if (subscriptions) {
          for (var i = 0, l = subscriptions.length; i < l; i++) {
            var subscription = subscriptions[i];

            if (subscription && subscription.listener === listener) {
              subscription.remove();
            }
          }
        }
      }
    }]);
    return EventEmitter;
  }();

  module.exports = EventEmitter;
},67,[65,68,57,13],"EventEmitter");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var EventSubscriptionVendor = function () {
    function EventSubscriptionVendor() {
      babelHelpers.classCallCheck(this, EventSubscriptionVendor);
      this._subscriptionsForType = {};
      this._currentSubscription = null;
    }

    babelHelpers.createClass(EventSubscriptionVendor, [{
      key: "addSubscription",
      value: function addSubscription(eventType, subscription) {
        invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');

        if (!this._subscriptionsForType[eventType]) {
          this._subscriptionsForType[eventType] = [];
        }

        var key = this._subscriptionsForType[eventType].length;

        this._subscriptionsForType[eventType].push(subscription);

        subscription.eventType = eventType;
        subscription.key = key;
        return subscription;
      }
    }, {
      key: "removeAllSubscriptions",
      value: function removeAllSubscriptions(eventType) {
        if (eventType === undefined) {
          this._subscriptionsForType = {};
        } else {
          delete this._subscriptionsForType[eventType];
        }
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        var eventType = subscription.eventType;
        var key = subscription.key;
        var subscriptionsForType = this._subscriptionsForType[eventType];

        if (subscriptionsForType) {
          delete subscriptionsForType[key];
        }
      }
    }, {
      key: "getSubscriptionsForType",
      value: function getSubscriptionsForType(eventType) {
        return this._subscriptionsForType[eventType];
      }
    }]);
    return EventSubscriptionVendor;
  }();

  module.exports = EventSubscriptionVendor;
},68,[13],"EventSubscriptionVendor");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EventEmitter = require(_dependencyMap[0], 'EventEmitter');

  var Platform = require(_dependencyMap[1], 'Platform');

  var RCTDeviceEventEmitter = require(_dependencyMap[2], 'RCTDeviceEventEmitter');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var NativeEventEmitter = function (_EventEmitter) {
    babelHelpers.inherits(NativeEventEmitter, _EventEmitter);

    function NativeEventEmitter(nativeModule) {
      babelHelpers.classCallCheck(this, NativeEventEmitter);

      var _this = babelHelpers.possibleConstructorReturn(this, (NativeEventEmitter.__proto__ || Object.getPrototypeOf(NativeEventEmitter)).call(this, RCTDeviceEventEmitter.sharedSubscriber));

      if (Platform.OS === 'ios') {
        invariant(nativeModule, 'Native module cannot be null.');
        _this._nativeModule = nativeModule;
      }

      return _this;
    }

    babelHelpers.createClass(NativeEventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        if (this._nativeModule != null) {
          this._nativeModule.addListener(eventType);
        }

        return babelHelpers.get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), "addListener", this).call(this, eventType, listener, context);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        invariant(eventType, 'eventType argument is required.');
        var count = this.listeners(eventType).length;

        if (this._nativeModule != null) {
          this._nativeModule.removeListeners(count);
        }

        babelHelpers.get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), "removeAllListeners", this).call(this, eventType);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        if (this._nativeModule != null) {
          this._nativeModule.removeListeners(1);
        }

        babelHelpers.get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), "removeSubscription", this).call(this, subscription);
      }
    }]);
    return NativeEventEmitter;
  }(EventEmitter);

  module.exports = NativeEventEmitter;
},69,[67,52,70,13],"NativeEventEmitter");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EventEmitter = require(_dependencyMap[0], 'EventEmitter');

  var EventSubscriptionVendor = require(_dependencyMap[1], 'EventSubscriptionVendor');

  function checkNativeEventModule(eventType) {
    if (eventType) {
      if (eventType.lastIndexOf('statusBar', 0) === 0) {
        throw new Error('`' + eventType + '` event should be registered via the StatusBarIOS module');
      }

      if (eventType.lastIndexOf('keyboard', 0) === 0) {
        throw new Error('`' + eventType + '` event should be registered via the Keyboard module');
      }

      if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {
        throw new Error('`' + eventType + '` event should be registered via the AppState module');
      }
    }
  }

  var RCTDeviceEventEmitter = function (_EventEmitter) {
    babelHelpers.inherits(RCTDeviceEventEmitter, _EventEmitter);

    function RCTDeviceEventEmitter() {
      babelHelpers.classCallCheck(this, RCTDeviceEventEmitter);
      var sharedSubscriber = new EventSubscriptionVendor();

      var _this = babelHelpers.possibleConstructorReturn(this, (RCTDeviceEventEmitter.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter)).call(this, sharedSubscriber));

      _this.sharedSubscriber = sharedSubscriber;
      return _this;
    }

    babelHelpers.createClass(RCTDeviceEventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        if (__DEV__) {
          checkNativeEventModule(eventType);
        }

        return babelHelpers.get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), "addListener", this).call(this, eventType, listener, context);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        if (__DEV__) {
          checkNativeEventModule(eventType);
        }

        babelHelpers.get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), "removeAllListeners", this).call(this, eventType);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        if (subscription.emitter !== this) {
          subscription.emitter.removeSubscription(subscription);
        } else {
          babelHelpers.get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), "removeSubscription", this).call(this, subscription);
        }
      }
    }]);
    return RCTDeviceEventEmitter;
  }(EventEmitter);

  module.exports = new RCTDeviceEventEmitter();
},70,[67,68],"RCTDeviceEventEmitter");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var binaryToBase64 = require(_dependencyMap[0], 'binaryToBase64');

  var FormData = require(_dependencyMap[1], 'FormData');

  function convertRequestBody(body) {
    if (typeof body === 'string') {
      return {
        string: body
      };
    }

    if (body instanceof FormData) {
      return {
        formData: body.getParts()
      };
    }

    if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {
      return {
        base64: binaryToBase64(body)
      };
    }

    return body;
  }

  module.exports = convertRequestBody;
},71,[72,74],"convertRequestBody");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var base64 = require(_dependencyMap[0], 'base64-js');

  function binaryToBase64(data) {
    if (data instanceof ArrayBuffer) {
      data = new Uint8Array(data);
    }

    if (data instanceof Uint8Array) {
      return base64.fromByteArray(data);
    }

    if (!ArrayBuffer.isView(data)) {
      throw new Error('data must be ArrayBuffer or typed array');
    }

    var _data = data,
        buffer = _data.buffer,
        byteOffset = _data.byteOffset,
        byteLength = _data.byteLength;
    return base64.fromByteArray(new Uint8Array(buffer, byteOffset, byteLength));
  }

  module.exports = binaryToBase64;
},72,[73],"binaryToBase64");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.byteLength = byteLength;
  exports.toByteArray = toByteArray;
  exports.fromByteArray = fromByteArray;
  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }

  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;

  function placeHoldersCount(b64) {
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4');
    }

    return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;
  }

  function byteLength(b64) {
    return b64.length * 3 / 4 - placeHoldersCount(b64);
  }

  function toByteArray(b64) {
    var i, l, tmp, placeHolders, arr;
    var len = b64.length;
    placeHolders = placeHoldersCount(b64);
    arr = new Arr(len * 3 / 4 - placeHolders);
    l = placeHolders > 0 ? len - 4 : len;
    var L = 0;

    for (i = 0; i < l; i += 4) {
      tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
      arr[L++] = tmp >> 16 & 0xFF;
      arr[L++] = tmp >> 8 & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    if (placeHolders === 2) {
      tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
      arr[L++] = tmp & 0xFF;
    } else if (placeHolders === 1) {
      tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
      arr[L++] = tmp >> 8 & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    return arr;
  }

  function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
  }

  function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];

    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
      output.push(tripletToBase64(tmp));
    }

    return output.join('');
  }

  function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3;
    var output = '';
    var parts = [];
    var maxChunkLength = 16383;

    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    }

    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      output += lookup[tmp >> 2];
      output += lookup[tmp << 4 & 0x3F];
      output += '==';
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + uint8[len - 1];
      output += lookup[tmp >> 10];
      output += lookup[tmp >> 4 & 0x3F];
      output += lookup[tmp << 2 & 0x3F];
      output += '=';
    }

    parts.push(output);
    return parts.join('');
  }
},73,[],"base64-js/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var FormData = function () {
    function FormData() {
      babelHelpers.classCallCheck(this, FormData);
      this._parts = [];
    }

    babelHelpers.createClass(FormData, [{
      key: "append",
      value: function append(key, value) {
        this._parts.push([key, value]);
      }
    }, {
      key: "getParts",
      value: function getParts() {
        return this._parts.map(function (_ref) {
          var _ref2 = babelHelpers.slicedToArray(_ref, 2),
              name = _ref2[0],
              value = _ref2[1];

          var contentDisposition = 'form-data; name="' + name + '"';
          var headers = {
            'content-disposition': contentDisposition
          };

          if (typeof value === 'object' && value) {
            if (typeof value.name === 'string') {
              headers['content-disposition'] += '; filename="' + value.name + '"';
            }

            if (typeof value.type === 'string') {
              headers['content-type'] = value.type;
            }

            return babelHelpers.extends({}, value, {
              headers: headers,
              fieldName: name
            });
          }

          return {
            string: String(value),
            headers: headers,
            fieldName: name
          };
        });
      }
    }]);
    return FormData;
  }();

  module.exports = FormData;
},74,[],"FormData");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Blob = require(_dependencyMap[0], 'Blob');

  var EventTarget = require(_dependencyMap[1], 'event-target-shim');

  var NativeEventEmitter = require(_dependencyMap[2], 'NativeEventEmitter');

  var NativeModules = require(_dependencyMap[3], 'NativeModules');

  var Platform = require(_dependencyMap[4], 'Platform');

  var WebSocketEvent = require(_dependencyMap[5], 'WebSocketEvent');

  var base64 = require(_dependencyMap[6], 'base64-js');

  var binaryToBase64 = require(_dependencyMap[7], 'binaryToBase64');

  var invariant = require(_dependencyMap[8], 'fbjs/lib/invariant');

  var WebSocketModule = NativeModules.WebSocketModule;
  var CONNECTING = 0;
  var OPEN = 1;
  var CLOSING = 2;
  var CLOSED = 3;
  var CLOSE_NORMAL = 1000;
  var WEBSOCKET_EVENTS = ['close', 'error', 'message', 'open'];
  var nextWebSocketId = 0;

  var WebSocket = function (_EventTarget) {
    babelHelpers.inherits(WebSocket, _EventTarget);

    function WebSocket(url, protocols, options) {
      babelHelpers.classCallCheck(this, WebSocket);

      var _this = babelHelpers.possibleConstructorReturn(this, (WebSocket.__proto__ || Object.getPrototypeOf(WebSocket)).call(this));

      _this.CONNECTING = CONNECTING;
      _this.OPEN = OPEN;
      _this.CLOSING = CLOSING;
      _this.CLOSED = CLOSED;
      _this.readyState = CONNECTING;

      if (typeof protocols === 'string') {
        protocols = [protocols];
      }

      var _ref = options || {},
          _ref$headers = _ref.headers,
          headers = _ref$headers === undefined ? {} : _ref$headers,
          unrecognized = babelHelpers.objectWithoutProperties(_ref, ["headers"]);

      if (unrecognized && typeof unrecognized.origin === 'string') {
        console.warn('Specifying `origin` as a WebSocket connection option is deprecated. Include it under `headers` instead.');
        headers.origin = unrecognized.origin;
        delete unrecognized.origin;
      }

      if (Object.keys(unrecognized).length > 0) {
        console.warn('Unrecognized WebSocket connection option(s) `' + Object.keys(unrecognized).join('`, `') + '`. ' + 'Did you mean to put these under `headers`?');
      }

      if (!Array.isArray(protocols)) {
        protocols = null;
      }

      if (!WebSocket.isAvailable) {
        throw new Error('Cannot initialize WebSocket module. ' + 'Native module WebSocketModule is missing.');
      }

      _this._eventEmitter = new NativeEventEmitter(WebSocketModule);
      _this._socketId = nextWebSocketId++;

      _this._registerEvents();

      WebSocketModule.connect(url, protocols, {
        headers: headers
      }, _this._socketId);
      return _this;
    }

    babelHelpers.createClass(WebSocket, [{
      key: "close",
      value: function close(code, reason) {
        if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {
          return;
        }

        this.readyState = this.CLOSING;

        this._close(code, reason);
      }
    }, {
      key: "send",
      value: function send(data) {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }

        if (data instanceof Blob) {
          var BlobModule = NativeModules.BlobModule;
          invariant(BlobModule, 'Native module BlobModule is required for blob support');
          BlobModule.sendBlob(data, this._socketId);
          return;
        }

        if (typeof data === 'string') {
          WebSocketModule.send(data, this._socketId);
          return;
        }

        if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
          WebSocketModule.sendBinary(binaryToBase64(data), this._socketId);
          return;
        }

        throw new Error('Unsupported data type');
      }
    }, {
      key: "ping",
      value: function ping() {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }

        WebSocketModule.ping(this._socketId);
      }
    }, {
      key: "_close",
      value: function _close(code, reason) {
        if (Platform.OS === 'android') {
          var statusCode = typeof code === 'number' ? code : CLOSE_NORMAL;
          var closeReason = typeof reason === 'string' ? reason : '';
          WebSocketModule.close(statusCode, closeReason, this._socketId);
        } else {
          WebSocketModule.close(this._socketId);
        }
      }
    }, {
      key: "_unregisterEvents",
      value: function _unregisterEvents() {
        this._subscriptions.forEach(function (e) {
          return e.remove();
        });

        this._subscriptions = [];
      }
    }, {
      key: "_registerEvents",
      value: function _registerEvents() {
        var _this2 = this;

        this._subscriptions = [this._eventEmitter.addListener('websocketMessage', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          var data = ev.data;

          switch (ev.type) {
            case 'binary':
              data = base64.toByteArray(ev.data).buffer;
              break;

            case 'blob':
              data = Blob.create(ev.data);
              break;
          }

          _this2.dispatchEvent(new WebSocketEvent('message', {
            data: data
          }));
        }), this._eventEmitter.addListener('websocketOpen', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.OPEN;

          _this2.dispatchEvent(new WebSocketEvent('open'));
        }), this._eventEmitter.addListener('websocketClosed', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.CLOSED;

          _this2.dispatchEvent(new WebSocketEvent('close', {
            code: ev.code,
            reason: ev.reason
          }));

          _this2._unregisterEvents();

          _this2.close();
        }), this._eventEmitter.addListener('websocketFailed', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.CLOSED;

          _this2.dispatchEvent(new WebSocketEvent('error', {
            message: ev.message
          }));

          _this2.dispatchEvent(new WebSocketEvent('close', {
            message: ev.message
          }));

          _this2._unregisterEvents();

          _this2.close();
        })];
      }
    }, {
      key: "binaryType",
      get: function get() {
        return this._binaryType;
      },
      set: function set(binaryType) {
        if (binaryType !== 'blob' && binaryType !== 'arraybuffer') {
          throw new Error('binaryType must be either \'blob\' or \'arraybuffer\'');
        }

        if (this._binaryType === 'blob' || binaryType === 'blob') {
          var BlobModule = NativeModules.BlobModule;
          invariant(BlobModule, 'Native module BlobModule is required for blob support');

          if (BlobModule) {
            if (binaryType === 'blob') {
              BlobModule.enableBlobSupport(this._socketId);
            } else {
              BlobModule.disableBlobSupport(this._socketId);
            }
          }
        }

        this._binaryType = binaryType;
      }
    }]);
    return WebSocket;
  }(EventTarget.apply(undefined, WEBSOCKET_EVENTS));

  WebSocket.CONNECTING = CONNECTING;
  WebSocket.OPEN = OPEN;
  WebSocket.CLOSING = CLOSING;
  WebSocket.CLOSED = CLOSED;
  WebSocket.isAvailable = !!WebSocketModule;
  module.exports = WebSocket;
},75,[76,59,69,15,52,82,73,72,13],"WebSocket");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var uuid = require(_dependencyMap[1], 'uuid');

  var _require = require(_dependencyMap[2], 'NativeModules'),
      BlobModule = _require.BlobModule;

  var Blob = function () {
    babelHelpers.createClass(Blob, null, [{
      key: "create",
      value: function create(props) {
        return babelHelpers.extends(Object.create(Blob.prototype), props);
      }
    }]);

    function Blob(parts, options) {
      babelHelpers.classCallCheck(this, Blob);
      var blobId = uuid();
      var size = 0;
      parts.forEach(function (part) {
        invariant(part instanceof Blob, 'Can currently only create a Blob from other Blobs');
        size += part.size;
      });
      BlobModule.createFromParts(parts, blobId);
      return Blob.create({
        blobId: blobId,
        offset: 0,
        size: size
      });
    }

    babelHelpers.createClass(Blob, [{
      key: "slice",
      value: function slice(start, end) {
        var offset = this.offset;
        var size = this.size;

        if (typeof start === 'number') {
          if (start > size) {
            start = size;
          }

          offset += start;
          size -= start;

          if (typeof end === 'number') {
            if (end < 0) {
              end = this.size + end;
            }

            size = end - start;
          }
        }

        return Blob.create({
          blobId: this.blobId,
          offset: offset,
          size: size
        });
      }
    }, {
      key: "close",
      value: function close() {
        BlobModule.release(this.blobId);
      }
    }]);
    return Blob;
  }();

  module.exports = Blob;
},76,[13,77,15],"Blob");
__d(function (global, require, module, exports, _dependencyMap) {
  var v1 = require(_dependencyMap[0], './v1');

  var v4 = require(_dependencyMap[1], './v4');

  var uuid = v4;
  uuid.v1 = v1;
  uuid.v4 = v4;
  module.exports = uuid;
},77,[78,81],"uuid/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var rng = require(_dependencyMap[0], './lib/rng');

  var bytesToUuid = require(_dependencyMap[1], './lib/bytesToUuid');

  var _nodeId;

  var _clockseq;

  var _lastMSecs = 0;
  var _lastNSecs = 0;

  function v1(options, buf, offset) {
    var i = buf && offset || 0;
    var b = buf || [];
    options = options || {};
    var node = options.node || _nodeId;
    var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

    if (node == null || clockseq == null) {
      var seedBytes = rng();

      if (node == null) {
        node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
      }

      if (clockseq == null) {
        clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
      }
    }

    var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();
    var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;
    var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;

    if (dt < 0 && options.clockseq === undefined) {
      clockseq = clockseq + 1 & 0x3fff;
    }

    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
      nsecs = 0;
    }

    if (nsecs >= 10000) {
      throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
    }

    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;
    msecs += 12219292800000;
    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    b[i++] = tl >>> 24 & 0xff;
    b[i++] = tl >>> 16 & 0xff;
    b[i++] = tl >>> 8 & 0xff;
    b[i++] = tl & 0xff;
    var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
    b[i++] = tmh >>> 8 & 0xff;
    b[i++] = tmh & 0xff;
    b[i++] = tmh >>> 24 & 0xf | 0x10;
    b[i++] = tmh >>> 16 & 0xff;
    b[i++] = clockseq >>> 8 | 0x80;
    b[i++] = clockseq & 0xff;

    for (var n = 0; n < 6; ++n) {
      b[i + n] = node[n];
    }

    return buf ? buf : bytesToUuid(b);
  }

  module.exports = v1;
},78,[79,80],"uuid/v1.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var getRandomValues = typeof crypto != 'undefined' && crypto.getRandomValues.bind(crypto) || typeof msCrypto != 'undefined' && msCrypto.getRandomValues.bind(msCrypto);

  if (getRandomValues) {
    var rnds8 = new Uint8Array(16);

    module.exports = function whatwgRNG() {
      getRandomValues(rnds8);
      return rnds8;
    };
  } else {
    var rnds = new Array(16);

    module.exports = function mathRNG() {
      for (var i = 0, r; i < 16; i++) {
        if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
        rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
      }

      return rnds;
    };
  }
},79,[],"uuid/lib/rng-browser.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var byteToHex = [];

  for (var i = 0; i < 256; ++i) {
    byteToHex[i] = (i + 0x100).toString(16).substr(1);
  }

  function bytesToUuid(buf, offset) {
    var i = offset || 0;
    var bth = byteToHex;
    return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];
  }

  module.exports = bytesToUuid;
},80,[],"uuid/lib/bytesToUuid.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var rng = require(_dependencyMap[0], './lib/rng');

  var bytesToUuid = require(_dependencyMap[1], './lib/bytesToUuid');

  function v4(options, buf, offset) {
    var i = buf && offset || 0;

    if (typeof options == 'string') {
      buf = options === 'binary' ? new Array(16) : null;
      options = null;
    }

    options = options || {};
    var rnds = options.random || (options.rng || rng)();
    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80;

    if (buf) {
      for (var ii = 0; ii < 16; ++ii) {
        buf[i + ii] = rnds[ii];
      }
    }

    return buf || bytesToUuid(rnds);
  }

  module.exports = v4;
},81,[79,80],"uuid/v4.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var WebSocketEvent = function WebSocketEvent(type, eventInitDict) {
    babelHelpers.classCallCheck(this, WebSocketEvent);
    this.type = type.toString();
    babelHelpers.extends(this, eventInitDict);
  };

  module.exports = WebSocketEvent;
},82,[],"WebSocketEvent");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Blob = require(_dependencyMap[0], 'Blob');

  var _require = require(_dependencyMap[1], 'NativeModules'),
      BlobModule = _require.BlobModule;

  var BLOB_URL_PREFIX = null;

  if (BlobModule && typeof BlobModule.BLOB_URI_SCHEME === 'string') {
    BLOB_URL_PREFIX = BlobModule.BLOB_URI_SCHEME + ':';

    if (typeof BlobModule.BLOB_URI_HOST === 'string') {
      BLOB_URL_PREFIX += "//" + BlobModule.BLOB_URI_HOST + "/";
    }
  }

  var URL = function () {
    function URL() {
      babelHelpers.classCallCheck(this, URL);
      throw new Error('Creating BlobURL objects is not supported yet.');
    }

    babelHelpers.createClass(URL, null, [{
      key: "createObjectURL",
      value: function createObjectURL(blob) {
        if (BLOB_URL_PREFIX === null) {
          throw new Error('Cannot create URL for blob!');
        }

        return "" + BLOB_URL_PREFIX + blob.blobId + "?offset=" + blob.offset + "&size=" + blob.size;
      }
    }, {
      key: "revokeObjectURL",
      value: function revokeObjectURL(url) {}
    }]);
    return URL;
  }();

  module.exports = URL;
},83,[76,15],"URL");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AlertIOS = require(_dependencyMap[0], 'AlertIOS');

  var NativeModules = require(_dependencyMap[1], 'NativeModules');

  var Platform = require(_dependencyMap[2], 'Platform');

  var Alert = function () {
    function Alert() {
      babelHelpers.classCallCheck(this, Alert);
    }

    babelHelpers.createClass(Alert, null, [{
      key: "alert",
      value: function alert(title, message, buttons, options, type) {
        if (Platform.OS === 'ios') {
          if (typeof type !== 'undefined') {
            console.warn('Alert.alert() with a 5th "type" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');
            AlertIOS.alert(title, message, buttons, type);
            return;
          }

          AlertIOS.alert(title, message, buttons);
        } else if (Platform.OS === 'android') {
          AlertAndroid.alert(title, message, buttons, options);
        }
      }
    }]);
    return Alert;
  }();

  var AlertAndroid = function () {
    function AlertAndroid() {
      babelHelpers.classCallCheck(this, AlertAndroid);
    }

    babelHelpers.createClass(AlertAndroid, null, [{
      key: "alert",
      value: function alert(title, message, buttons, options) {
        var config = {
          title: title || '',
          message: message || ''
        };

        if (options) {
          config = babelHelpers.extends({}, config, {
            cancelable: options.cancelable
          });
        }

        var validButtons = buttons ? buttons.slice(0, 3) : [{
          text: 'OK'
        }];
        var buttonPositive = validButtons.pop();
        var buttonNegative = validButtons.pop();
        var buttonNeutral = validButtons.pop();

        if (buttonNeutral) {
          config = babelHelpers.extends({}, config, {
            buttonNeutral: buttonNeutral.text || ''
          });
        }

        if (buttonNegative) {
          config = babelHelpers.extends({}, config, {
            buttonNegative: buttonNegative.text || ''
          });
        }

        if (buttonPositive) {
          config = babelHelpers.extends({}, config, {
            buttonPositive: buttonPositive.text || ''
          });
        }

        NativeModules.DialogManagerAndroid.showAlert(config, function (errorMessage) {
          return console.warn(errorMessage);
        }, function (action, buttonKey) {
          if (action === NativeModules.DialogManagerAndroid.buttonClicked) {
            if (buttonKey === NativeModules.DialogManagerAndroid.buttonNeutral) {
              buttonNeutral.onPress && buttonNeutral.onPress();
            } else if (buttonKey === NativeModules.DialogManagerAndroid.buttonNegative) {
              buttonNegative.onPress && buttonNegative.onPress();
            } else if (buttonKey === NativeModules.DialogManagerAndroid.buttonPositive) {
              buttonPositive.onPress && buttonPositive.onPress();
            }
          } else if (action === NativeModules.DialogManagerAndroid.dismissed) {
            options && options.onDismiss && options.onDismiss();
          }
        });
      }
    }]);
    return AlertAndroid;
  }();

  module.exports = Alert;
},84,[85,15,52],"Alert");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var RCTAlertManager = require(_dependencyMap[0], 'NativeModules').AlertManager;

  var AlertIOS = function () {
    function AlertIOS() {
      babelHelpers.classCallCheck(this, AlertIOS);
    }

    babelHelpers.createClass(AlertIOS, null, [{
      key: "alert",
      value: function alert(title, message, callbackOrButtons, type) {
        if (typeof type !== 'undefined') {
          console.warn('AlertIOS.alert() with a 4th "type" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');
          this.prompt(title, message, callbackOrButtons, type);
          return;
        }

        this.prompt(title, message, callbackOrButtons, 'default');
      }
    }, {
      key: "prompt",
      value: function prompt(title, message, callbackOrButtons) {
        var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'plain-text';
        var defaultValue = arguments[4];
        var keyboardType = arguments[5];

        if (typeof type === 'function') {
          console.warn('You passed a callback function as the "type" argument to AlertIOS.prompt(). React Native is ' + 'assuming  you want to use the deprecated AlertIOS.prompt(title, defaultValue, buttons, callback) ' + 'signature. The current signature is AlertIOS.prompt(title, message, callbackOrButtons, type, defaultValue, ' + 'keyboardType) and the old syntax will be removed in a future version.');
          var callback = type;
          var defaultValue = message;
          RCTAlertManager.alertWithArgs({
            title: title || '',
            type: 'plain-text',
            defaultValue: defaultValue
          }, function (id, value) {
            callback(value);
          });
          return;
        }

        var callbacks = [];
        var buttons = [];
        var cancelButtonKey;
        var destructiveButtonKey;

        if (typeof callbackOrButtons === 'function') {
          callbacks = [callbackOrButtons];
        } else if (callbackOrButtons instanceof Array) {
          callbackOrButtons.forEach(function (btn, index) {
            callbacks[index] = btn.onPress;

            if (btn.style === 'cancel') {
              cancelButtonKey = String(index);
            } else if (btn.style === 'destructive') {
              destructiveButtonKey = String(index);
            }

            if (btn.text || index < (callbackOrButtons || []).length - 1) {
              var btnDef = {};
              btnDef[index] = btn.text || '';
              buttons.push(btnDef);
            }
          });
        }

        RCTAlertManager.alertWithArgs({
          title: title || '',
          message: message || undefined,
          buttons: buttons,
          type: type || undefined,
          defaultValue: defaultValue,
          cancelButtonKey: cancelButtonKey,
          destructiveButtonKey: destructiveButtonKey,
          keyboardType: keyboardType
        }, function (id, value) {
          var cb = callbacks[id];
          cb && cb(value);
        });
      }
    }]);
    return AlertIOS;
  }();

  module.exports = AlertIOS;
},85,[15],"AlertIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var NativeEventEmitter = require(_dependencyMap[0], 'NativeEventEmitter');

  var RCTLocationObserver = require(_dependencyMap[1], 'NativeModules').LocationObserver;

  var invariant = require(_dependencyMap[2], 'fbjs/lib/invariant');

  var logError = require(_dependencyMap[3], 'logError');

  var warning = require(_dependencyMap[4], 'fbjs/lib/warning');

  var LocationEventEmitter = new NativeEventEmitter(RCTLocationObserver);

  var Platform = require(_dependencyMap[5], 'Platform');

  var PermissionsAndroid = require(_dependencyMap[6], 'PermissionsAndroid');

  var subscriptions = [];
  var updatesEnabled = false;
  var Geolocation = {
    setRNConfiguration: function setRNConfiguration(config) {
      if (RCTLocationObserver.setConfiguration) {
        RCTLocationObserver.setConfiguration(config);
      }
    },
    requestAuthorization: function requestAuthorization() {
      RCTLocationObserver.requestAuthorization();
    },
    getCurrentPosition: function getCurrentPosition(geo_success, geo_error, geo_options) {
      var hasPermission, status;
      return regeneratorRuntime.async(function getCurrentPosition$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              invariant(typeof geo_success === 'function', 'Must provide a valid geo_success callback.');
              hasPermission = true;

              if (!(Platform.OS === 'android' && Platform.Version >= 23)) {
                _context.next = 11;
                break;
              }

              _context.next = 5;
              return regeneratorRuntime.awrap(PermissionsAndroid.check(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION));

            case 5:
              hasPermission = _context.sent;

              if (hasPermission) {
                _context.next = 11;
                break;
              }

              _context.next = 9;
              return regeneratorRuntime.awrap(PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION));

            case 9:
              status = _context.sent;
              hasPermission = status === PermissionsAndroid.RESULTS.GRANTED;

            case 11:
              if (hasPermission) {
                RCTLocationObserver.getCurrentPosition(geo_options || {}, geo_success, geo_error || logError);
              }

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    },
    watchPosition: function watchPosition(success, error, options) {
      if (!updatesEnabled) {
        RCTLocationObserver.startObserving(options || {});
        updatesEnabled = true;
      }

      var watchID = subscriptions.length;
      subscriptions.push([LocationEventEmitter.addListener('geolocationDidChange', success), error ? LocationEventEmitter.addListener('geolocationError', error) : null]);
      return watchID;
    },
    clearWatch: function clearWatch(watchID) {
      var sub = subscriptions[watchID];

      if (!sub) {
        return;
      }

      sub[0].remove();
      var sub1 = sub[1];
      sub1 && sub1.remove();
      subscriptions[watchID] = undefined;
      var noWatchers = true;

      for (var ii = 0; ii < subscriptions.length; ii++) {
        if (subscriptions[ii]) {
          noWatchers = false;
        }
      }

      if (noWatchers) {
        Geolocation.stopObserving();
      }
    },
    stopObserving: function stopObserving() {
      if (updatesEnabled) {
        RCTLocationObserver.stopObserving();
        updatesEnabled = false;

        for (var ii = 0; ii < subscriptions.length; ii++) {
          var sub = subscriptions[ii];

          if (sub) {
            warning(false, 'Called stopObserving with existing subscriptions.');
            sub[0].remove();
            var sub1 = sub[1];
            sub1 && sub1.remove();
          }
        }

        subscriptions = [];
      }
    }
  };
  module.exports = Geolocation;
},86,[69,15,13,87,56,52,88],"Geolocation");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var logError = function logError() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (args.length === 1 && args[0] instanceof Error) {
      var err = args[0];
      console.error('Error: "' + err.message + '".  Stack:\n' + err.stack);
    } else {
      console.error.apply(console, args);
    }
  };

  module.exports = logError;
},87,[],"logError");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = require(_dependencyMap[0], 'NativeModules');

  var PermissionsAndroid = function () {
    function PermissionsAndroid() {
      babelHelpers.classCallCheck(this, PermissionsAndroid);
      this.PERMISSIONS = {
        READ_CALENDAR: 'android.permission.READ_CALENDAR',
        WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',
        CAMERA: 'android.permission.CAMERA',
        READ_CONTACTS: 'android.permission.READ_CONTACTS',
        WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',
        GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',
        ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',
        ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',
        RECORD_AUDIO: 'android.permission.RECORD_AUDIO',
        READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',
        CALL_PHONE: 'android.permission.CALL_PHONE',
        READ_CALL_LOG: 'android.permission.READ_CALL_LOG',
        WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',
        ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',
        USE_SIP: 'android.permission.USE_SIP',
        PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',
        BODY_SENSORS: 'android.permission.BODY_SENSORS',
        SEND_SMS: 'android.permission.SEND_SMS',
        RECEIVE_SMS: 'android.permission.RECEIVE_SMS',
        READ_SMS: 'android.permission.READ_SMS',
        RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',
        RECEIVE_MMS: 'android.permission.RECEIVE_MMS',
        READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',
        WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE'
      };
      this.RESULTS = {
        GRANTED: 'granted',
        DENIED: 'denied',
        NEVER_ASK_AGAIN: 'never_ask_again'
      };
    }

    babelHelpers.createClass(PermissionsAndroid, [{
      key: "checkPermission",
      value: function checkPermission(permission) {
        console.warn('"PermissionsAndroid.checkPermission" is deprecated. Use "PermissionsAndroid.check" instead');
        return NativeModules.PermissionsAndroid.checkPermission(permission);
      }
    }, {
      key: "check",
      value: function check(permission) {
        return NativeModules.PermissionsAndroid.checkPermission(permission);
      }
    }, {
      key: "requestPermission",
      value: function requestPermission(permission, rationale) {
        var response;
        return regeneratorRuntime.async(function requestPermission$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                console.warn('"PermissionsAndroid.requestPermission" is deprecated. Use "PermissionsAndroid.request" instead');
                _context.next = 3;
                return regeneratorRuntime.awrap(this.request(permission, rationale));

              case 3:
                response = _context.sent;
                return _context.abrupt("return", response === this.RESULTS.GRANTED);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "request",
      value: function request(permission, rationale) {
        var shouldShowRationale;
        return regeneratorRuntime.async(function request$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!rationale) {
                  _context2.next = 6;
                  break;
                }

                _context2.next = 3;
                return regeneratorRuntime.awrap(NativeModules.PermissionsAndroid.shouldShowRequestPermissionRationale(permission));

              case 3:
                shouldShowRationale = _context2.sent;

                if (!shouldShowRationale) {
                  _context2.next = 6;
                  break;
                }

                return _context2.abrupt("return", new Promise(function (resolve, reject) {
                  NativeModules.DialogManagerAndroid.showAlert(rationale, function () {
                    return reject(new Error('Error showing rationale'));
                  }, function () {
                    return resolve(NativeModules.PermissionsAndroid.requestPermission(permission));
                  });
                }));

              case 6:
                return _context2.abrupt("return", NativeModules.PermissionsAndroid.requestPermission(permission));

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "requestMultiple",
      value: function requestMultiple(permissions) {
        return NativeModules.PermissionsAndroid.requestMultiplePermissions(permissions);
      }
    }]);
    return PermissionsAndroid;
  }();

  PermissionsAndroid = new PermissionsAndroid();
  module.exports = PermissionsAndroid;
},88,[15],"PermissionsAndroid");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var HeapCapture = {
    captureHeap: function captureHeap(path) {
      var error = null;

      try {
        global.nativeCaptureHeap(path);
        console.log('HeapCapture.captureHeap succeeded: ' + path);
      } catch (e) {
        console.log('HeapCapture.captureHeap error: ' + e.toString());
        error = e.toString();
      }

      require(_dependencyMap[0], 'NativeModules').JSCHeapCapture.captureComplete(path, error);
    }
  };
  module.exports = HeapCapture;
},89,[15],"HeapCapture");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var SamplingProfiler = {
    poke: function poke(token) {
      var error = null;
      var result = null;

      try {
        result = global.pokeSamplingProfiler();

        if (result === null) {
          console.log('The JSC Sampling Profiler has started');
        } else {
          console.log('The JSC Sampling Profiler has stopped');
        }
      } catch (e) {
        console.log('Error occured when restarting Sampling Profiler: ' + e.toString());
        error = e.toString();
      }

      var _require = require(_dependencyMap[0], 'NativeModules'),
          JSCSamplingProfiler = _require.JSCSamplingProfiler;

      JSCSamplingProfiler.operationComplete(token, result, error);
    }
  };
  module.exports = SamplingProfiler;
},90,[15],"SamplingProfiler");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var levelsMap = {
    log: 'log',
    info: 'info',
    warn: 'warn',
    error: 'error',
    fatal: 'error'
  };
  var warningHandler = null;
  var RCTLog = {
    logIfNoNativeHook: function logIfNoNativeHook(level) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (typeof global.nativeLoggingHook === 'undefined') {
        RCTLog.logToConsole.apply(RCTLog, [level].concat(babelHelpers.toConsumableArray(args)));
      } else {
        if (warningHandler && level === 'warn') {
          warningHandler.apply(undefined, babelHelpers.toConsumableArray(args));
        }
      }
    },
    logToConsole: function logToConsole(level) {
      var _console;

      var logFn = levelsMap[level];
      invariant(logFn, 'Level "' + level + '" not one of ' + Object.keys(levelsMap).toString());

      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      (_console = console)[logFn].apply(_console, babelHelpers.toConsumableArray(args));
    },
    setWarningHandler: function setWarningHandler(handler) {
      warningHandler = handler;
    }
  };
  module.exports = RCTLog;
},91,[13],"RCTLog");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var RCTDeviceEventEmitter = require(_dependencyMap[0], 'RCTDeviceEventEmitter');

  var RCTNativeAppEventEmitter = RCTDeviceEventEmitter;
  module.exports = RCTNativeAppEventEmitter;
},92,[70],"RCTNativeAppEventEmitter");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Systrace = require(_dependencyMap[0], 'Systrace');

  var infoLog = require(_dependencyMap[1], 'infoLog');

  var performanceNow = global.nativePerformanceNow || require(_dependencyMap[2], 'fbjs/lib/performanceNow');

  var timespans = {};
  var extras = {};
  var cookies = {};
  var PRINT_TO_CONSOLE = false;
  var PerformanceLogger = {
    addTimespan: function addTimespan(key, lengthInMs, description) {
      if (timespans[key]) {
        if (__DEV__) {
          infoLog('PerformanceLogger: Attempting to add a timespan that already exists ', key);
        }

        return;
      }

      timespans[key] = {
        description: description,
        totalTime: lengthInMs
      };
    },
    startTimespan: function startTimespan(key, description) {
      if (timespans[key]) {
        if (__DEV__) {
          infoLog('PerformanceLogger: Attempting to start a timespan that already exists ', key);
        }

        return;
      }

      timespans[key] = {
        description: description,
        startTime: performanceNow()
      };
      cookies[key] = Systrace.beginAsyncEvent(key);

      if (__DEV__ && PRINT_TO_CONSOLE) {
        infoLog('PerformanceLogger.js', 'start: ' + key);
      }
    },
    stopTimespan: function stopTimespan(key) {
      var timespan = timespans[key];

      if (!timespan || !timespan.startTime) {
        if (__DEV__) {
          infoLog('PerformanceLogger: Attempting to end a timespan that has not started ', key);
        }

        return;
      }

      if (timespan.endTime) {
        if (__DEV__) {
          infoLog('PerformanceLogger: Attempting to end a timespan that has already ended ', key);
        }

        return;
      }

      timespan.endTime = performanceNow();
      timespan.totalTime = timespan.endTime - (timespan.startTime || 0);

      if (__DEV__ && PRINT_TO_CONSOLE) {
        infoLog('PerformanceLogger.js', 'end: ' + key);
      }

      Systrace.endAsyncEvent(key, cookies[key]);
      delete cookies[key];
    },
    clear: function clear() {
      timespans = {};
      extras = {};
    },
    clearCompleted: function clearCompleted() {
      for (var _key in timespans) {
        if (timespans[_key].totalTime) {
          delete timespans[_key];
        }
      }

      extras = {};
    },
    clearExceptTimespans: function clearExceptTimespans(keys) {
      timespans = Object.keys(timespans).reduce(function (previous, key) {
        if (keys.indexOf(key) !== -1) {
          previous[key] = timespans[key];
        }

        return previous;
      }, {});
      extras = {};
    },
    currentTimestamp: function currentTimestamp() {
      return performanceNow();
    },
    getTimespans: function getTimespans() {
      return timespans;
    },
    hasTimespan: function hasTimespan(key) {
      return !!timespans[key];
    },
    logTimespans: function logTimespans() {
      for (var _key2 in timespans) {
        if (timespans[_key2].totalTime) {
          infoLog(_key2 + ': ' + timespans[_key2].totalTime + 'ms');
        }
      }
    },
    addTimespans: function addTimespans(newTimespans, labels) {
      for (var ii = 0, l = newTimespans.length; ii < l; ii += 2) {
        var label = labels[ii / 2];
        PerformanceLogger.addTimespan(label, newTimespans[ii + 1] - newTimespans[ii], label);
      }
    },
    setExtra: function setExtra(key, value) {
      if (extras[key]) {
        if (__DEV__) {
          infoLog('PerformanceLogger: Attempting to set an extra that already exists ', {
            key: key,
            currentValue: extras[key],
            attemptedValue: value
          });
        }

        return;
      }

      extras[key] = value;
    },
    getExtras: function getExtras() {
      return extras;
    }
  };
  module.exports = PerformanceLogger;
},93,[19,94,53],"PerformanceLogger");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function infoLog() {
    var _console;

    return (_console = console).log.apply(_console, arguments);
  }

  module.exports = infoLog;
},94,[],"infoLog");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = require(_dependencyMap[0], 'Platform');

  var invariant = require(_dependencyMap[1], 'fbjs/lib/invariant');

  var HMRClient = {
    enable: function enable(platform, bundleEntry, host, port) {
      invariant(platform, 'Missing required parameter `platform`');
      invariant(bundleEntry, 'Missing required paramenter `bundleEntry`');
      invariant(host, 'Missing required paramenter `host`');

      var WebSocket = require(_dependencyMap[2], 'WebSocket');

      var wsHostPort = port !== null && port !== '' ? host + ":" + port : host;
      bundleEntry = bundleEntry.replace(/\.(bundle|delta)/, '.js');
      var wsUrl = "ws://" + wsHostPort + "/hot?" + ("platform=" + platform + "&") + ("bundleEntry=" + bundleEntry);
      var activeWS = new WebSocket(wsUrl);

      activeWS.onerror = function (e) {
        var error = "Hot loading isn't working because it cannot connect to the development server.\n\nTry the following to fix the issue:\n- Ensure that the packager server is running and available on the same network";

        if (Platform.OS === 'ios') {
          error += "\n- Ensure that the Packager server URL is correctly set in AppDelegate";
        } else {
          error += "\n- Ensure that your device/emulator is connected to your machine and has USB debugging enabled - run 'adb devices' to see a list of connected devices\n- If you're on a physical device connected to the same machine, run 'adb reverse tcp:8081 tcp:8081' to forward requests from your device\n- If your device is on the same Wi-Fi network, set 'Debug server host & port for device' in 'Dev settings' to your machine's IP address and the port of the local dev server - e.g. 10.0.1.1:8081";
        }

        error += "\n\nURL: " + host + ":" + port + "\n\nError: " + e.message;
        throw new Error(error);
      };

      activeWS.onmessage = function (_ref) {
        var data = _ref.data;

        var HMRLoadingView = require(_dependencyMap[3], 'HMRLoadingView');

        data = JSON.parse(data);

        switch (data.type) {
          case 'update-start':
            {
              HMRLoadingView.showMessage('Hot Loading...');
              break;
            }

          case 'update':
            {
              var _data$body = data.body,
                  modules = _data$body.modules,
                  sourceMappingURLs = _data$body.sourceMappingURLs,
                  sourceURLs = _data$body.sourceURLs;

              if (Platform.OS === 'ios') {
                var RCTRedBox = require(_dependencyMap[4], 'NativeModules').RedBox;

                RCTRedBox && RCTRedBox.dismiss && RCTRedBox.dismiss();
              } else {
                var RCTExceptionsManager = require(_dependencyMap[4], 'NativeModules').ExceptionsManager;

                RCTExceptionsManager && RCTExceptionsManager.dismissRedbox && RCTExceptionsManager.dismissRedbox();
              }

              modules.forEach(function (_ref2, i) {
                var id = _ref2.id,
                    code = _ref2.code;
                code = code + '\n\n' + sourceMappingURLs[i];
                var injectFunction = typeof global.nativeInjectHMRUpdate === 'function' ? global.nativeInjectHMRUpdate : eval;
                injectFunction(code, sourceURLs[i]);
              });
              HMRLoadingView.hide();
              break;
            }

          case 'update-done':
            {
              HMRLoadingView.hide();
              break;
            }

          case 'error':
            {
              HMRLoadingView.hide();
              throw new Error(data.body.type + ": " + data.body.message);
            }

          default:
            {
              throw new Error("Unexpected message: " + data);
            }
        }
      };
    }
  };
  module.exports = HMRClient;
},95,[52,13,75,96,15],"HMRClient");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ToastAndroid = require(_dependencyMap[0], 'ToastAndroid');

  var TOAST_SHORT_DELAY = 2000;

  var HMRLoadingView = function () {
    function HMRLoadingView() {
      babelHelpers.classCallCheck(this, HMRLoadingView);
    }

    babelHelpers.createClass(HMRLoadingView, null, [{
      key: "showMessage",
      value: function showMessage(message) {
        if (HMRLoadingView._showing) {
          return;
        }

        ToastAndroid.show(message, ToastAndroid.SHORT);
        HMRLoadingView._showing = true;
        setTimeout(function () {
          HMRLoadingView._showing = false;
        }, TOAST_SHORT_DELAY);
      }
    }, {
      key: "hide",
      value: function hide() {}
    }]);
    return HMRLoadingView;
  }();

  module.exports = HMRLoadingView;
},96,[97],"HMRLoadingView");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var RCTToastAndroid = require(_dependencyMap[0], 'NativeModules').ToastAndroid;

  var ToastAndroid = {
    SHORT: RCTToastAndroid.SHORT,
    LONG: RCTToastAndroid.LONG,
    TOP: RCTToastAndroid.TOP,
    BOTTOM: RCTToastAndroid.BOTTOM,
    CENTER: RCTToastAndroid.CENTER,
    show: function show(message, duration) {
      RCTToastAndroid.show(message, duration);
    },
    showWithGravity: function showWithGravity(message, duration, gravity) {
      RCTToastAndroid.showWithGravity(message, duration, gravity);
    },
    showWithGravityAndOffset: function showWithGravityAndOffset(message, duration, gravity, xOffset, yOffset) {
      RCTToastAndroid.showWithGravityAndOffset(message, duration, gravity, xOffset, yOffset);
    }
  };
  module.exports = ToastAndroid;
},97,[15],"ToastAndroid");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var register = function register() {};

  if (__DEV__) {
    var AppState = require(_dependencyMap[0], 'AppState');

    var WebSocket = require(_dependencyMap[1], 'WebSocket');

    var reactDevTools = require(_dependencyMap[2], 'react-devtools-core');

    var getDevServer = require(_dependencyMap[3], 'getDevServer');

    if (WebSocket.isAvailable) {
      var _isAppActive = function _isAppActive() {
        return AppState.currentState !== 'background';
      };

      var devServer = getDevServer();

      var _host = devServer.bundleLoadedFromServer ? devServer.url.replace(/https?:\/\//, '').split(':')[0] : 'localhost';

      reactDevTools.connectToDevTools({
        isAppActive: _isAppActive,
        host: _host,
        port: window.__REACT_DEVTOOLS_PORT__,
        resolveRNStyle: require(_dependencyMap[4], 'flattenStyle')
      });
    }
  }

  module.exports = {
    register: register
  };
},98,[99,75,100,36,101],"setupDevtools");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var MissingNativeEventEmitterShim = require(_dependencyMap[0], 'MissingNativeEventEmitterShim');

  var NativeEventEmitter = require(_dependencyMap[1], 'NativeEventEmitter');

  var NativeModules = require(_dependencyMap[2], 'NativeModules');

  var RCTAppState = NativeModules.AppState;

  var logError = require(_dependencyMap[3], 'logError');

  var invariant = require(_dependencyMap[4], 'fbjs/lib/invariant');

  var AppState = function (_NativeEventEmitter) {
    babelHelpers.inherits(AppState, _NativeEventEmitter);

    function AppState() {
      babelHelpers.classCallCheck(this, AppState);

      var _this = babelHelpers.possibleConstructorReturn(this, (AppState.__proto__ || Object.getPrototypeOf(AppState)).call(this, RCTAppState));

      _this.isAvailable = true;
      _this.isAvailable = true;
      _this._eventHandlers = {
        change: new Map(),
        memoryWarning: new Map()
      };
      _this.currentState = RCTAppState.initialAppState || 'active';
      var eventUpdated = false;

      _this.addListener('appStateDidChange', function (appStateData) {
        eventUpdated = true;
        _this.currentState = appStateData.app_state;
      });

      RCTAppState.getCurrentAppState(function (appStateData) {
        if (!eventUpdated) {
          _this.currentState = appStateData.app_state;
        }
      }, logError);
      return _this;
    }

    babelHelpers.createClass(AppState, [{
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to subscribe to unknown event: "%s"', type);

        if (type === 'change') {
          this._eventHandlers[type].set(handler, this.addListener('appStateDidChange', function (appStateData) {
            handler(appStateData.app_state);
          }));
        } else if (type === 'memoryWarning') {
          this._eventHandlers[type].set(handler, this.addListener('memoryWarning', handler));
        }
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to remove listener for unknown event: "%s"', type);

        if (!this._eventHandlers[type].has(handler)) {
          return;
        }

        this._eventHandlers[type].get(handler).remove();

        this._eventHandlers[type].delete(handler);
      }
    }]);
    return AppState;
  }(NativeEventEmitter);

  if (__DEV__ && !RCTAppState) {
    var MissingNativeAppStateShim = function (_MissingNativeEventEm) {
      babelHelpers.inherits(MissingNativeAppStateShim, _MissingNativeEventEm);

      function MissingNativeAppStateShim() {
        babelHelpers.classCallCheck(this, MissingNativeAppStateShim);
        return babelHelpers.possibleConstructorReturn(this, (MissingNativeAppStateShim.__proto__ || Object.getPrototypeOf(MissingNativeAppStateShim)).call(this, 'RCTAppState', 'AppState'));
      }

      babelHelpers.createClass(MissingNativeAppStateShim, [{
        key: "addEventListener",
        value: function addEventListener() {
          this.throwMissingNativeModule();
        }
      }, {
        key: "removeEventListener",
        value: function removeEventListener() {
          this.throwMissingNativeModule();
        }
      }, {
        key: "currentState",
        get: function get() {
          this.throwMissingNativeModule();
        }
      }]);
      return MissingNativeAppStateShim;
    }(MissingNativeEventEmitterShim);

    AppState = new MissingNativeAppStateShim();
  } else {
    AppState = new AppState();
  }

  module.exports = AppState;
},99,[64,69,15,87,13],"AppState");
__d(function (global, require, module, exports, _dependencyMap) {
    !function (root, factory) {
        "object" == typeof exports && "object" == typeof module ? module.exports = factory() : "function" == typeof define && define.amd ? define([], factory) : "object" == typeof exports ? exports.ReactDevToolsBackend = factory() : root.ReactDevToolsBackend = factory();
    }(this, function () {
        return function (modules) {
            function __webpack_require__(moduleId) {
                if (installedModules[moduleId]) return installedModules[moduleId].exports;
                var module = installedModules[moduleId] = {
                    exports: {},
                    id: moduleId,
                    loaded: !1
                };
                return modules[moduleId].call(module.exports, module, module.exports, __webpack_require__), module.loaded = !0, module.exports;
            }

            var installedModules = {};
            return __webpack_require__.m = modules, __webpack_require__.c = installedModules, __webpack_require__.p = "", __webpack_require__(0);
        }([function (module, exports, __webpack_require__) {
            "use strict";

            function connectToDevTools(options) {
                function scheduleRetry() {
                    setTimeout(function () {
                        return connectToDevTools(options);
                    }, 2e3);
                }

                function handleClose() {
                    hasClosed || (hasClosed = !0, scheduleRetry(), closeListeners.forEach(function (fn) {
                        return fn();
                    }));
                }

                function handleMessage(evt) {
                    var data;

                    try {
                        data = JSON.parse(evt.data);
                    } catch (e) {
                        return void console.error("failed to parse json: " + evt.data);
                    }

                    messageListeners.forEach(function (fn) {
                        try {
                            fn(data);
                        } catch (e) {
                            throw console.log(data), e;
                        }
                    });
                }

                var _ref = options || {},
                    _ref$host = _ref.host,
                    host = void 0 === _ref$host ? "localhost" : _ref$host,
                    _ref$port = _ref.port,
                    port = void 0 === _ref$port ? 8097 : _ref$port,
                    websocket = _ref.websocket,
                    _ref$resolveRNStyle = _ref.resolveRNStyle,
                    resolveRNStyle = void 0 === _ref$resolveRNStyle ? null : _ref$resolveRNStyle,
                    _ref$isAppActive = _ref.isAppActive,
                    isAppActive = void 0 === _ref$isAppActive ? function () {
                    return !0;
                } : _ref$isAppActive;

                if (!isAppActive()) return void scheduleRetry();
                var messageListeners = [],
                    closeListeners = [],
                    uri = "ws://" + host + ":" + port,
                    ws = websocket ? websocket : new window.WebSocket(uri);
                ws.onclose = handleClose, ws.onerror = handleClose, ws.onmessage = handleMessage, ws.onopen = function () {
                    var wall = {
                        listen: function listen(fn) {
                            messageListeners.push(fn);
                        },
                        onClose: function onClose(fn) {
                            closeListeners.push(fn);
                        },
                        send: function send(data) {
                            ws.send(JSON.stringify(data));
                        }
                    };
                    setupBackend(wall, resolveRNStyle);
                };
                var hasClosed = !1;
            }

            function setupBackend(wall, resolveRNStyle) {
                wall.onClose(function () {
                    agent && agent.emit("shutdown"), window.__REACT_DEVTOOLS_GLOBAL_HOOK__.emit("shutdown"), bridge = null, agent = null, console.log("closing devtools");
                });
                var bridge = new Bridge(wall),
                    agent = new Agent(window, {
                    rnStyle: !!resolveRNStyle,
                    rnStyleMeasure: !!resolveRNStyle
                });
                agent.addBridge(bridge), resolveRNStyle && setupRNStyle(bridge, agent, resolveRNStyle), setupRelay(bridge, agent, window.__REACT_DEVTOOLS_GLOBAL_HOOK__);

                var _connectTimeout = setTimeout(function () {
                    console.warn("react-devtools agent got no connection");
                }, 2e4);

                agent.once("connected", function () {
                    agent && (inject(window.__REACT_DEVTOOLS_GLOBAL_HOOK__, agent), clearTimeout(_connectTimeout));
                });
            }

            var Agent = __webpack_require__(1),
                Bridge = __webpack_require__(6),
                installGlobalHook = __webpack_require__(31),
                installRelayHook = __webpack_require__(32),
                inject = __webpack_require__(33),
                setupRNStyle = __webpack_require__(45),
                setupRelay = __webpack_require__(47);

            installGlobalHook(window), installRelayHook(window), window.document && window.__REACT_DEVTOOLS_GLOBAL_HOOK__.on("react-devtools", function (agent) {
                var setupHighlighter = __webpack_require__(48);

                setupHighlighter(agent);
            }), module.exports = {
                connectToDevTools: connectToDevTools
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }

            function _possibleConstructorReturn(self, call) {
                if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return !call || "object" != typeof call && "function" != typeof call ? self : call;
            }

            function _inherits(subClass, superClass) {
                if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0
                    }
                }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
            }

            var _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
            },
                _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
                };
            }(),
                _require = __webpack_require__(2),
                EventEmitter = _require.EventEmitter,
                assign = __webpack_require__(3),
                guid = __webpack_require__(4),
                getIn = __webpack_require__(5),
                Agent = function (_EventEmitter) {
                function Agent(global, capabilities) {
                    _classCallCheck(this, Agent);

                    var _this = _possibleConstructorReturn(this, (Agent.__proto__ || Object.getPrototypeOf(Agent)).call(this));

                    _this.global = global, _this.internalInstancesById = new Map(), _this.idsByInternalInstances = new WeakMap(), _this.renderers = new Map(), _this.elementData = new Map(), _this.roots = new Set(), _this.reactInternals = {};
                    var lastSelected;
                    _this.on("selected", function (id) {
                        var data = _this.elementData.get(id);

                        data && data.publicInstance && _this.global.$r === lastSelected && (_this.global.$r = data.publicInstance, lastSelected = data.publicInstance);
                    }), _this._prevSelected = null, _this._scrollUpdate = !1;
                    var isReactDOM = window.document && "function" == typeof window.document.createElement;
                    return _this.capabilities = assign({
                        scroll: isReactDOM && "function" == typeof window.document.body.scrollIntoView,
                        dom: isReactDOM,
                        editTextContent: !1
                    }, capabilities), isReactDOM && (_this._updateScroll = _this._updateScroll.bind(_this), window.addEventListener("scroll", _this._onScroll.bind(_this), !0), window.addEventListener("click", _this._onClick.bind(_this), !0), window.addEventListener("mouseover", _this._onMouseOver.bind(_this), !0), window.addEventListener("resize", _this._onResize.bind(_this), !0)), _this;
                }

                return _inherits(Agent, _EventEmitter), _createClass(Agent, [{
                    key: "sub",
                    value: function value(ev, fn) {
                        var _this2 = this;

                        return this.on(ev, fn), function () {
                            _this2.removeListener(ev, fn);
                        };
                    }
                }, {
                    key: "setReactInternals",
                    value: function value(renderer, reactInternals) {
                        this.reactInternals[renderer] = reactInternals;
                    }
                }, {
                    key: "addBridge",
                    value: function value(bridge) {
                        var _this3 = this;

                        bridge.on("requestCapabilities", function () {
                            bridge.send("capabilities", _this3.capabilities), _this3.emit("connected");
                        }), bridge.on("setState", this._setState.bind(this)), bridge.on("setProps", this._setProps.bind(this)), bridge.on("setContext", this._setContext.bind(this)), bridge.on("makeGlobal", this._makeGlobal.bind(this)), bridge.on("highlight", function (id) {
                            return _this3.highlight(id);
                        }), bridge.on("highlightMany", function (id) {
                            return _this3.highlightMany(id);
                        }), bridge.on("hideHighlight", function () {
                            return _this3.emit("hideHighlight");
                        }), bridge.on("startInspecting", function () {
                            return _this3.emit("startInspecting");
                        }), bridge.on("stopInspecting", function () {
                            return _this3.emit("stopInspecting");
                        }), bridge.on("selected", function (id) {
                            return _this3.emit("selected", id);
                        }), bridge.on("setInspectEnabled", function (enabled) {
                            _this3._inspectEnabled = enabled, _this3.emit("stopInspecting");
                        }), bridge.on("shutdown", function () {
                            return _this3.emit("shutdown");
                        }), bridge.on("changeTextContent", function (_ref) {
                            var id = _ref.id,
                                text = _ref.text,
                                node = _this3.getNodeForID(id);

                            node && (node.textContent = text);
                        }), bridge.on("putSelectedNode", function (id) {
                            window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$node = _this3.getNodeForID(id);
                        }), bridge.on("putSelectedInstance", function (id) {
                            var node = _this3.elementData.get(id);

                            node ? window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$type = node.type : window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$type = null, node && node.publicInstance ? window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$inst = node.publicInstance : window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$inst = null;
                        }), bridge.on("checkSelection", function () {
                            var newSelected = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$0;

                            if (newSelected !== _this3._prevSelected) {
                                _this3._prevSelected = newSelected;
                                var sentSelected = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$node;
                                newSelected !== sentSelected && _this3.selectFromDOMNode(newSelected, !0);
                            }
                        }), bridge.on("scrollToNode", function (id) {
                            return _this3.scrollToNode(id);
                        }), bridge.on("traceupdatesstatechange", function (value) {
                            return _this3.emit("traceupdatesstatechange", value);
                        }), bridge.on("colorizerchange", function (value) {
                            return _this3.emit("colorizerchange", value);
                        }), this.on("root", function (id) {
                            return bridge.send("root", id);
                        }), this.on("mount", function (data) {
                            return bridge.send("mount", data);
                        }), this.on("update", function (data) {
                            return bridge.send("update", data);
                        }), this.on("unmount", function (id) {
                            bridge.send("unmount", id), bridge.forget(id);
                        }), this.on("setSelection", function (data) {
                            return bridge.send("select", data);
                        }), this.on("setInspectEnabled", function (data) {
                            return bridge.send("setInspectEnabled", data);
                        });
                    }
                }, {
                    key: "scrollToNode",
                    value: function value(id) {
                        var node = this.getNodeForID(id);
                        if (!node) return void console.warn("unable to get the node for scrolling");
                        var domElement = node.nodeType === Node.ELEMENT_NODE ? node : node.parentElement;
                        return domElement ? ("function" == typeof domElement.scrollIntoViewIfNeeded ? domElement.scrollIntoViewIfNeeded() : "function" == typeof domElement.scrollIntoView && domElement.scrollIntoView(), void this.highlight(id)) : void console.warn("unable to get the domElement for scrolling");
                    }
                }, {
                    key: "highlight",
                    value: function value(id) {
                        var data = this.elementData.get(id),
                            node = this.getNodeForID(id);
                        data && node && this.emit("highlight", {
                            node: node,
                            name: data.name,
                            props: data.props
                        });
                    }
                }, {
                    key: "highlightMany",
                    value: function value(ids) {
                        var _this4 = this,
                            nodes = [];

                        ids.forEach(function (id) {
                            var node = _this4.getNodeForID(id);

                            node && nodes.push(node);
                        }), nodes.length && this.emit("highlightMany", nodes);
                    }
                }, {
                    key: "getNodeForID",
                    value: function value(id) {
                        var component = this.internalInstancesById.get(id);
                        if (!component) return null;
                        var renderer = this.renderers.get(id);
                        return renderer && this.reactInternals[renderer].getNativeFromReactElement ? this.reactInternals[renderer].getNativeFromReactElement(component) : null;
                    }
                }, {
                    key: "selectFromDOMNode",
                    value: function value(node, quiet) {
                        var offsetFromLeaf = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,
                            id = this.getIDForNode(node);
                        id && this.emit("setSelection", {
                            id: id,
                            quiet: quiet,
                            offsetFromLeaf: offsetFromLeaf
                        });
                    }
                }, {
                    key: "selectFromReactInstance",
                    value: function value(instance, quiet) {
                        var id = this.getId(instance);
                        return id ? void this.emit("setSelection", {
                            id: id,
                            quiet: quiet
                        }) : void console.log("no instance id", instance);
                    }
                }, {
                    key: "getIDForNode",
                    value: function value(node) {
                        if (!this.reactInternals) return null;
                        var component;

                        for (var renderer in this.reactInternals) {
                            try {
                                component = this.reactInternals[renderer].getReactElementFromNative(node);
                            } catch (e) {}

                            if (component) return this.getId(component);
                        }

                        return null;
                    }
                }, {
                    key: "_setProps",
                    value: function value(_ref2) {
                        var id = _ref2.id,
                            path = _ref2.path,
                            value = _ref2.value,
                            data = this.elementData.get(id);
                        data && data.updater && data.updater.setInProps ? data.updater.setInProps(path, value) : console.warn("trying to set props on a component that doesn't support it");
                    }
                }, {
                    key: "_setState",
                    value: function value(_ref3) {
                        var id = _ref3.id,
                            path = _ref3.path,
                            value = _ref3.value,
                            data = this.elementData.get(id);
                        data && data.updater && data.updater.setInState ? data.updater.setInState(path, value) : console.warn("trying to set state on a component that doesn't support it");
                    }
                }, {
                    key: "_setContext",
                    value: function value(_ref4) {
                        var id = _ref4.id,
                            path = _ref4.path,
                            value = _ref4.value,
                            data = this.elementData.get(id);
                        data && data.updater && data.updater.setInContext ? data.updater.setInContext(path, value) : console.warn("trying to set context on a component that doesn't support it");
                    }
                }, {
                    key: "_makeGlobal",
                    value: function value(_ref5) {
                        var id = _ref5.id,
                            path = _ref5.path,
                            data = this.elementData.get(id);

                        if (data) {
                            var value;
                            value = "instance" === path ? data.publicInstance : getIn(data, path), this.global.$tmp = value, console.log("$tmp =", value);
                        }
                    }
                }, {
                    key: "getId",
                    value: function value(internalInstance) {
                        return "object" === ("undefined" == typeof internalInstance ? "undefined" : _typeof(internalInstance)) && internalInstance ? (this.idsByInternalInstances.has(internalInstance) || (this.idsByInternalInstances.set(internalInstance, guid()), this.internalInstancesById.set(this.idsByInternalInstances.get(internalInstance), internalInstance)), this.idsByInternalInstances.get(internalInstance)) : internalInstance;
                    }
                }, {
                    key: "addRoot",
                    value: function value(renderer, internalInstance) {
                        var id = this.getId(internalInstance);
                        this.roots.add(id), this.emit("root", id);
                    }
                }, {
                    key: "onMounted",
                    value: function value(renderer, component, data) {
                        var _this5 = this,
                            id = this.getId(component);

                        this.renderers.set(id, renderer), this.elementData.set(id, data);
                        var send = assign({}, data);
                        send.children && send.children.map && (send.children = send.children.map(function (c) {
                            return _this5.getId(c);
                        })), send.id = id, send.canUpdate = send.updater && !!send.updater.forceUpdate, delete send.type, delete send.updater, this.emit("mount", send);
                    }
                }, {
                    key: "onUpdated",
                    value: function value(component, data) {
                        var _this6 = this,
                            id = this.getId(component);

                        this.elementData.set(id, data);
                        var send = assign({}, data);
                        send.children && send.children.map && (send.children = send.children.map(function (c) {
                            return _this6.getId(c);
                        })), send.id = id, send.canUpdate = send.updater && !!send.updater.forceUpdate, delete send.type, delete send.updater, this.emit("update", send);
                    }
                }, {
                    key: "onUnmounted",
                    value: function value(component) {
                        var id = this.getId(component);
                        this.elementData["delete"](id), this.roots["delete"](id), this.renderers["delete"](id), this.emit("unmount", id), this.idsByInternalInstances["delete"](component);
                    }
                }, {
                    key: "_onScroll",
                    value: function value() {
                        this._scrollUpdate || (this._scrollUpdate = !0, window.requestAnimationFrame(this._updateScroll));
                    }
                }, {
                    key: "_updateScroll",
                    value: function value() {
                        this.emit("refreshMultiOverlay"), this.emit("stopInspecting"), this._scrollUpdate = !1;
                    }
                }, {
                    key: "_onClick",
                    value: function value(event) {
                        if (this._inspectEnabled) {
                            var id = this.getIDForNode(event.target);
                            id && (event.stopPropagation(), event.preventDefault(), this.emit("setSelection", {
                                id: id
                            }), this.emit("setInspectEnabled", !1));
                        }
                    }
                }, {
                    key: "_onMouseOver",
                    value: function value(event) {
                        if (this._inspectEnabled) {
                            var id = this.getIDForNode(event.target);
                            if (!id) return;
                            this.highlight(id);
                        }
                    }
                }, {
                    key: "_onResize",
                    value: function value(event) {
                        this.emit("stopInspecting");
                    }
                }]), Agent;
            }(EventEmitter);

            module.exports = Agent;
        }, function (module, exports) {
            function EventEmitter() {
                this._events = this._events || {}, this._maxListeners = this._maxListeners || void 0;
            }

            function isFunction(arg) {
                return "function" == typeof arg;
            }

            function isNumber(arg) {
                return "number" == typeof arg;
            }

            function isObject(arg) {
                return "object" == typeof arg && null !== arg;
            }

            function isUndefined(arg) {
                return void 0 === arg;
            }

            module.exports = EventEmitter, EventEmitter.EventEmitter = EventEmitter, EventEmitter.prototype._events = void 0, EventEmitter.prototype._maxListeners = void 0, EventEmitter.defaultMaxListeners = 10, EventEmitter.prototype.setMaxListeners = function (n) {
                if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError("n must be a positive number");
                return this._maxListeners = n, this;
            }, EventEmitter.prototype.emit = function (type) {
                var er, handler, len, args, i, listeners;

                if (this._events || (this._events = {}), "error" === type && (!this._events.error || isObject(this._events.error) && !this._events.error.length)) {
                    if (er = arguments[1], er instanceof Error) throw er;
                    var err = new Error('Uncaught, unspecified "error" event. (' + er + ")");
                    throw err.context = er, err;
                }

                if (handler = this._events[type], isUndefined(handler)) return !1;
                if (isFunction(handler)) switch (arguments.length) {
                    case 1:
                        handler.call(this);
                        break;

                    case 2:
                        handler.call(this, arguments[1]);
                        break;

                    case 3:
                        handler.call(this, arguments[1], arguments[2]);
                        break;

                    default:
                        args = Array.prototype.slice.call(arguments, 1), handler.apply(this, args);
                } else if (isObject(handler)) for (args = Array.prototype.slice.call(arguments, 1), listeners = handler.slice(), len = listeners.length, i = 0; i < len; i++) {
                    listeners[i].apply(this, args);
                }
                return !0;
            }, EventEmitter.prototype.addListener = function (type, listener) {
                var m;
                if (!isFunction(listener)) throw TypeError("listener must be a function");
                return this._events || (this._events = {}), this._events.newListener && this.emit("newListener", type, isFunction(listener.listener) ? listener.listener : listener), this._events[type] ? isObject(this._events[type]) ? this._events[type].push(listener) : this._events[type] = [this._events[type], listener] : this._events[type] = listener, isObject(this._events[type]) && !this._events[type].warned && (m = isUndefined(this._maxListeners) ? EventEmitter.defaultMaxListeners : this._maxListeners, m && m > 0 && this._events[type].length > m && (this._events[type].warned = !0, console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[type].length), "function" == typeof console.trace && console.trace())), this;
            }, EventEmitter.prototype.on = EventEmitter.prototype.addListener, EventEmitter.prototype.once = function (type, listener) {
                function g() {
                    this.removeListener(type, g), fired || (fired = !0, listener.apply(this, arguments));
                }

                if (!isFunction(listener)) throw TypeError("listener must be a function");
                var fired = !1;
                return g.listener = listener, this.on(type, g), this;
            }, EventEmitter.prototype.removeListener = function (type, listener) {
                var list, position, length, i;
                if (!isFunction(listener)) throw TypeError("listener must be a function");
                if (!this._events || !this._events[type]) return this;
                if (list = this._events[type], length = list.length, position = -1, list === listener || isFunction(list.listener) && list.listener === listener) delete this._events[type], this._events.removeListener && this.emit("removeListener", type, listener);else if (isObject(list)) {
                    for (i = length; i-- > 0;) {
                        if (list[i] === listener || list[i].listener && list[i].listener === listener) {
                            position = i;
                            break;
                        }
                    }

                    if (position < 0) return this;
                    1 === list.length ? (list.length = 0, delete this._events[type]) : list.splice(position, 1), this._events.removeListener && this.emit("removeListener", type, listener);
                }
                return this;
            }, EventEmitter.prototype.removeAllListeners = function (type) {
                var key, listeners;
                if (!this._events) return this;
                if (!this._events.removeListener) return 0 === arguments.length ? this._events = {} : this._events[type] && delete this._events[type], this;

                if (0 === arguments.length) {
                    for (key in this._events) {
                        "removeListener" !== key && this.removeAllListeners(key);
                    }

                    return this.removeAllListeners("removeListener"), this._events = {}, this;
                }

                if (listeners = this._events[type], isFunction(listeners)) this.removeListener(type, listeners);else if (listeners) for (; listeners.length;) {
                    this.removeListener(type, listeners[listeners.length - 1]);
                }
                return delete this._events[type], this;
            }, EventEmitter.prototype.listeners = function (type) {
                var ret;
                return ret = this._events && this._events[type] ? isFunction(this._events[type]) ? [this._events[type]] : this._events[type].slice() : [];
            }, EventEmitter.prototype.listenerCount = function (type) {
                if (this._events) {
                    var evlistener = this._events[type];
                    if (isFunction(evlistener)) return 1;
                    if (evlistener) return evlistener.length;
                }

                return 0;
            }, EventEmitter.listenerCount = function (emitter, type) {
                return emitter.listenerCount(type);
            };
        }, function (module, exports) {
            "use strict";

            function toObject(val) {
                if (null === val || void 0 === val) throw new TypeError("Object.assign cannot be called with null or undefined");
                return Object(val);
            }

            var hasOwnProperty = Object.prototype.hasOwnProperty,
                propIsEnumerable = Object.prototype.propertyIsEnumerable;

            module.exports = Object.assign || function (target, source) {
                for (var from, symbols, to = toObject(target), s = 1; s < arguments.length; s++) {
                    from = Object(arguments[s]);

                    for (var key in from) {
                        hasOwnProperty.call(from, key) && (to[key] = from[key]);
                    }

                    if (Object.getOwnPropertySymbols) {
                        symbols = Object.getOwnPropertySymbols(from);

                        for (var i = 0; i < symbols.length; i++) {
                            propIsEnumerable.call(from, symbols[i]) && (to[symbols[i]] = from[symbols[i]]);
                        }
                    }
                }

                return to;
            };
        }, function (module, exports) {
            "use strict";

            function guid() {
                return "g" + Math.random().toString(16).substr(2);
            }

            module.exports = guid;
        }, function (module, exports) {
            "use strict";

            function _toConsumableArray(arr) {
                if (Array.isArray(arr)) {
                    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                        arr2[i] = arr[i];
                    }

                    return arr2;
                }

                return Array.from(arr);
            }

            function getIn(base, path) {
                return path.reduce(function (obj, attr) {
                    if (obj) {
                        if (obj.hasOwnProperty(attr)) return obj[attr];
                        if ("function" == typeof obj[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]) return [].concat(_toConsumableArray(obj))[attr];
                    }

                    return null;
                }, base);
            }

            module.exports = getIn;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _toConsumableArray(arr) {
                if (Array.isArray(arr)) {
                    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                        arr2[i] = arr[i];
                    }

                    return arr2;
                }

                return Array.from(arr);
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }

            function getWindowFunction(name, polyfill) {
                return String(window[name]).indexOf("[native code]") === -1 ? polyfill : window[name];
            }

            var _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];

                    for (var key in source) {
                        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
                    }
                }

                return target;
            },
                _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
                };
            }(),
                consts = __webpack_require__(7),
                hydrate = __webpack_require__(26),
                dehydrate = __webpack_require__(27),
                getIn = __webpack_require__(5),
                performanceNow = __webpack_require__(28),
                lastRunTimeMS = 5,
                cancelIdleCallback = getWindowFunction("cancelIdleCallback", clearTimeout),
                requestIdleCallback = getWindowFunction("requestIdleCallback", function (cb, options) {
                var delayMS = 3e3 * lastRunTimeMS;
                return delayMS > 500 && (delayMS = 500), setTimeout(function () {
                    var startTime = performanceNow();
                    cb({
                        didTimeout: !1,
                        timeRemaining: function timeRemaining() {
                            return 1 / 0;
                        }
                    });
                    var endTime = performanceNow();
                    lastRunTimeMS = (endTime - startTime) / 1e3;
                }, delayMS);
            }),
                Bridge = function () {
                function Bridge(wall) {
                    _classCallCheck(this, Bridge), this._cbs = new Map(), this._inspectables = new Map(), this._cid = 0, this._listeners = {}, this._buffer = [], this._flushHandle = null, this._callers = {}, this._paused = !1, this._wall = wall, wall.listen(this._handleMessage.bind(this));
                }

                return _createClass(Bridge, [{
                    key: "inspect",
                    value: function value(id, path, cb) {
                        var _cid = this._cid++;

                        this._cbs.set(_cid, function (data, cleaned, proto, protoclean) {
                            cleaned.length && hydrate(data, cleaned), proto && protoclean.length && hydrate(proto, protoclean), proto && (data[consts.proto] = proto), cb(data);
                        }), this._wall.send({
                            type: "inspect",
                            callback: _cid,
                            path: path,
                            id: id
                        });
                    }
                }, {
                    key: "call",
                    value: function value(name, args, cb) {
                        var _cid = this._cid++;

                        this._cbs.set(_cid, cb), this._wall.send({
                            type: "call",
                            callback: _cid,
                            args: args,
                            name: name
                        });
                    }
                }, {
                    key: "onCall",
                    value: function value(name, handler) {
                        if (this._callers[name]) throw new Error("only one call handler per call name allowed");
                        this._callers[name] = handler;
                    }
                }, {
                    key: "pause",
                    value: function value() {
                        this._wall.send({
                            type: "pause"
                        });
                    }
                }, {
                    key: "resume",
                    value: function value() {
                        this._wall.send({
                            type: "resume"
                        });
                    }
                }, {
                    key: "setInspectable",
                    value: function value(id, data) {
                        var prev = this._inspectables.get(id);

                        return prev ? void this._inspectables.set(id, _extends({}, prev, data)) : void this._inspectables.set(id, data);
                    }
                }, {
                    key: "send",
                    value: function value(evt, data) {
                        this._buffer.push({
                            evt: evt,
                            data: data
                        }), this.scheduleFlush();
                    }
                }, {
                    key: "scheduleFlush",
                    value: function value() {
                        if (!this._flushHandle && this._buffer.length) {
                            var timeout = this._paused ? 5e3 : 500;
                            this._flushHandle = requestIdleCallback(this.flushBufferWhileIdle.bind(this), {
                                timeout: timeout
                            });
                        }
                    }
                }, {
                    key: "cancelFlush",
                    value: function value() {
                        this._flushHandle && (cancelIdleCallback(this._flushHandle), this._flushHandle = null);
                    }
                }, {
                    key: "flushBufferWhileIdle",
                    value: function value(deadline) {
                        this._flushHandle = null;

                        for (var chunkCount = this._paused ? 20 : 10, chunkSize = Math.round(this._buffer.length / chunkCount), minChunkSize = this._paused ? 50 : 100; this._buffer.length && (deadline.timeRemaining() > 0 || deadline.didTimeout);) {
                            var take = Math.min(this._buffer.length, Math.max(minChunkSize, chunkSize)),
                                currentBuffer = this._buffer.splice(0, take);

                            this.flushBufferSlice(currentBuffer);
                        }

                        this._buffer.length && this.scheduleFlush();
                    }
                }, {
                    key: "flushBufferSlice",
                    value: function value(bufferSlice) {
                        var _this = this,
                            events = bufferSlice.map(function (_ref) {
                            var evt = _ref.evt,
                                data = _ref.data,
                                cleaned = [],
                                san = dehydrate(data, cleaned);
                            return cleaned.length && _this.setInspectable(data.id, data), {
                                type: "event",
                                evt: evt,
                                data: san,
                                cleaned: cleaned
                            };
                        });

                        this._wall.send({
                            type: "many-events",
                            events: events
                        });
                    }
                }, {
                    key: "forget",
                    value: function value(id) {
                        this._inspectables["delete"](id);
                    }
                }, {
                    key: "on",
                    value: function value(evt, fn) {
                        this._listeners[evt] ? this._listeners[evt].push(fn) : this._listeners[evt] = [fn];
                    }
                }, {
                    key: "off",
                    value: function value(evt, fn) {
                        if (this._listeners[evt]) {
                            var ix = this._listeners[evt].indexOf(fn);

                            ix !== -1 && this._listeners[evt].splice(ix, 1);
                        }
                    }
                }, {
                    key: "once",
                    value: function value(evt, fn) {
                        var self = this,
                            listener = function listener() {
                            fn.apply(this, arguments), self.off(evt, listener);
                        };

                        this.on(evt, listener);
                    }
                }, {
                    key: "_handleMessage",
                    value: function value(payload) {
                        var _this2 = this;

                        if ("resume" === payload.type) return this._paused = !1, void this.scheduleFlush();
                        if ("pause" === payload.type) return this._paused = !0, void this.cancelFlush();

                        if ("callback" === payload.type) {
                            var callback = this._cbs.get(payload.id);

                            return void (callback && (callback.apply(void 0, _toConsumableArray(payload.args)), this._cbs["delete"](payload.id)));
                        }

                        if ("call" === payload.type) return void this._handleCall(payload.name, payload.args, payload.callback);
                        if ("inspect" === payload.type) return void this._inspectResponse(payload.id, payload.path, payload.callback);

                        if ("event" === payload.type) {
                            payload.cleaned && hydrate(payload.data, payload.cleaned);
                            var fns = this._listeners[payload.evt],
                                data = payload.data;
                            fns && fns.forEach(function (fn) {
                                return fn(data);
                            });
                        }

                        "many-events" === payload.type && payload.events.forEach(function (event) {
                            event.cleaned && hydrate(event.data, event.cleaned);
                            var handlers = _this2._listeners[event.evt];
                            handlers && handlers.forEach(function (fn) {
                                return fn(event.data);
                            });
                        });
                    }
                }, {
                    key: "_handleCall",
                    value: function value(name, args, callback) {
                        if (!this._callers[name]) return void console.warn('unknown call: "' + name + '"');
                        args = Array.isArray(args) ? args : [args];
                        var result;

                        try {
                            result = this._callers[name].apply(null, args);
                        } catch (e) {
                            return void console.error("Failed to call", e);
                        }

                        this._wall.send({
                            type: "callback",
                            id: callback,
                            args: [result]
                        });
                    }
                }, {
                    key: "_inspectResponse",
                    value: function value(id, path, callback) {
                        var inspectable = this._inspectables.get(id),
                            result = {},
                            cleaned = [],
                            proto = null,
                            protoclean = [];

                        if (inspectable) {
                            var val = getIn(inspectable, path),
                                protod = !1,
                                isFn = "function" == typeof val;

                            if (val && "function" == typeof val[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]) {
                                var iterVal = Object.create({}),
                                    count = 0,
                                    _iteratorNormalCompletion = !0,
                                    _didIteratorError = !1,
                                    _iteratorError = void 0;

                                try {
                                    for (var _step, _iterator = val[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
                                        var entry = _step.value;
                                        if (count > 100) break;
                                        iterVal[count] = entry, count++;
                                    }
                                } catch (err) {
                                    _didIteratorError = !0, _iteratorError = err;
                                } finally {
                                    try {
                                        !_iteratorNormalCompletion && _iterator["return"] && _iterator["return"]();
                                    } finally {
                                        if (_didIteratorError) throw _iteratorError;
                                    }
                                }

                                val = iterVal;
                            }

                            if (Object.getOwnPropertyNames(val).forEach(function (name) {
                                "__proto__" === name && (protod = !0), (!isFn || "arguments" !== name && "callee" !== name && "caller" !== name) && (result[name] = dehydrate(val[name], cleaned, [name]));
                            }), !protod && val.__proto__ && "Object" !== val.constructor.name) {
                                var newProto = {},
                                    pIsFn = "function" == typeof val.__proto__;
                                Object.getOwnPropertyNames(val.__proto__).forEach(function (name) {
                                    (!pIsFn || "arguments" !== name && "callee" !== name && "caller" !== name) && (newProto[name] = dehydrate(val.__proto__[name], protoclean, [name]));
                                }), proto = newProto;
                            }
                        }

                        this._wall.send({
                            type: "callback",
                            id: callback,
                            args: [result, cleaned, proto, protoclean]
                        });
                    }
                }]), Bridge;
            }();

            module.exports = Bridge;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var _Symbol = __webpack_require__(8);

            module.exports = {
                name: _Symbol("name"),
                type: _Symbol("type"),
                inspected: _Symbol("inspected"),
                meta: _Symbol("meta"),
                proto: _Symbol("proto")
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            module.exports = __webpack_require__(9)() ? Symbol : __webpack_require__(10);
        }, function (module, exports) {
            "use strict";

            module.exports = function () {
                var symbol;
                if ("function" != typeof Symbol) return !1;
                symbol = Symbol("test symbol");

                try {
                    String(symbol);
                } catch (e) {
                    return !1;
                }

                return "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") || "object" == typeof (typeof Symbol === "function" ? Symbol.isConcatSpreadable : "@@isConcatSpreadable") && "object" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") && "object" == typeof (typeof Symbol === "function" ? Symbol.toPrimitive : "@@toPrimitive") && "object" == typeof (typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag") && "object" == typeof (typeof Symbol === "function" ? Symbol.unscopables : "@@unscopables");
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var NativeSymbol,
                SymbolPolyfill,
                _HiddenSymbol,
                d = __webpack_require__(11),
                validateSymbol = __webpack_require__(24),
                create = Object.create,
                defineProperties = Object.defineProperties,
                defineProperty = Object.defineProperty,
                objPrototype = Object.prototype,
                globalSymbols = create(null);

            "function" == typeof Symbol && (NativeSymbol = Symbol);

            var generateName = function () {
                var created = create(null);
                return function (desc) {
                    for (var name, ie11BugWorkaround, postfix = 0; created[desc + (postfix || "")];) {
                        ++postfix;
                    }

                    return desc += postfix || "", created[desc] = !0, name = "@@" + desc, defineProperty(objPrototype, name, d.gs(null, function (value) {
                        ie11BugWorkaround || (ie11BugWorkaround = !0, defineProperty(this, name, d(value)), ie11BugWorkaround = !1);
                    })), name;
                };
            }();

            _HiddenSymbol = function HiddenSymbol(description) {
                if (this instanceof _HiddenSymbol) throw new TypeError("TypeError: Symbol is not a constructor");
                return SymbolPolyfill(description);
            }, module.exports = SymbolPolyfill = function Symbol(description) {
                var symbol;
                if (this instanceof Symbol) throw new TypeError("TypeError: Symbol is not a constructor");
                return symbol = create(_HiddenSymbol.prototype), description = void 0 === description ? "" : String(description), defineProperties(symbol, {
                    __description__: d("", description),
                    __name__: d("", generateName(description))
                });
            }, defineProperties(SymbolPolyfill, {
                "for": d(function (key) {
                    return globalSymbols[key] ? globalSymbols[key] : globalSymbols[key] = SymbolPolyfill(String(key));
                }),
                keyFor: d(function (s) {
                    var key;
                    validateSymbol(s);

                    for (key in globalSymbols) {
                        if (globalSymbols[key] === s) return key;
                    }
                }),
                hasInstance: d("", NativeSymbol && NativeSymbol.hasInstance || SymbolPolyfill("hasInstance")),
                isConcatSpreadable: d("", NativeSymbol && NativeSymbol.isConcatSpreadable || SymbolPolyfill("isConcatSpreadable")),
                iterator: d("", NativeSymbol && NativeSymbol.iterator || SymbolPolyfill("iterator")),
                match: d("", NativeSymbol && NativeSymbol.match || SymbolPolyfill("match")),
                replace: d("", NativeSymbol && NativeSymbol.replace || SymbolPolyfill("replace")),
                search: d("", NativeSymbol && NativeSymbol.search || SymbolPolyfill("search")),
                species: d("", NativeSymbol && NativeSymbol.species || SymbolPolyfill("species")),
                split: d("", NativeSymbol && NativeSymbol.split || SymbolPolyfill("split")),
                toPrimitive: d("", NativeSymbol && NativeSymbol.toPrimitive || SymbolPolyfill("toPrimitive")),
                toStringTag: d("", NativeSymbol && NativeSymbol.toStringTag || SymbolPolyfill("toStringTag")),
                unscopables: d("", NativeSymbol && NativeSymbol.unscopables || SymbolPolyfill("unscopables"))
            }), defineProperties(_HiddenSymbol.prototype, {
                constructor: d(SymbolPolyfill),
                toString: d("", function () {
                    return this.__name__;
                })
            }), defineProperties(SymbolPolyfill.prototype, {
                toString: d(function () {
                    return "Symbol (" + validateSymbol(this).__description__ + ")";
                }),
                valueOf: d(function () {
                    return validateSymbol(this);
                })
            }), defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toPrimitive, d("", function () {
                return validateSymbol(this);
            })), defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d("c", "Symbol")), defineProperty(_HiddenSymbol.prototype, SymbolPolyfill.toStringTag, d("c", SymbolPolyfill.prototype[SymbolPolyfill.toStringTag])), defineProperty(_HiddenSymbol.prototype, SymbolPolyfill.toPrimitive, d("c", SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive]));
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var d,
                assign = __webpack_require__(12),
                normalizeOpts = __webpack_require__(19),
                isCallable = __webpack_require__(20),
                contains = __webpack_require__(21);

            d = module.exports = function (dscr, value) {
                var c, e, w, options, desc;
                return arguments.length < 2 || "string" != typeof dscr ? (options = value, value = dscr, dscr = null) : options = arguments[2], null == dscr ? (c = w = !0, e = !1) : (c = contains.call(dscr, "c"), e = contains.call(dscr, "e"), w = contains.call(dscr, "w")), desc = {
                    value: value,
                    configurable: c,
                    enumerable: e,
                    writable: w
                }, options ? assign(normalizeOpts(options), desc) : desc;
            }, d.gs = function (dscr, get, set) {
                var c, e, options, desc;
                return "string" != typeof dscr ? (options = set, set = get, get = dscr, dscr = null) : options = arguments[3], null == get ? get = void 0 : isCallable(get) ? null == set ? set = void 0 : isCallable(set) || (options = set, set = void 0) : (options = get, get = set = void 0), null == dscr ? (c = !0, e = !1) : (c = contains.call(dscr, "c"), e = contains.call(dscr, "e")), desc = {
                    get: get,
                    set: set,
                    configurable: c,
                    enumerable: e
                }, options ? assign(normalizeOpts(options), desc) : desc;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            module.exports = __webpack_require__(13)() ? Object.assign : __webpack_require__(14);
        }, function (module, exports) {
            "use strict";

            module.exports = function () {
                var obj,
                    assign = Object.assign;
                return "function" == typeof assign && (obj = {
                    foo: "raz"
                }, assign(obj, {
                    bar: "dwa"
                }, {
                    trzy: "trzy"
                }), obj.foo + obj.bar + obj.trzy === "razdwatrzy");
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var keys = __webpack_require__(15),
                value = __webpack_require__(18),
                max = Math.max;

            module.exports = function (dest, src) {
                var error,
                    i,
                    assign,
                    l = max(arguments.length, 2);

                for (dest = Object(value(dest)), assign = function assign(key) {
                    try {
                        dest[key] = src[key];
                    } catch (e) {
                        error || (error = e);
                    }
                }, i = 1; i < l; ++i) {
                    src = arguments[i], keys(src).forEach(assign);
                }

                if (void 0 !== error) throw error;
                return dest;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            module.exports = __webpack_require__(16)() ? Object.keys : __webpack_require__(17);
        }, function (module, exports) {
            "use strict";

            module.exports = function () {
                try {
                    return Object.keys("primitive"), !0;
                } catch (e) {
                    return !1;
                }
            };
        }, function (module, exports) {
            "use strict";

            var keys = Object.keys;

            module.exports = function (object) {
                return keys(null == object ? object : Object(object));
            };
        }, function (module, exports) {
            "use strict";

            module.exports = function (value) {
                if (null == value) throw new TypeError("Cannot use null or undefined");
                return value;
            };
        }, function (module, exports) {
            "use strict";

            var forEach = Array.prototype.forEach,
                create = Object.create,
                process = function process(src, obj) {
                var key;

                for (key in src) {
                    obj[key] = src[key];
                }
            };

            module.exports = function (options) {
                var result = create(null);
                return forEach.call(arguments, function (options) {
                    null != options && process(Object(options), result);
                }), result;
            };
        }, function (module, exports) {
            "use strict";

            module.exports = function (obj) {
                return "function" == typeof obj;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            module.exports = __webpack_require__(22)() ? String.prototype.contains : __webpack_require__(23);
        }, function (module, exports) {
            "use strict";

            var str = "razdwatrzy";

            module.exports = function () {
                return "function" == typeof str.contains && str.contains("dwa") === !0 && str.contains("foo") === !1;
            };
        }, function (module, exports) {
            "use strict";

            var indexOf = String.prototype.indexOf;

            module.exports = function (searchString) {
                return indexOf.call(this, searchString, arguments[1]) > -1;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var isSymbol = __webpack_require__(25);

            module.exports = function (value) {
                if (!isSymbol(value)) throw new TypeError(value + " is not a symbol");
                return value;
            };
        }, function (module, exports) {
            "use strict";

            module.exports = function (x) {
                return x && ("symbol" == typeof x || "Symbol" === x["@@toStringTag"]) || !1;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function hydrate(data, cleaned) {
                cleaned.forEach(function (path) {
                    var last = path.pop(),
                        obj = path.reduce(function (obj_, attr) {
                        return obj_ ? obj_[attr] : null;
                    }, data);

                    if (obj && obj[last]) {
                        var replace = {};
                        replace[consts.name] = obj[last].name, replace[consts.type] = obj[last].type, replace[consts.meta] = obj[last].meta, replace[consts.inspected] = !1, obj[last] = replace;
                    }
                });
            }

            var consts = __webpack_require__(7);

            module.exports = hydrate;
        }, function (module, exports) {
            "use strict";

            function getPropType(data) {
                if (!data) return null;
                var type = "undefined" == typeof data ? "undefined" : _typeof(data);

                if ("object" === type) {
                    if (data._reactFragment) return "react_fragment";
                    if (Array.isArray(data)) return "array";
                    if (ArrayBuffer.isView(data)) return data instanceof DataView ? "data_view" : "typed_array";
                    if (data instanceof ArrayBuffer) return "array_buffer";
                    if ("function" == typeof data[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]) return "iterator";
                    if ("[object Date]" === Object.prototype.toString.call(data)) return "date";
                }

                return type;
            }

            function createDehydrated(type, data, cleaned, path) {
                var meta = {};
                return "array" !== type && "typed_array" !== type || (meta.length = data.length), "iterator" !== type && "typed_array" !== type || (meta.readOnly = !0), cleaned.push(path), {
                    type: type,
                    meta: meta,
                    name: data.constructor && "Object" !== data.constructor.name ? data.constructor.name : ""
                };
            }

            function dehydrate(data, cleaned) {
                var path = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [],
                    level = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,
                    type = getPropType(data);

                switch (type) {
                    case "function":
                        return cleaned.push(path), {
                            name: data.name,
                            type: "function"
                        };

                    case "string":
                        return data.length <= 500 ? data : data.slice(0, 500) + "...";

                    case "symbol":
                        return cleaned.push(path), {
                            type: "symbol",
                            name: data.toString()
                        };

                    case "react_fragment":
                        return "A React Fragment";

                    case "array_buffer":
                    case "data_view":
                        return cleaned.push(path), {
                            type: type,
                            name: "data_view" === type ? "DataView" : "ArrayBuffer",
                            meta: {
                                length: data.byteLength,
                                uninspectable: !0
                            }
                        };

                    case "array":
                        return level > 2 ? createDehydrated(type, data, cleaned, path) : data.map(function (item, i) {
                            return dehydrate(item, cleaned, path.concat([i]), level + 1);
                        });

                    case "typed_array":
                    case "iterator":
                        return createDehydrated(type, data, cleaned, path);

                    case "date":
                        return cleaned.push(path), {
                            name: data.toString(),
                            type: "date",
                            meta: {
                                uninspectable: !0
                            }
                        };

                    case "object":
                        if (level > 2 || data.constructor && "function" == typeof data.constructor && "Object" !== data.constructor.name) return createDehydrated(type, data, cleaned, path);
                        var res = {};

                        for (var name in data) {
                            res[name] = dehydrate(data[name], cleaned, path.concat([name]), level + 1);
                        }

                        return res;

                    default:
                        return data;
                }
            }

            var _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
            };

            module.exports = dehydrate;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var performanceNow,
                performance = __webpack_require__(29);

            performanceNow = performance.now ? function () {
                return performance.now();
            } : function () {
                return Date.now();
            }, module.exports = performanceNow;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var performance,
                ExecutionEnvironment = __webpack_require__(30);

            ExecutionEnvironment.canUseDOM && (performance = window.performance || window.msPerformance || window.webkitPerformance), module.exports = performance || {};
        }, function (module, exports) {
            "use strict";

            var canUseDOM = !("undefined" == typeof window || !window.document || !window.document.createElement),
                ExecutionEnvironment = {
                canUseDOM: canUseDOM,
                canUseWorkers: "undefined" != typeof Worker,
                canUseEventListeners: canUseDOM && !(!window.addEventListener && !window.attachEvent),
                canUseViewport: canUseDOM && !!window.screen,
                isInWorker: !canUseDOM
            };
            module.exports = ExecutionEnvironment;
        }, function (module, exports) {
            "use strict";

            function installGlobalHook(window) {
                function detectReactBuildType(renderer) {
                    try {
                        if ("string" == typeof renderer.version) return renderer.bundleType > 0 ? "development" : "production";
                        var toString = Function.prototype.toString;

                        if (renderer.Mount && renderer.Mount._renderNewRootComponent) {
                            var renderRootCode = toString.call(renderer.Mount._renderNewRootComponent);
                            return 0 !== renderRootCode.indexOf("function") ? "production" : renderRootCode.indexOf("storedMeasure") !== -1 ? "development" : renderRootCode.indexOf("should be a pure function") !== -1 ? renderRootCode.indexOf("NODE_ENV") !== -1 ? "development" : renderRootCode.indexOf("development") !== -1 ? "development" : renderRootCode.indexOf("true") !== -1 ? "development" : renderRootCode.indexOf("nextElement") !== -1 || renderRootCode.indexOf("nextComponent") !== -1 ? "unminified" : "development" : renderRootCode.indexOf("nextElement") !== -1 || renderRootCode.indexOf("nextComponent") !== -1 ? "unminified" : renderRootCode.indexOf("._registerComponent") !== -1 ? "outdated" : "production";
                        }
                    } catch (err) {}

                    return "production";
                }

                if (!window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
                    var hasDetectedBadDCE = !1,
                        hook = {
                        _renderers: {},
                        helpers: {},
                        checkDCE: function checkDCE(fn) {
                            try {
                                var toString = Function.prototype.toString,
                                    code = toString.call(fn);
                                code.indexOf("^_^") > -1 && (hasDetectedBadDCE = !0, setTimeout(function () {
                                    throw new Error("React is running in production mode, but dead code elimination has not been applied. Read how to correctly configure React for production: https://fb.me/react-perf-use-the-production-build");
                                }));
                            } catch (err) {}
                        },
                        inject: function inject(renderer) {
                            var id = Math.random().toString(16).slice(2);
                            hook._renderers[id] = renderer;
                            var reactBuildType = hasDetectedBadDCE ? "deadcode" : detectReactBuildType(renderer);
                            return hook.emit("renderer", {
                                id: id,
                                renderer: renderer,
                                reactBuildType: reactBuildType
                            }), id;
                        },
                        _listeners: {},
                        sub: function sub(evt, fn) {
                            return hook.on(evt, fn), function () {
                                return hook.off(evt, fn);
                            };
                        },
                        on: function on(evt, fn) {
                            hook._listeners[evt] || (hook._listeners[evt] = []), hook._listeners[evt].push(fn);
                        },
                        off: function off(evt, fn) {
                            if (hook._listeners[evt]) {
                                var ix = hook._listeners[evt].indexOf(fn);

                                ix !== -1 && hook._listeners[evt].splice(ix, 1), hook._listeners[evt].length || (hook._listeners[evt] = null);
                            }
                        },
                        emit: function emit(evt, data) {
                            hook._listeners[evt] && hook._listeners[evt].map(function (fn) {
                                return fn(data);
                            });
                        },
                        supportsFiber: !0,
                        _fiberRoots: {},
                        getFiberRoots: function getFiberRoots(rendererID) {
                            var roots = hook._fiberRoots;
                            return roots[rendererID] || (roots[rendererID] = new Set()), roots[rendererID];
                        },
                        onCommitFiberUnmount: function onCommitFiberUnmount(rendererID, fiber) {
                            hook.helpers[rendererID] && hook.helpers[rendererID].handleCommitFiberUnmount(fiber);
                        },
                        onCommitFiberRoot: function onCommitFiberRoot(rendererID, root) {
                            var mountedRoots = hook.getFiberRoots(rendererID),
                                current = root.current,
                                isKnownRoot = mountedRoots.has(root),
                                isUnmounting = null == current.memoizedState || null == current.memoizedState.element;
                            isKnownRoot || isUnmounting ? isKnownRoot && isUnmounting && mountedRoots["delete"](root) : mountedRoots.add(root), hook.helpers[rendererID] && hook.helpers[rendererID].handleCommitFiberRoot(root);
                        }
                    };
                    Object.defineProperty(window, "__REACT_DEVTOOLS_GLOBAL_HOOK__", {
                        value: hook
                    });
                }
            }

            module.exports = installGlobalHook;
        }, function (module, exports) {
            "use strict";

            function installRelayHook(window) {
                function decorate(obj, attr, fn) {
                    var old = obj[attr];

                    obj[attr] = function () {
                        var res = old.apply(this, arguments);
                        return fn.apply(this, arguments), res;
                    };
                }

                function emit(name, data) {
                    _eventQueue.push({
                        name: name,
                        data: data
                    }), _listener && _listener(name, data);
                }

                function setRequestListener(listener) {
                    if (_listener) throw new Error("Relay Devtools: Called only call setRequestListener once.");
                    return _listener = listener, _eventQueue.forEach(function (_ref) {
                        var name = _ref.name,
                            data = _ref.data;
                        listener(name, data);
                    }), function () {
                        _listener = null;
                    };
                }

                function recordRequest(type, start, request, requestNumber) {
                    var id = Math.random().toString(16).substr(2);
                    request.then(function (response) {
                        emit("relay:success", {
                            id: id,
                            end: performanceNow(),
                            response: response.response
                        });
                    }, function (error) {
                        emit("relay:failure", {
                            id: id,
                            end: performanceNow(),
                            error: error
                        });
                    });

                    for (var textChunks = [], text = request.getQueryString(); text.length > 0;) {
                        textChunks.push(text.substr(0, TEXT_CHUNK_LENGTH)), text = text.substr(TEXT_CHUNK_LENGTH);
                    }

                    return {
                        id: id,
                        name: request.getDebugName(),
                        requestNumber: requestNumber,
                        start: start,
                        text: textChunks,
                        type: type,
                        variables: request.getVariables()
                    };
                }

                function instrumentRelayRequests(relayInternals) {
                    var NetworkLayer = relayInternals.NetworkLayer;
                    decorate(NetworkLayer, "sendMutation", function (mutation) {
                        requestNumber++, emit("relay:pending", [recordRequest("mutation", performanceNow(), mutation, requestNumber)]);
                    }), decorate(NetworkLayer, "sendQueries", function (queries) {
                        requestNumber++;
                        var start = performanceNow();
                        emit("relay:pending", queries.map(function (query) {
                            return recordRequest("query", start, query, requestNumber);
                        }));
                    });
                    var instrumented = {};

                    for (var key in relayInternals) {
                        relayInternals.hasOwnProperty(key) && (instrumented[key] = relayInternals[key]);
                    }

                    return instrumented.setRequestListener = setRequestListener, instrumented;
                }

                var performanceNow,
                    performance = window.performance;
                performanceNow = performance && "function" == typeof performance.now ? function () {
                    return performance.now();
                } : function () {
                    return Date.now();
                };
                var TEXT_CHUNK_LENGTH = 500,
                    hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;

                if (hook) {
                    var _eventQueue = [],
                        _listener = null,
                        requestNumber = 0,
                        _relayInternals = null;
                    Object.defineProperty(hook, "_relayInternals", {
                        configurable: !0,
                        set: function set(relayInternals) {
                            _relayInternals = instrumentRelayRequests(relayInternals);
                        },
                        get: function get() {
                            return _relayInternals;
                        }
                    });
                }
            }

            module.exports = installRelayHook;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var setupBackend = __webpack_require__(34);

            module.exports = function (hook, agent) {
                var subs = [hook.sub("renderer-attached", function (_ref) {
                    var id = _ref.id,
                        helpers = (_ref.renderer, _ref.helpers);
                    agent.setReactInternals(id, helpers), helpers.walkTree(agent.onMounted.bind(agent, id), agent.addRoot.bind(agent, id));
                }), hook.sub("root", function (_ref2) {
                    var renderer = _ref2.renderer,
                        internalInstance = _ref2.internalInstance;
                    return agent.addRoot(renderer, internalInstance);
                }), hook.sub("mount", function (_ref3) {
                    var renderer = _ref3.renderer,
                        internalInstance = _ref3.internalInstance,
                        data = _ref3.data;
                    return agent.onMounted(renderer, internalInstance, data);
                }), hook.sub("update", function (_ref4) {
                    var internalInstance = (_ref4.renderer, _ref4.internalInstance),
                        data = _ref4.data;
                    return agent.onUpdated(internalInstance, data);
                }), hook.sub("unmount", function (_ref5) {
                    var internalInstance = (_ref5.renderer, _ref5.internalInstance);
                    return agent.onUnmounted(internalInstance);
                })],
                    success = setupBackend(hook);
                success && (hook.emit("react-devtools", agent), hook.reactDevtoolsAgent = agent, agent.on("shutdown", function () {
                    subs.forEach(function (fn) {
                        return fn();
                    }), hook.reactDevtoolsAgent = null;
                }));
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var attachRenderer = __webpack_require__(35);

            module.exports = function (hook) {
                var oldReact = window.React && window.React.__internals;
                oldReact && 0 === Object.keys(hook._renderers).length && hook.inject(oldReact);

                for (var rid in hook._renderers) {
                    hook.helpers[rid] = attachRenderer(hook, rid, hook._renderers[rid]), hook.emit("renderer-attached", {
                        id: rid,
                        renderer: hook._renderers[rid],
                        helpers: hook.helpers[rid]
                    });
                }

                hook.on("renderer", function (_ref) {
                    var id = _ref.id,
                        renderer = _ref.renderer;
                    hook.helpers[id] = attachRenderer(hook, id, renderer), hook.emit("renderer-attached", {
                        id: id,
                        renderer: renderer,
                        helpers: hook.helpers[id]
                    });
                });

                var shutdown = function shutdown() {
                    for (var id in hook.helpers) {
                        hook.helpers[id].cleanup();
                    }

                    hook.off("shutdown", shutdown);
                };

                return hook.on("shutdown", shutdown), !0;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function attachRenderer(hook, rid, renderer) {
                var rootNodeIDMap = new Map(),
                    extras = {},
                    isPre013 = !renderer.Reconciler;
                if ("function" == typeof renderer.findFiberByHostInstance) return attachRendererFiber(hook, rid, renderer);
                renderer.Mount.findNodeHandle && renderer.Mount.nativeTagToRootNodeID ? (extras.getNativeFromReactElement = function (component) {
                    return renderer.Mount.findNodeHandle(component);
                }, extras.getReactElementFromNative = function (nativeTag) {
                    var id = renderer.Mount.nativeTagToRootNodeID(nativeTag);
                    return rootNodeIDMap.get(id);
                }) : renderer.ComponentTree ? (extras.getNativeFromReactElement = function (component) {
                    return renderer.ComponentTree.getNodeFromInstance(component);
                }, extras.getReactElementFromNative = function (node) {
                    return renderer.ComponentTree.getClosestInstanceFromNode(node);
                }) : renderer.Mount.getID && renderer.Mount.getNode ? (extras.getNativeFromReactElement = function (component) {
                    try {
                        return renderer.Mount.getNode(component._rootNodeID);
                    } catch (e) {
                        return;
                    }
                }, extras.getReactElementFromNative = function (node) {
                    for (var id = renderer.Mount.getID(node); node && node.parentNode && !id;) {
                        node = node.parentNode, id = renderer.Mount.getID(node);
                    }

                    return rootNodeIDMap.get(id);
                }) : console.warn("Unknown react version (does not have getID), probably an unshimmed React Native");
                var oldMethods, oldRenderComponent, oldRenderRoot;
                return renderer.Mount._renderNewRootComponent ? oldRenderRoot = decorateResult(renderer.Mount, "_renderNewRootComponent", function (internalInstance) {
                    hook.emit("root", {
                        renderer: rid,
                        internalInstance: internalInstance
                    });
                }) : renderer.Mount.renderComponent && (oldRenderComponent = decorateResult(renderer.Mount, "renderComponent", function (internalInstance) {
                    hook.emit("root", {
                        renderer: rid,
                        internalInstance: internalInstance._reactInternalInstance
                    });
                })), renderer.Component ? (console.error("You are using a version of React with limited support in this version of the devtools.\nPlease upgrade to use at least 0.13, or you can downgrade to use the old version of the devtools:\ninstructions here https://github.com/facebook/react-devtools/tree/devtools-next#how-do-i-use-this-for-react--013"), oldMethods = decorateMany(renderer.Component.Mixin, {
                    mountComponent: function mountComponent() {
                        var _this = this;

                        rootNodeIDMap.set(this._rootNodeID, this), setTimeout(function () {
                            hook.emit("mount", {
                                internalInstance: _this,
                                data: getData012(_this),
                                renderer: rid
                            });
                        }, 0);
                    },
                    updateComponent: function updateComponent() {
                        var _this2 = this;

                        setTimeout(function () {
                            hook.emit("update", {
                                internalInstance: _this2,
                                data: getData012(_this2),
                                renderer: rid
                            });
                        }, 0);
                    },
                    unmountComponent: function unmountComponent() {
                        hook.emit("unmount", {
                            internalInstance: this,
                            renderer: rid
                        }), rootNodeIDMap["delete"](this._rootNodeID, this);
                    }
                })) : renderer.Reconciler && (oldMethods = decorateMany(renderer.Reconciler, {
                    mountComponent: function mountComponent(internalInstance, rootID, transaction, context) {
                        var data = getData(internalInstance);
                        rootNodeIDMap.set(internalInstance._rootNodeID, internalInstance), hook.emit("mount", {
                            internalInstance: internalInstance,
                            data: data,
                            renderer: rid
                        });
                    },
                    performUpdateIfNecessary: function performUpdateIfNecessary(internalInstance, nextChild, transaction, context) {
                        hook.emit("update", {
                            internalInstance: internalInstance,
                            data: getData(internalInstance),
                            renderer: rid
                        });
                    },
                    receiveComponent: function receiveComponent(internalInstance, nextChild, transaction, context) {
                        hook.emit("update", {
                            internalInstance: internalInstance,
                            data: getData(internalInstance),
                            renderer: rid
                        });
                    },
                    unmountComponent: function unmountComponent(internalInstance) {
                        hook.emit("unmount", {
                            internalInstance: internalInstance,
                            renderer: rid
                        }), rootNodeIDMap["delete"](internalInstance._rootNodeID, internalInstance);
                    }
                })), extras.walkTree = function (visit, visitRoot) {
                    var onMount = function onMount(component, data) {
                        rootNodeIDMap.set(component._rootNodeID, component), visit(component, data);
                    };

                    walkRoots(renderer.Mount._instancesByReactRootID || renderer.Mount._instancesByContainerID, onMount, visitRoot, isPre013);
                }, extras.cleanup = function () {
                    oldMethods && (renderer.Component ? restoreMany(renderer.Component.Mixin, oldMethods) : restoreMany(renderer.Reconciler, oldMethods)), oldRenderRoot && (renderer.Mount._renderNewRootComponent = oldRenderRoot), oldRenderComponent && (renderer.Mount.renderComponent = oldRenderComponent), oldMethods = null, oldRenderRoot = null, oldRenderComponent = null;
                }, extras;
            }

            function walkRoots(roots, onMount, onRoot, isPre013) {
                for (var name in roots) {
                    walkNode(roots[name], onMount, isPre013), onRoot(roots[name]);
                }
            }

            function walkNode(internalInstance, onMount, isPre013) {
                var data = isPre013 ? getData012(internalInstance) : getData(internalInstance);
                data.children && Array.isArray(data.children) && data.children.forEach(function (child) {
                    return walkNode(child, onMount, isPre013);
                }), onMount(internalInstance, data);
            }

            function decorateResult(obj, attr, fn) {
                var old = obj[attr];
                return obj[attr] = function (instance) {
                    var res = old.apply(this, arguments);
                    return fn(res), res;
                }, old;
            }

            function decorate(obj, attr, fn) {
                var old = obj[attr];
                return obj[attr] = function (instance) {
                    var res = old.apply(this, arguments);
                    return fn.apply(this, arguments), res;
                }, old;
            }

            function decorateMany(source, fns) {
                var olds = {};

                for (var name in fns) {
                    olds[name] = decorate(source, name, fns[name]);
                }

                return olds;
            }

            function restoreMany(source, olds) {
                for (var name in olds) {
                    source[name] = olds[name];
                }
            }

            var getData = __webpack_require__(36),
                getData012 = __webpack_require__(41),
                attachRendererFiber = __webpack_require__(42);

            module.exports = attachRenderer;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function getData(internalInstance) {
                var children = null,
                    props = null,
                    state = null,
                    context = null,
                    updater = null,
                    name = null,
                    type = null,
                    key = null,
                    ref = null,
                    source = null,
                    text = null,
                    publicInstance = null,
                    nodeType = "Native";
                if ("object" !== ("undefined" == typeof internalInstance ? "undefined" : _typeof(internalInstance))) nodeType = "Text", text = internalInstance + "";else if (null === internalInstance._currentElement || internalInstance._currentElement === !1) nodeType = "Empty";else if (internalInstance._renderedComponent) nodeType = "NativeWrapper", children = [internalInstance._renderedComponent], props = internalInstance._instance.props, state = internalInstance._instance.state, context = internalInstance._instance.context, context && 0 === Object.keys(context).length && (context = null);else if (internalInstance._renderedChildren) children = childrenList(internalInstance._renderedChildren);else if (internalInstance._currentElement && internalInstance._currentElement.props) {
                    var unfilteredChildren = internalInstance._currentElement.props.children,
                        filteredChildren = [];
                    traverseAllChildrenImpl(unfilteredChildren, "", function (_traverseContext, child) {
                        var childType = "undefined" == typeof child ? "undefined" : _typeof(child);
                        "string" !== childType && "number" !== childType || filteredChildren.push(child);
                    }), children = filteredChildren.length <= 1 ? filteredChildren.length ? String(filteredChildren[0]) : void 0 : filteredChildren;
                }

                if (!props && internalInstance._currentElement && internalInstance._currentElement.props && (props = internalInstance._currentElement.props), null != internalInstance._currentElement && (type = internalInstance._currentElement.type, internalInstance._currentElement.key && (key = String(internalInstance._currentElement.key)), source = internalInstance._currentElement._source, ref = internalInstance._currentElement.ref, "string" == typeof type ? (name = type, null != internalInstance._nativeNode && (publicInstance = internalInstance._nativeNode), null != internalInstance._hostNode && (publicInstance = internalInstance._hostNode)) : "function" == typeof type ? (nodeType = "Composite", name = getDisplayName(type), internalInstance._renderedComponent && (internalInstance._currentElement.props === internalInstance._renderedComponent._currentElement || internalInstance._currentElement.type.isReactTopLevelWrapper) && (nodeType = "Wrapper"), null === name && (name = "No display name")) : "string" == typeof internalInstance._stringText ? (nodeType = "Text", text = internalInstance._stringText) : name = getDisplayName(type)), internalInstance._instance) {
                    var inst = internalInstance._instance,
                        forceUpdate = inst.forceUpdate || inst.updater && inst.updater.enqueueForceUpdate && function (cb) {
                        inst.updater.enqueueForceUpdate(this, cb, "forceUpdate");
                    };

                    updater = {
                        setState: inst.setState && inst.setState.bind(inst),
                        forceUpdate: forceUpdate && forceUpdate.bind(inst),
                        setInProps: forceUpdate && setInProps.bind(null, internalInstance, forceUpdate),
                        setInState: inst.forceUpdate && setInState.bind(null, inst),
                        setInContext: forceUpdate && setInContext.bind(null, inst, forceUpdate)
                    }, "function" == typeof type && (publicInstance = inst), inst._renderedChildren && (children = childrenList(inst._renderedChildren));
                }

                return "function" == typeof internalInstance.setNativeProps && (updater = {
                    setNativeProps: function setNativeProps(nativeProps) {
                        internalInstance.setNativeProps(nativeProps);
                    }
                }), {
                    nodeType: nodeType,
                    type: type,
                    key: key,
                    ref: ref,
                    source: source,
                    name: name,
                    props: props,
                    state: state,
                    context: context,
                    children: children,
                    text: text,
                    updater: updater,
                    publicInstance: publicInstance
                };
            }

            function setInProps(internalInst, forceUpdate, path, value) {
                var element = internalInst._currentElement;
                internalInst._currentElement = _extends({}, element, {
                    props: copyWithSet(element.props, path, value)
                }), forceUpdate.call(internalInst._instance);
            }

            function setInState(inst, path, value) {
                setIn(inst.state, path, value), inst.forceUpdate();
            }

            function setInContext(inst, forceUpdate, path, value) {
                setIn(inst.context, path, value), forceUpdate.call(inst);
            }

            function setIn(obj, path, value) {
                var last = path.pop(),
                    parent = path.reduce(function (obj_, attr) {
                    return obj_ ? obj_[attr] : null;
                }, obj);
                parent && (parent[last] = value);
            }

            function childrenList(children) {
                var res = [];

                for (var name in children) {
                    res.push(children[name]);
                }

                return res;
            }

            var _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];

                    for (var key in source) {
                        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
                    }
                }

                return target;
            },
                _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
            },
                copyWithSet = __webpack_require__(37),
                getDisplayName = __webpack_require__(38),
                traverseAllChildrenImpl = __webpack_require__(39);

            module.exports = getData;
        }, function (module, exports) {
            "use strict";

            function copyWithSetImpl(obj, path, idx, value) {
                if (idx >= path.length) return value;
                var key = path[idx],
                    updated = Array.isArray(obj) ? obj.slice() : _extends({}, obj);
                return updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value), updated;
            }

            function copyWithSet(obj, path, value) {
                return copyWithSetImpl(obj, path, 0, value);
            }

            var _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];

                    for (var key in source) {
                        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
                    }
                }

                return target;
            };

            module.exports = copyWithSet;
        }, function (module, exports) {
            "use strict";

            function getDisplayName(type) {
                if (cachedDisplayNames.has(type)) return cachedDisplayNames.get(type);
                var displayName = void 0;
                "string" == typeof type.displayName && (displayName = type.displayName), displayName || (displayName = type.name || "Unknown");
                var match = displayName.match(FB_MODULE_RE);

                if (match) {
                    var componentName = match[1],
                        moduleName = match[2];
                    componentName && moduleName && (moduleName === componentName || moduleName.startsWith(componentName + ".")) && (displayName = componentName);
                }

                return cachedDisplayNames.set(type, displayName), displayName;
            }

            var FB_MODULE_RE = /^(.*) \[from (.*)\]$/,
                cachedDisplayNames = new WeakMap();
            module.exports = getDisplayName;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function escape(key) {
                var escapeRegex = /[=:]/g,
                    escaperLookup = {
                    "=": "=0",
                    ":": "=2"
                },
                    escapedString = ("" + key).replace(escapeRegex, function (match) {
                    return escaperLookup[match];
                });
                return "$" + escapedString;
            }

            function getComponentKey(component, index) {
                return "object" === ("undefined" == typeof component ? "undefined" : _typeof(component)) && null !== component && null != component.key ? escape(component.key) : index.toString(36);
            }

            function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
                var type = "undefined" == typeof children ? "undefined" : _typeof(children);
                if ("undefined" !== type && "boolean" !== type || (children = null), null === children || "string" === type || "number" === type || "object" === type && children.$$typeof === REACT_ELEMENT_TYPE) return callback(traverseContext, children, "" === nameSoFar ? SEPARATOR + getComponentKey(children, 0) : nameSoFar), 1;
                var child,
                    nextName,
                    subtreeCount = 0,
                    nextNamePrefix = "" === nameSoFar ? SEPARATOR : nameSoFar + SUBSEPARATOR;
                if (Array.isArray(children)) for (var i = 0; i < children.length; i++) {
                    child = children[i], nextName = nextNamePrefix + getComponentKey(child, i), subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                } else {
                    var iteratorFn = ITERATOR_SYMBOL && children[ITERATOR_SYMBOL] || children[FAUX_ITERATOR_SYMBOL];
                    if ("function" == typeof iteratorFn) for (var step, iterator = iteratorFn.call(children), ii = 0; !(step = iterator.next()).done;) {
                        child = step.value, nextName = nextNamePrefix + getComponentKey(child, ii++), subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                    } else if ("object" === type) {
                        var addendum = " If you meant to render a collection of children, use an array instead.",
                            childrenString = "" + children;
                        invariant(!1, "The React Devtools cannot render an object as a child. (found: %s).%s", "[object Object]" === childrenString ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString, addendum);
                    }
                }
                return subtreeCount;
            }

            var _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
            },
                invariant = __webpack_require__(40),
                SEPARATOR = ".",
                SUBSEPARATOR = ":",
                FAUX_ITERATOR_SYMBOL = "@@iterator",
                ITERATOR_SYMBOL = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator"),
                REACT_ELEMENT_TYPE = "function" == typeof Symbol && Symbol["for"] && Symbol["for"]("react.element") || 60103;

            module.exports = traverseAllChildrenImpl;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function invariant(condition, format, a, b, c, d, e, f) {
                if (!condition) {
                    var error;
                    if (void 0 === format) error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else {
                        var args = [a, b, c, d, e, f],
                            argIndex = 0;
                        error = new Error(format.replace(/%s/g, function () {
                            return args[argIndex++];
                        })), error.name = "Invariant Violation";
                    }
                    throw error.framesToPop = 1, error;
                }
            }

            module.exports = invariant;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function getData012(internalInstance) {
                var children = null,
                    props = internalInstance.props,
                    state = internalInstance.state,
                    context = internalInstance.context,
                    updater = null,
                    name = null,
                    type = null,
                    key = null,
                    ref = null,
                    text = null,
                    publicInstance = null,
                    nodeType = "Native";
                return internalInstance._renderedComponent ? (nodeType = "Wrapper", children = [internalInstance._renderedComponent], context && 0 === Object.keys(context).length && (context = null)) : internalInstance._renderedChildren ? (name = internalInstance.constructor.displayName, children = childrenList(internalInstance._renderedChildren)) : "string" == typeof props.children && (name = internalInstance.constructor.displayName, children = props.children, nodeType = "Native"), !props && internalInstance._currentElement && internalInstance._currentElement.props && (props = internalInstance._currentElement.props), internalInstance._currentElement && (type = internalInstance._currentElement.type, internalInstance._currentElement.key && (key = String(internalInstance._currentElement.key)), ref = internalInstance._currentElement.ref, "string" == typeof type ? name = type : (nodeType = "Composite", name = type.displayName, name || (name = "No display name"))), name || (name = internalInstance.constructor.displayName || "No display name", nodeType = "Composite"), "string" == typeof props && (nodeType = "Text", text = props, props = null, name = null), internalInstance.forceUpdate && (updater = {
                    setState: internalInstance.setState.bind(internalInstance),
                    forceUpdate: internalInstance.forceUpdate.bind(internalInstance),
                    setInProps: internalInstance.forceUpdate && setInProps.bind(null, internalInstance),
                    setInState: internalInstance.forceUpdate && setInState.bind(null, internalInstance),
                    setInContext: internalInstance.forceUpdate && setInContext.bind(null, internalInstance)
                }, publicInstance = internalInstance), {
                    nodeType: nodeType,
                    type: type,
                    key: key,
                    ref: ref,
                    source: null,
                    name: name,
                    props: props,
                    state: state,
                    context: context,
                    children: children,
                    text: text,
                    updater: updater,
                    publicInstance: publicInstance
                };
            }

            function setInProps(inst, path, value) {
                inst.props = copyWithSet(inst.props, path, value), inst.forceUpdate();
            }

            function setInState(inst, path, value) {
                setIn(inst.state, path, value), inst.forceUpdate();
            }

            function setInContext(inst, path, value) {
                setIn(inst.context, path, value), inst.forceUpdate();
            }

            function setIn(obj, path, value) {
                var last = path.pop(),
                    parent = path.reduce(function (obj_, attr) {
                    return obj_ ? obj_[attr] : null;
                }, obj);
                parent && (parent[last] = value);
            }

            function childrenList(children) {
                var res = [];

                for (var name in children) {
                    res.push(children[name]);
                }

                return res;
            }

            var copyWithSet = __webpack_require__(37);

            module.exports = getData012;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function attachRendererFiber(hook, rid, renderer) {
                function getOpaqueNode(fiber) {
                    if (opaqueNodes.has(fiber)) return fiber;
                    var alternate = fiber.alternate;
                    return null != alternate && opaqueNodes.has(alternate) ? alternate : (opaqueNodes.add(fiber), fiber);
                }

                function hasDataChanged(prevFiber, nextFiber) {
                    if (prevFiber.tag === ClassComponent) {
                        if ((nextFiber.effectTag & PerformedWork) !== PerformedWork) return !1;
                        if (prevFiber.stateNode.context !== nextFiber.stateNode.context) return !0;
                        if (null != nextFiber.updateQueue && nextFiber.updateQueue.hasForceUpdate) return !0;
                    }

                    return prevFiber.memoizedProps !== nextFiber.memoizedProps || prevFiber.memoizedState !== nextFiber.memoizedState || prevFiber.ref !== nextFiber.ref || prevFiber._debugSource !== nextFiber._debugSource;
                }

                function flushPendingEvents() {
                    var events = pendingEvents;
                    pendingEvents = [];

                    for (var i = 0; i < events.length; i++) {
                        var event = events[i];
                        hook.emit(event.type, event);
                    }
                }

                function enqueueMount(fiber) {
                    pendingEvents.push({
                        internalInstance: getOpaqueNode(fiber),
                        data: getDataFiber(fiber, getOpaqueNode),
                        renderer: rid,
                        type: "mount"
                    });
                    var isRoot = fiber.tag === HostRoot;
                    isRoot && pendingEvents.push({
                        internalInstance: getOpaqueNode(fiber),
                        renderer: rid,
                        type: "root"
                    });
                }

                function enqueueUpdateIfNecessary(fiber, hasChildOrderChanged) {
                    (hasChildOrderChanged || hasDataChanged(fiber.alternate, fiber)) && pendingEvents.push({
                        internalInstance: getOpaqueNode(fiber),
                        data: getDataFiber(fiber, getOpaqueNode),
                        renderer: rid,
                        type: "update"
                    });
                }

                function enqueueUnmount(fiber) {
                    var isRoot = fiber.tag === HostRoot,
                        opaqueNode = getOpaqueNode(fiber),
                        event = {
                        internalInstance: opaqueNode,
                        renderer: rid,
                        type: "unmount"
                    };
                    isRoot ? pendingEvents.push(event) : pendingEvents.unshift(event), opaqueNodes["delete"](opaqueNode);
                }

                function mountFiber(fiber) {
                    var node = fiber;

                    outer: for (;;) {
                        if (node.child) node.child["return"] = node, node = node.child;else {
                            if (enqueueMount(node), node == fiber) return;

                            if (!node.sibling) {
                                for (; node["return"];) {
                                    if (node = node["return"], enqueueMount(node), node == fiber) return;

                                    if (node.sibling) {
                                        node.sibling["return"] = node["return"], node = node.sibling;
                                        continue outer;
                                    }
                                }

                                return;
                            }

                            node.sibling["return"] = node["return"], node = node.sibling;
                        }
                    }
                }

                function updateFiber(nextFiber, prevFiber) {
                    var hasChildOrderChanged = !1;

                    if (nextFiber.child !== prevFiber.child) {
                        for (var nextChild = nextFiber.child, prevChildAtSameIndex = prevFiber.child; nextChild;) {
                            if (nextChild.alternate) {
                                var prevChild = nextChild.alternate;
                                updateFiber(nextChild, prevChild), hasChildOrderChanged || prevChild === prevChildAtSameIndex || (hasChildOrderChanged = !0);
                            } else mountFiber(nextChild), hasChildOrderChanged || (hasChildOrderChanged = !0);

                            nextChild = nextChild.sibling, hasChildOrderChanged || null == prevChildAtSameIndex || (prevChildAtSameIndex = prevChildAtSameIndex.sibling);
                        }

                        hasChildOrderChanged || null == prevChildAtSameIndex || (hasChildOrderChanged = !0);
                    }

                    enqueueUpdateIfNecessary(nextFiber, hasChildOrderChanged);
                }

                function walkTree() {
                    hook.getFiberRoots(rid).forEach(function (root) {
                        mountFiber(root.current);
                    }), flushPendingEvents();
                }

                function cleanup() {}

                function handleCommitFiberUnmount(fiber) {
                    enqueueUnmount(fiber);
                }

                function handleCommitFiberRoot(root) {
                    var current = root.current,
                        alternate = current.alternate;

                    if (alternate) {
                        var wasMounted = null != alternate.memoizedState && null != alternate.memoizedState.element,
                            isMounted = null != current.memoizedState && null != current.memoizedState.element;
                        !wasMounted && isMounted ? mountFiber(current) : wasMounted && isMounted ? updateFiber(current, alternate) : wasMounted && !isMounted && enqueueUnmount(current);
                    } else mountFiber(current);

                    flushPendingEvents();
                }

                function getNativeFromReactElement(fiber) {
                    try {
                        var opaqueNode = fiber,
                            hostInstance = renderer.findHostInstanceByFiber(opaqueNode);
                        return hostInstance;
                    } catch (err) {
                        return null;
                    }
                }

                function getReactElementFromNative(hostInstance) {
                    var fiber = renderer.findFiberByHostInstance(hostInstance);

                    if (null != fiber) {
                        var opaqueNode = getOpaqueNode(fiber);
                        return opaqueNode;
                    }

                    return null;
                }

                var opaqueNodes = new Set(),
                    pendingEvents = [];
                return {
                    getNativeFromReactElement: getNativeFromReactElement,
                    getReactElementFromNative: getReactElementFromNative,
                    handleCommitFiberRoot: handleCommitFiberRoot,
                    handleCommitFiberUnmount: handleCommitFiberUnmount,
                    cleanup: cleanup,
                    walkTree: walkTree
                };
            }

            var getDataFiber = __webpack_require__(43),
                _require = __webpack_require__(44),
                ClassComponent = _require.ClassComponent,
                HostRoot = _require.HostRoot,
                PerformedWork = 1;

            module.exports = attachRendererFiber;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function getDataFiber(fiber, getOpaqueNode) {
                var type = fiber.type,
                    key = fiber.key,
                    ref = fiber.ref,
                    source = fiber._debugSource,
                    publicInstance = null,
                    props = null,
                    state = null,
                    children = null,
                    context = null,
                    updater = null,
                    nodeType = null,
                    name = null,
                    text = null;

                switch (fiber.tag) {
                    case FunctionalComponent:
                    case ClassComponent:
                        nodeType = "Composite", name = getDisplayName(fiber.type), publicInstance = fiber.stateNode, props = fiber.memoizedProps, state = fiber.memoizedState, null != publicInstance && (context = publicInstance.context, context && 0 === Object.keys(context).length && (context = null));
                        var inst = publicInstance;
                        inst && (updater = {
                            setState: inst.setState && inst.setState.bind(inst),
                            forceUpdate: inst.forceUpdate && inst.forceUpdate.bind(inst),
                            setInProps: inst.forceUpdate && setInProps.bind(null, fiber),
                            setInState: inst.forceUpdate && setInState.bind(null, inst),
                            setInContext: inst.forceUpdate && setInContext.bind(null, inst)
                        }), children = [];
                        break;

                    case HostRoot:
                        nodeType = "Wrapper", children = [];
                        break;

                    case HostPortal:
                        nodeType = "Portal", name = "ReactPortal", props = {
                            target: fiber.stateNode.containerInfo
                        }, children = [];
                        break;

                    case HostComponent:
                        nodeType = "Native", name = fiber.type, name = name.replace("topsecret-", ""), publicInstance = fiber.stateNode, props = fiber.memoizedProps, children = "string" == typeof props.children || "number" == typeof props.children ? props.children.toString() : [], "function" == typeof fiber.stateNode.setNativeProps && (updater = {
                            setNativeProps: function setNativeProps(nativeProps) {
                                fiber.stateNode.setNativeProps(nativeProps);
                            }
                        });
                        break;

                    case HostText:
                        nodeType = "Text", text = fiber.memoizedProps;
                        break;

                    case Fragment:
                        nodeType = "Wrapper", children = [];
                        break;

                    default:
                        nodeType = "Native", props = fiber.memoizedProps, name = "TODO_NOT_IMPLEMENTED_YET", children = [];
                }

                if (Array.isArray(children)) for (var child = fiber.child; child;) {
                    children.push(getOpaqueNode(child)), child = child.sibling;
                }
                return {
                    nodeType: nodeType,
                    type: type,
                    key: key,
                    ref: ref,
                    source: source,
                    name: name,
                    props: props,
                    state: state,
                    context: context,
                    children: children,
                    text: text,
                    updater: updater,
                    publicInstance: publicInstance
                };
            }

            function setInProps(fiber, path, value) {
                var inst = fiber.stateNode;
                fiber.pendingProps = copyWithSet(inst.props, path, value), fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps), fiber.stateNode.forceUpdate();
            }

            function setInState(inst, path, value) {
                setIn(inst.state, path, value), inst.forceUpdate();
            }

            function setInContext(inst, path, value) {
                setIn(inst.context, path, value), inst.forceUpdate();
            }

            function setIn(obj, path, value) {
                var last = path.pop(),
                    parent = path.reduce(function (obj_, attr) {
                    return obj_ ? obj_[attr] : null;
                }, obj);
                parent && (parent[last] = value);
            }

            var copyWithSet = __webpack_require__(37),
                getDisplayName = __webpack_require__(38),
                _require = __webpack_require__(44),
                FunctionalComponent = _require.FunctionalComponent,
                ClassComponent = _require.ClassComponent,
                HostRoot = _require.HostRoot,
                HostPortal = _require.HostPortal,
                HostComponent = _require.HostComponent,
                HostText = _require.HostText,
                Fragment = _require.Fragment;

            module.exports = getDataFiber;
        }, function (module, exports) {
            "use strict";

            module.exports = {
                IndeterminateComponent: 0,
                FunctionalComponent: 1,
                ClassComponent: 2,
                HostRoot: 3,
                HostPortal: 4,
                HostComponent: 5,
                HostText: 6,
                CoroutineComponent: 7,
                CoroutineHandlerPhase: 8,
                YieldComponent: 9,
                Fragment: 10
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _defineProperty(obj, key, value) {
                return key in obj ? Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : obj[key] = value, obj;
            }

            function measureStyle(agent, bridge, resolveRNStyle, id) {
                var node = agent.elementData.get(id);
                if (!node || !node.props) return void bridge.send("rn-style:measure", {});
                var style = resolveRNStyle(node.props.style);
                styleOverridesByHostComponentId[id] && (style = babelHelpers.extends({}, style, styleOverridesByHostComponentId[id]));
                var instance = node.publicInstance;
                return instance && instance.measure ? void instance.measure(function (x, y, width, height, left, top) {
                    if ("number" != typeof x) return void bridge.send("rn-style:measure", {
                        style: style
                    });
                    var margin = style && resolveBoxStyle("margin", style) || blank,
                        padding = style && resolveBoxStyle("padding", style) || blank;
                    bridge.send("rn-style:measure", {
                        style: style,
                        measuredLayout: {
                            x: x,
                            y: y,
                            width: width,
                            height: height,
                            left: left,
                            top: top,
                            margin: margin,
                            padding: padding
                        }
                    });
                }) : void bridge.send("rn-style:measure", {
                    style: style
                });
            }

            function shallowClone(obj) {
                var nobj = {};

                for (var n in obj) {
                    nobj[n] = obj[n];
                }

                return nobj;
            }

            function renameStyle(agent, id, oldName, newName, val) {
                var _ref3,
                    data = agent.elementData.get(id),
                    newStyle = newName ? (_ref3 = {}, _defineProperty(_ref3, oldName, void 0), _defineProperty(_ref3, newName, val), _ref3) : _defineProperty({}, oldName, void 0);

                if (data && data.updater && data.updater.setInProps) {
                    var customStyle,
                        style = data && data.props && data.props.style;

                    if (Array.isArray(style)) {
                        var lastLength = style.length - 1;
                        "object" !== _typeof(style[lastLength]) || Array.isArray(style[lastLength]) ? (style = style.concat([newStyle]), data.updater.setInProps(["style"], style)) : (customStyle = shallowClone(style[lastLength]), delete customStyle[oldName], newName ? customStyle[newName] = val : customStyle[oldName] = void 0, data.updater.setInProps(["style", lastLength], customStyle));
                    } else "object" === ("undefined" == typeof style ? "undefined" : _typeof(style)) ? (customStyle = shallowClone(style), delete customStyle[oldName], newName ? customStyle[newName] = val : customStyle[oldName] = void 0, data.updater.setInProps(["style"], customStyle)) : (style = [style, newStyle], data.updater.setInProps(["style"], style));
                } else {
                    if (!(data && data.updater && data.updater.setNativeProps)) return;
                    styleOverridesByHostComponentId[id] ? babelHelpers.extends(styleOverridesByHostComponentId[id], newStyle) : styleOverridesByHostComponentId[id] = newStyle, data.updater.setNativeProps({
                        style: newStyle
                    });
                }

                agent.emit("hideHighlight");
            }

            function setStyle(agent, id, attr, val) {
                var data = agent.elementData.get(id),
                    newStyle = _defineProperty({}, attr, val);

                if (data && data.updater && data.updater.setInProps) {
                    var style = data.props && data.props.style;

                    if (Array.isArray(style)) {
                        var lastLength = style.length - 1;
                        "object" !== _typeof(style[lastLength]) || Array.isArray(style[lastLength]) ? (style = style.concat([newStyle]), data.updater.setInProps(["style"], style)) : data.updater.setInProps(["style", lastLength, attr], val);
                    } else style = [style, newStyle], data.updater.setInProps(["style"], style);
                } else {
                    if (!(data && data.updater && data.updater.setNativeProps)) return;
                    styleOverridesByHostComponentId[id] ? babelHelpers.extends(styleOverridesByHostComponentId[id], newStyle) : styleOverridesByHostComponentId[id] = newStyle, data.updater.setNativeProps({
                        style: newStyle
                    });
                }

                agent.emit("hideHighlight");
            }

            var _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
            },
                resolveBoxStyle = __webpack_require__(46),
                styleOverridesByHostComponentId = {};

            module.exports = function (bridge, agent, resolveRNStyle) {
                bridge.onCall("rn-style:get", function (id) {
                    var node = agent.elementData.get(id);
                    return node && node.props ? resolveRNStyle(node.props.style) : null;
                }), bridge.on("rn-style:measure", function (id) {
                    measureStyle(agent, bridge, resolveRNStyle, id);
                }), bridge.on("rn-style:rename", function (_ref) {
                    var id = _ref.id,
                        oldName = _ref.oldName,
                        newName = _ref.newName,
                        val = _ref.val;
                    renameStyle(agent, id, oldName, newName, val), setTimeout(function () {
                        return measureStyle(agent, bridge, resolveRNStyle, id);
                    });
                }), bridge.on("rn-style:set", function (_ref2) {
                    var id = _ref2.id,
                        attr = _ref2.attr,
                        val = _ref2.val;
                    setStyle(agent, id, attr, val), setTimeout(function () {
                        return measureStyle(agent, bridge, resolveRNStyle, id);
                    });
                });
            };

            var blank = {
                top: 0,
                left: 0,
                right: 0,
                bottom: 0
            };
        }, function (module, exports) {
            "use strict";

            function resolveBoxStyle(prefix, style) {
                var res = {},
                    subs = ["top", "left", "bottom", "right"],
                    set = !1;
                return subs.forEach(function (sub) {
                    res[sub] = style[prefix] || 0;
                }), style[prefix] && (set = !0), style[prefix + "Vertical"] && (res.top = res.bottom = style[prefix + "Vertical"], set = !0), style[prefix + "Horizontal"] && (res.left = res.right = style[prefix + "Horizontal"], set = !0), subs.forEach(function (sub) {
                    var val = style[prefix + capFirst(sub)];
                    val && (res[sub] = val, set = !0);
                }), set ? res : null;
            }

            function capFirst(text) {
                return text[0].toUpperCase() + text.slice(1);
            }

            module.exports = resolveBoxStyle;
        }, function (module, exports) {
            "use strict";

            function decorate(obj, attr, fn) {
                var old = obj[attr];
                return obj[attr] = function () {
                    var res = old.apply(this, arguments);
                    return fn.apply(this, arguments), res;
                }, function () {
                    obj[attr] = old;
                };
            }

            var subscriptionEnabled = !1;

            module.exports = function (bridge, agent, hook) {
                function sendStoreData() {
                    subscriptionEnabled && bridge.send("relay:store", {
                        id: "relay:store",
                        nodes: DefaultStoreData.getNodeData()
                    });
                }

                var shouldEnable = !!hook._relayInternals;

                if (bridge.onCall("relay:check", function () {
                    return shouldEnable;
                }), shouldEnable) {
                    var _hook$_relayInternals = hook._relayInternals,
                        DefaultStoreData = _hook$_relayInternals.DefaultStoreData,
                        setRequestListener = _hook$_relayInternals.setRequestListener;
                    bridge.onCall("relay:store:enable", function () {
                        subscriptionEnabled = !0, sendStoreData();
                    }), bridge.onCall("relay:store:disable", function () {
                        subscriptionEnabled = !1;
                    }), sendStoreData(), decorate(DefaultStoreData, "handleUpdatePayload", sendStoreData), decorate(DefaultStoreData, "handleQueryPayload", sendStoreData);
                    var removeListener = setRequestListener(function (event, data) {
                        bridge.send(event, data);
                    });
                    hook.on("shutdown", removeListener);
                }
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var Highlighter = __webpack_require__(49);

            module.exports = function (agent) {
                var hl = new Highlighter(window, function (node) {
                    agent.selectFromDOMNode(node);
                });
                agent.on("highlight", function (data) {
                    return hl.highlight(data.node, data.name);
                }), agent.on("highlightMany", function (nodes) {
                    return hl.highlightMany(nodes);
                }), agent.on("hideHighlight", function () {
                    return hl.hideHighlight();
                }), agent.on("refreshMultiOverlay", function () {
                    return hl.refreshMultiOverlay();
                }), agent.on("startInspecting", function () {
                    return hl.startInspecting();
                }), agent.on("stopInspecting", function () {
                    return hl.stopInspecting();
                }), agent.on("shutdown", function () {
                    hl.remove();
                });
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }

            function captureSubscription(obj, evt, cb) {
                return obj.addEventListener(evt, cb, !0), function () {
                    return obj.removeEventListener(evt, cb, !0);
                };
            }

            function makeMagnifier() {
                var button = window.document.createElement("button");
                return button.innerHTML = "&#128269;", button.style.backgroundColor = "transparent", button.style.border = "none", button.style.outline = "none", button.style.cursor = "pointer", button.style.position = "fixed", button.style.bottom = "10px", button.style.right = "10px", button.style.fontSize = "30px", button.style.zIndex = 1e7, button;
            }

            var _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
                };
            }(),
                Overlay = __webpack_require__(50),
                MultiOverlay = __webpack_require__(52),
                Highlighter = function () {
                function Highlighter(win, onSelect) {
                    _classCallCheck(this, Highlighter), this._win = win, this._onSelect = onSelect, this._overlay = null, this._multiOverlay = null, this._subs = [];
                }

                return _createClass(Highlighter, [{
                    key: "startInspecting",
                    value: function value() {
                        this._inspecting = !0, this._subs = [captureSubscription(this._win, "mouseover", this.onHover.bind(this)), captureSubscription(this._win, "mousedown", this.onMouseDown.bind(this)), captureSubscription(this._win, "click", this.onClick.bind(this))];
                    }
                }, {
                    key: "stopInspecting",
                    value: function value() {
                        this._subs.forEach(function (unsub) {
                            return unsub();
                        }), this.hideHighlight();
                    }
                }, {
                    key: "remove",
                    value: function value() {
                        this.stopInspecting(), this._button && this._button.parentNode && this._button.parentNode.removeChild(this._button);
                    }
                }, {
                    key: "highlight",
                    value: function value(node, name) {
                        this.removeMultiOverlay(), node.nodeType !== Node.COMMENT_NODE && (this._overlay || (this._overlay = new Overlay(this._win)), this._overlay.inspect(node, name));
                    }
                }, {
                    key: "highlightMany",
                    value: function value(nodes) {
                        this.removeOverlay(), this._multiOverlay || (this._multiOverlay = new MultiOverlay(this._win)), this._multiOverlay.highlightMany(nodes);
                    }
                }, {
                    key: "hideHighlight",
                    value: function value() {
                        this._inspecting = !1, this.removeOverlay(), this.removeMultiOverlay();
                    }
                }, {
                    key: "refreshMultiOverlay",
                    value: function value() {
                        this._multiOverlay && this._multiOverlay.refresh();
                    }
                }, {
                    key: "removeOverlay",
                    value: function value() {
                        this._overlay && (this._overlay.remove(), this._overlay = null);
                    }
                }, {
                    key: "removeMultiOverlay",
                    value: function value() {
                        this._multiOverlay && (this._multiOverlay.remove(), this._multiOverlay = null);
                    }
                }, {
                    key: "onMouseDown",
                    value: function value(evt) {
                        this._inspecting && (evt.preventDefault(), evt.stopPropagation(), evt.cancelBubble = !0, this._onSelect(evt.target));
                    }
                }, {
                    key: "onClick",
                    value: function value(evt) {
                        this._inspecting && (this._subs.forEach(function (unsub) {
                            return unsub();
                        }), evt.preventDefault(), evt.stopPropagation(), evt.cancelBubble = !0, this.hideHighlight());
                    }
                }, {
                    key: "onHover",
                    value: function value(evt) {
                        this._inspecting && (evt.preventDefault(), evt.stopPropagation(), evt.cancelBubble = !0, this.highlight(evt.target));
                    }
                }, {
                    key: "injectButton",
                    value: function value() {
                        this._button = makeMagnifier(), this._button.onclick = this.startInspecting.bind(this), this._win.document.body.appendChild(this._button);
                    }
                }]), Highlighter;
            }();

            module.exports = Highlighter;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }

            function findTipPos(dims, win) {
                var top,
                    tipHeight = 20,
                    margin = 5;
                return top = dims.top + dims.height + tipHeight <= win.innerHeight ? dims.top + dims.height < 0 ? margin : dims.top + dims.height + margin : dims.top - tipHeight <= win.innerHeight ? dims.top - tipHeight - margin < margin ? margin : dims.top - tipHeight - margin : win.innerHeight - tipHeight - margin, top += "px", dims.left < 0 ? {
                    top: top,
                    left: margin
                } : dims.left + 200 > win.innerWidth ? {
                    top: top,
                    right: margin
                } : {
                    top: top,
                    left: dims.left + margin + "px"
                };
            }

            function getElementDimensions(domElement) {
                var calculatedStyle = window.getComputedStyle(domElement);
                return {
                    borderLeft: +calculatedStyle.borderLeftWidth.match(/[0-9]*/)[0],
                    borderRight: +calculatedStyle.borderRightWidth.match(/[0-9]*/)[0],
                    borderTop: +calculatedStyle.borderTopWidth.match(/[0-9]*/)[0],
                    borderBottom: +calculatedStyle.borderBottomWidth.match(/[0-9]*/)[0],
                    marginLeft: +calculatedStyle.marginLeft.match(/[0-9]*/)[0],
                    marginRight: +calculatedStyle.marginRight.match(/[0-9]*/)[0],
                    marginTop: +calculatedStyle.marginTop.match(/[0-9]*/)[0],
                    marginBottom: +calculatedStyle.marginBottom.match(/[0-9]*/)[0],
                    paddingLeft: +calculatedStyle.paddingLeft.match(/[0-9]*/)[0],
                    paddingRight: +calculatedStyle.paddingRight.match(/[0-9]*/)[0],
                    paddingTop: +calculatedStyle.paddingTop.match(/[0-9]*/)[0],
                    paddingBottom: +calculatedStyle.paddingBottom.match(/[0-9]*/)[0]
                };
            }

            function getOwnerWindow(node) {
                return node.ownerDocument ? node.ownerDocument.defaultView : null;
            }

            function getOwnerIframe(node) {
                var nodeWindow = getOwnerWindow(node);
                return nodeWindow ? nodeWindow.frameElement : null;
            }

            function getBoundingClientRectWithBorderOffset(node) {
                var dimensions = getElementDimensions(node);
                return mergeRectOffsets([node.getBoundingClientRect(), {
                    top: dimensions.borderTop,
                    left: dimensions.borderLeft,
                    bottom: dimensions.borderBottom,
                    right: dimensions.borderRight,
                    width: 0,
                    height: 0
                }]);
            }

            function mergeRectOffsets(rects) {
                return rects.reduce(function (previousRect, rect) {
                    return null == previousRect ? rect : {
                        top: previousRect.top + rect.top,
                        left: previousRect.left + rect.left,
                        width: previousRect.width,
                        height: previousRect.height,
                        bottom: previousRect.bottom + rect.bottom,
                        right: previousRect.right + rect.right
                    };
                });
            }

            function getNestedBoundingClientRect(node, boundaryWindow) {
                var ownerIframe = getOwnerIframe(node);

                if (ownerIframe && ownerIframe !== boundaryWindow) {
                    for (var rects = [node.getBoundingClientRect()], currentIframe = ownerIframe, onlyOneMore = !1; currentIframe;) {
                        var rect = getBoundingClientRectWithBorderOffset(currentIframe);
                        if (rects.push(rect), currentIframe = getOwnerIframe(currentIframe), onlyOneMore) break;
                        currentIframe && getOwnerWindow(currentIframe) === boundaryWindow && (onlyOneMore = !0);
                    }

                    return mergeRectOffsets(rects);
                }

                return node.getBoundingClientRect();
            }

            function boxWrap(dims, what, node) {
                assign(node.style, {
                    borderTopWidth: dims[what + "Top"] + "px",
                    borderLeftWidth: dims[what + "Left"] + "px",
                    borderRightWidth: dims[what + "Right"] + "px",
                    borderBottomWidth: dims[what + "Bottom"] + "px",
                    borderStyle: "solid"
                });
            }

            var _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
                };
            }(),
                assign = __webpack_require__(3),
                _require = __webpack_require__(51),
                monospace = _require.monospace,
                Overlay = function () {
                function Overlay(window) {
                    _classCallCheck(this, Overlay);

                    var doc = window.document;
                    this.win = window, this.container = doc.createElement("div"), this.node = doc.createElement("div"), this.border = doc.createElement("div"), this.padding = doc.createElement("div"), this.content = doc.createElement("div"), this.border.style.borderColor = overlayStyles.border, this.padding.style.borderColor = overlayStyles.padding, this.content.style.backgroundColor = overlayStyles.background, assign(this.node.style, {
                        borderColor: overlayStyles.margin,
                        pointerEvents: "none",
                        position: "fixed"
                    }), this.tip = doc.createElement("div"), assign(this.tip.style, {
                        backgroundColor: "#333740",
                        borderRadius: "2px",
                        fontFamily: monospace.family,
                        fontWeight: "bold",
                        padding: "3px 5px",
                        position: "fixed",
                        fontSize: monospace.sizes.normal
                    }), this.nameSpan = doc.createElement("span"), this.tip.appendChild(this.nameSpan), assign(this.nameSpan.style, {
                        color: "#ee78e6",
                        borderRight: "1px solid #aaaaaa",
                        paddingRight: "0.5rem",
                        marginRight: "0.5rem"
                    }), this.dimSpan = doc.createElement("span"), this.tip.appendChild(this.dimSpan), assign(this.dimSpan.style, {
                        color: "#d7d7d7"
                    }), this.container.style.zIndex = 1e7, this.node.style.zIndex = 1e7, this.tip.style.zIndex = 1e7, this.container.appendChild(this.node), this.container.appendChild(this.tip), this.node.appendChild(this.border), this.border.appendChild(this.padding), this.padding.appendChild(this.content), doc.body.appendChild(this.container);
                }

                return _createClass(Overlay, [{
                    key: "remove",
                    value: function value() {
                        this.container.parentNode && this.container.parentNode.removeChild(this.container);
                    }
                }, {
                    key: "inspect",
                    value: function value(node, name) {
                        if (node.nodeType === Node.ELEMENT_NODE) {
                            var box = getNestedBoundingClientRect(node, this.win),
                                dims = getElementDimensions(node);
                            boxWrap(dims, "margin", this.node), boxWrap(dims, "border", this.border), boxWrap(dims, "padding", this.padding), assign(this.content.style, {
                                height: box.height - dims.borderTop - dims.borderBottom - dims.paddingTop - dims.paddingBottom + "px",
                                width: box.width - dims.borderLeft - dims.borderRight - dims.paddingLeft - dims.paddingRight + "px"
                            }), assign(this.node.style, {
                                top: box.top - dims.marginTop + "px",
                                left: box.left - dims.marginLeft + "px"
                            }), this.nameSpan.textContent = name || node.nodeName.toLowerCase(), this.dimSpan.textContent = box.width + "px × " + box.height + "px";
                            var tipPos = findTipPos({
                                top: box.top - dims.marginTop,
                                left: box.left - dims.marginLeft,
                                height: box.height + dims.marginTop + dims.marginBottom,
                                width: box.width + dims.marginLeft + dims.marginRight
                            }, this.win);
                            assign(this.tip.style, tipPos);
                        }
                    }
                }]), Overlay;
            }(),
                overlayStyles = {
                background: "rgba(120, 170, 210, 0.7)",
                padding: "rgba(77, 200, 0, 0.3)",
                margin: "rgba(255, 155, 0, 0.3)",
                border: "rgba(255, 200, 50, 0.3)"
            };

            module.exports = Overlay;
        }, function (module, exports) {
            "use strict";

            module.exports = {
                monospace: {
                    family: "Menlo, Consolas, monospace",
                    sizes: {
                        normal: 11,
                        large: 14
                    }
                },
                sansSerif: {
                    family: '"Helvetica Neue", "Lucida Grande", -apple-system, BlinkMacSystemFont, "Segoe UI", Ubuntu, sans-serif',
                    sizes: {
                        small: 10,
                        normal: 12,
                        large: 14
                    }
                }
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }

            var _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
                };
            }(),
                assign = __webpack_require__(3),
                MultiOverlay = function () {
                function MultiOverlay(window) {
                    _classCallCheck(this, MultiOverlay), this.win = window;
                    var doc = window.document;
                    this.container = doc.createElement("div"), doc.body.appendChild(this.container), this._currentNodes = null;
                }

                return _createClass(MultiOverlay, [{
                    key: "highlightMany",
                    value: function value(nodes) {
                        var _this = this;

                        this._currentNodes = nodes, this.container.innerHTML = "", nodes.forEach(function (node) {
                            var div = _this.win.document.createElement("div");

                            if ("function" == typeof node.getBoundingClientRect) {
                                var box = node.getBoundingClientRect();
                                box.bottom < 0 || box.top > window.innerHeight || (assign(div.style, {
                                    top: box.top + "px",
                                    left: box.left + "px",
                                    width: box.width + "px",
                                    height: box.height + "px",
                                    border: "2px dotted rgba(200, 100, 100, .8)",
                                    boxSizing: "border-box",
                                    backgroundColor: "rgba(200, 100, 100, .2)",
                                    position: "fixed",
                                    zIndex: 1e7,
                                    pointerEvents: "none"
                                }), _this.container.appendChild(div));
                            }
                        });
                    }
                }, {
                    key: "refresh",
                    value: function value() {
                        this._currentNodes && this.highlightMany(this._currentNodes);
                    }
                }, {
                    key: "remove",
                    value: function value() {
                        this.container.parentNode && (this.container.parentNode.removeChild(this.container), this._currentNodes = null);
                    }
                }]), MultiOverlay;
            }();

            module.exports = MultiOverlay;
        }]);
    });
},100,[],"react-devtools-core/build/backend.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var ReactNativePropRegistry;

  function getStyle(style) {
    if (ReactNativePropRegistry === undefined) {
      ReactNativePropRegistry = require(_dependencyMap[1], 'ReactNativePropRegistry');
    }

    if (typeof style === 'number') {
      return ReactNativePropRegistry.getByID(style);
    }

    return style;
  }

  function flattenStyle(style) {
    if (!style) {
      return undefined;
    }

    invariant(style !== true, 'style may be false but not true');

    if (!Array.isArray(style)) {
      return getStyle(style);
    }

    var result = {};

    for (var i = 0, styleLength = style.length; i < styleLength; ++i) {
      var computedStyle = flattenStyle(style[i]);

      if (computedStyle) {
        for (var key in computedStyle) {
          result[key] = computedStyle[key];
        }
      }
    }

    return result;
  }

  module.exports = flattenStyle;
},101,[13,102],"flattenStyle");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactNativePropRegistry;
},102,[21],"ReactNativePropRegistry");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var JSInspector = {
    registerAgent: function registerAgent(type) {
      if (global.__registerInspectorAgent) {
        global.__registerInspectorAgent(type);
      }
    },
    getTimestamp: function getTimestamp() {
      return global.__inspectorTimestamp();
    }
  };
  module.exports = JSInspector;
},103,[],"JSInspector");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var InspectorAgent = require(_dependencyMap[0], 'InspectorAgent');

  var JSInspector = require(_dependencyMap[1], 'JSInspector');

  var Map = require(_dependencyMap[2], 'Map');

  var XMLHttpRequest = require(_dependencyMap[3], 'XMLHttpRequest');

  var Interceptor = function () {
    function Interceptor(agent) {
      babelHelpers.classCallCheck(this, Interceptor);
      this._agent = agent;
      this._requests = new Map();
    }

    babelHelpers.createClass(Interceptor, [{
      key: "getData",
      value: function getData(requestId) {
        return this._requests.get(requestId);
      }
    }, {
      key: "requestSent",
      value: function requestSent(id, url, method, headers) {
        var requestId = String(id);

        this._requests.set(requestId, '');

        var request = {
          url: url,
          method: method,
          headers: headers,
          initialPriority: 'Medium'
        };
        var event = {
          requestId: requestId,
          documentURL: '',
          frameId: '1',
          loaderId: '1',
          request: request,
          timestamp: JSInspector.getTimestamp(),
          initiator: {
            type: 'other'
          },
          type: 'Other'
        };

        this._agent.sendEvent('requestWillBeSent', event);
      }
    }, {
      key: "responseReceived",
      value: function responseReceived(id, url, status, headers) {
        var requestId = String(id);
        var response = {
          url: url,
          status: status,
          statusText: String(status),
          headers: headers,
          requestHeaders: {},
          mimeType: this._getMimeType(headers),
          connectionReused: false,
          connectionId: -1,
          encodedDataLength: 0,
          securityState: 'unknown'
        };
        var event = {
          requestId: requestId,
          frameId: '1',
          loaderId: '1',
          timestamp: JSInspector.getTimestamp(),
          type: 'Other',
          response: response
        };

        this._agent.sendEvent('responseReceived', event);
      }
    }, {
      key: "dataReceived",
      value: function dataReceived(id, data) {
        var requestId = String(id);
        var existingData = this._requests.get(requestId) || '';

        this._requests.set(requestId, existingData.concat(data));

        var event = {
          requestId: requestId,
          timestamp: JSInspector.getTimestamp(),
          dataLength: data.length,
          encodedDataLength: data.length
        };

        this._agent.sendEvent('dataReceived', event);
      }
    }, {
      key: "loadingFinished",
      value: function loadingFinished(id, encodedDataLength) {
        var event = {
          requestId: String(id),
          timestamp: JSInspector.getTimestamp(),
          encodedDataLength: encodedDataLength
        };

        this._agent.sendEvent('loadingFinished', event);
      }
    }, {
      key: "loadingFailed",
      value: function loadingFailed(id, error) {
        var event = {
          requestId: String(id),
          timestamp: JSInspector.getTimestamp(),
          type: 'Other',
          errorText: error
        };

        this._agent.sendEvent('loadingFailed', event);
      }
    }, {
      key: "_getMimeType",
      value: function _getMimeType(headers) {
        var contentType = headers['Content-Type'] || '';
        return contentType.split(';')[0];
      }
    }]);
    return Interceptor;
  }();

  var NetworkAgent = function (_InspectorAgent) {
    babelHelpers.inherits(NetworkAgent, _InspectorAgent);

    function NetworkAgent() {
      babelHelpers.classCallCheck(this, NetworkAgent);
      return babelHelpers.possibleConstructorReturn(this, (NetworkAgent.__proto__ || Object.getPrototypeOf(NetworkAgent)).apply(this, arguments));
    }

    babelHelpers.createClass(NetworkAgent, [{
      key: "enable",
      value: function enable(_ref) {
        var maxResourceBufferSize = _ref.maxResourceBufferSize,
            maxTotalBufferSize = _ref.maxTotalBufferSize;
        this._interceptor = new Interceptor(this);
        XMLHttpRequest.setInterceptor(this._interceptor);
      }
    }, {
      key: "disable",
      value: function disable() {
        XMLHttpRequest.setInterceptor(null);
        this._interceptor = null;
      }
    }, {
      key: "getResponseBody",
      value: function getResponseBody(_ref2) {
        var requestId = _ref2.requestId;
        return {
          body: this.interceptor().getData(requestId),
          base64Encoded: false
        };
      }
    }, {
      key: "interceptor",
      value: function interceptor() {
        if (this._interceptor) {
          return this._interceptor;
        } else {
          throw Error('_interceptor can not be null');
        }
      }
    }]);
    return NetworkAgent;
  }(InspectorAgent);

  NetworkAgent.DOMAIN = 'Network';
  module.exports = NetworkAgent;
},104,[105,103,26,58],"NetworkAgent");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var InspectorAgent = function () {
    function InspectorAgent(eventSender) {
      babelHelpers.classCallCheck(this, InspectorAgent);
      this._eventSender = eventSender;
    }

    babelHelpers.createClass(InspectorAgent, [{
      key: "sendEvent",
      value: function sendEvent(name, params) {
        this._eventSender(name, params);
      }
    }]);
    return InspectorAgent;
  }();

  module.exports = InspectorAgent;
},105,[],"InspectorAgent");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = require(_dependencyMap[0], 'BatchedBridge');

  var RCTEventEmitter = {
    register: function register(eventEmitter) {
      BatchedBridge.registerCallableModule('RCTEventEmitter', eventEmitter);
    }
  };
  module.exports = RCTEventEmitter;
},106,[16],"RCTEventEmitter");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = require(_dependencyMap[0], 'NativeModules');

  var Platform = require(_dependencyMap[1], 'Platform');

  var defineLazyObjectProperty = require(_dependencyMap[2], 'defineLazyObjectProperty');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var UIManager = NativeModules.UIManager;
  invariant(UIManager, 'UIManager is undefined. The native module config is probably incorrect.');
  UIManager.__takeSnapshot = UIManager.takeSnapshot;

  UIManager.takeSnapshot = function () {
    invariant(false, 'UIManager.takeSnapshot should not be called directly. ' + 'Use ReactNative.takeSnapshot instead.');
  };

  if (Platform.OS === 'ios') {
    Object.keys(UIManager).forEach(function (viewName) {
      var viewConfig = UIManager[viewName];

      if (viewConfig.Manager) {
        defineLazyObjectProperty(viewConfig, 'Constants', {
          get: function get() {
            var viewManager = NativeModules[viewConfig.Manager];
            var constants = {};
            viewManager && Object.keys(viewManager).forEach(function (key) {
              var value = viewManager[key];

              if (typeof value !== 'function') {
                constants[key] = value;
              }
            });
            return constants;
          }
        });
        defineLazyObjectProperty(viewConfig, 'Commands', {
          get: function get() {
            var viewManager = NativeModules[viewConfig.Manager];
            var commands = {};
            var index = 0;
            viewManager && Object.keys(viewManager).forEach(function (key) {
              var value = viewManager[key];

              if (typeof value === 'function') {
                commands[key] = index++;
              }
            });
            return commands;
          }
        });
      }
    });
  } else if (Platform.OS === 'android' && UIManager.ViewManagerNames) {
    UIManager.ViewManagerNames.forEach(function (viewManagerName) {
      defineLazyObjectProperty(UIManager, viewManagerName, {
        get: function get() {
          return UIManager.getConstantsForViewManager(viewManagerName);
        }
      });
    });
  }

  module.exports = UIManager;
},107,[15,52,24,13],"UIManager");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  if (process.env.NODE_ENV === 'production') {
    module.exports = require(_dependencyMap[0], './cjs/react.production.min.js');
  } else {
    module.exports = require(_dependencyMap[1], './cjs/react.development.js');
  }
},108,[109,112],"react/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  /** @license React v16.2.0
   * react.production.min.js
   *
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */'use strict';

  var m = require(_dependencyMap[0], "object-assign"),
      n = require(_dependencyMap[1], "fbjs/lib/emptyObject"),
      p = require(_dependencyMap[2], "fbjs/lib/emptyFunction"),
      q = "function" === typeof Symbol && Symbol["for"],
      r = q ? Symbol["for"]("react.element") : 60103,
      t = q ? Symbol["for"]("react.call") : 60104,
      u = q ? Symbol["for"]("react.return") : 60105,
      v = q ? Symbol["for"]("react.portal") : 60106,
      w = q ? Symbol["for"]("react.fragment") : 60107,
      x = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");

  function y(a) {
    for (var b = arguments.length - 1, e = "Minified React error #" + a + "; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\x3d" + a, c = 0; c < b; c++) {
      e += "\x26args[]\x3d" + encodeURIComponent(arguments[c + 1]);
    }

    b = Error(e + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.");
    b.name = "Invariant Violation";
    b.framesToPop = 1;
    throw b;
  }

  var z = {
    isMounted: function isMounted() {
      return !1;
    },
    enqueueForceUpdate: function enqueueForceUpdate() {},
    enqueueReplaceState: function enqueueReplaceState() {},
    enqueueSetState: function enqueueSetState() {}
  };

  function A(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = n;
    this.updater = e || z;
  }

  A.prototype.isReactComponent = {};

  A.prototype.setState = function (a, b) {
    "object" !== typeof a && "function" !== typeof a && null != a ? y("85") : void 0;
    this.updater.enqueueSetState(this, a, b, "setState");
  };

  A.prototype.forceUpdate = function (a) {
    this.updater.enqueueForceUpdate(this, a, "forceUpdate");
  };

  function B(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = n;
    this.updater = e || z;
  }

  function C() {}

  C.prototype = A.prototype;
  var D = B.prototype = new C();
  D.constructor = B;
  m(D, A.prototype);
  D.isPureReactComponent = !0;

  function E(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = n;
    this.updater = e || z;
  }

  var F = E.prototype = new C();
  F.constructor = E;
  m(F, A.prototype);
  F.unstable_isAsyncReactComponent = !0;

  F.render = function () {
    return this.props.children;
  };

  var G = {
    current: null
  },
      H = Object.prototype.hasOwnProperty,
      I = {
    key: !0,
    ref: !0,
    __self: !0,
    __source: !0
  };

  function J(a, b, e) {
    var c,
        d = {},
        g = null,
        k = null;
    if (null != b) for (c in void 0 !== b.ref && (k = b.ref), void 0 !== b.key && (g = "" + b.key), b) {
      H.call(b, c) && !I.hasOwnProperty(c) && (d[c] = b[c]);
    }
    var f = arguments.length - 2;
    if (1 === f) d.children = e;else if (1 < f) {
      for (var h = Array(f), l = 0; l < f; l++) {
        h[l] = arguments[l + 2];
      }

      d.children = h;
    }
    if (a && a.defaultProps) for (c in f = a.defaultProps, f) {
      void 0 === d[c] && (d[c] = f[c]);
    }
    return {
      $$typeof: r,
      type: a,
      key: g,
      ref: k,
      props: d,
      _owner: G.current
    };
  }

  function K(a) {
    return "object" === typeof a && null !== a && a.$$typeof === r;
  }

  function escape(a) {
    var b = {
      "\x3d": "\x3d0",
      ":": "\x3d2"
    };
    return "$" + ("" + a).replace(/[=:]/g, function (a) {
      return b[a];
    });
  }

  var L = /\/+/g,
      M = [];

  function N(a, b, e, c) {
    if (M.length) {
      var d = M.pop();
      d.result = a;
      d.keyPrefix = b;
      d.func = e;
      d.context = c;
      d.count = 0;
      return d;
    }

    return {
      result: a,
      keyPrefix: b,
      func: e,
      context: c,
      count: 0
    };
  }

  function O(a) {
    a.result = null;
    a.keyPrefix = null;
    a.func = null;
    a.context = null;
    a.count = 0;
    10 > M.length && M.push(a);
  }

  function P(a, b, e, c) {
    var d = typeof a;
    if ("undefined" === d || "boolean" === d) a = null;
    var g = !1;
    if (null === a) g = !0;else switch (d) {
      case "string":
      case "number":
        g = !0;
        break;

      case "object":
        switch (a.$$typeof) {
          case r:
          case t:
          case u:
          case v:
            g = !0;
        }

    }
    if (g) return e(c, a, "" === b ? "." + Q(a, 0) : b), 1;
    g = 0;
    b = "" === b ? "." : b + ":";
    if (Array.isArray(a)) for (var k = 0; k < a.length; k++) {
      d = a[k];
      var f = b + Q(d, k);
      g += P(d, f, e, c);
    } else if (null === a || "undefined" === typeof a ? f = null : (f = x && a[x] || a["@@iterator"], f = "function" === typeof f ? f : null), "function" === typeof f) for (a = f.call(a), k = 0; !(d = a.next()).done;) {
      d = d.value, f = b + Q(d, k++), g += P(d, f, e, c);
    } else "object" === d && (e = "" + a, y("31", "[object Object]" === e ? "object with keys {" + Object.keys(a).join(", ") + "}" : e, ""));
    return g;
  }

  function Q(a, b) {
    return "object" === typeof a && null !== a && null != a.key ? escape(a.key) : b.toString(36);
  }

  function R(a, b) {
    a.func.call(a.context, b, a.count++);
  }

  function S(a, b, e) {
    var c = a.result,
        d = a.keyPrefix;
    a = a.func.call(a.context, b, a.count++);
    Array.isArray(a) ? T(a, c, e, p.thatReturnsArgument) : null != a && (K(a) && (b = d + (!a.key || b && b.key === a.key ? "" : ("" + a.key).replace(L, "$\x26/") + "/") + e, a = {
      $$typeof: r,
      type: a.type,
      key: b,
      ref: a.ref,
      props: a.props,
      _owner: a._owner
    }), c.push(a));
  }

  function T(a, b, e, c, d) {
    var g = "";
    null != e && (g = ("" + e).replace(L, "$\x26/") + "/");
    b = N(b, g, c, d);
    null == a || P(a, "", S, b);
    O(b);
  }

  var U = {
    Children: {
      map: function map(a, b, e) {
        if (null == a) return a;
        var c = [];
        T(a, c, null, b, e);
        return c;
      },
      forEach: function forEach(a, b, e) {
        if (null == a) return a;
        b = N(null, null, b, e);
        null == a || P(a, "", R, b);
        O(b);
      },
      count: function count(a) {
        return null == a ? 0 : P(a, "", p.thatReturnsNull, null);
      },
      toArray: function toArray(a) {
        var b = [];
        T(a, b, null, p.thatReturnsArgument);
        return b;
      },
      only: function only(a) {
        K(a) ? void 0 : y("143");
        return a;
      }
    },
    Component: A,
    PureComponent: B,
    unstable_AsyncComponent: E,
    Fragment: w,
    createElement: J,
    cloneElement: function cloneElement(a, b, e) {
      var c = m({}, a.props),
          d = a.key,
          g = a.ref,
          k = a._owner;

      if (null != b) {
        void 0 !== b.ref && (g = b.ref, k = G.current);
        void 0 !== b.key && (d = "" + b.key);
        if (a.type && a.type.defaultProps) var f = a.type.defaultProps;

        for (h in b) {
          H.call(b, h) && !I.hasOwnProperty(h) && (c[h] = void 0 === b[h] && void 0 !== f ? f[h] : b[h]);
        }
      }

      var h = arguments.length - 2;
      if (1 === h) c.children = e;else if (1 < h) {
        f = Array(h);

        for (var l = 0; l < h; l++) {
          f[l] = arguments[l + 2];
        }

        c.children = f;
      }
      return {
        $$typeof: r,
        type: a.type,
        key: d,
        ref: g,
        props: c,
        _owner: k
      };
    },
    createFactory: function createFactory(a) {
      var b = J.bind(null, a);
      b.type = a;
      return b;
    },
    isValidElement: K,
    version: "16.2.0",
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      ReactCurrentOwner: G,
      assign: m
    }
  },
      V = Object.freeze({
    default: U
  }),
      W = V && U || V;
  module.exports = W["default"] ? W["default"] : W;
},109,[110,111,57],"react/cjs/react.production.min.js");
__d(function (global, require, module, exports, _dependencyMap) {
	/*
 object-assign
 (c) Sindre Sorhus
 @license MIT
 */'use strict';

	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			var test1 = new String('abc');
			test1[5] = 'de';

			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			var test2 = {};

			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}

			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});

			if (order2.join('') !== '0123456789') {
				return false;
			}

			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});

			if (Object.keys(babelHelpers.extends({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);

				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};
},110,[],"object-assign/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var emptyObject = {};

  if (process.env.NODE_ENV !== 'production') {
    Object.freeze(emptyObject);
  }

  module.exports = emptyObject;
},111,[],"fbjs/lib/emptyObject.js");
__d(function (global, require, module, exports, _dependencyMap) {
  /** @license React v16.2.0
   * react.development.js
   *
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */'use strict';

  if (process.env.NODE_ENV !== "production") {
    (function () {
      'use strict';

      var _assign = require(_dependencyMap[0], 'object-assign');

      var emptyObject = require(_dependencyMap[1], 'fbjs/lib/emptyObject');

      var invariant = require(_dependencyMap[2], 'fbjs/lib/invariant');

      var warning = require(_dependencyMap[3], 'fbjs/lib/warning');

      var emptyFunction = require(_dependencyMap[4], 'fbjs/lib/emptyFunction');

      var checkPropTypes = require(_dependencyMap[5], 'prop-types/checkPropTypes');

      var ReactVersion = '16.2.0';
      var hasSymbol = typeof Symbol === 'function' && Symbol['for'];
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol['for']('react.element') : 0xeac7;
      var REACT_CALL_TYPE = hasSymbol ? Symbol['for']('react.call') : 0xeac8;
      var REACT_RETURN_TYPE = hasSymbol ? Symbol['for']('react.return') : 0xeac9;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol['for']('react.portal') : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol['for']('react.fragment') : 0xeacb;
      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");
      var FAUX_ITERATOR_SYMBOL = '@@iterator';

      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable === 'undefined') {
          return null;
        }

        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

        if (typeof maybeIterator === 'function') {
          return maybeIterator;
        }

        return null;
      }

      var lowPriorityWarning = function lowPriorityWarning() {};

      {
        var printWarning = function printWarning(format) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          var argIndex = 0;
          var message = 'Warning: ' + format.replace(/%s/g, function () {
            return args[argIndex++];
          });

          if (typeof console !== 'undefined') {
            console.warn(message);
          }

          try {
            throw new Error(message);
          } catch (x) {}
        };

        lowPriorityWarning = function lowPriorityWarning(condition, format) {
          if (format === undefined) {
            throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
          }

          if (!condition) {
            for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
              args[_key2 - 2] = arguments[_key2];
            }

            printWarning.apply(undefined, [format].concat(args));
          }
        };
      }
      var lowPriorityWarning$1 = lowPriorityWarning;
      var didWarnStateUpdateForUnmountedComponent = {};

      function warnNoop(publicInstance, callerName) {
        {
          var constructor = publicInstance.constructor;
          var componentName = constructor && (constructor.displayName || constructor.name) || 'ReactClass';
          var warningKey = componentName + '.' + callerName;

          if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
            return;
          }

          warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op.\n\nPlease check the code for the %s component.', callerName, callerName, componentName);
          didWarnStateUpdateForUnmountedComponent[warningKey] = true;
        }
      }

      var ReactNoopUpdateQueue = {
        isMounted: function isMounted(publicInstance) {
          return false;
        },
        enqueueForceUpdate: function enqueueForceUpdate(publicInstance, callback, callerName) {
          warnNoop(publicInstance, 'forceUpdate');
        },
        enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, 'replaceState');
        },
        enqueueSetState: function enqueueSetState(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, 'setState');
        }
      };

      function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }

      Component.prototype.isReactComponent = {};

      Component.prototype.setState = function (partialState, callback) {
        !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
        this.updater.enqueueSetState(this, partialState, callback, 'setState');
      };

      Component.prototype.forceUpdate = function (callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
      };

      {
        var deprecatedAPIs = {
          isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
          replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
        };

        var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
          Object.defineProperty(Component.prototype, methodName, {
            get: function get() {
              lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
              return undefined;
            }
          });
        };

        for (var fnName in deprecatedAPIs) {
          if (deprecatedAPIs.hasOwnProperty(fnName)) {
            defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
          }
        }
      }

      function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }

      function ComponentDummy() {}

      ComponentDummy.prototype = Component.prototype;
      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
      pureComponentPrototype.constructor = PureComponent;

      _assign(pureComponentPrototype, Component.prototype);

      pureComponentPrototype.isPureReactComponent = true;

      function AsyncComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }

      var asyncComponentPrototype = AsyncComponent.prototype = new ComponentDummy();
      asyncComponentPrototype.constructor = AsyncComponent;

      _assign(asyncComponentPrototype, Component.prototype);

      asyncComponentPrototype.unstable_isAsyncReactComponent = true;

      asyncComponentPrototype.render = function () {
        return this.props.children;
      };

      var ReactCurrentOwner = {
        current: null
      };
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown;
      var specialPropRefWarningShown;

      function hasValidRef(config) {
        {
          if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== undefined;
      }

      function hasValidKey(config) {
        {
          if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== undefined;
      }

      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function warnAboutAccessingKey() {
          if (!specialPropKeyWarningShown) {
            specialPropKeyWarningShown = true;
            warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
          }
        };

        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }

      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function warnAboutAccessingRef() {
          if (!specialPropRefWarningShown) {
            specialPropRefWarningShown = true;
            warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
          }
        };

        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }

      var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type: type,
          key: key,
          ref: ref,
          props: props,
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
          });
          Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });

          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };

      function createElement(type, config, children) {
        var propName;
        var props = {};
        var key = null;
        var ref = null;
        var self = null;
        var source = null;

        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
          }

          if (hasValidKey(config)) {
            key = '' + config.key;
          }

          self = config.__self === undefined ? null : config.__self;
          source = config.__source === undefined ? null : config.__source;

          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
        }

        var childrenLength = arguments.length - 2;

        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);

          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }

          {
            if (Object.freeze) {
              Object.freeze(childArray);
            }
          }
          props.children = childArray;
        }

        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;

          for (propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }
        }

        {
          if (key || ref) {
            if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
              var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }

              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
      }

      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }

      function cloneElement(element, config, children) {
        var propName;

        var props = _assign({}, element.props);

        var key = element.key;
        var ref = element.ref;
        var self = element._self;
        var source = element._source;
        var owner = element._owner;

        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            owner = ReactCurrentOwner.current;
          }

          if (hasValidKey(config)) {
            key = '' + config.key;
          }

          var defaultProps;

          if (element.type && element.type.defaultProps) {
            defaultProps = element.type.defaultProps;
          }

          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              if (config[propName] === undefined && defaultProps !== undefined) {
                props[propName] = defaultProps[propName];
              } else {
                props[propName] = config[propName];
              }
            }
          }
        }

        var childrenLength = arguments.length - 2;

        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);

          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }

          props.children = childArray;
        }

        return ReactElement(element.type, key, ref, self, source, owner, props);
      }

      function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }

      var ReactDebugCurrentFrame = {};
      {
        ReactDebugCurrentFrame.getCurrentStack = null;

        ReactDebugCurrentFrame.getStackAddendum = function () {
          var impl = ReactDebugCurrentFrame.getCurrentStack;

          if (impl) {
            return impl();
          }

          return null;
        };
      }
      var SEPARATOR = '.';
      var SUBSEPARATOR = ':';

      function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
          '=': '=0',
          ':': '=2'
        };
        var escapedString = ('' + key).replace(escapeRegex, function (match) {
          return escaperLookup[match];
        });
        return '$' + escapedString;
      }

      var didWarnAboutMaps = false;
      var userProvidedKeyEscapeRegex = /\/+/g;

      function escapeUserProvidedKey(text) {
        return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
      }

      var POOL_SIZE = 10;
      var traverseContextPool = [];

      function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
        if (traverseContextPool.length) {
          var traverseContext = traverseContextPool.pop();
          traverseContext.result = mapResult;
          traverseContext.keyPrefix = keyPrefix;
          traverseContext.func = mapFunction;
          traverseContext.context = mapContext;
          traverseContext.count = 0;
          return traverseContext;
        } else {
          return {
            result: mapResult,
            keyPrefix: keyPrefix,
            func: mapFunction,
            context: mapContext,
            count: 0
          };
        }
      }

      function releaseTraverseContext(traverseContext) {
        traverseContext.result = null;
        traverseContext.keyPrefix = null;
        traverseContext.func = null;
        traverseContext.context = null;
        traverseContext.count = 0;

        if (traverseContextPool.length < POOL_SIZE) {
          traverseContextPool.push(traverseContext);
        }
      }

      function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
        var type = typeof children;

        if (type === 'undefined' || type === 'boolean') {
          children = null;
        }

        var invokeCallback = false;

        if (children === null) {
          invokeCallback = true;
        } else {
          switch (type) {
            case 'string':
            case 'number':
              invokeCallback = true;
              break;

            case 'object':
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_CALL_TYPE:
                case REACT_RETURN_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
              }

          }
        }

        if (invokeCallback) {
          callback(traverseContext, children, nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
          return 1;
        }

        var child;
        var nextName;
        var subtreeCount = 0;
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

        if (Array.isArray(children)) {
          for (var i = 0; i < children.length; i++) {
            child = children[i];
            nextName = nextNamePrefix + getComponentKey(child, i);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        } else {
          var iteratorFn = getIteratorFn(children);

          if (typeof iteratorFn === 'function') {
            {
              if (iteratorFn === children.entries) {
                warning(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', ReactDebugCurrentFrame.getStackAddendum());
                didWarnAboutMaps = true;
              }
            }
            var iterator = iteratorFn.call(children);
            var step;
            var ii = 0;

            while (!(step = iterator.next()).done) {
              child = step.value;
              nextName = nextNamePrefix + getComponentKey(child, ii++);
              subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
            }
          } else if (type === 'object') {
            var addendum = '';
            {
              addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
            }
            var childrenString = '' + children;
            invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
          }
        }

        return subtreeCount;
      }

      function traverseAllChildren(children, callback, traverseContext) {
        if (children == null) {
          return 0;
        }

        return traverseAllChildrenImpl(children, '', callback, traverseContext);
      }

      function getComponentKey(component, index) {
        if (typeof component === 'object' && component !== null && component.key != null) {
          return escape(component.key);
        }

        return index.toString(36);
      }

      function forEachSingleChild(bookKeeping, child, name) {
        var func = bookKeeping.func,
            context = bookKeeping.context;
        func.call(context, child, bookKeeping.count++);
      }

      function forEachChildren(children, forEachFunc, forEachContext) {
        if (children == null) {
          return children;
        }

        var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
        traverseAllChildren(children, forEachSingleChild, traverseContext);
        releaseTraverseContext(traverseContext);
      }

      function mapSingleChildIntoContext(bookKeeping, child, childKey) {
        var result = bookKeeping.result,
            keyPrefix = bookKeeping.keyPrefix,
            func = bookKeeping.func,
            context = bookKeeping.context;
        var mappedChild = func.call(context, child, bookKeeping.count++);

        if (Array.isArray(mappedChild)) {
          mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
        } else if (mappedChild != null) {
          if (isValidElement(mappedChild)) {
            mappedChild = cloneAndReplaceKey(mappedChild, keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
          }

          result.push(mappedChild);
        }
      }

      function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
        var escapedPrefix = '';

        if (prefix != null) {
          escapedPrefix = escapeUserProvidedKey(prefix) + '/';
        }

        var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
        traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
        releaseTraverseContext(traverseContext);
      }

      function mapChildren(children, func, context) {
        if (children == null) {
          return children;
        }

        var result = [];
        mapIntoWithKeyPrefixInternal(children, result, null, func, context);
        return result;
      }

      function countChildren(children, context) {
        return traverseAllChildren(children, emptyFunction.thatReturnsNull, null);
      }

      function toArray(children) {
        var result = [];
        mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
        return result;
      }

      function onlyChild(children) {
        !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
        return children;
      }

      var describeComponentFrame = function describeComponentFrame(name, source, ownerName) {
        return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
      };

      function getComponentName(fiber) {
        var type = fiber.type;

        if (typeof type === 'string') {
          return type;
        }

        if (typeof type === 'function') {
          return type.displayName || type.name;
        }

        return null;
      }

      {
        var currentlyValidatingElement = null;
        var propTypesMisspellWarningShown = false;

        var getDisplayName = function getDisplayName(element) {
          if (element == null) {
            return '#empty';
          } else if (typeof element === 'string' || typeof element === 'number') {
            return '#text';
          } else if (typeof element.type === 'string') {
            return element.type;
          } else if (element.type === REACT_FRAGMENT_TYPE) {
            return 'React.Fragment';
          } else {
            return element.type.displayName || element.type.name || 'Unknown';
          }
        };

        var getStackAddendum = function getStackAddendum() {
          var stack = '';

          if (currentlyValidatingElement) {
            var name = getDisplayName(currentlyValidatingElement);
            var owner = currentlyValidatingElement._owner;
            stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner));
          }

          stack += ReactDebugCurrentFrame.getStackAddendum() || '';
          return stack;
        };

        var VALID_FRAGMENT_PROPS = new Map([['children', true], ['key', true]]);
      }

      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentName(ReactCurrentOwner.current);

          if (name) {
            return '\n\nCheck the render method of `' + name + '`.';
          }
        }

        return '';
      }

      function getSourceInfoErrorAddendum(elementProps) {
        if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
          var source = elementProps.__source;
          var fileName = source.fileName.replace(/^.*[\\\/]/, '');
          var lineNumber = source.lineNumber;
          return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }

        return '';
      }

      var ownerHasKeyUseWarning = {};

      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();

        if (!info) {
          var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

          if (parentName) {
            info = '\n\nCheck the top-level render call using <' + parentName + '>.';
          }
        }

        return info;
      }

      function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }

        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }

        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = '';

        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
          childOwner = ' It was passed a child from ' + getComponentName(element._owner) + '.';
        }

        currentlyValidatingElement = element;
        {
          warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, getStackAddendum());
        }
        currentlyValidatingElement = null;
      }

      function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') {
          return;
        }

        if (Array.isArray(node)) {
          for (var i = 0; i < node.length; i++) {
            var child = node[i];

            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node)) {
          if (node._store) {
            node._store.validated = true;
          }
        } else if (node) {
          var iteratorFn = getIteratorFn(node);

          if (typeof iteratorFn === 'function') {
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step;

              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }

      function validatePropTypes(element) {
        var componentClass = element.type;

        if (typeof componentClass !== 'function') {
          return;
        }

        var name = componentClass.displayName || componentClass.name;
        var propTypes = componentClass.propTypes;

        if (propTypes) {
          currentlyValidatingElement = element;
          checkPropTypes(propTypes, element.props, 'prop', name, getStackAddendum);
          currentlyValidatingElement = null;
        } else if (componentClass.PropTypes !== undefined && !propTypesMisspellWarningShown) {
          propTypesMisspellWarningShown = true;
          warning(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
        }

        if (typeof componentClass.getDefaultProps === 'function') {
          warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
        }
      }

      function validateFragmentProps(fragment) {
        currentlyValidatingElement = fragment;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = Object.keys(fragment.props)[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var key = _step.value;

            if (!VALID_FRAGMENT_PROPS.has(key)) {
              warning(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.%s', key, getStackAddendum());
              break;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        if (fragment.ref !== null) {
          warning(false, 'Invalid attribute `ref` supplied to `React.Fragment`.%s', getStackAddendum());
        }

        currentlyValidatingElement = null;
      }

      function createElementWithValidation(type, props, children) {
        var validType = typeof type === 'string' || typeof type === 'function' || typeof type === 'symbol' || typeof type === 'number';

        if (!validType) {
          var info = '';

          if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
            info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
          }

          var sourceInfo = getSourceInfoErrorAddendum(props);

          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }

          info += getStackAddendum() || '';
          warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info);
        }

        var element = createElement.apply(this, arguments);

        if (element == null) {
          return element;
        }

        if (validType) {
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], type);
          }
        }

        if (typeof type === 'symbol' && type === REACT_FRAGMENT_TYPE) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }

        return element;
      }

      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        {
          Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function get() {
              lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
              Object.defineProperty(this, 'type', {
                value: type
              });
              return type;
            }
          });
        }
        return validatedFactory;
      }

      function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);

        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], newElement.type);
        }

        validatePropTypes(newElement);
        return newElement;
      }

      var React = {
        Children: {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray: toArray,
          only: onlyChild
        },
        Component: Component,
        PureComponent: PureComponent,
        unstable_AsyncComponent: AsyncComponent,
        Fragment: REACT_FRAGMENT_TYPE,
        createElement: createElementWithValidation,
        cloneElement: cloneElementWithValidation,
        createFactory: createFactoryWithValidation,
        isValidElement: isValidElement,
        version: ReactVersion,
        __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
          ReactCurrentOwner: ReactCurrentOwner,
          assign: _assign
        }
      };
      {
        _assign(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
          ReactDebugCurrentFrame: ReactDebugCurrentFrame,
          ReactComponentTreeHook: {}
        });
      }
      var React$2 = Object.freeze({
        default: React
      });
      var React$3 = React$2 && React || React$2;
      var react = React$3['default'] ? React$3['default'] : React$3;
      module.exports = react;
    })();
  }
},112,[110,111,13,56,57,113],"react/cjs/react.development.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  if (process.env.NODE_ENV !== 'production') {
    var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

    var warning = require(_dependencyMap[1], 'fbjs/lib/warning');

    var ReactPropTypesSecret = require(_dependencyMap[2], './lib/ReactPropTypesSecret');

    var loggedTypeFailures = {};
  }

  function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    if (process.env.NODE_ENV !== 'production') {
      for (var typeSpecName in typeSpecs) {
        if (typeSpecs.hasOwnProperty(typeSpecName)) {
          var error;

          try {
            invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
          } catch (ex) {
            error = ex;
          }

          warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);

          if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : '';
            warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
          }
        }
      }
    }
  }

  module.exports = checkPropTypes;
},113,[13,56,114],"prop-types/checkPropTypes.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
  module.exports = ReactPropTypesSecret;
},114,[],"prop-types/lib/ReactPropTypesSecret.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = require(_dependencyMap[0], 'Platform');

  var UIManager = require(_dependencyMap[1], 'UIManager');

  var TextInputState = {
    _currentlyFocusedID: null,
    currentlyFocusedField: function currentlyFocusedField() {
      return this._currentlyFocusedID;
    },
    focusTextInput: function focusTextInput(textFieldID) {
      if (this._currentlyFocusedID !== textFieldID && textFieldID !== null) {
        this._currentlyFocusedID = textFieldID;

        if (Platform.OS === 'ios') {
          UIManager.focus(textFieldID);
        } else if (Platform.OS === 'android') {
          UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.focusTextInput, null);
        }
      }
    },
    blurTextInput: function blurTextInput(textFieldID) {
      if (this._currentlyFocusedID === textFieldID && textFieldID !== null) {
        this._currentlyFocusedID = null;

        if (Platform.OS === 'ios') {
          UIManager.blur(textFieldID);
        } else if (Platform.OS === 'android') {
          UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.blurTextInput, null);
        }
      }
    }
  };
  module.exports = TextInputState;
},115,[52,107],"TextInputState");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var deepDiffer = function deepDiffer(one, two) {
    if (one === two) {
      return false;
    }

    if (typeof one === 'function' && typeof two === 'function') {
      return false;
    }

    if (typeof one !== 'object' || one === null) {
      return one !== two;
    }

    if (typeof two !== 'object' || two === null) {
      return true;
    }

    if (one.constructor !== two.constructor) {
      return true;
    }

    if (Array.isArray(one)) {
      var len = one.length;

      if (two.length !== len) {
        return true;
      }

      for (var ii = 0; ii < len; ii++) {
        if (deepDiffer(one[ii], two[ii])) {
          return true;
        }
      }
    } else {
      for (var key in one) {
        if (deepDiffer(one[key], two[key])) {
          return true;
        }
      }

      for (var twoKey in two) {
        if (one[twoKey] === undefined && two[twoKey] !== undefined) {
          return true;
        }
      }
    }

    return false;
  };

  module.exports = deepDiffer;
},116,[],"deepDiffer");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function is(x, y) {
    if (x === y) {
      return x !== 0 || y !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }

  function shallowEqual(objA, objB) {
    if (is(objA, objB)) {
      return true;
    }

    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
      return false;
    }

    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);

    if (keysA.length !== keysB.length) {
      return false;
    }

    for (var i = 0; i < keysA.length; i++) {
      if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
        return false;
      }
    }

    return true;
  }

  module.exports = shallowEqual;
},117,[],"fbjs/lib/shallowEqual.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function deepFreezeAndThrowOnMutationInDev(object) {
    if (__DEV__) {
      if (typeof object !== 'object' || object === null || Object.isFrozen(object) || Object.isSealed(object)) {
        return;
      }

      var keys = Object.keys(object);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];

        if (object.hasOwnProperty(key)) {
          object.__defineGetter__(key, identity.bind(null, object[key]));

          object.__defineSetter__(key, throwOnImmutableMutation.bind(null, key));
        }
      }

      Object.freeze(object);
      Object.seal(object);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];

        if (object.hasOwnProperty(key)) {
          deepFreezeAndThrowOnMutationInDev(object[key]);
        }
      }
    }
  }

  function throwOnImmutableMutation(key, value) {
    throw Error('You attempted to set the key `' + key + '` with the value `' + JSON.stringify(value) + '` on an object that is meant to be immutable ' + 'and has been frozen.');
  }

  function identity(value) {
    return value;
  }

  module.exports = deepFreezeAndThrowOnMutationInDev;
},118,[],"deepFreezeAndThrowOnMutationInDev");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ReactFeatureFlags = {
    debugRenderPhaseSideEffects: false
  };
  module.exports = ReactFeatureFlags;
},119,[],"ReactFeatureFlags");
__d(function (global, require, module, exports, _dependencyMap) {
  "use strict";

  require(_dependencyMap[0], "InitializeCore");

  var invariant = require(_dependencyMap[1], "fbjs/lib/invariant"),
      emptyFunction = require(_dependencyMap[2], "fbjs/lib/emptyFunction"),
      RCTEventEmitter = require(_dependencyMap[3], "RCTEventEmitter"),
      UIManager = require(_dependencyMap[4], "UIManager"),
      React = require(_dependencyMap[5], "react"),
      ExceptionsManager = require(_dependencyMap[6], "ExceptionsManager"),
      TextInputState = require(_dependencyMap[7], "TextInputState"),
      deepDiffer = require(_dependencyMap[8], "deepDiffer"),
      flattenStyle = require(_dependencyMap[9], "flattenStyle"),
      emptyObject = require(_dependencyMap[10], "fbjs/lib/emptyObject"),
      shallowEqual = require(_dependencyMap[11], "fbjs/lib/shallowEqual"),
      ReactErrorUtils = {
    _caughtError: null,
    _hasCaughtError: !1,
    _rethrowError: null,
    _hasRethrowError: !1,
    injection: {
      injectErrorUtils: function injectErrorUtils(injectedErrorUtils) {
        invariant("function" === typeof injectedErrorUtils.invokeGuardedCallback, "Injected invokeGuardedCallback() must be a function.");
        _invokeGuardedCallback = injectedErrorUtils.invokeGuardedCallback;
      }
    },
    invokeGuardedCallback: function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
      _invokeGuardedCallback.apply(ReactErrorUtils, arguments);
    },
    invokeGuardedCallbackAndCatchFirstError: function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
      ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);

      if (ReactErrorUtils.hasCaughtError()) {
        var error = ReactErrorUtils.clearCaughtError();
        ReactErrorUtils._hasRethrowError || (ReactErrorUtils._hasRethrowError = !0, ReactErrorUtils._rethrowError = error);
      }
    },
    rethrowCaughtError: function rethrowCaughtError() {
      return _rethrowCaughtError.apply(ReactErrorUtils, arguments);
    },
    hasCaughtError: function hasCaughtError() {
      return ReactErrorUtils._hasCaughtError;
    },
    clearCaughtError: function clearCaughtError() {
      if (ReactErrorUtils._hasCaughtError) {
        var error = ReactErrorUtils._caughtError;
        ReactErrorUtils._caughtError = null;
        ReactErrorUtils._hasCaughtError = !1;
        return error;
      }

      invariant(!1, "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
  };

  function _invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    ReactErrorUtils._hasCaughtError = !1;
    ReactErrorUtils._caughtError = null;
    var funcArgs = Array.prototype.slice.call(arguments, 3);

    try {
      func.apply(context, funcArgs);
    } catch (error) {
      ReactErrorUtils._caughtError = error, ReactErrorUtils._hasCaughtError = !0;
    }
  }

  function _rethrowCaughtError() {
    if (ReactErrorUtils._hasRethrowError) {
      var error = ReactErrorUtils._rethrowError;
      ReactErrorUtils._rethrowError = null;
      ReactErrorUtils._hasRethrowError = !1;
      throw error;
    }
  }

  var eventPluginOrder = null,
      namesToPlugins = {};

  function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName],
          pluginIndex = eventPluginOrder.indexOf(pluginName);
      invariant(-1 < pluginIndex, "EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.", pluginName);

      if (!plugins[pluginIndex]) {
        invariant(pluginModule.extractEvents, "EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.", pluginName);
        plugins[pluginIndex] = pluginModule;
        pluginIndex = pluginModule.eventTypes;

        for (var eventName in pluginIndex) {
          var JSCompiler_inline_result = void 0;
          var dispatchConfig = pluginIndex[eventName],
              pluginModule$jscomp$0 = pluginModule,
              eventName$jscomp$0 = eventName;
          invariant(!eventNameDispatchConfigs.hasOwnProperty(eventName$jscomp$0), "EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.", eventName$jscomp$0);
          eventNameDispatchConfigs[eventName$jscomp$0] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

          if (phasedRegistrationNames) {
            for (JSCompiler_inline_result in phasedRegistrationNames) {
              phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule$jscomp$0, eventName$jscomp$0);
            }

            JSCompiler_inline_result = !0;
          } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule$jscomp$0, eventName$jscomp$0), JSCompiler_inline_result = !0) : JSCompiler_inline_result = !1;

          invariant(JSCompiler_inline_result, "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", eventName, pluginName);
        }
      }
    }
  }

  function publishRegistrationName(registrationName, pluginModule) {
    invariant(!registrationNameModules[registrationName], "EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
    registrationNameModules[registrationName] = pluginModule;
  }

  var plugins = [],
      eventNameDispatchConfigs = {},
      registrationNameModules = {},
      getFiberCurrentPropsFromNode = null,
      getInstanceFromNode = null,
      getNodeFromInstance = null;

  function isEndish(topLevelType) {
    return "topMouseUp" === topLevelType || "topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType;
  }

  function isMoveish(topLevelType) {
    return "topMouseMove" === topLevelType || "topTouchMove" === topLevelType;
  }

  function isStartish(topLevelType) {
    return "topMouseDown" === topLevelType || "topTouchStart" === topLevelType;
  }

  function executeDispatch(event, simulated, listener, inst) {
    simulated = event.type || "unknown-event";
    event.currentTarget = getNodeFromInstance(inst);
    ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError(simulated, listener, void 0, event);
    event.currentTarget = null;
  }

  function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    invariant(!Array.isArray(dispatchListener), "executeDirectDispatch(...): Invalid `event`.");
    event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
  }

  function accumulateInto(current, next) {
    invariant(null != next, "accumulateInto(...): Accumulated items must not be null or undefined.");
    if (null == current) return next;

    if (Array.isArray(current)) {
      if (Array.isArray(next)) return current.push.apply(current, next), current;
      current.push(next);
      return current;
    }

    return Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
  }

  var eventQueue = null;

  function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
      var dispatchListeners = e._dispatchListeners,
          dispatchInstances = e._dispatchInstances;
      if (Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++) {
        executeDispatch(e, !1, dispatchListeners[i], dispatchInstances[i]);
      } else dispatchListeners && executeDispatch(e, !1, dispatchListeners, dispatchInstances);
      e._dispatchListeners = null;
      e._dispatchInstances = null;
      e.isPersistent() || e.constructor.release(e);
    }
  }

  var injection = {
    injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
      invariant(!eventPluginOrder, "EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
      recomputePluginOrdering();
    },
    injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
      var isOrderingDirty = !1,
          pluginName;

      for (pluginName in injectedNamesToPlugins) {
        if (injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          var pluginModule = injectedNamesToPlugins[pluginName];
          namesToPlugins.hasOwnProperty(pluginName) && namesToPlugins[pluginName] === pluginModule || (invariant(!namesToPlugins[pluginName], "EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.", pluginName), namesToPlugins[pluginName] = pluginModule, isOrderingDirty = !0);
        }
      }

      isOrderingDirty && recomputePluginOrdering();
    }
  };

  function getListener(inst, registrationName) {
    var listener = inst.stateNode;
    if (!listener) return null;
    var props = getFiberCurrentPropsFromNode(listener);
    if (!props) return null;
    listener = props[registrationName];

    a: switch (registrationName) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
        (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
        inst = !props;
        break a;

      default:
        inst = !1;
    }

    if (inst) return null;
    invariant(!listener || "function" === typeof listener, "Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
    return listener;
  }

  function getParent(inst) {
    do {
      inst = inst["return"];
    } while (inst && 5 !== inst.tag);

    return inst ? inst : null;
  }

  function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
      path.push(inst), inst = getParent(inst);
    }

    for (inst = path.length; 0 < inst--;) {
      fn(path[inst], "captured", arg);
    }

    for (inst = 0; inst < path.length; inst++) {
      fn(path[inst], "bubbled", arg);
    }
  }

  function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }

  function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }

  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      targetInst = targetInst ? getParent(targetInst) : null;
      traverseTwoPhase(targetInst, accumulateDirectionalDispatches, event);
    }
  }

  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;

      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }

  var shouldBeReleasedProperties = "dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),
      EventInterface = {
    type: null,
    target: null,
    currentTarget: emptyFunction.thatReturnsNull,
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };

  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    dispatchConfig = this.constructor.Interface;

    for (var propName in dispatchConfig) {
      dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    }

    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : !1 === nativeEvent.returnValue) ? emptyFunction.thatReturnsTrue : emptyFunction.thatReturnsFalse;
    this.isPropagationStopped = emptyFunction.thatReturnsFalse;
    return this;
  }

  babelHelpers.extends(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
      this.defaultPrevented = !0;
      var event = this.nativeEvent;
      event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = !1), this.isDefaultPrevented = emptyFunction.thatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
      var event = this.nativeEvent;
      event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = !0), this.isPropagationStopped = emptyFunction.thatReturnsTrue);
    },
    persist: function persist() {
      this.isPersistent = emptyFunction.thatReturnsTrue;
    },
    isPersistent: emptyFunction.thatReturnsFalse,
    destructor: function destructor() {
      var Interface = this.constructor.Interface,
          propName;

      for (propName in Interface) {
        this[propName] = null;
      }

      for (Interface = 0; Interface < shouldBeReleasedProperties.length; Interface++) {
        this[shouldBeReleasedProperties[Interface]] = null;
      }
    }
  });
  SyntheticEvent.Interface = EventInterface;

  SyntheticEvent.augmentClass = function (Class, Interface) {
    function E() {}

    E.prototype = this.prototype;
    var prototype = new E();
    babelHelpers.extends(prototype, Class.prototype);
    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = babelHelpers.extends({}, this.Interface, Interface);
    Class.augmentClass = this.augmentClass;
    addEventPoolingTo(Class);
  };

  addEventPoolingTo(SyntheticEvent);

  function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
      var instance = this.eventPool.pop();
      this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }

    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }

  function releasePooledEvent(event) {
    invariant(event instanceof this, "Trying to release an event instance  into a pool of a different type.");
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
  }

  function addEventPoolingTo(EventConstructor) {
    EventConstructor.eventPool = [];
    EventConstructor.getPooled = getPooledEvent;
    EventConstructor.release = releasePooledEvent;
  }

  function ResponderSyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }

  SyntheticEvent.augmentClass(ResponderSyntheticEvent, {
    touchHistory: function touchHistory() {
      return null;
    }
  });
  var touchBank = [],
      touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
  };

  function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
  }

  function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    invariant(null != _ref, "Touch object is missing identifier.");
    return _ref;
  }

  function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = !0, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
      touchActive: !0,
      startPageX: touch.pageX,
      startPageY: touch.pageY,
      startTimeStamp: timestampForTouch(touch),
      currentPageX: touch.pageX,
      currentPageY: touch.pageY,
      currentTimeStamp: timestampForTouch(touch),
      previousPageX: touch.pageX,
      previousPageY: touch.pageY,
      previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  }

  function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !0, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch move without a touch start.\nTouch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !1, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch end without a touch start.\nTouch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function printTouch(touch) {
    return JSON.stringify({
      identifier: touch.identifier,
      pageX: touch.pageX,
      pageY: touch.pageY,
      timestamp: timestampForTouch(touch)
    });
  }

  function printTouchBank() {
    var printed = JSON.stringify(touchBank.slice(0, 20));
    20 < touchBank.length && (printed += " (original size: " + touchBank.length + ")");
    return printed;
  }

  var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
      if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if (isEndish(topLevelType) && (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches)) for (topLevelType = 0; topLevelType < touchBank.length; topLevelType++) {
        if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
          touchHistory.indexOfSingleActiveTouch = topLevelType;
          break;
        }
      }
    },
    touchHistory: touchHistory
  };

  function accumulate(current, next) {
    invariant(null != next, "accumulate(...): Accumulated items must be not be null or undefined.");
    return null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  var responderInst = null,
      trackedTouchCount = 0,
      previousActiveTouches = 0;

  function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }

  var eventTypes = {
    startShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onStartShouldSetResponder",
        captured: "onStartShouldSetResponderCapture"
      }
    },
    scrollShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onScrollShouldSetResponder",
        captured: "onScrollShouldSetResponderCapture"
      }
    },
    selectionChangeShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onSelectionChangeShouldSetResponder",
        captured: "onSelectionChangeShouldSetResponderCapture"
      }
    },
    moveShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onMoveShouldSetResponder",
        captured: "onMoveShouldSetResponderCapture"
      }
    },
    responderStart: {
      registrationName: "onResponderStart"
    },
    responderMove: {
      registrationName: "onResponderMove"
    },
    responderEnd: {
      registrationName: "onResponderEnd"
    },
    responderRelease: {
      registrationName: "onResponderRelease"
    },
    responderTerminationRequest: {
      registrationName: "onResponderTerminationRequest"
    },
    responderGrant: {
      registrationName: "onResponderGrant"
    },
    responderReject: {
      registrationName: "onResponderReject"
    },
    responderTerminate: {
      registrationName: "onResponderTerminate"
    }
  },
      ResponderEventPlugin = {
    _getResponder: function _getResponder() {
      return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (isStartish(topLevelType)) trackedTouchCount += 1;else if (isEndish(topLevelType)) if (0 <= trackedTouchCount) --trackedTouchCount;else return console.error("Ended a touch event which was not counted in `trackedTouchCount`."), null;
      ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);

      if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
        var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
        if (responderInst) b: {
          var JSCompiler_temp = responderInst;

          for (var depthA = 0, tempA = JSCompiler_temp; tempA; tempA = getParent(tempA)) {
            depthA++;
          }

          tempA = 0;

          for (var tempB = targetInst; tempB; tempB = getParent(tempB)) {
            tempA++;
          }

          for (; 0 < depthA - tempA;) {
            JSCompiler_temp = getParent(JSCompiler_temp), depthA--;
          }

          for (; 0 < tempA - depthA;) {
            targetInst = getParent(targetInst), tempA--;
          }

          for (; depthA--;) {
            if (JSCompiler_temp === targetInst || JSCompiler_temp === targetInst.alternate) break b;
            JSCompiler_temp = getParent(JSCompiler_temp);
            targetInst = getParent(targetInst);
          }

          JSCompiler_temp = null;
        } else JSCompiler_temp = targetInst;
        targetInst = JSCompiler_temp === responderInst;
        JSCompiler_temp = ResponderSyntheticEvent.getPooled(shouldSetEventType, JSCompiler_temp, nativeEvent, nativeEventTarget);
        JSCompiler_temp.touchHistory = ResponderTouchHistoryStore.touchHistory;
        targetInst ? forEachAccumulated(JSCompiler_temp, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(JSCompiler_temp, accumulateTwoPhaseDispatchesSingle);

        b: {
          shouldSetEventType = JSCompiler_temp._dispatchListeners;
          targetInst = JSCompiler_temp._dispatchInstances;
          if (Array.isArray(shouldSetEventType)) for (depthA = 0; depthA < shouldSetEventType.length && !JSCompiler_temp.isPropagationStopped(); depthA++) {
            if (shouldSetEventType[depthA](JSCompiler_temp, targetInst[depthA])) {
              shouldSetEventType = targetInst[depthA];
              break b;
            }
          } else if (shouldSetEventType && shouldSetEventType(JSCompiler_temp, targetInst)) {
            shouldSetEventType = targetInst;
            break b;
          }
          shouldSetEventType = null;
        }

        JSCompiler_temp._dispatchInstances = null;
        JSCompiler_temp._dispatchListeners = null;
        JSCompiler_temp.isPersistent() || JSCompiler_temp.constructor.release(JSCompiler_temp);
        if (shouldSetEventType && shouldSetEventType !== responderInst) {
          if (JSCompiler_temp = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, shouldSetEventType, nativeEvent, nativeEventTarget), JSCompiler_temp.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp, accumulateDirectDispatchesSingle), targetInst = !0 === executeDirectDispatch(JSCompiler_temp), responderInst) {
            if (depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), depthA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(depthA, accumulateDirectDispatchesSingle), tempA = !depthA._dispatchListeners || executeDirectDispatch(depthA), depthA.isPersistent() || depthA.constructor.release(depthA), tempA) {
              depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
              depthA.touchHistory = ResponderTouchHistoryStore.touchHistory;
              forEachAccumulated(depthA, accumulateDirectDispatchesSingle);
              var JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [JSCompiler_temp, depthA]);
              changeResponder(shouldSetEventType, targetInst);
            } else shouldSetEventType = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, shouldSetEventType, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
          } else JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, JSCompiler_temp), changeResponder(shouldSetEventType, targetInst);
        } else JSCompiler_temp$jscomp$0 = null;
      } else JSCompiler_temp$jscomp$0 = null;

      shouldSetEventType = responderInst && isStartish(topLevelType);
      JSCompiler_temp = responderInst && isMoveish(topLevelType);
      targetInst = responderInst && isEndish(topLevelType);
      if (shouldSetEventType = shouldSetEventType ? eventTypes.responderStart : JSCompiler_temp ? eventTypes.responderMove : targetInst ? eventTypes.responderEnd : null) shouldSetEventType = ResponderSyntheticEvent.getPooled(shouldSetEventType, responderInst, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
      shouldSetEventType = responderInst && "topTouchCancel" === topLevelType;
      if (topLevelType = responderInst && !shouldSetEventType && isEndish(topLevelType)) a: {
        if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) for (JSCompiler_temp = 0; JSCompiler_temp < topLevelType.length; JSCompiler_temp++) {
          if (targetInst = topLevelType[JSCompiler_temp].target, null !== targetInst && void 0 !== targetInst && 0 !== targetInst) {
            depthA = getInstanceFromNode(targetInst);

            b: {
              for (targetInst = responderInst; depthA;) {
                if (targetInst === depthA || targetInst === depthA.alternate) {
                  targetInst = !0;
                  break b;
                }

                depthA = getParent(depthA);
              }

              targetInst = !1;
            }

            if (targetInst) {
              topLevelType = !1;
              break a;
            }
          }
        }
        topLevelType = !0;
      }
      if (topLevelType = shouldSetEventType ? eventTypes.responderTerminate : topLevelType ? eventTypes.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, nativeEvent), changeResponder(null);
      nativeEvent = ResponderTouchHistoryStore.touchHistory.numberActiveTouches;
      if (ResponderEventPlugin.GlobalInteractionHandler && nativeEvent !== previousActiveTouches) ResponderEventPlugin.GlobalInteractionHandler.onChange(nativeEvent);
      previousActiveTouches = nativeEvent;
      return JSCompiler_temp$jscomp$0;
    },
    GlobalResponderHandler: null,
    GlobalInteractionHandler: null,
    injection: {
      injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
        ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
      },
      injectGlobalInteractionHandler: function injectGlobalInteractionHandler(GlobalInteractionHandler) {
        ResponderEventPlugin.GlobalInteractionHandler = GlobalInteractionHandler;
      }
    }
  },
      customBubblingEventTypes = {},
      customDirectEventTypes = {},
      ReactNativeBridgeEventPlugin = {
    eventTypes: {},
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
          directDispatchConfig = customDirectEventTypes[topLevelType];
      invariant(bubbleDispatchConfig || directDispatchConfig, 'Unsupported top level event type "%s" dispatched', topLevelType);
      topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
      if (bubbleDispatchConfig) forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle);else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle);else return null;
      return topLevelType;
    },
    processEventTypes: function processEventTypes(viewConfig) {
      var bubblingEventTypes = viewConfig.bubblingEventTypes;
      viewConfig = viewConfig.directEventTypes;
      if (null != bubblingEventTypes) for (var _topLevelType in bubblingEventTypes) {
        null == customBubblingEventTypes[_topLevelType] && (ReactNativeBridgeEventPlugin.eventTypes[_topLevelType] = customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType]);
      }
      if (null != viewConfig) for (var _topLevelType2 in viewConfig) {
        null == customDirectEventTypes[_topLevelType2] && (ReactNativeBridgeEventPlugin.eventTypes[_topLevelType2] = customDirectEventTypes[_topLevelType2] = viewConfig[_topLevelType2]);
      }
    }
  },
      instanceCache = {},
      instanceProps = {};

  function uncacheFiberNode(tag) {
    delete instanceCache[tag];
    delete instanceProps[tag];
  }

  function getInstanceFromTag(tag) {
    return instanceCache[tag] || null;
  }

  var ReactNativeComponentTree = Object.freeze({
    precacheFiberNode: function precacheFiberNode(hostInst, tag) {
      instanceCache[tag] = hostInst;
    },
    uncacheFiberNode: uncacheFiberNode,
    getClosestInstanceFromNode: getInstanceFromTag,
    getInstanceFromNode: getInstanceFromTag,
    getNodeFromInstance: function getNodeFromInstance(inst) {
      inst = inst.stateNode._nativeTag;
      invariant(inst, "All native instances should have a tag.");
      return inst;
    },
    getFiberCurrentPropsFromNode: function getFiberCurrentPropsFromNode(stateNode) {
      return instanceProps[stateNode._nativeTag] || null;
    },
    updateFiberProps: function updateFiberProps(tag, props) {
      instanceProps[tag] = props;
    }
  }),
      restoreTarget = null,
      restoreQueue = null;

  function restoreStateOfTarget(target) {
    if (target = getInstanceFromNode(target)) {
      invariant(null, "Fiber needs to be injected to handle a fiber target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
      var props = getFiberCurrentPropsFromNode(target.stateNode);
      null.restoreControlledState(target.stateNode, target.type, props);
    }
  }

  function fiberBatchedUpdates(fn, bookkeeping) {
    return fn(bookkeeping);
  }

  var isNestingBatched = !1;

  function batchedUpdates(fn, bookkeeping) {
    if (isNestingBatched) return fiberBatchedUpdates(fn, bookkeeping);
    isNestingBatched = !0;

    try {
      return fiberBatchedUpdates(fn, bookkeeping);
    } finally {
      if (isNestingBatched = !1, restoreTarget && (bookkeeping = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(bookkeeping), fn)) for (bookkeeping = 0; bookkeeping < fn.length; bookkeeping++) {
        restoreStateOfTarget(fn[bookkeeping]);
      }
    }
  }

  function handleTopLevel(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    for (var events, i = 0; i < plugins.length; i++) {
      var possiblePlugin = plugins[i];
      possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget)) && (events = accumulateInto(events, possiblePlugin));
    }

    events && (eventQueue = accumulateInto(eventQueue, events));
    topLevelType = eventQueue;
    eventQueue = null;
    topLevelType && (forEachAccumulated(topLevelType, executeDispatchesAndReleaseTopLevel), invariant(!eventQueue, "processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."), ReactErrorUtils.rethrowCaughtError());
  }

  var ReactNativeTagHandles = {
    tagsStartAt: 1,
    tagCount: 1,
    allocateTag: function allocateTag() {
      for (; this.reactTagIsNativeTopRootID(ReactNativeTagHandles.tagCount);) {
        ReactNativeTagHandles.tagCount++;
      }

      var tag = ReactNativeTagHandles.tagCount;
      ReactNativeTagHandles.tagCount++;
      return tag;
    },
    assertRootTag: function assertRootTag(tag) {
      invariant(this.reactTagIsNativeTopRootID(tag), "Expect a native root tag, instead got %s", tag);
    },
    reactTagIsNativeTopRootID: function reactTagIsNativeTopRootID(reactTag) {
      return 1 === reactTag % 10;
    }
  },
      EMPTY_NATIVE_EVENT = {};

  function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
    var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT,
        inst = getInstanceFromTag(rootNodeID);
    batchedUpdates(function () {
      handleTopLevel(topLevelType, inst, nativeEvent, nativeEvent.target);
    });
  }

  var ReactNativeEventEmitter = Object.freeze({
    getListener: getListener,
    registrationNames: registrationNameModules,
    _receiveRootNodeIDEvent: _receiveRootNodeIDEvent,
    receiveEvent: function receiveEvent(rootNodeID, topLevelType, nativeEventParam) {
      _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    },
    receiveTouches: function receiveTouches(eventTopLevelType, touches, changedIndices) {
      if ("topTouchEnd" === eventTopLevelType || "topTouchCancel" === eventTopLevelType) {
        var JSCompiler_temp = [];

        for (var i = 0; i < changedIndices.length; i++) {
          var index = changedIndices[i];
          JSCompiler_temp.push(touches[index]);
          touches[index] = null;
        }

        for (i = changedIndices = 0; i < touches.length; i++) {
          index = touches[i], null !== index && (touches[changedIndices++] = index);
        }

        touches.length = changedIndices;
      } else for (JSCompiler_temp = [], i = 0; i < changedIndices.length; i++) {
        JSCompiler_temp.push(touches[changedIndices[i]]);
      }

      for (changedIndices = 0; changedIndices < JSCompiler_temp.length; changedIndices++) {
        i = JSCompiler_temp[changedIndices];
        i.changedTouches = JSCompiler_temp;
        i.touches = touches;
        index = null;
        var target = i.target;
        null === target || void 0 === target || target < ReactNativeTagHandles.tagsStartAt || (index = target);

        _receiveRootNodeIDEvent(index, eventTopLevelType, i);
      }
    },
    handleTopLevel: handleTopLevel
  });
  RCTEventEmitter.register(ReactNativeEventEmitter);
  injection.injectEventPluginOrder(["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"]);
  getFiberCurrentPropsFromNode = ReactNativeComponentTree.getFiberCurrentPropsFromNode;
  getInstanceFromNode = ReactNativeComponentTree.getInstanceFromNode;
  getNodeFromInstance = ReactNativeComponentTree.getNodeFromInstance;
  ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function onChange(from, to, blockNativeResponder) {
      null !== to ? UIManager.setJSResponder(to.stateNode._nativeTag, blockNativeResponder) : UIManager.clearJSResponder();
    }
  });
  injection.injectEventPluginsByName({
    ResponderEventPlugin: ResponderEventPlugin,
    ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin
  });

  function defaultShowDialog() {
    return !0;
  }

  var showDialog = defaultShowDialog,
      hasSymbol = "function" === typeof Symbol && Symbol["for"],
      REACT_ELEMENT_TYPE = hasSymbol ? Symbol["for"]("react.element") : 60103,
      REACT_CALL_TYPE = hasSymbol ? Symbol["for"]("react.call") : 60104,
      REACT_RETURN_TYPE = hasSymbol ? Symbol["for"]("react.return") : 60105,
      REACT_PORTAL_TYPE = hasSymbol ? Symbol["for"]("react.portal") : 60106,
      REACT_FRAGMENT_TYPE = hasSymbol ? Symbol["for"]("react.fragment") : 60107,
      MAYBE_ITERATOR_SYMBOL = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");

  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "undefined" === typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }

  function _createPortal(children, containerInfo, implementation) {
    var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: null == key ? null : "" + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }

  var TouchHistoryMath = {
    centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
      var touchBank = touchHistory.touchBank,
          total = 0,
          count = 0;
      touchHistory = 1 === touchHistory.numberActiveTouches ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;
      if (null !== touchHistory) touchHistory.touchActive && touchHistory.currentTimeStamp > touchesChangedAfter && (total += ofCurrent && isXAxis ? touchHistory.currentPageX : ofCurrent && !isXAxis ? touchHistory.currentPageY : !ofCurrent && isXAxis ? touchHistory.previousPageX : touchHistory.previousPageY, count = 1);else for (touchHistory = 0; touchHistory < touchBank.length; touchHistory++) {
        var touchTrack = touchBank[touchHistory];
        null !== touchTrack && void 0 !== touchTrack && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter && (total += ofCurrent && isXAxis ? touchTrack.currentPageX : ofCurrent && !isXAxis ? touchTrack.currentPageY : !ofCurrent && isXAxis ? touchTrack.previousPageX : touchTrack.previousPageY, count++);
      }
      return 0 < count ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !0);
    },
    currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !0);
    },
    previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !1);
    },
    previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !1);
    },
    currentCentroidX: function currentCentroidX(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, !0, !0);
    },
    currentCentroidY: function currentCentroidY(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, !1, !0);
    },
    noCentroid: -1
  },
      ReactCurrentOwner = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,
      ReactGlobalSharedState = Object.freeze({
    ReactCurrentOwner: ReactCurrentOwner,
    ReactDebugCurrentFrame: null
  }),
      objects = {},
      uniqueID = 1,
      emptyObject$2 = {},
      ReactNativePropRegistry = function () {
    function ReactNativePropRegistry() {
      if (!(this instanceof ReactNativePropRegistry)) throw new TypeError("Cannot call a class as a function");
    }

    ReactNativePropRegistry.register = function (object) {
      var id = ++uniqueID;
      objects[id] = object;
      return id;
    };

    ReactNativePropRegistry.getByID = function (id) {
      if (!id) return emptyObject$2;
      var object = objects[id];
      return object ? object : (console.warn("Invalid style with id `" + id + "`. Skipping ..."), emptyObject$2);
    };

    return ReactNativePropRegistry;
  }(),
      emptyObject$1 = {},
      removedKeys = null,
      removedKeyCount = 0;

  function resolveObject(idOrObject) {
    return "number" === typeof idOrObject ? ReactNativePropRegistry.getByID(idOrObject) : idOrObject;
  }

  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && 0 < removedKeyCount;) {
      restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && 0 < removedKeyCount) for (i in node = resolveObject(node), removedKeys) {
      if (removedKeys[i]) {
        var nextProp = node[i];

        if (void 0 !== nextProp) {
          var attributeConfig = validAttributes[i];

          if (attributeConfig) {
            "function" === typeof nextProp && (nextProp = !0);
            "undefined" === typeof nextProp && (nextProp = null);
            if ("object" !== typeof attributeConfig) updatePayload[i] = nextProp;else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[i] = nextProp;
            removedKeys[i] = !1;
            removedKeyCount--;
          }
        }
      }
    }
  }

  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) return diffProperties(updatePayload, resolveObject(prevProp), resolveObject(nextProp), validAttributes);

    if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
      var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length,
          i;

      for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
      }

      for (; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
      }

      for (; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
      }

      return updatePayload;
    }

    return Array.isArray(prevProp) ? diffProperties(updatePayload, flattenStyle(prevProp), resolveObject(nextProp), validAttributes) : diffProperties(updatePayload, resolveObject(prevProp), flattenStyle(nextProp), validAttributes);
  }

  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return nextProp = resolveObject(nextProp), diffProperties(updatePayload, emptyObject$1, nextProp, validAttributes);

    for (var i = 0; i < nextProp.length; i++) {
      updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }

    return updatePayload;
  }

  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return prevProp = resolveObject(prevProp), diffProperties(updatePayload, prevProp, emptyObject$1, validAttributes);

    for (var i = 0; i < prevProp.length; i++) {
      updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }

    return updatePayload;
  }

  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;

    for (propKey in nextProps) {
      if (attributeConfig = validAttributes[propKey]) {
        var prevProp = prevProps[propKey];
        var nextProp = nextProps[propKey];
        "function" === typeof nextProp && (nextProp = !0, "function" === typeof prevProp && (prevProp = !0));
        "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
        removedKeys && (removedKeys[propKey] = !1);
        if (updatePayload && void 0 !== updatePayload[propKey]) {
          if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;else {
            if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
          }
        } else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) ("object" !== typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp)) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
          if (void 0 === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : "object" !== typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
      }
    }

    for (propKey in prevProps) {
      void 0 === nextProps[propKey] && (!(attributeConfig = validAttributes[propKey]) || updatePayload && void 0 !== updatePayload[propKey] || (prevProp = prevProps[propKey], void 0 !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[propKey] = null, removedKeys || (removedKeys = {}), removedKeys[propKey] || (removedKeys[propKey] = !0, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    }

    return updatePayload;
  }

  function mountSafeCallback(context, callback) {
    return function () {
      if (callback) {
        if ("boolean" === typeof context.__isMounted) {
          if (!context.__isMounted) return;
        } else if ("function" === typeof context.isMounted && !context.isMounted()) return;

        return callback.apply(context, arguments);
      }
    };
  }

  function getComponentName(fiber) {
    fiber = fiber.type;
    return "string" === typeof fiber ? fiber : "function" === typeof fiber ? fiber.displayName || fiber.name : null;
  }

  var debugRenderPhaseSideEffects = require(_dependencyMap[12], "ReactFeatureFlags").debugRenderPhaseSideEffects;

  function isFiberMountedImpl(fiber) {
    var node = fiber;
    if (fiber.alternate) for (; node["return"];) {
      node = node["return"];
    } else {
      if (0 !== (node.effectTag & 2)) return 1;

      for (; node["return"];) {
        if (node = node["return"], 0 !== (node.effectTag & 2)) return 1;
      }
    }
    return 3 === node.tag ? 2 : 3;
  }

  function isMounted(component) {
    return (component = component._reactInternalFiber) ? 2 === isFiberMountedImpl(component) : !1;
  }

  function assertIsMounted(fiber) {
    invariant(2 === isFiberMountedImpl(fiber), "Unable to find node on an unmounted component.");
  }

  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) return alternate = isFiberMountedImpl(fiber), invariant(3 !== alternate, "Unable to find node on an unmounted component."), 1 === alternate ? null : fiber;

    for (var a = fiber, b = alternate;;) {
      var parentA = a["return"],
          parentB = parentA ? parentA.alternate : null;
      if (!parentA || !parentB) break;

      if (parentA.child === parentB.child) {
        for (var child = parentA.child; child;) {
          if (child === a) return assertIsMounted(parentA), fiber;
          if (child === b) return assertIsMounted(parentA), alternate;
          child = child.sibling;
        }

        invariant(!1, "Unable to find node on an unmounted component.");
      }

      if (a["return"] !== b["return"]) a = parentA, b = parentB;else {
        child = !1;

        for (var _child = parentA.child; _child;) {
          if (_child === a) {
            child = !0;
            a = parentA;
            b = parentB;
            break;
          }

          if (_child === b) {
            child = !0;
            b = parentA;
            a = parentB;
            break;
          }

          _child = _child.sibling;
        }

        if (!child) {
          for (_child = parentB.child; _child;) {
            if (_child === a) {
              child = !0;
              a = parentB;
              b = parentA;
              break;
            }

            if (_child === b) {
              child = !0;
              b = parentB;
              a = parentA;
              break;
            }

            _child = _child.sibling;
          }

          invariant(child, "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
        }
      }
      invariant(a.alternate === b, "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
    }

    invariant(3 === a.tag, "Unable to find node on an unmounted component.");
    return a.stateNode.current === a ? fiber : alternate;
  }

  function findCurrentHostFiber(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    if (!parent) return null;

    for (var node = parent;;) {
      if (5 === node.tag || 6 === node.tag) return node;
      if (node.child) node.child["return"] = node, node = node.child;else {
        if (node === parent) break;

        for (; !node.sibling;) {
          if (!node["return"] || node["return"] === parent) return null;
          node = node["return"];
        }

        node.sibling["return"] = node["return"];
        node = node.sibling;
      }
    }

    return null;
  }

  function findCurrentHostFiberWithNoPortals(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    if (!parent) return null;

    for (var node = parent;;) {
      if (5 === node.tag || 6 === node.tag) return node;
      if (node.child && 4 !== node.tag) node.child["return"] = node, node = node.child;else {
        if (node === parent) break;

        for (; !node.sibling;) {
          if (!node["return"] || node["return"] === parent) return null;
          node = node["return"];
        }

        node.sibling["return"] = node["return"];
        node = node.sibling;
      }
    }

    return null;
  }

  var valueStack = [],
      index = -1;

  function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
  }

  function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
  }

  new Set();
  var contextStackCursor = {
    current: emptyObject
  },
      didPerformWorkStackCursor = {
    current: !1
  },
      previousContext = emptyObject;

  function getUnmaskedContext(workInProgress) {
    return isContextProvider(workInProgress) ? previousContext : contextStackCursor.current;
  }

  function getMaskedContext(workInProgress, unmaskedContext) {
    var contextTypes = workInProgress.type.contextTypes;
    if (!contextTypes) return emptyObject;
    var instance = workInProgress.stateNode;
    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
    var context = {},
        key;

    for (key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    instance && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return context;
  }

  function isContextProvider(fiber) {
    return 2 === fiber.tag && null != fiber.type.childContextTypes;
  }

  function popContextProvider(fiber) {
    isContextProvider(fiber) && (pop(didPerformWorkStackCursor, fiber), pop(contextStackCursor, fiber));
  }

  function pushTopLevelContextObject(fiber, context, didChange) {
    invariant(null == contextStackCursor.cursor, "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }

  function processChildContext(fiber, parentContext) {
    var instance = fiber.stateNode,
        childContextTypes = fiber.type.childContextTypes;
    if ("function" !== typeof instance.getChildContext) return parentContext;
    instance = instance.getChildContext();

    for (var contextKey in instance) {
      invariant(contextKey in childContextTypes, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(fiber) || "Unknown", contextKey);
    }

    return babelHelpers.extends({}, parentContext, instance);
  }

  function pushContextProvider(workInProgress) {
    if (!isContextProvider(workInProgress)) return !1;
    var instance = workInProgress.stateNode;
    instance = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject;
    previousContext = contextStackCursor.current;
    push(contextStackCursor, instance, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return !0;
  }

  function invalidateContextProvider(workInProgress, didChange) {
    var instance = workInProgress.stateNode;
    invariant(instance, "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");

    if (didChange) {
      var mergedContext = processChildContext(workInProgress, previousContext);
      instance.__reactInternalMemoizedMergedChildContext = mergedContext;
      pop(didPerformWorkStackCursor, workInProgress);
      pop(contextStackCursor, workInProgress);
      push(contextStackCursor, mergedContext, workInProgress);
    } else pop(didPerformWorkStackCursor, workInProgress);

    push(didPerformWorkStackCursor, didChange, workInProgress);
  }

  function FiberNode(tag, pendingProps, key, internalContextTag) {
    this.tag = tag;
    this.key = key;
    this.stateNode = this.type = null;
    this.sibling = this.child = this["return"] = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = pendingProps;
    this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.internalContextTag = internalContextTag;
    this.effectTag = 0;
    this.lastEffect = this.firstEffect = this.nextEffect = null;
    this.expirationTime = 0;
    this.alternate = null;
  }

  function createFiber(tag, pendingProps, key, internalContextTag) {
    return new FiberNode(tag, pendingProps, key, internalContextTag);
  }

  function createWorkInProgress(current, pendingProps, expirationTime) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = createFiber(current.tag, pendingProps, current.key, current.internalContextTag), workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.effectTag = 0, workInProgress.nextEffect = null, workInProgress.firstEffect = null, workInProgress.lastEffect = null);
    workInProgress.expirationTime = expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    return workInProgress;
  }

  function createFiberFromElement(element, internalContextTag, expirationTime) {
    var fiber = void 0,
        type = element.type,
        key = element.key;
    element = element.props;
    "function" === typeof type ? (fiber = type.prototype && type.prototype.isReactComponent ? createFiber(2, element, key, internalContextTag) : createFiber(0, element, key, internalContextTag), fiber.type = type) : "string" === typeof type ? (fiber = createFiber(5, element, key, internalContextTag), fiber.type = type) : "object" === typeof type && null !== type && "number" === typeof type.tag ? (fiber = type, fiber.pendingProps = element) : invariant(!1, "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", null == type ? type : typeof type, "");
    fiber.expirationTime = expirationTime;
    return fiber;
  }

  function createFiberFromFragment(elements, internalContextTag, expirationTime, key) {
    elements = createFiber(10, elements, key, internalContextTag);
    elements.expirationTime = expirationTime;
    return elements;
  }

  function createFiberFromText(content, internalContextTag, expirationTime) {
    content = createFiber(6, content, null, internalContextTag);
    content.expirationTime = expirationTime;
    return content;
  }

  function createFiberFromCall(call, internalContextTag, expirationTime) {
    internalContextTag = createFiber(7, call, call.key, internalContextTag);
    internalContextTag.type = call.handler;
    internalContextTag.expirationTime = expirationTime;
    return internalContextTag;
  }

  function createFiberFromReturn(returnNode, internalContextTag, expirationTime) {
    returnNode = createFiber(9, null, null, internalContextTag);
    returnNode.expirationTime = expirationTime;
    return returnNode;
  }

  function createFiberFromPortal(portal, internalContextTag, expirationTime) {
    internalContextTag = createFiber(4, null !== portal.children ? portal.children : [], portal.key, internalContextTag);
    internalContextTag.expirationTime = expirationTime;
    internalContextTag.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return internalContextTag;
  }

  var onCommitFiberRoot = null,
      onCommitFiberUnmount = null;

  function catchErrors(fn) {
    return function (arg) {
      try {
        return fn(arg);
      } catch (err) {}
    };
  }

  function injectInternals(internals) {
    if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;
    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (hook.isDisabled || !hook.supportsFiber) return !0;

    try {
      var rendererID = hook.inject(internals);
      onCommitFiberRoot = catchErrors(function (root) {
        return hook.onCommitFiberRoot(rendererID, root);
      });
      onCommitFiberUnmount = catchErrors(function (fiber) {
        return hook.onCommitFiberUnmount(rendererID, fiber);
      });
    } catch (err) {}

    return !0;
  }

  function onCommitRoot(root) {
    "function" === typeof onCommitFiberRoot && onCommitFiberRoot(root);
  }

  function onCommitUnmount(fiber) {
    "function" === typeof onCommitFiberUnmount && onCommitFiberUnmount(fiber);
  }

  function createUpdateQueue(baseState) {
    return {
      baseState: baseState,
      expirationTime: 0,
      first: null,
      last: null,
      callbackList: null,
      hasForceUpdate: !1,
      isInitialized: !1
    };
  }

  function insertUpdateIntoQueue(queue, update) {
    null === queue.last ? queue.first = queue.last = update : (queue.last.next = update, queue.last = update);
    if (0 === queue.expirationTime || queue.expirationTime > update.expirationTime) queue.expirationTime = update.expirationTime;
  }

  function insertUpdateIntoFiber(fiber, update) {
    var alternateFiber = fiber.alternate,
        queue1 = fiber.updateQueue;
    null === queue1 && (queue1 = fiber.updateQueue = createUpdateQueue(null));
    null !== alternateFiber ? (fiber = alternateFiber.updateQueue, null === fiber && (fiber = alternateFiber.updateQueue = createUpdateQueue(null))) : fiber = null;
    fiber = fiber !== queue1 ? fiber : null;
    null === fiber ? insertUpdateIntoQueue(queue1, update) : null === queue1.last || null === fiber.last ? (insertUpdateIntoQueue(queue1, update), insertUpdateIntoQueue(fiber, update)) : (insertUpdateIntoQueue(queue1, update), fiber.last = update);
  }

  function getStateFromUpdate(update, instance, prevState, props) {
    update = update.partialState;
    return "function" === typeof update ? (debugRenderPhaseSideEffects && update.call(instance, prevState, props), update.call(instance, prevState, props)) : update;
  }

  function processUpdateQueue(current, workInProgress, queue, instance, props, renderExpirationTime) {
    null !== current && current.updateQueue === queue && (queue = workInProgress.updateQueue = {
      baseState: queue.baseState,
      expirationTime: queue.expirationTime,
      first: queue.first,
      last: queue.last,
      isInitialized: queue.isInitialized,
      callbackList: null,
      hasForceUpdate: !1
    });
    queue.expirationTime = 0;
    queue.isInitialized ? current = queue.baseState : (current = queue.baseState = workInProgress.memoizedState, queue.isInitialized = !0);

    for (var dontMutatePrevState = !0, update = queue.first, didSkip = !1; null !== update;) {
      var updateExpirationTime = update.expirationTime;

      if (updateExpirationTime > renderExpirationTime) {
        var remainingExpirationTime = queue.expirationTime;
        if (0 === remainingExpirationTime || remainingExpirationTime > updateExpirationTime) queue.expirationTime = updateExpirationTime;
        didSkip || (didSkip = !0, queue.baseState = current);
      } else {
        didSkip || (queue.first = update.next, null === queue.first && (queue.last = null));
        if (update.isReplace) current = getStateFromUpdate(update, instance, current, props), dontMutatePrevState = !0;else if (updateExpirationTime = getStateFromUpdate(update, instance, current, props)) current = dontMutatePrevState ? babelHelpers.extends({}, current, updateExpirationTime) : babelHelpers.extends(current, updateExpirationTime), dontMutatePrevState = !1;
        update.isForced && (queue.hasForceUpdate = !0);
        null !== update.callback && (updateExpirationTime = queue.callbackList, null === updateExpirationTime && (updateExpirationTime = queue.callbackList = []), updateExpirationTime.push(update));
      }

      update = update.next;
    }

    null !== queue.callbackList ? workInProgress.effectTag |= 32 : null !== queue.first || queue.hasForceUpdate || (workInProgress.updateQueue = null);
    didSkip || (queue.baseState = current);
    return current;
  }

  function commitCallbacks(queue, context) {
    var callbackList = queue.callbackList;
    if (null !== callbackList) for (queue.callbackList = null, queue = 0; queue < callbackList.length; queue++) {
      var update = callbackList[queue],
          _callback = update.callback;
      update.callback = null;
      invariant("function" === typeof _callback, "Invalid argument passed as callback. Expected a function. Instead received: %s", _callback);

      _callback.call(context);
    }
  }

  function ReactFiberClassComponent(scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState) {
    function adoptClassInstance(workInProgress, instance) {
      instance.updater = updater;
      workInProgress.stateNode = instance;
      instance._reactInternalFiber = workInProgress;
    }

    var updater = {
      isMounted: isMounted,
      enqueueSetState: function enqueueSetState(instance, partialState, callback) {
        instance = instance._reactInternalFiber;
        callback = void 0 === callback ? null : callback;
        var expirationTime = computeExpirationForFiber(instance);
        insertUpdateIntoFiber(instance, {
          expirationTime: expirationTime,
          partialState: partialState,
          callback: callback,
          isReplace: !1,
          isForced: !1,
          nextCallback: null,
          next: null
        });
        scheduleWork(instance, expirationTime);
      },
      enqueueReplaceState: function enqueueReplaceState(instance, state, callback) {
        instance = instance._reactInternalFiber;
        callback = void 0 === callback ? null : callback;
        var expirationTime = computeExpirationForFiber(instance);
        insertUpdateIntoFiber(instance, {
          expirationTime: expirationTime,
          partialState: state,
          callback: callback,
          isReplace: !0,
          isForced: !1,
          nextCallback: null,
          next: null
        });
        scheduleWork(instance, expirationTime);
      },
      enqueueForceUpdate: function enqueueForceUpdate(instance, callback) {
        instance = instance._reactInternalFiber;
        callback = void 0 === callback ? null : callback;
        var expirationTime = computeExpirationForFiber(instance);
        insertUpdateIntoFiber(instance, {
          expirationTime: expirationTime,
          partialState: null,
          callback: callback,
          isReplace: !1,
          isForced: !0,
          nextCallback: null,
          next: null
        });
        scheduleWork(instance, expirationTime);
      }
    };
    return {
      adoptClassInstance: adoptClassInstance,
      constructClassInstance: function constructClassInstance(workInProgress, props) {
        var ctor = workInProgress.type,
            unmaskedContext = getUnmaskedContext(workInProgress),
            needsContext = 2 === workInProgress.tag && null != workInProgress.type.contextTypes,
            context = needsContext ? getMaskedContext(workInProgress, unmaskedContext) : emptyObject;
        props = new ctor(props, context);
        adoptClassInstance(workInProgress, props);
        needsContext && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
        return props;
      },
      mountClassInstance: function mountClassInstance(workInProgress, renderExpirationTime) {
        var current = workInProgress.alternate,
            instance = workInProgress.stateNode,
            state = instance.state || null,
            props = workInProgress.pendingProps,
            unmaskedContext = getUnmaskedContext(workInProgress);
        instance.props = props;
        instance.state = workInProgress.memoizedState = state;
        instance.refs = emptyObject;
        instance.context = getMaskedContext(workInProgress, unmaskedContext);
        null != workInProgress.type && null != workInProgress.type.prototype && !0 === workInProgress.type.prototype.unstable_isAsyncReactComponent && (workInProgress.internalContextTag |= 1);
        "function" === typeof instance.componentWillMount && (state = instance.state, instance.componentWillMount(), debugRenderPhaseSideEffects && instance.componentWillMount(), state !== instance.state && updater.enqueueReplaceState(instance, instance.state, null), state = workInProgress.updateQueue, null !== state && (instance.state = processUpdateQueue(current, workInProgress, state, instance, props, renderExpirationTime)));
        "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4);
      },
      updateClassInstance: function updateClassInstance(current, workInProgress, renderExpirationTime) {
        var instance = workInProgress.stateNode;
        instance.props = workInProgress.memoizedProps;
        instance.state = workInProgress.memoizedState;
        var oldProps = workInProgress.memoizedProps,
            newProps = workInProgress.pendingProps,
            oldContext = instance.context,
            newUnmaskedContext = getUnmaskedContext(workInProgress);
        newUnmaskedContext = getMaskedContext(workInProgress, newUnmaskedContext);
        "function" !== typeof instance.componentWillReceiveProps || oldProps === newProps && oldContext === newUnmaskedContext || (oldContext = instance.state, instance.componentWillReceiveProps(newProps, newUnmaskedContext), debugRenderPhaseSideEffects && instance.componentWillReceiveProps(newProps, newUnmaskedContext), instance.state !== oldContext && updater.enqueueReplaceState(instance, instance.state, null));
        oldContext = workInProgress.memoizedState;
        renderExpirationTime = null !== workInProgress.updateQueue ? processUpdateQueue(current, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime) : oldContext;
        if (!(oldProps !== newProps || oldContext !== renderExpirationTime || didPerformWorkStackCursor.current || null !== workInProgress.updateQueue && workInProgress.updateQueue.hasForceUpdate)) return "function" !== typeof instance.componentDidUpdate || oldProps === current.memoizedProps && oldContext === current.memoizedState || (workInProgress.effectTag |= 4), !1;
        if (null === oldProps || null !== workInProgress.updateQueue && workInProgress.updateQueue.hasForceUpdate) var shouldUpdate = !0;else {
          shouldUpdate = workInProgress.stateNode;
          var type = workInProgress.type;
          "function" === typeof shouldUpdate.shouldComponentUpdate ? (type = shouldUpdate.shouldComponentUpdate(newProps, renderExpirationTime, newUnmaskedContext), debugRenderPhaseSideEffects && shouldUpdate.shouldComponentUpdate(newProps, renderExpirationTime, newUnmaskedContext), shouldUpdate = type) : shouldUpdate = type.prototype && type.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldContext, renderExpirationTime) : !0;
        }
        shouldUpdate ? ("function" === typeof instance.componentWillUpdate && (instance.componentWillUpdate(newProps, renderExpirationTime, newUnmaskedContext), debugRenderPhaseSideEffects && instance.componentWillUpdate(newProps, renderExpirationTime, newUnmaskedContext)), "function" === typeof instance.componentDidUpdate && (workInProgress.effectTag |= 4)) : ("function" !== typeof instance.componentDidUpdate || oldProps === current.memoizedProps && oldContext === current.memoizedState || (workInProgress.effectTag |= 4), memoizeProps(workInProgress, newProps), memoizeState(workInProgress, renderExpirationTime));
        instance.props = newProps;
        instance.state = renderExpirationTime;
        instance.context = newUnmaskedContext;
        return shouldUpdate;
      }
    };
  }

  var isArray$1 = Array.isArray;

  function coerceRef(current, element) {
    var mixedRef = element.ref;

    if (null !== mixedRef && "function" !== typeof mixedRef) {
      if (element._owner) {
        element = element._owner;
        var inst = void 0;
        element && (invariant(2 === element.tag, "Stateless function components cannot have refs."), inst = element.stateNode);
        invariant(inst, "Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.", mixedRef);
        var stringRef = "" + mixedRef;
        if (null !== current && null !== current.ref && current.ref._stringRef === stringRef) return current.ref;

        current = function current(value) {
          var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
          null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };

        current._stringRef = stringRef;
        return current;
      }

      invariant("string" === typeof mixedRef, "Expected ref to be a function or a string.");
      invariant(element._owner, "Element ref was specified as a string (%s) but no owner was set. You may have multiple copies of React loaded. (details: https://fb.me/react-refs-must-have-owner).", mixedRef);
    }

    return mixedRef;
  }

  function throwOnInvalidObjectType(returnFiber, newChild) {
    "textarea" !== returnFiber.type && invariant(!1, "Objects are not valid as a React child (found: %s).%s", "[object Object]" === Object.prototype.toString.call(newChild) ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild, "");
  }

  function ChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (shouldTrackSideEffects) {
        var last = returnFiber.lastEffect;
        null !== last ? (last.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        childToDelete.nextEffect = null;
        childToDelete.effectTag = 8;
      }
    }

    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) return null;

      for (; null !== currentFirstChild;) {
        deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return null;
    }

    function mapRemainingChildren(returnFiber, currentFirstChild) {
      for (returnFiber = new Map(); null !== currentFirstChild;) {
        null !== currentFirstChild.key ? returnFiber.set(currentFirstChild.key, currentFirstChild) : returnFiber.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return returnFiber;
    }

    function useFiber(fiber, pendingProps, expirationTime) {
      fiber = createWorkInProgress(fiber, pendingProps, expirationTime);
      fiber.index = 0;
      fiber.sibling = null;
      return fiber;
    }

    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) return lastPlacedIndex;
      newIndex = newFiber.alternate;
      if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.effectTag = 2, lastPlacedIndex) : newIndex;
      newFiber.effectTag = 2;
      return lastPlacedIndex;
    }

    function placeSingleChild(newFiber) {
      shouldTrackSideEffects && null === newFiber.alternate && (newFiber.effectTag = 2);
      return newFiber;
    }

    function updateTextNode(returnFiber, current, textContent, expirationTime) {
      if (null === current || 6 !== current.tag) return current = createFiberFromText(textContent, returnFiber.internalContextTag, expirationTime), current["return"] = returnFiber, current;
      current = useFiber(current, textContent, expirationTime);
      current["return"] = returnFiber;
      return current;
    }

    function updateElement(returnFiber, current, element, expirationTime) {
      if (null !== current && current.type === element.type) return expirationTime = useFiber(current, element.props, expirationTime), expirationTime.ref = coerceRef(current, element), expirationTime["return"] = returnFiber, expirationTime;
      expirationTime = createFiberFromElement(element, returnFiber.internalContextTag, expirationTime);
      expirationTime.ref = coerceRef(current, element);
      expirationTime["return"] = returnFiber;
      return expirationTime;
    }

    function updateCall(returnFiber, current, call, expirationTime) {
      if (null === current || 7 !== current.tag) return current = createFiberFromCall(call, returnFiber.internalContextTag, expirationTime), current["return"] = returnFiber, current;
      current = useFiber(current, call, expirationTime);
      current["return"] = returnFiber;
      return current;
    }

    function updateReturn(returnFiber, current, returnNode, expirationTime) {
      if (null === current || 9 !== current.tag) return current = createFiberFromReturn(returnNode, returnFiber.internalContextTag, expirationTime), current.type = returnNode.value, current["return"] = returnFiber, current;
      current = useFiber(current, null, expirationTime);
      current.type = returnNode.value;
      current["return"] = returnFiber;
      return current;
    }

    function updatePortal(returnFiber, current, portal, expirationTime) {
      if (null === current || 4 !== current.tag || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) return current = createFiberFromPortal(portal, returnFiber.internalContextTag, expirationTime), current["return"] = returnFiber, current;
      current = useFiber(current, portal.children || [], expirationTime);
      current["return"] = returnFiber;
      return current;
    }

    function updateFragment(returnFiber, current, fragment, expirationTime, key) {
      if (null === current || 10 !== current.tag) return current = createFiberFromFragment(fragment, returnFiber.internalContextTag, expirationTime, key), current["return"] = returnFiber, current;
      current = useFiber(current, fragment, expirationTime);
      current["return"] = returnFiber;
      return current;
    }

    function createChild(returnFiber, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.internalContextTag, expirationTime), newChild["return"] = returnFiber, newChild;

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            if (newChild.type === REACT_FRAGMENT_TYPE) return newChild = createFiberFromFragment(newChild.props.children, returnFiber.internalContextTag, expirationTime, newChild.key), newChild["return"] = returnFiber, newChild;
            expirationTime = createFiberFromElement(newChild, returnFiber.internalContextTag, expirationTime);
            expirationTime.ref = coerceRef(null, newChild);
            expirationTime["return"] = returnFiber;
            return expirationTime;

          case REACT_CALL_TYPE:
            return newChild = createFiberFromCall(newChild, returnFiber.internalContextTag, expirationTime), newChild["return"] = returnFiber, newChild;

          case REACT_RETURN_TYPE:
            return expirationTime = createFiberFromReturn(newChild, returnFiber.internalContextTag, expirationTime), expirationTime.type = newChild.value, expirationTime["return"] = returnFiber, expirationTime;

          case REACT_PORTAL_TYPE:
            return newChild = createFiberFromPortal(newChild, returnFiber.internalContextTag, expirationTime), newChild["return"] = returnFiber, newChild;
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.internalContextTag, expirationTime, null), newChild["return"] = returnFiber, newChild;
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
      var key = null !== oldFiber ? oldFiber.key : null;
      if ("string" === typeof newChild || "number" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return newChild.key === key ? newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key) : updateElement(returnFiber, oldFiber, newChild, expirationTime) : null;

          case REACT_CALL_TYPE:
            return newChild.key === key ? updateCall(returnFiber, oldFiber, newChild, expirationTime) : null;

          case REACT_RETURN_TYPE:
            return null === key ? updateReturn(returnFiber, oldFiber, newChild, expirationTime) : null;

          case REACT_PORTAL_TYPE:
            return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, expirationTime) : null;
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, existingChildren, newChild.props.children, expirationTime, newChild.key) : updateElement(returnFiber, existingChildren, newChild, expirationTime);

          case REACT_CALL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updateCall(returnFiber, existingChildren, newChild, expirationTime);

          case REACT_RETURN_TYPE:
            return existingChildren = existingChildren.get(newIdx) || null, updateReturn(returnFiber, existingChildren, newChild, expirationTime);

          case REACT_PORTAL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, expirationTime);
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;

      if (null === oldFiber) {
        for (; newIdx < newChildren.length; newIdx++) {
          if (oldFiber = createChild(returnFiber, newChildren[newIdx], expirationTime)) currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber;
        }

        return resultingFirstChild;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
        if (nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], expirationTime)) {
          if (shouldTrackSideEffects && null !== nextOldFiber.alternate) oldFiber["delete"](null === nextOldFiber.key ? newIdx : nextOldFiber.key);
          currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx);
          null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber;
          previousNewFiber = nextOldFiber;
        }
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }

    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
      var iteratorFn = getIteratorFn(newChildrenIterable);
      invariant("function" === typeof iteratorFn, "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
      newChildrenIterable = iteratorFn.call(newChildrenIterable);
      invariant(null != newChildrenIterable, "An iterable object provided no iterator.");

      for (var previousNewFiber = iteratorFn = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildrenIterable.next(); null !== oldFiber && !step.done; newIdx++, step = newChildrenIterable.next()) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

        if (null === newFiber) {
          oldFiber || (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? iteratorFn = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), iteratorFn;

      if (null === oldFiber) {
        for (; !step.done; newIdx++, step = newChildrenIterable.next()) {
          step = createChild(returnFiber, step.value, expirationTime), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
        }

        return iteratorFn;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildrenIterable.next()) {
        if (step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, expirationTime), null !== step) {
          if (shouldTrackSideEffects && null !== step.alternate) oldFiber["delete"](null === step.key ? newIdx : step.key);
          currentFirstChild = placeChild(step, currentFirstChild, newIdx);
          null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step;
          previousNewFiber = step;
        }
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return iteratorFn;
    }

    return function (returnFiber, currentFirstChild, newChild, expirationTime) {
      "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (newChild = newChild.props.children);
      var isObject = "object" === typeof newChild && null !== newChild;
      if (isObject) switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          a: {
            var key = newChild.key;

            for (isObject = currentFirstChild; null !== isObject;) {
              if (isObject.key === key) {
                if (10 === isObject.tag ? newChild.type === REACT_FRAGMENT_TYPE : isObject.type === newChild.type) {
                  deleteRemainingChildren(returnFiber, isObject.sibling);
                  currentFirstChild = useFiber(isObject, newChild.type === REACT_FRAGMENT_TYPE ? newChild.props.children : newChild.props, expirationTime);
                  currentFirstChild.ref = coerceRef(isObject, newChild);
                  currentFirstChild["return"] = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, isObject);
                  break;
                }
              } else deleteChild(returnFiber, isObject);
              isObject = isObject.sibling;
            }

            newChild.type === REACT_FRAGMENT_TYPE ? (currentFirstChild = createFiberFromFragment(newChild.props.children, returnFiber.internalContextTag, expirationTime, newChild.key), currentFirstChild["return"] = returnFiber, returnFiber = currentFirstChild) : (expirationTime = createFiberFromElement(newChild, returnFiber.internalContextTag, expirationTime), expirationTime.ref = coerceRef(currentFirstChild, newChild), expirationTime["return"] = returnFiber, returnFiber = expirationTime);
          }

          return placeSingleChild(returnFiber);

        case REACT_CALL_TYPE:
          a: {
            for (isObject = newChild.key; null !== currentFirstChild;) {
              if (currentFirstChild.key === isObject) {
                if (7 === currentFirstChild.tag) {
                  deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                  currentFirstChild = useFiber(currentFirstChild, newChild, expirationTime);
                  currentFirstChild["return"] = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, currentFirstChild);
                  break;
                }
              } else deleteChild(returnFiber, currentFirstChild);
              currentFirstChild = currentFirstChild.sibling;
            }

            currentFirstChild = createFiberFromCall(newChild, returnFiber.internalContextTag, expirationTime);
            currentFirstChild["return"] = returnFiber;
            returnFiber = currentFirstChild;
          }

          return placeSingleChild(returnFiber);

        case REACT_RETURN_TYPE:
          a: {
            if (null !== currentFirstChild) if (9 === currentFirstChild.tag) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              currentFirstChild = useFiber(currentFirstChild, null, expirationTime);
              currentFirstChild.type = newChild.value;
              currentFirstChild["return"] = returnFiber;
              returnFiber = currentFirstChild;
              break a;
            } else deleteRemainingChildren(returnFiber, currentFirstChild);
            currentFirstChild = createFiberFromReturn(newChild, returnFiber.internalContextTag, expirationTime);
            currentFirstChild.type = newChild.value;
            currentFirstChild["return"] = returnFiber;
            returnFiber = currentFirstChild;
          }

          return placeSingleChild(returnFiber);

        case REACT_PORTAL_TYPE:
          a: {
            for (isObject = newChild.key; null !== currentFirstChild;) {
              if (currentFirstChild.key === isObject) {
                if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                  deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                  currentFirstChild = useFiber(currentFirstChild, newChild.children || [], expirationTime);
                  currentFirstChild["return"] = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, currentFirstChild);
                  break;
                }
              } else deleteChild(returnFiber, currentFirstChild);
              currentFirstChild = currentFirstChild.sibling;
            }

            currentFirstChild = createFiberFromPortal(newChild, returnFiber.internalContextTag, expirationTime);
            currentFirstChild["return"] = returnFiber;
            returnFiber = currentFirstChild;
          }

          return placeSingleChild(returnFiber);
      }
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), currentFirstChild = useFiber(currentFirstChild, newChild, expirationTime)) : (deleteRemainingChildren(returnFiber, currentFirstChild), currentFirstChild = createFiberFromText(newChild, returnFiber.internalContextTag, expirationTime)), currentFirstChild["return"] = returnFiber, returnFiber = currentFirstChild, placeSingleChild(returnFiber);
      if (isArray$1(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
      if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
      isObject && throwOnInvalidObjectType(returnFiber, newChild);
      if ("undefined" === typeof newChild) switch (returnFiber.tag) {
        case 2:
        case 1:
          expirationTime = returnFiber.type, invariant(!1, "%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.", expirationTime.displayName || expirationTime.name || "Component");
      }
      return deleteRemainingChildren(returnFiber, currentFirstChild);
    };
  }

  var reconcileChildFibers = ChildReconciler(!0),
      mountChildFibers = ChildReconciler(!1);

  function ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber) {
    function reconcileChildren(current, workInProgress, nextChildren) {
      var renderExpirationTime = workInProgress.expirationTime;
      workInProgress.child = null === current ? mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime) : reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
    }

    function markRef(current, workInProgress) {
      var ref = workInProgress.ref;
      null === ref || current && current.ref === ref || (workInProgress.effectTag |= 128);
    }

    function finishClassComponent(current, workInProgress, shouldUpdate, hasContext) {
      markRef(current, workInProgress);
      if (!shouldUpdate) return hasContext && invalidateContextProvider(workInProgress, !1), bailoutOnAlreadyFinishedWork(current, workInProgress);
      shouldUpdate = workInProgress.stateNode;
      ReactCurrentOwner.current = workInProgress;
      debugRenderPhaseSideEffects && shouldUpdate.render();
      var nextChildren = shouldUpdate.render();
      workInProgress.effectTag |= 1;
      reconcileChildren(current, workInProgress, nextChildren);
      workInProgress.memoizedState = shouldUpdate.state;
      workInProgress.memoizedProps = shouldUpdate.props;
      hasContext && invalidateContextProvider(workInProgress, !0);
      return workInProgress.child;
    }

    function pushHostRootContext(workInProgress) {
      var root = workInProgress.stateNode;
      root.pendingContext ? pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject(workInProgress, root.context, !1);
      pushHostContainer(workInProgress, root.containerInfo);
    }

    function bailoutOnAlreadyFinishedWork(current, workInProgress) {
      invariant(null === current || workInProgress.child === current.child, "Resuming work not yet implemented.");

      if (null !== workInProgress.child) {
        current = workInProgress.child;
        var newChild = createWorkInProgress(current, current.pendingProps, current.expirationTime);
        workInProgress.child = newChild;

        for (newChild["return"] = workInProgress; null !== current.sibling;) {
          current = current.sibling, newChild = newChild.sibling = createWorkInProgress(current, current.pendingProps, current.expirationTime), newChild["return"] = workInProgress;
        }

        newChild.sibling = null;
      }

      return workInProgress.child;
    }

    function bailoutOnLowPriority(current, workInProgress) {
      switch (workInProgress.tag) {
        case 3:
          pushHostRootContext(workInProgress);
          break;

        case 2:
          pushContextProvider(workInProgress);
          break;

        case 4:
          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
      }

      return null;
    }

    var shouldSetTextContent = config.shouldSetTextContent,
        useSyncScheduling = config.useSyncScheduling,
        shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree,
        pushHostContext = hostContext.pushHostContext,
        pushHostContainer = hostContext.pushHostContainer,
        enterHydrationState = hydrationContext.enterHydrationState,
        resetHydrationState = hydrationContext.resetHydrationState,
        tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance;
    config = ReactFiberClassComponent(scheduleWork, computeExpirationForFiber, function (workInProgress, nextProps) {
      workInProgress.memoizedProps = nextProps;
    }, function (workInProgress, nextState) {
      workInProgress.memoizedState = nextState;
    });
    var adoptClassInstance = config.adoptClassInstance,
        constructClassInstance = config.constructClassInstance,
        mountClassInstance = config.mountClassInstance,
        updateClassInstance = config.updateClassInstance;
    return {
      beginWork: function beginWork(current, workInProgress, renderExpirationTime) {
        if (0 === workInProgress.expirationTime || workInProgress.expirationTime > renderExpirationTime) return bailoutOnLowPriority(current, workInProgress);

        switch (workInProgress.tag) {
          case 0:
            invariant(null === current, "An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.");
            var fn = workInProgress.type,
                props = workInProgress.pendingProps,
                unmaskedContext = getUnmaskedContext(workInProgress);
            unmaskedContext = getMaskedContext(workInProgress, unmaskedContext);
            fn = fn(props, unmaskedContext);
            workInProgress.effectTag |= 1;
            "object" === typeof fn && null !== fn && "function" === typeof fn.render ? (workInProgress.tag = 2, props = pushContextProvider(workInProgress), adoptClassInstance(workInProgress, fn), mountClassInstance(workInProgress, renderExpirationTime), current = finishClassComponent(current, workInProgress, !0, props)) : (workInProgress.tag = 1, reconcileChildren(current, workInProgress, fn), workInProgress.memoizedProps = props, current = workInProgress.child);
            return current;

          case 1:
            return props = workInProgress.type, renderExpirationTime = workInProgress.pendingProps, didPerformWorkStackCursor.current || workInProgress.memoizedProps !== renderExpirationTime ? (fn = getUnmaskedContext(workInProgress), fn = getMaskedContext(workInProgress, fn), props = props(renderExpirationTime, fn), workInProgress.effectTag |= 1, reconcileChildren(current, workInProgress, props), workInProgress.memoizedProps = renderExpirationTime, current = workInProgress.child) : current = bailoutOnAlreadyFinishedWork(current, workInProgress), current;

          case 2:
            return props = pushContextProvider(workInProgress), fn = void 0, null === current ? workInProgress.stateNode ? invariant(!1, "Resuming work not yet implemented.") : (constructClassInstance(workInProgress, workInProgress.pendingProps), mountClassInstance(workInProgress, renderExpirationTime), fn = !0) : fn = updateClassInstance(current, workInProgress, renderExpirationTime), finishClassComponent(current, workInProgress, fn, props);

          case 3:
            return pushHostRootContext(workInProgress), props = workInProgress.updateQueue, null !== props ? (fn = workInProgress.memoizedState, props = processUpdateQueue(current, workInProgress, props, null, null, renderExpirationTime), fn === props ? (resetHydrationState(), current = bailoutOnAlreadyFinishedWork(current, workInProgress)) : (fn = props.element, unmaskedContext = workInProgress.stateNode, (null === current || null === current.child) && unmaskedContext.hydrate && enterHydrationState(workInProgress) ? (workInProgress.effectTag |= 2, workInProgress.child = mountChildFibers(workInProgress, null, fn, renderExpirationTime)) : (resetHydrationState(), reconcileChildren(current, workInProgress, fn)), workInProgress.memoizedState = props, current = workInProgress.child)) : (resetHydrationState(), current = bailoutOnAlreadyFinishedWork(current, workInProgress)), current;

          case 5:
            pushHostContext(workInProgress);
            null === current && tryToClaimNextHydratableInstance(workInProgress);
            props = workInProgress.type;
            var memoizedProps = workInProgress.memoizedProps;
            fn = workInProgress.pendingProps;
            unmaskedContext = null !== current ? current.memoizedProps : null;
            didPerformWorkStackCursor.current || memoizedProps !== fn ? (memoizedProps = fn.children, shouldSetTextContent(props, fn) ? memoizedProps = null : unmaskedContext && shouldSetTextContent(props, unmaskedContext) && (workInProgress.effectTag |= 16), markRef(current, workInProgress), 2147483647 !== renderExpirationTime && !useSyncScheduling && shouldDeprioritizeSubtree(props, fn) ? (workInProgress.expirationTime = 2147483647, current = null) : (reconcileChildren(current, workInProgress, memoizedProps), workInProgress.memoizedProps = fn, current = workInProgress.child)) : current = bailoutOnAlreadyFinishedWork(current, workInProgress);
            return current;

          case 6:
            return null === current && tryToClaimNextHydratableInstance(workInProgress), workInProgress.memoizedProps = workInProgress.pendingProps, null;

          case 8:
            workInProgress.tag = 7;

          case 7:
            return props = workInProgress.pendingProps, didPerformWorkStackCursor.current || workInProgress.memoizedProps !== props || (props = workInProgress.memoizedProps), fn = props.children, workInProgress.stateNode = null === current ? mountChildFibers(workInProgress, workInProgress.stateNode, fn, renderExpirationTime) : reconcileChildFibers(workInProgress, workInProgress.stateNode, fn, renderExpirationTime), workInProgress.memoizedProps = props, workInProgress.stateNode;

          case 9:
            return null;

          case 4:
            return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), props = workInProgress.pendingProps, didPerformWorkStackCursor.current || workInProgress.memoizedProps !== props ? (null === current ? workInProgress.child = reconcileChildFibers(workInProgress, null, props, renderExpirationTime) : reconcileChildren(current, workInProgress, props), workInProgress.memoizedProps = props, current = workInProgress.child) : current = bailoutOnAlreadyFinishedWork(current, workInProgress), current;

          case 10:
            return renderExpirationTime = workInProgress.pendingProps, didPerformWorkStackCursor.current || null !== renderExpirationTime && workInProgress.memoizedProps !== renderExpirationTime ? (reconcileChildren(current, workInProgress, renderExpirationTime), workInProgress.memoizedProps = renderExpirationTime, current = workInProgress.child) : current = bailoutOnAlreadyFinishedWork(current, workInProgress), current;

          default:
            invariant(!1, "Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.");
        }
      },
      beginFailedWork: function beginFailedWork(current, workInProgress, renderExpirationTime) {
        switch (workInProgress.tag) {
          case 2:
            pushContextProvider(workInProgress);
            break;

          case 3:
            pushHostRootContext(workInProgress);
            break;

          default:
            invariant(!1, "Invalid type of work. This error is likely caused by a bug in React. Please file an issue.");
        }

        workInProgress.effectTag |= 64;
        null === current ? workInProgress.child = null : workInProgress.child !== current.child && (workInProgress.child = current.child);
        if (0 === workInProgress.expirationTime || workInProgress.expirationTime > renderExpirationTime) return bailoutOnLowPriority(current, workInProgress);
        workInProgress.firstEffect = null;
        workInProgress.lastEffect = null;
        workInProgress.child = null === current ? mountChildFibers(workInProgress, null, null, renderExpirationTime) : reconcileChildFibers(workInProgress, current.child, null, renderExpirationTime);
        2 === workInProgress.tag && (current = workInProgress.stateNode, workInProgress.memoizedProps = current.props, workInProgress.memoizedState = current.state);
        return workInProgress.child;
      }
    };
  }

  function ReactFiberCompleteWork(config, hostContext, hydrationContext) {
    function markUpdate(workInProgress) {
      workInProgress.effectTag |= 4;
    }

    var createInstance = config.createInstance,
        createTextInstance = config.createTextInstance,
        appendInitialChild = config.appendInitialChild,
        finalizeInitialChildren = config.finalizeInitialChildren,
        prepareUpdate = config.prepareUpdate,
        persistence = config.persistence,
        getRootHostContainer = hostContext.getRootHostContainer,
        popHostContext = hostContext.popHostContext,
        getHostContext = hostContext.getHostContext,
        popHostContainer = hostContext.popHostContainer,
        prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance,
        prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance,
        popHydrationState = hydrationContext.popHydrationState,
        updateHostContainer = void 0,
        updateHostComponent = void 0,
        updateHostText = void 0;
    config.mutation ? (updateHostContainer = function updateHostContainer() {}, updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload) {
      (workInProgress.updateQueue = updatePayload) && markUpdate(workInProgress);
    }, updateHostText = function updateHostText(current, workInProgress, oldText, newText) {
      oldText !== newText && markUpdate(workInProgress);
    }) : persistence ? invariant(!1, "Persistent reconciler is disabled.") : invariant(!1, "Noop reconciler is disabled.");
    return {
      completeWork: function completeWork(current, workInProgress, renderExpirationTime) {
        var newProps = workInProgress.pendingProps;

        switch (workInProgress.tag) {
          case 1:
            return null;

          case 2:
            return popContextProvider(workInProgress), null;

          case 3:
            popHostContainer(workInProgress);
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress);
            newProps = workInProgress.stateNode;
            newProps.pendingContext && (newProps.context = newProps.pendingContext, newProps.pendingContext = null);
            if (null === current || null === current.child) popHydrationState(workInProgress), workInProgress.effectTag &= -3;
            updateHostContainer(workInProgress);
            return null;

          case 5:
            popHostContext(workInProgress);
            renderExpirationTime = getRootHostContainer();
            var type = workInProgress.type;

            if (null !== current && null != workInProgress.stateNode) {
              var oldProps = current.memoizedProps,
                  instance = workInProgress.stateNode,
                  currentHostContext = getHostContext();
              instance = prepareUpdate(instance, type, oldProps, newProps, renderExpirationTime, currentHostContext);
              updateHostComponent(current, workInProgress, instance, type, oldProps, newProps, renderExpirationTime);
              current.ref !== workInProgress.ref && (workInProgress.effectTag |= 128);
            } else {
              if (!newProps) return invariant(null !== workInProgress.stateNode, "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."), null;
              current = getHostContext();
              if (popHydrationState(workInProgress)) prepareToHydrateHostInstance(workInProgress, renderExpirationTime, current) && markUpdate(workInProgress);else {
                current = createInstance(type, newProps, renderExpirationTime, current, workInProgress);

                a: for (oldProps = workInProgress.child; null !== oldProps;) {
                  if (5 === oldProps.tag || 6 === oldProps.tag) appendInitialChild(current, oldProps.stateNode);else if (4 !== oldProps.tag && null !== oldProps.child) {
                    oldProps.child["return"] = oldProps;
                    oldProps = oldProps.child;
                    continue;
                  }
                  if (oldProps === workInProgress) break;

                  for (; null === oldProps.sibling;) {
                    if (null === oldProps["return"] || oldProps["return"] === workInProgress) break a;
                    oldProps = oldProps["return"];
                  }

                  oldProps.sibling["return"] = oldProps["return"];
                  oldProps = oldProps.sibling;
                }

                finalizeInitialChildren(current, type, newProps, renderExpirationTime) && markUpdate(workInProgress);
                workInProgress.stateNode = current;
              }
              null !== workInProgress.ref && (workInProgress.effectTag |= 128);
            }

            return null;

          case 6:
            if (current && null != workInProgress.stateNode) updateHostText(current, workInProgress, current.memoizedProps, newProps);else {
              if ("string" !== typeof newProps) return invariant(null !== workInProgress.stateNode, "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."), null;
              current = getRootHostContainer();
              renderExpirationTime = getHostContext();
              popHydrationState(workInProgress) ? prepareToHydrateHostTextInstance(workInProgress) && markUpdate(workInProgress) : workInProgress.stateNode = createTextInstance(newProps, current, renderExpirationTime, workInProgress);
            }
            return null;

          case 7:
            newProps = workInProgress.memoizedProps;
            invariant(newProps, "Should be resolved by now. This error is likely caused by a bug in React. Please file an issue.");
            workInProgress.tag = 8;
            type = [];

            a: for ((oldProps = workInProgress.stateNode) && (oldProps["return"] = workInProgress); null !== oldProps;) {
              if (5 === oldProps.tag || 6 === oldProps.tag || 4 === oldProps.tag) invariant(!1, "A call cannot have host component children.");else if (9 === oldProps.tag) type.push(oldProps.type);else if (null !== oldProps.child) {
                oldProps.child["return"] = oldProps;
                oldProps = oldProps.child;
                continue;
              }

              for (; null === oldProps.sibling;) {
                if (null === oldProps["return"] || oldProps["return"] === workInProgress) break a;
                oldProps = oldProps["return"];
              }

              oldProps.sibling["return"] = oldProps["return"];
              oldProps = oldProps.sibling;
            }

            oldProps = newProps.handler;
            newProps = oldProps(newProps.props, type);
            workInProgress.child = reconcileChildFibers(workInProgress, null !== current ? current.child : null, newProps, renderExpirationTime);
            return workInProgress.child;

          case 8:
            return workInProgress.tag = 7, null;

          case 9:
            return null;

          case 10:
            return null;

          case 4:
            return popHostContainer(workInProgress), updateHostContainer(workInProgress), null;

          case 0:
            invariant(!1, "An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.");

          default:
            invariant(!1, "Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    };
  }

  function ReactFiberCommitWork(config, captureError) {
    function safelyDetachRef(current) {
      var ref = current.ref;
      if (null !== ref) try {
        ref(null);
      } catch (refError) {
        captureError(current, refError);
      }
    }

    function commitUnmount(current) {
      "function" === typeof onCommitUnmount && onCommitUnmount(current);

      switch (current.tag) {
        case 2:
          safelyDetachRef(current);
          var instance = current.stateNode;
          if ("function" === typeof instance.componentWillUnmount) try {
            instance.props = current.memoizedProps, instance.state = current.memoizedState, instance.componentWillUnmount();
          } catch (unmountError) {
            captureError(current, unmountError);
          }
          break;

        case 5:
          safelyDetachRef(current);
          break;

        case 7:
          commitNestedUnmounts(current.stateNode);
          break;

        case 4:
          mutation && unmountHostComponents(current);
      }
    }

    function commitNestedUnmounts(root) {
      for (var node = root;;) {
        if (commitUnmount(node), null === node.child || mutation && 4 === node.tag) {
          if (node === root) break;

          for (; null === node.sibling;) {
            if (null === node["return"] || node["return"] === root) return;
            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        } else node.child["return"] = node, node = node.child;
      }
    }

    function isHostParent(fiber) {
      return 5 === fiber.tag || 3 === fiber.tag || 4 === fiber.tag;
    }

    function unmountHostComponents(current) {
      for (var node = current, currentParentIsValid = !1, currentParent = void 0, currentParentIsContainer = void 0;;) {
        if (!currentParentIsValid) {
          currentParentIsValid = node["return"];

          a: for (;;) {
            invariant(null !== currentParentIsValid, "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");

            switch (currentParentIsValid.tag) {
              case 5:
                currentParent = currentParentIsValid.stateNode;
                currentParentIsContainer = !1;
                break a;

              case 3:
                currentParent = currentParentIsValid.stateNode.containerInfo;
                currentParentIsContainer = !0;
                break a;

              case 4:
                currentParent = currentParentIsValid.stateNode.containerInfo;
                currentParentIsContainer = !0;
                break a;
            }

            currentParentIsValid = currentParentIsValid["return"];
          }

          currentParentIsValid = !0;
        }

        if (5 === node.tag || 6 === node.tag) commitNestedUnmounts(node), currentParentIsContainer ? removeChildFromContainer(currentParent, node.stateNode) : removeChild(currentParent, node.stateNode);else if (4 === node.tag ? currentParent = node.stateNode.containerInfo : commitUnmount(node), null !== node.child) {
          node.child["return"] = node;
          node = node.child;
          continue;
        }
        if (node === current) break;

        for (; null === node.sibling;) {
          if (null === node["return"] || node["return"] === current) return;
          node = node["return"];
          4 === node.tag && (currentParentIsValid = !1);
        }

        node.sibling["return"] = node["return"];
        node = node.sibling;
      }
    }

    var getPublicInstance = config.getPublicInstance,
        mutation = config.mutation;
    config = config.persistence;
    mutation || (config ? invariant(!1, "Persistent reconciler is disabled.") : invariant(!1, "Noop reconciler is disabled."));
    var commitMount = mutation.commitMount,
        commitUpdate = mutation.commitUpdate,
        resetTextContent = mutation.resetTextContent,
        commitTextUpdate = mutation.commitTextUpdate,
        appendChild = mutation.appendChild,
        appendChildToContainer = mutation.appendChildToContainer,
        insertBefore = mutation.insertBefore,
        insertInContainerBefore = mutation.insertInContainerBefore,
        removeChild = mutation.removeChild,
        removeChildFromContainer = mutation.removeChildFromContainer;
    return {
      commitResetTextContent: function commitResetTextContent(current) {
        resetTextContent(current.stateNode);
      },
      commitPlacement: function commitPlacement(finishedWork) {
        a: {
          for (var parent = finishedWork["return"]; null !== parent;) {
            if (isHostParent(parent)) {
              var parentFiber = parent;
              break a;
            }

            parent = parent["return"];
          }

          invariant(!1, "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          parentFiber = void 0;
        }

        var isContainer = parent = void 0;

        switch (parentFiber.tag) {
          case 5:
            parent = parentFiber.stateNode;
            isContainer = !1;
            break;

          case 3:
            parent = parentFiber.stateNode.containerInfo;
            isContainer = !0;
            break;

          case 4:
            parent = parentFiber.stateNode.containerInfo;
            isContainer = !0;
            break;

          default:
            invariant(!1, "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }

        parentFiber.effectTag & 16 && (resetTextContent(parent), parentFiber.effectTag &= -17);

        a: b: for (parentFiber = finishedWork;;) {
          for (; null === parentFiber.sibling;) {
            if (null === parentFiber["return"] || isHostParent(parentFiber["return"])) {
              parentFiber = null;
              break a;
            }

            parentFiber = parentFiber["return"];
          }

          parentFiber.sibling["return"] = parentFiber["return"];

          for (parentFiber = parentFiber.sibling; 5 !== parentFiber.tag && 6 !== parentFiber.tag;) {
            if (parentFiber.effectTag & 2) continue b;
            if (null === parentFiber.child || 4 === parentFiber.tag) continue b;else parentFiber.child["return"] = parentFiber, parentFiber = parentFiber.child;
          }

          if (!(parentFiber.effectTag & 2)) {
            parentFiber = parentFiber.stateNode;
            break a;
          }
        }

        for (var node = finishedWork;;) {
          if (5 === node.tag || 6 === node.tag) parentFiber ? isContainer ? insertInContainerBefore(parent, node.stateNode, parentFiber) : insertBefore(parent, node.stateNode, parentFiber) : isContainer ? appendChildToContainer(parent, node.stateNode) : appendChild(parent, node.stateNode);else if (4 !== node.tag && null !== node.child) {
            node.child["return"] = node;
            node = node.child;
            continue;
          }
          if (node === finishedWork) break;

          for (; null === node.sibling;) {
            if (null === node["return"] || node["return"] === finishedWork) return;
            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        }
      },
      commitDeletion: function commitDeletion(current) {
        unmountHostComponents(current);
        current["return"] = null;
        current.child = null;
        current.alternate && (current.alternate.child = null, current.alternate["return"] = null);
      },
      commitWork: function commitWork(current, finishedWork) {
        switch (finishedWork.tag) {
          case 2:
            break;

          case 5:
            var instance = finishedWork.stateNode;

            if (null != instance) {
              var newProps = finishedWork.memoizedProps;
              current = null !== current ? current.memoizedProps : newProps;
              var type = finishedWork.type,
                  updatePayload = finishedWork.updateQueue;
              finishedWork.updateQueue = null;
              null !== updatePayload && commitUpdate(instance, updatePayload, type, current, newProps, finishedWork);
            }

            break;

          case 6:
            invariant(null !== finishedWork.stateNode, "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
            instance = finishedWork.memoizedProps;
            commitTextUpdate(finishedWork.stateNode, null !== current ? current.memoizedProps : instance, instance);
            break;

          case 3:
            break;

          default:
            invariant(!1, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      },
      commitLifeCycles: function commitLifeCycles(current, finishedWork) {
        switch (finishedWork.tag) {
          case 2:
            var instance = finishedWork.stateNode;
            if (finishedWork.effectTag & 4) if (null === current) instance.props = finishedWork.memoizedProps, instance.state = finishedWork.memoizedState, instance.componentDidMount();else {
              var prevProps = current.memoizedProps;
              current = current.memoizedState;
              instance.props = finishedWork.memoizedProps;
              instance.state = finishedWork.memoizedState;
              instance.componentDidUpdate(prevProps, current);
            }
            finishedWork = finishedWork.updateQueue;
            null !== finishedWork && commitCallbacks(finishedWork, instance);
            break;

          case 3:
            instance = finishedWork.updateQueue;
            null !== instance && commitCallbacks(instance, null !== finishedWork.child ? finishedWork.child.stateNode : null);
            break;

          case 5:
            instance = finishedWork.stateNode;
            null === current && finishedWork.effectTag & 4 && commitMount(instance, finishedWork.type, finishedWork.memoizedProps, finishedWork);
            break;

          case 6:
            break;

          case 4:
            break;

          default:
            invariant(!1, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      },
      commitAttachRef: function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;

        if (null !== ref) {
          var instance = finishedWork.stateNode;

          switch (finishedWork.tag) {
            case 5:
              ref(getPublicInstance(instance));
              break;

            default:
              ref(instance);
          }
        }
      },
      commitDetachRef: function commitDetachRef(current) {
        current = current.ref;
        null !== current && current(null);
      }
    };
  }

  var NO_CONTEXT = {};

  function ReactFiberHostContext(config) {
    function requiredContext(c) {
      invariant(c !== NO_CONTEXT, "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
      return c;
    }

    var getChildHostContext = config.getChildHostContext,
        getRootHostContext = config.getRootHostContext,
        contextStackCursor = {
      current: NO_CONTEXT
    },
        contextFiberStackCursor = {
      current: NO_CONTEXT
    },
        rootInstanceStackCursor = {
      current: NO_CONTEXT
    };
    return {
      getHostContext: function getHostContext() {
        return requiredContext(contextStackCursor.current);
      },
      getRootHostContainer: function getRootHostContainer() {
        return requiredContext(rootInstanceStackCursor.current);
      },
      popHostContainer: function popHostContainer(fiber) {
        pop(contextStackCursor, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
      },
      popHostContext: function popHostContext(fiber) {
        contextFiberStackCursor.current === fiber && (pop(contextStackCursor, fiber), pop(contextFiberStackCursor, fiber));
      },
      pushHostContainer: function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        nextRootInstance = getRootHostContext(nextRootInstance);
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor, nextRootInstance, fiber);
      },
      pushHostContext: function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current),
            context = requiredContext(contextStackCursor.current);
        rootInstance = getChildHostContext(context, fiber.type, rootInstance);
        context !== rootInstance && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor, rootInstance, fiber));
      },
      resetHostContainer: function resetHostContainer() {
        contextStackCursor.current = NO_CONTEXT;
        rootInstanceStackCursor.current = NO_CONTEXT;
      }
    };
  }

  function ReactFiberHydrationContext(config) {
    function deleteHydratableInstance(returnFiber, instance) {
      var fiber = createFiber(5, null, null, 0);
      fiber.type = "DELETED";
      fiber.stateNode = instance;
      fiber["return"] = returnFiber;
      fiber.effectTag = 8;
      null !== returnFiber.lastEffect ? (returnFiber.lastEffect.nextEffect = fiber, returnFiber.lastEffect = fiber) : returnFiber.firstEffect = returnFiber.lastEffect = fiber;
    }

    function tryHydrate(fiber, nextInstance) {
      switch (fiber.tag) {
        case 5:
          return nextInstance = canHydrateInstance(nextInstance, fiber.type, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, !0) : !1;

        case 6:
          return nextInstance = canHydrateTextInstance(nextInstance, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, !0) : !1;

        default:
          return !1;
      }
    }

    function popToNextHostParent(fiber) {
      for (fiber = fiber["return"]; null !== fiber && 5 !== fiber.tag && 3 !== fiber.tag;) {
        fiber = fiber["return"];
      }

      hydrationParentFiber = fiber;
    }

    var shouldSetTextContent = config.shouldSetTextContent;
    config = config.hydration;
    if (!config) return {
      enterHydrationState: function enterHydrationState() {
        return !1;
      },
      resetHydrationState: function resetHydrationState() {},
      tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance() {},
      prepareToHydrateHostInstance: function prepareToHydrateHostInstance() {
        invariant(!1, "Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      },
      prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance() {
        invariant(!1, "Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      },
      popHydrationState: function popHydrationState() {
        return !1;
      }
    };
    var canHydrateInstance = config.canHydrateInstance,
        canHydrateTextInstance = config.canHydrateTextInstance,
        getNextHydratableSibling = config.getNextHydratableSibling,
        getFirstHydratableChild = config.getFirstHydratableChild,
        hydrateInstance = config.hydrateInstance,
        hydrateTextInstance = config.hydrateTextInstance,
        hydrationParentFiber = null,
        nextHydratableInstance = null,
        isHydrating = !1;
    return {
      enterHydrationState: function enterHydrationState(fiber) {
        nextHydratableInstance = getFirstHydratableChild(fiber.stateNode.containerInfo);
        hydrationParentFiber = fiber;
        return isHydrating = !0;
      },
      resetHydrationState: function resetHydrationState() {
        nextHydratableInstance = hydrationParentFiber = null;
        isHydrating = !1;
      },
      tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance(fiber) {
        if (isHydrating) {
          var nextInstance = nextHydratableInstance;

          if (nextInstance) {
            if (!tryHydrate(fiber, nextInstance)) {
              nextInstance = getNextHydratableSibling(nextInstance);

              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                fiber.effectTag |= 2;
                isHydrating = !1;
                hydrationParentFiber = fiber;
                return;
              }

              deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);
            }

            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(nextInstance);
          } else fiber.effectTag |= 2, isHydrating = !1, hydrationParentFiber = fiber;
        }
      },
      prepareToHydrateHostInstance: function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        rootContainerInstance = hydrateInstance(fiber.stateNode, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
        fiber.updateQueue = rootContainerInstance;
        return null !== rootContainerInstance ? !0 : !1;
      },
      prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance(fiber) {
        return hydrateTextInstance(fiber.stateNode, fiber.memoizedProps, fiber);
      },
      popHydrationState: function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) return !1;
        if (!isHydrating) return popToNextHostParent(fiber), isHydrating = !0, !1;
        var type = fiber.type;
        if (5 !== fiber.tag || "head" !== type && "body" !== type && !shouldSetTextContent(type, fiber.memoizedProps)) for (type = nextHydratableInstance; type;) {
          deleteHydratableInstance(fiber, type), type = getNextHydratableSibling(type);
        }
        popToNextHostParent(fiber);
        nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return !0;
      }
    };
  }

  function ReactFiberScheduler(config) {
    function completeUnitOfWork(workInProgress$jscomp$0) {
      for (;;) {
        var next = completeWork(workInProgress$jscomp$0.alternate, workInProgress$jscomp$0, nextRenderExpirationTime),
            returnFiber = workInProgress$jscomp$0["return"],
            siblingFiber = workInProgress$jscomp$0.sibling;
        var workInProgress = workInProgress$jscomp$0;

        if (2147483647 === nextRenderExpirationTime || 2147483647 !== workInProgress.expirationTime) {
          if (2 !== workInProgress.tag && 3 !== workInProgress.tag) var newExpirationTime = 0;else newExpirationTime = workInProgress.updateQueue, newExpirationTime = null === newExpirationTime ? 0 : newExpirationTime.expirationTime;

          for (var child = workInProgress.child; null !== child;) {
            0 !== child.expirationTime && (0 === newExpirationTime || newExpirationTime > child.expirationTime) && (newExpirationTime = child.expirationTime), child = child.sibling;
          }

          workInProgress.expirationTime = newExpirationTime;
        }

        if (null !== next) return next;
        null !== returnFiber && (null === returnFiber.firstEffect && (returnFiber.firstEffect = workInProgress$jscomp$0.firstEffect), null !== workInProgress$jscomp$0.lastEffect && (null !== returnFiber.lastEffect && (returnFiber.lastEffect.nextEffect = workInProgress$jscomp$0.firstEffect), returnFiber.lastEffect = workInProgress$jscomp$0.lastEffect), 1 < workInProgress$jscomp$0.effectTag && (null !== returnFiber.lastEffect ? returnFiber.lastEffect.nextEffect = workInProgress$jscomp$0 : returnFiber.firstEffect = workInProgress$jscomp$0, returnFiber.lastEffect = workInProgress$jscomp$0));
        if (null !== siblingFiber) return siblingFiber;
        if (null !== returnFiber) workInProgress$jscomp$0 = returnFiber;else {
          workInProgress$jscomp$0.stateNode.isReadyForCommit = !0;
          break;
        }
      }

      return null;
    }

    function performUnitOfWork(workInProgress) {
      var next = beginWork(workInProgress.alternate, workInProgress, nextRenderExpirationTime);
      null === next && (next = completeUnitOfWork(workInProgress));
      ReactCurrentOwner.current = null;
      return next;
    }

    function performFailedUnitOfWork(workInProgress) {
      var next = beginFailedWork(workInProgress.alternate, workInProgress, nextRenderExpirationTime);
      null === next && (next = completeUnitOfWork(workInProgress));
      ReactCurrentOwner.current = null;
      return next;
    }

    function workLoop(expirationTime) {
      if (null !== capturedErrors) {
        if (!(0 === nextRenderExpirationTime || nextRenderExpirationTime > expirationTime)) if (nextRenderExpirationTime <= mostRecentCurrentTime) for (; null !== nextUnitOfWork;) {
          nextUnitOfWork = hasCapturedError(nextUnitOfWork) ? performFailedUnitOfWork(nextUnitOfWork) : performUnitOfWork(nextUnitOfWork);
        } else for (; null !== nextUnitOfWork && !shouldYield();) {
          nextUnitOfWork = hasCapturedError(nextUnitOfWork) ? performFailedUnitOfWork(nextUnitOfWork) : performUnitOfWork(nextUnitOfWork);
        }
      } else if (!(0 === nextRenderExpirationTime || nextRenderExpirationTime > expirationTime)) if (nextRenderExpirationTime <= mostRecentCurrentTime) for (; null !== nextUnitOfWork;) {
        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
      } else for (; null !== nextUnitOfWork && !shouldYield();) {
        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
      }
    }

    function renderRoot(root, expirationTime) {
      invariant(!isWorking, "renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.");
      isWorking = !0;
      root.isReadyForCommit = !1;

      if (root !== nextRoot || expirationTime !== nextRenderExpirationTime || null === nextUnitOfWork) {
        for (; -1 < index;) {
          valueStack[index] = null, index--;
        }

        previousContext = emptyObject;
        contextStackCursor.current = emptyObject;
        didPerformWorkStackCursor.current = !1;
        resetHostContainer();
        nextRoot = root;
        nextRenderExpirationTime = expirationTime;
        nextUnitOfWork = createWorkInProgress(nextRoot.current, null, expirationTime);
      }

      var didError = !1,
          error = null;

      try {
        workLoop(expirationTime);
      } catch (e) {
        didError = !0, error = e;
      }

      for (; didError;) {
        if (didFatal) {
          firstUncaughtError = error;
          break;
        }

        var failedWork = nextUnitOfWork;
        if (null === failedWork) didFatal = !0;else {
          var boundary = captureError(failedWork, error);
          invariant(null !== boundary, "Should have found an error boundary. This error is likely caused by a bug in React. Please file an issue.");

          if (!didFatal) {
            try {
              didError = boundary;
              error = expirationTime;

              for (boundary = didError; null !== failedWork;) {
                switch (failedWork.tag) {
                  case 2:
                    popContextProvider(failedWork);
                    break;

                  case 5:
                    popHostContext(failedWork);
                    break;

                  case 3:
                    popHostContainer(failedWork);
                    break;

                  case 4:
                    popHostContainer(failedWork);
                }

                if (failedWork === boundary || failedWork.alternate === boundary) break;
                failedWork = failedWork["return"];
              }

              nextUnitOfWork = performFailedUnitOfWork(didError);
              workLoop(error);
            } catch (e) {
              didError = !0;
              error = e;
              continue;
            }

            break;
          }
        }
      }

      expirationTime = firstUncaughtError;
      didFatal = isWorking = !1;
      firstUncaughtError = null;
      null !== expirationTime && onUncaughtError(expirationTime);
      return root.isReadyForCommit ? root.current.alternate : null;
    }

    function captureError(failedWork, error$jscomp$0) {
      var boundary = ReactCurrentOwner.current = null,
          errorBoundaryFound = !1,
          willRetry = !1,
          errorBoundaryName = null;
      if (3 === failedWork.tag) boundary = failedWork, isFailedBoundary(failedWork) && (didFatal = !0);else for (var node = failedWork["return"]; null !== node && null === boundary;) {
        2 === node.tag ? "function" === typeof node.stateNode.componentDidCatch && (errorBoundaryFound = !0, errorBoundaryName = getComponentName(node), boundary = node, willRetry = !0) : 3 === node.tag && (boundary = node);

        if (isFailedBoundary(node)) {
          if (isUnmounting || null !== commitPhaseBoundaries && (commitPhaseBoundaries.has(node) || null !== node.alternate && commitPhaseBoundaries.has(node.alternate))) return null;
          boundary = null;
          willRetry = !1;
        }

        node = node["return"];
      }

      if (null !== boundary) {
        null === failedBoundaries && (failedBoundaries = new Set());
        failedBoundaries.add(boundary);
        var info = "";
        node = failedWork;

        do {
          a: switch (node.tag) {
            case 0:
            case 1:
            case 2:
            case 5:
              var owner = node._debugOwner,
                  source = node._debugSource;
              var JSCompiler_inline_result = getComponentName(node);
              var ownerName = null;
              owner && (ownerName = getComponentName(owner));
              owner = source;
              JSCompiler_inline_result = "\n    in " + (JSCompiler_inline_result || "Unknown") + (owner ? " (at " + owner.fileName.replace(/^.*[\\\/]/, "") + ":" + owner.lineNumber + ")" : ownerName ? " (created by " + ownerName + ")" : "");
              break a;

            default:
              JSCompiler_inline_result = "";
          }

          info += JSCompiler_inline_result;
          node = node["return"];
        } while (node);

        node = info;
        failedWork = getComponentName(failedWork);
        null === capturedErrors && (capturedErrors = new Map());
        error$jscomp$0 = {
          componentName: failedWork,
          componentStack: node,
          error: error$jscomp$0,
          errorBoundary: errorBoundaryFound ? boundary.stateNode : null,
          errorBoundaryFound: errorBoundaryFound,
          errorBoundaryName: errorBoundaryName,
          willRetry: willRetry
        };
        capturedErrors.set(boundary, error$jscomp$0);

        try {
          if (!1 !== showDialog(error$jscomp$0)) {
            var error = error$jscomp$0.error;
            error && error.suppressReactErrorLogging || console.error(error);
          }
        } catch (e) {
          e && e.suppressReactErrorLogging || console.error(e);
        }

        isCommitting ? (null === commitPhaseBoundaries && (commitPhaseBoundaries = new Set()), commitPhaseBoundaries.add(boundary)) : scheduleErrorRecovery(boundary);
        return boundary;
      }

      null === firstUncaughtError && (firstUncaughtError = error$jscomp$0);
      return null;
    }

    function hasCapturedError(fiber) {
      return null !== capturedErrors && (capturedErrors.has(fiber) || null !== fiber.alternate && capturedErrors.has(fiber.alternate));
    }

    function isFailedBoundary(fiber) {
      return null !== failedBoundaries && (failedBoundaries.has(fiber) || null !== fiber.alternate && failedBoundaries.has(fiber.alternate));
    }

    function computeAsyncExpiration() {
      return 20 * (((recalculateCurrentTime() + 100) / 20 | 0) + 1);
    }

    function computeExpirationForFiber(fiber) {
      return 0 !== expirationContext ? expirationContext : isWorking ? isCommitting ? 1 : nextRenderExpirationTime : !useSyncScheduling || fiber.internalContextTag & 1 ? computeAsyncExpiration() : 1;
    }

    function scheduleWork(fiber, expirationTime) {
      return scheduleWorkImpl(fiber, expirationTime, !1);
    }

    function scheduleWorkImpl(fiber, expirationTime) {
      for (; null !== fiber;) {
        if (0 === fiber.expirationTime || fiber.expirationTime > expirationTime) fiber.expirationTime = expirationTime;
        null !== fiber.alternate && (0 === fiber.alternate.expirationTime || fiber.alternate.expirationTime > expirationTime) && (fiber.alternate.expirationTime = expirationTime);
        if (null === fiber["return"]) if (3 === fiber.tag) {
          var root = fiber.stateNode;
          !isWorking && root === nextRoot && expirationTime < nextRenderExpirationTime && (nextUnitOfWork = nextRoot = null, nextRenderExpirationTime = 0);
          requestWork(root, expirationTime);
          !isWorking && root === nextRoot && expirationTime < nextRenderExpirationTime && (nextUnitOfWork = nextRoot = null, nextRenderExpirationTime = 0);
        } else break;
        fiber = fiber["return"];
      }
    }

    function scheduleErrorRecovery(fiber) {
      scheduleWorkImpl(fiber, 1, !0);
    }

    function recalculateCurrentTime() {
      return mostRecentCurrentTime = ((now() - startTime) / 10 | 0) + 2;
    }

    function scheduleCallbackWithExpiration(expirationTime) {
      if (0 !== callbackExpirationTime) {
        if (expirationTime > callbackExpirationTime) return;
        cancelDeferredCallback(callbackID);
      }

      var currentMs = now() - startTime;
      callbackExpirationTime = expirationTime;
      callbackID = scheduleDeferredCallback(performAsyncWork, {
        timeout: 10 * (expirationTime - 2) - currentMs
      });
    }

    function requestWork(root, expirationTime) {
      nestedUpdateCount > NESTED_UPDATE_LIMIT && invariant(!1, "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
      if (null === root.nextScheduledRoot) root.remainingExpirationTime = expirationTime, null === lastScheduledRoot ? (firstScheduledRoot = lastScheduledRoot = root, root.nextScheduledRoot = root) : (lastScheduledRoot = lastScheduledRoot.nextScheduledRoot = root, lastScheduledRoot.nextScheduledRoot = firstScheduledRoot);else {
        var remainingExpirationTime = root.remainingExpirationTime;
        if (0 === remainingExpirationTime || expirationTime < remainingExpirationTime) root.remainingExpirationTime = expirationTime;
      }
      isRendering || (isBatchingUpdates ? isUnbatchingUpdates && (nextFlushedRoot = root, nextFlushedExpirationTime = 1, performWorkOnRoot(root, 1, recalculateCurrentTime())) : 1 === expirationTime ? performWork(1, null) : scheduleCallbackWithExpiration(expirationTime));
    }

    function findHighestPriorityRoot() {
      var highestPriorityWork = 0,
          highestPriorityRoot = null;
      if (null !== lastScheduledRoot) for (var previousScheduledRoot = lastScheduledRoot, root = firstScheduledRoot; null !== root;) {
        var remainingExpirationTime = root.remainingExpirationTime;

        if (0 === remainingExpirationTime) {
          invariant(null !== previousScheduledRoot && null !== lastScheduledRoot, "Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.");

          if (root === root.nextScheduledRoot) {
            firstScheduledRoot = lastScheduledRoot = root.nextScheduledRoot = null;
            break;
          } else if (root === firstScheduledRoot) firstScheduledRoot = remainingExpirationTime = root.nextScheduledRoot, lastScheduledRoot.nextScheduledRoot = remainingExpirationTime, root.nextScheduledRoot = null;else if (root === lastScheduledRoot) {
            lastScheduledRoot = previousScheduledRoot;
            lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
            root.nextScheduledRoot = null;
            break;
          } else previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot, root.nextScheduledRoot = null;

          root = previousScheduledRoot.nextScheduledRoot;
        } else {
          if (0 === highestPriorityWork || remainingExpirationTime < highestPriorityWork) highestPriorityWork = remainingExpirationTime, highestPriorityRoot = root;
          if (root === lastScheduledRoot) break;
          previousScheduledRoot = root;
          root = root.nextScheduledRoot;
        }
      }
      previousScheduledRoot = nextFlushedRoot;
      null !== previousScheduledRoot && previousScheduledRoot === highestPriorityRoot ? nestedUpdateCount++ : nestedUpdateCount = 0;
      nextFlushedRoot = highestPriorityRoot;
      nextFlushedExpirationTime = highestPriorityWork;
    }

    function performAsyncWork(dl) {
      performWork(0, dl);
    }

    function performWork(minExpirationTime, dl) {
      deadline = dl;

      for (findHighestPriorityRoot(); null !== nextFlushedRoot && 0 !== nextFlushedExpirationTime && (0 === minExpirationTime || nextFlushedExpirationTime <= minExpirationTime) && !deadlineDidExpire;) {
        performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, recalculateCurrentTime()), findHighestPriorityRoot();
      }

      null !== deadline && (callbackExpirationTime = 0, callbackID = -1);
      0 !== nextFlushedExpirationTime && scheduleCallbackWithExpiration(nextFlushedExpirationTime);
      deadline = null;
      deadlineDidExpire = !1;
      nestedUpdateCount = 0;
      finishRendering();
    }

    function finishRendering() {
      if (null !== completedBatches) {
        var batches = completedBatches;
        completedBatches = null;

        for (var i = 0; i < batches.length; i++) {
          var batch = batches[i];

          try {
            batch._onComplete();
          } catch (error) {
            hasUnhandledError || (hasUnhandledError = !0, unhandledError = error);
          }
        }
      }

      if (hasUnhandledError) throw batches = unhandledError, unhandledError = null, hasUnhandledError = !1, batches;
    }

    function performWorkOnRoot(root, expirationTime, currentTime) {
      invariant(!isRendering, "performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.");
      isRendering = !0;
      expirationTime <= currentTime ? (currentTime = root.finishedWork, null !== currentTime ? completeRoot(root, currentTime, expirationTime) : (root.finishedWork = null, currentTime = renderRoot(root, expirationTime), null !== currentTime && completeRoot(root, currentTime, expirationTime))) : (currentTime = root.finishedWork, null !== currentTime ? completeRoot(root, currentTime, expirationTime) : (root.finishedWork = null, currentTime = renderRoot(root, expirationTime), null !== currentTime && (shouldYield() ? root.finishedWork = currentTime : completeRoot(root, currentTime, expirationTime))));
      isRendering = !1;
    }

    function completeRoot(root, finishedWork, expirationTime) {
      var firstBatch = root.firstBatch;

      if (null !== firstBatch && firstBatch._expirationTime <= expirationTime && (null === completedBatches ? completedBatches = [firstBatch] : completedBatches.push(firstBatch), firstBatch._defer)) {
        root.finishedWork = finishedWork;
        root.remainingExpirationTime = 0;
        return;
      }

      root.finishedWork = null;
      isCommitting = isWorking = !0;
      expirationTime = finishedWork.stateNode;
      invariant(expirationTime.current !== finishedWork, "Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.");
      expirationTime.isReadyForCommit = !1;
      ReactCurrentOwner.current = null;
      1 < finishedWork.effectTag ? null !== finishedWork.lastEffect ? (finishedWork.lastEffect.nextEffect = finishedWork, firstBatch = finishedWork.firstEffect) : firstBatch = finishedWork : firstBatch = finishedWork.firstEffect;
      prepareForCommit();

      for (nextEffect = firstBatch; null !== nextEffect;) {
        var didError = !1,
            _error = void 0;

        try {
          for (; null !== nextEffect;) {
            var effectTag = nextEffect.effectTag;
            effectTag & 16 && commitResetTextContent(nextEffect);

            if (effectTag & 128) {
              var current = nextEffect.alternate;
              null !== current && commitDetachRef(current);
            }

            switch (effectTag & -242) {
              case 2:
                commitPlacement(nextEffect);
                nextEffect.effectTag &= -3;
                break;

              case 6:
                commitPlacement(nextEffect);
                nextEffect.effectTag &= -3;
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 4:
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 8:
                isUnmounting = !0, commitDeletion(nextEffect), isUnmounting = !1;
            }

            nextEffect = nextEffect.nextEffect;
          }
        } catch (e) {
          didError = !0, _error = e;
        }

        didError && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), captureError(nextEffect, _error), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
      }

      resetAfterCommit();
      expirationTime.current = finishedWork;

      for (nextEffect = firstBatch; null !== nextEffect;) {
        effectTag = !1;
        current = void 0;

        try {
          for (; null !== nextEffect;) {
            var effectTag$jscomp$0 = nextEffect.effectTag;
            effectTag$jscomp$0 & 36 && commitLifeCycles(nextEffect.alternate, nextEffect);
            effectTag$jscomp$0 & 128 && commitAttachRef(nextEffect);
            if (effectTag$jscomp$0 & 64) switch (firstBatch = nextEffect, didError = void 0, null !== capturedErrors && (didError = capturedErrors.get(firstBatch), capturedErrors["delete"](firstBatch), null == didError && null !== firstBatch.alternate && (firstBatch = firstBatch.alternate, didError = capturedErrors.get(firstBatch), capturedErrors["delete"](firstBatch))), invariant(null != didError, "No error for given unit of work. This error is likely caused by a bug in React. Please file an issue."), firstBatch.tag) {
              case 2:
                firstBatch.stateNode.componentDidCatch(didError.error, {
                  componentStack: didError.componentStack
                });
                break;

              case 3:
                null === firstUncaughtError && (firstUncaughtError = didError.error);
                break;

              default:
                invariant(!1, "Invalid type of work. This error is likely caused by a bug in React. Please file an issue.");
            }
            var next = nextEffect.nextEffect;
            nextEffect.nextEffect = null;
            nextEffect = next;
          }
        } catch (e) {
          effectTag = !0, current = e;
        }

        effectTag && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), captureError(nextEffect, current), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
      }

      isWorking = isCommitting = !1;
      "function" === typeof onCommitRoot && onCommitRoot(finishedWork.stateNode);
      commitPhaseBoundaries && (commitPhaseBoundaries.forEach(scheduleErrorRecovery), commitPhaseBoundaries = null);
      null !== firstUncaughtError && (finishedWork = firstUncaughtError, firstUncaughtError = null, onUncaughtError(finishedWork));
      finishedWork = expirationTime.current.expirationTime;
      0 === finishedWork && (failedBoundaries = capturedErrors = null);
      root.remainingExpirationTime = finishedWork;
    }

    function shouldYield() {
      return null === deadline || deadline.timeRemaining() > timeHeuristicForUnitOfWork ? !1 : deadlineDidExpire = !0;
    }

    function onUncaughtError(error) {
      invariant(null !== nextFlushedRoot, "Should be working on a root. This error is likely caused by a bug in React. Please file an issue.");
      nextFlushedRoot.remainingExpirationTime = 0;
      hasUnhandledError || (hasUnhandledError = !0, unhandledError = error);
    }

    var hostContext = ReactFiberHostContext(config),
        hydrationContext = ReactFiberHydrationContext(config),
        popHostContainer = hostContext.popHostContainer,
        popHostContext = hostContext.popHostContext,
        resetHostContainer = hostContext.resetHostContainer,
        _ReactFiberBeginWork = ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber),
        beginWork = _ReactFiberBeginWork.beginWork,
        beginFailedWork = _ReactFiberBeginWork.beginFailedWork,
        completeWork = ReactFiberCompleteWork(config, hostContext, hydrationContext).completeWork;

    hostContext = ReactFiberCommitWork(config, captureError);
    var commitResetTextContent = hostContext.commitResetTextContent,
        commitPlacement = hostContext.commitPlacement,
        commitDeletion = hostContext.commitDeletion,
        commitWork = hostContext.commitWork,
        commitLifeCycles = hostContext.commitLifeCycles,
        commitAttachRef = hostContext.commitAttachRef,
        commitDetachRef = hostContext.commitDetachRef,
        now = config.now,
        scheduleDeferredCallback = config.scheduleDeferredCallback,
        cancelDeferredCallback = config.cancelDeferredCallback,
        useSyncScheduling = config.useSyncScheduling,
        prepareForCommit = config.prepareForCommit,
        resetAfterCommit = config.resetAfterCommit,
        startTime = now(),
        mostRecentCurrentTime = 2,
        lastUniqueAsyncExpiration = 0,
        expirationContext = 0,
        isWorking = !1,
        nextUnitOfWork = null,
        nextRoot = null,
        nextRenderExpirationTime = 0,
        nextEffect = null,
        capturedErrors = null,
        failedBoundaries = null,
        commitPhaseBoundaries = null,
        firstUncaughtError = null,
        didFatal = !1,
        isCommitting = !1,
        isUnmounting = !1,
        firstScheduledRoot = null,
        lastScheduledRoot = null,
        callbackExpirationTime = 0,
        callbackID = -1,
        isRendering = !1,
        nextFlushedRoot = null,
        nextFlushedExpirationTime = 0,
        deadlineDidExpire = !1,
        hasUnhandledError = !1,
        unhandledError = null,
        deadline = null,
        isBatchingUpdates = !1,
        isUnbatchingUpdates = !1,
        completedBatches = null,
        NESTED_UPDATE_LIMIT = 1e3,
        nestedUpdateCount = 0,
        timeHeuristicForUnitOfWork = 1;
    return {
      computeAsyncExpiration: computeAsyncExpiration,
      computeExpirationForFiber: computeExpirationForFiber,
      scheduleWork: scheduleWork,
      requestWork: requestWork,
      flushRoot: function flushRoot(root, expirationTime) {
        invariant(!isRendering, "work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.");
        performWorkOnRoot(root, expirationTime, expirationTime);
        finishRendering();
      },
      batchedUpdates: function batchedUpdates(fn, a) {
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = !0;

        try {
          return fn(a);
        } finally {
          (isBatchingUpdates = previousIsBatchingUpdates) || isRendering || performWork(1, null);
        }
      },
      unbatchedUpdates: function unbatchedUpdates(fn) {
        if (isBatchingUpdates && !isUnbatchingUpdates) {
          isUnbatchingUpdates = !0;

          try {
            return fn();
          } finally {
            isUnbatchingUpdates = !1;
          }
        }

        return fn();
      },
      flushSync: function flushSync(fn) {
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = !0;

        try {
          a: {
            var previousExpirationContext = expirationContext;
            expirationContext = 1;

            try {
              var JSCompiler_inline_result = fn();
              break a;
            } finally {
              expirationContext = previousExpirationContext;
            }

            JSCompiler_inline_result = void 0;
          }

          return JSCompiler_inline_result;
        } finally {
          isBatchingUpdates = previousIsBatchingUpdates, invariant(!isRendering, "flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering."), performWork(1, null);
        }
      },
      deferredUpdates: function deferredUpdates(fn) {
        var previousExpirationContext = expirationContext;
        expirationContext = computeAsyncExpiration();

        try {
          return fn();
        } finally {
          expirationContext = previousExpirationContext;
        }
      },
      computeUniqueAsyncExpiration: function computeUniqueAsyncExpiration() {
        var result = computeAsyncExpiration();
        result <= lastUniqueAsyncExpiration && (result = lastUniqueAsyncExpiration + 1);
        return lastUniqueAsyncExpiration = result;
      }
    };
  }

  function ReactFiberReconciler$1(config) {
    function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
      var current = container.current;

      if (parentComponent) {
        parentComponent = parentComponent._reactInternalFiber;
        var parentContext;

        b: {
          invariant(2 === isFiberMountedImpl(parentComponent) && 2 === parentComponent.tag, "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");

          for (parentContext = parentComponent; 3 !== parentContext.tag;) {
            if (isContextProvider(parentContext)) {
              parentContext = parentContext.stateNode.__reactInternalMemoizedMergedChildContext;
              break b;
            }

            parentContext = parentContext["return"];
            invariant(parentContext, "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }

          parentContext = parentContext.stateNode.context;
        }

        parentComponent = isContextProvider(parentComponent) ? processChildContext(parentComponent, parentContext) : parentContext;
      } else parentComponent = emptyObject;

      null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
      container = callback;
      insertUpdateIntoFiber(current, {
        expirationTime: expirationTime,
        partialState: {
          element: element
        },
        callback: void 0 === container ? null : container,
        isReplace: !1,
        isForced: !1,
        next: null
      });
      scheduleWork(current, expirationTime);
      return expirationTime;
    }

    function findHostInstance(fiber) {
      fiber = findCurrentHostFiber(fiber);
      return null === fiber ? null : fiber.stateNode;
    }

    var getPublicInstance = config.getPublicInstance;
    config = ReactFiberScheduler(config);
    var computeAsyncExpiration = config.computeAsyncExpiration,
        computeExpirationForFiber = config.computeExpirationForFiber,
        scheduleWork = config.scheduleWork;
    return {
      createContainer: function createContainer(containerInfo, hydrate) {
        var uninitializedFiber = createFiber(3, null, 0);
        containerInfo = {
          current: uninitializedFiber,
          containerInfo: containerInfo,
          pendingChildren: null,
          remainingExpirationTime: 0,
          isReadyForCommit: !1,
          finishedWork: null,
          context: null,
          pendingContext: null,
          hydrate: hydrate,
          firstBatch: null,
          nextScheduledRoot: null
        };
        return uninitializedFiber.stateNode = containerInfo;
      },
      updateContainer: function updateContainer(element, container, parentComponent, callback) {
        var current = container.current;
        current = null != element && null != element.type && null != element.type.prototype && !0 === element.type.prototype.unstable_isAsyncReactComponent ? computeAsyncExpiration() : computeExpirationForFiber(current);
        return updateContainerAtExpirationTime(element, container, parentComponent, current, callback);
      },
      updateContainerAtExpirationTime: updateContainerAtExpirationTime,
      flushRoot: config.flushRoot,
      requestWork: config.requestWork,
      computeUniqueAsyncExpiration: config.computeUniqueAsyncExpiration,
      batchedUpdates: config.batchedUpdates,
      unbatchedUpdates: config.unbatchedUpdates,
      deferredUpdates: config.deferredUpdates,
      flushSync: config.flushSync,
      getPublicRootInstance: function getPublicRootInstance(container) {
        container = container.current;
        if (!container.child) return null;

        switch (container.child.tag) {
          case 5:
            return getPublicInstance(container.child.stateNode);

          default:
            return container.child.stateNode;
        }
      },
      findHostInstance: findHostInstance,
      findHostInstanceWithNoPortals: function findHostInstanceWithNoPortals(fiber) {
        fiber = findCurrentHostFiberWithNoPortals(fiber);
        return null === fiber ? null : fiber.stateNode;
      },
      injectIntoDevTools: function injectIntoDevTools(devToolsConfig) {
        var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        return injectInternals(babelHelpers.extends({}, devToolsConfig, {
          findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
            return findHostInstance(fiber);
          },
          findFiberByHostInstance: function findFiberByHostInstance(instance) {
            return _findFiberByHostInstance ? _findFiberByHostInstance(instance) : null;
          }
        }));
      }
    };
  }

  var ReactFiberReconciler$2 = Object.freeze({
    default: ReactFiberReconciler$1
  }),
      ReactFiberReconciler$3 = ReactFiberReconciler$2 && ReactFiberReconciler$1 || ReactFiberReconciler$2,
      reactReconciler = ReactFiberReconciler$3["default"] ? ReactFiberReconciler$3["default"] : ReactFiberReconciler$3,
      viewConfigCallbacks = new Map(),
      viewConfigs = new Map(),
      ReactNativeFiberHostComponent = function () {
    function ReactNativeFiberHostComponent(tag, viewConfig) {
      if (!(this instanceof ReactNativeFiberHostComponent)) throw new TypeError("Cannot call a class as a function");
      this._nativeTag = tag;
      this._children = [];
      this.viewConfig = viewConfig;
    }

    ReactNativeFiberHostComponent.prototype.blur = function () {
      TextInputState.blurTextInput(this._nativeTag);
    };

    ReactNativeFiberHostComponent.prototype.focus = function () {
      TextInputState.focusTextInput(this._nativeTag);
    };

    ReactNativeFiberHostComponent.prototype.measure = function (callback) {
      UIManager.measure(this._nativeTag, mountSafeCallback(this, callback));
    };

    ReactNativeFiberHostComponent.prototype.measureInWindow = function (callback) {
      UIManager.measureInWindow(this._nativeTag, mountSafeCallback(this, callback));
    };

    ReactNativeFiberHostComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      UIManager.measureLayout(this._nativeTag, relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
    };

    ReactNativeFiberHostComponent.prototype.setNativeProps = function (nativeProps) {
      nativeProps = diffProperties(null, emptyObject$1, nativeProps, this.viewConfig.validAttributes);
      null != nativeProps && UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, nativeProps);
    };

    return ReactNativeFiberHostComponent;
  }(),
      now = "object" === typeof performance && "function" === typeof performance.now ? function () {
    return performance.now();
  } : function () {
    return Date.now();
  },
      scheduledCallback = null,
      frameDeadline = 0,
      frameDeadlineObject = {
    timeRemaining: function timeRemaining() {
      return frameDeadline - now();
    }
  };

  function setTimeoutCallback() {
    frameDeadline = now() + 5;
    var callback = scheduledCallback;
    scheduledCallback = null;
    null !== callback && callback(frameDeadlineObject);
  }

  function recursivelyUncacheFiberNode(node) {
    "number" === typeof node ? uncacheFiberNode(node) : (uncacheFiberNode(node._nativeTag), node._children.forEach(recursivelyUncacheFiberNode));
  }

  var NativeRenderer = reactReconciler({
    appendInitialChild: function appendInitialChild(parentInstance, child) {
      parentInstance._children.push(child);
    },
    createInstance: function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      hostContext = ReactNativeTagHandles.allocateTag();
      if (viewConfigs.has(type)) var viewConfig = viewConfigs.get(type);else viewConfig = viewConfigCallbacks.get(type), invariant("function" === typeof viewConfig, "View config not found for name %s", type), viewConfigCallbacks.set(type, null), viewConfig = viewConfig(), viewConfigs.set(type, viewConfig);
      invariant(viewConfig, "View config not found for name %s", type);
      type = viewConfig;
      viewConfig = diffProperties(null, emptyObject$1, props, type.validAttributes);
      UIManager.createView(hostContext, type.uiViewClassName, rootContainerInstance, viewConfig);
      rootContainerInstance = new ReactNativeFiberHostComponent(hostContext, type);
      instanceCache[hostContext] = internalInstanceHandle;
      instanceProps[hostContext] = props;
      return rootContainerInstance;
    },
    createTextInstance: function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
      hostContext = ReactNativeTagHandles.allocateTag();
      UIManager.createView(hostContext, "RCTRawText", rootContainerInstance, {
        text: text
      });
      instanceCache[hostContext] = internalInstanceHandle;
      return hostContext;
    },
    finalizeInitialChildren: function finalizeInitialChildren(parentInstance) {
      if (0 === parentInstance._children.length) return !1;

      var nativeTags = parentInstance._children.map(function (child) {
        return "number" === typeof child ? child : child._nativeTag;
      });

      UIManager.setChildren(parentInstance._nativeTag, nativeTags);
      return !1;
    },
    getRootHostContext: function getRootHostContext() {
      return emptyObject;
    },
    getChildHostContext: function getChildHostContext() {
      return emptyObject;
    },
    getPublicInstance: function getPublicInstance(instance) {
      return instance;
    },
    now: now,
    prepareForCommit: function prepareForCommit() {},
    prepareUpdate: function prepareUpdate() {
      return emptyObject;
    },
    resetAfterCommit: function resetAfterCommit() {},
    scheduleDeferredCallback: function scheduleDeferredCallback(callback) {
      scheduledCallback = callback;
      return setTimeout(setTimeoutCallback, 1);
    },
    cancelDeferredCallback: function cancelDeferredCallback(callbackID) {
      scheduledCallback = null;
      clearTimeout(callbackID);
    },
    shouldDeprioritizeSubtree: function shouldDeprioritizeSubtree() {
      return !1;
    },
    shouldSetTextContent: function shouldSetTextContent() {
      return !1;
    },
    useSyncScheduling: !0,
    mutation: {
      appendChild: function appendChild(parentInstance, child) {
        var childTag = "number" === typeof child ? child : child._nativeTag,
            children = parentInstance._children,
            index = children.indexOf(child);
        0 <= index ? (children.splice(index, 1), children.push(child), UIManager.manageChildren(parentInstance._nativeTag, [index], [children.length - 1], [], [], [])) : (children.push(child), UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [children.length - 1], []));
      },
      appendChildToContainer: function appendChildToContainer(parentInstance, child) {
        UIManager.setChildren(parentInstance, ["number" === typeof child ? child : child._nativeTag]);
      },
      commitTextUpdate: function commitTextUpdate(textInstance, oldText, newText) {
        UIManager.updateView(textInstance, "RCTRawText", {
          text: newText
        });
      },
      commitMount: function commitMount() {},
      commitUpdate: function commitUpdate(instance, updatePayloadTODO, type, oldProps, newProps) {
        updatePayloadTODO = instance.viewConfig;
        instanceProps[instance._nativeTag] = newProps;
        oldProps = diffProperties(null, oldProps, newProps, updatePayloadTODO.validAttributes);
        null != oldProps && UIManager.updateView(instance._nativeTag, updatePayloadTODO.uiViewClassName, oldProps);
      },
      insertBefore: function insertBefore(parentInstance, child, beforeChild) {
        var children = parentInstance._children,
            index = children.indexOf(child);
        0 <= index ? (children.splice(index, 1), beforeChild = children.indexOf(beforeChild), children.splice(beforeChild, 0, child), UIManager.manageChildren(parentInstance._nativeTag, [index], [beforeChild], [], [], [])) : (index = children.indexOf(beforeChild), children.splice(index, 0, child), UIManager.manageChildren(parentInstance._nativeTag, [], [], ["number" === typeof child ? child : child._nativeTag], [index], []));
      },
      insertInContainerBefore: function insertInContainerBefore(parentInstance) {
        invariant("number" !== typeof parentInstance, "Container does not support insertBefore operation");
      },
      removeChild: function removeChild(parentInstance, child) {
        recursivelyUncacheFiberNode(child);
        var children = parentInstance._children;
        child = children.indexOf(child);
        children.splice(child, 1);
        UIManager.manageChildren(parentInstance._nativeTag, [], [], [], [], [child]);
      },
      removeChildFromContainer: function removeChildFromContainer(parentInstance, child) {
        recursivelyUncacheFiberNode(child);
        UIManager.manageChildren(parentInstance, [], [], [], [], [0]);
      },
      resetTextContent: function resetTextContent() {}
    }
  });

  function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    var internalInstance = componentOrHandle._reactInternalFiber;
    if (internalInstance) return NativeRenderer.findHostInstance(internalInstance);
    if (componentOrHandle) return componentOrHandle;
    invariant("object" === typeof componentOrHandle && "_nativeTag" in componentOrHandle || null != componentOrHandle.render && "function" === typeof componentOrHandle.render, "findNodeHandle(...): Argument is not a component (type: %s, keys: %s)", typeof componentOrHandle, Object.keys(componentOrHandle));
    invariant(!1, "findNodeHandle(...): Unable to find node handle for unmounted component.");
  }

  function findNumericNodeHandleFiber(componentOrHandle) {
    componentOrHandle = findNodeHandle(componentOrHandle);
    return null == componentOrHandle || "number" === typeof componentOrHandle ? componentOrHandle : componentOrHandle._nativeTag;
  }

  function _inherits(subClass, superClass) {
    if ("function" !== typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    });
    superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
  }

  var ReactNativeComponent = function (_React$Component) {
    function ReactNativeComponent() {
      if (!(this instanceof ReactNativeComponent)) throw new TypeError("Cannot call a class as a function");

      var call = _React$Component.apply(this, arguments);

      if (!this) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return !call || "object" !== typeof call && "function" !== typeof call ? this : call;
    }

    _inherits(ReactNativeComponent, _React$Component);

    ReactNativeComponent.prototype.blur = function () {
      TextInputState.blurTextInput(findNumericNodeHandleFiber(this));
    };

    ReactNativeComponent.prototype.focus = function () {
      TextInputState.focusTextInput(findNumericNodeHandleFiber(this));
    };

    ReactNativeComponent.prototype.measure = function (callback) {
      UIManager.measure(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
    };

    ReactNativeComponent.prototype.measureInWindow = function (callback) {
      UIManager.measureInWindow(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
    };

    ReactNativeComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      UIManager.measureLayout(findNumericNodeHandleFiber(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
    };

    ReactNativeComponent.prototype.setNativeProps = function (nativeProps) {
      var maybeInstance = void 0;

      try {
        maybeInstance = findNodeHandle(this);
      } catch (error) {}

      if (null != maybeInstance) {
        var viewConfig = maybeInstance.viewConfig;
        nativeProps = diffProperties(null, emptyObject$1, nativeProps, viewConfig.validAttributes);
        null != nativeProps && UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, nativeProps);
      }
    };

    return ReactNativeComponent;
  }(React.Component),
      getInspectorDataForViewTag = void 0;

  getInspectorDataForViewTag = function getInspectorDataForViewTag() {
    invariant(!1, "getInspectorDataForViewTag() is not available in production");
  };

  fiberBatchedUpdates = NativeRenderer.batchedUpdates;
  var roots = new Map();

  function fn$jscomp$inline_616(capturedError) {
    var componentStack = capturedError.componentStack,
        error = capturedError.error;

    if (error instanceof Error) {
      capturedError = error.message;
      var name = error.name;

      try {
        error.message = (capturedError ? name + ": " + capturedError : name) + "\n\nThis error is located at:" + componentStack;
      } catch (e) {}
    } else error = "string" === typeof error ? Error(error + "\n\nThis error is located at:" + componentStack) : Error("Unspecified error at:" + componentStack);

    ExceptionsManager.handleException(error, !1);
    return !1;
  }

  invariant(showDialog === defaultShowDialog, "The custom dialog was already injected.");
  invariant("function" === typeof fn$jscomp$inline_616, "Injected showDialog() must be a function.");
  showDialog = fn$jscomp$inline_616;
  var ReactNativeRenderer = {
    NativeComponent: ReactNativeComponent,
    findNodeHandle: findNumericNodeHandleFiber,
    render: function render(element, containerTag, callback) {
      var root = roots.get(containerTag);
      root || (root = NativeRenderer.createContainer(containerTag, !1), roots.set(containerTag, root));
      NativeRenderer.updateContainer(element, root, null, callback);
      return NativeRenderer.getPublicRootInstance(root);
    },
    unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
      var root = roots.get(containerTag);
      root && NativeRenderer.updateContainer(null, root, null, function () {
        roots["delete"](containerTag);
      });
    },
    unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
      ReactNativeRenderer.unmountComponentAtNode(containerTag);
      UIManager.removeRootView(containerTag);
    },
    createPortal: function createPortal(children, containerTag) {
      return _createPortal(children, containerTag, null, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);
    },
    unstable_batchedUpdates: batchedUpdates,
    flushSync: NativeRenderer.flushSync,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      NativeMethodsMixin: {
        measure: function measure(callback) {
          UIManager.measure(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        },
        measureInWindow: function measureInWindow(callback) {
          UIManager.measureInWindow(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        },
        measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          UIManager.measureLayout(findNumericNodeHandleFiber(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
        },
        setNativeProps: function setNativeProps(nativeProps) {
          var maybeInstance = void 0;

          try {
            maybeInstance = findNodeHandle(this);
          } catch (error) {}

          if (null != maybeInstance) {
            var viewConfig = maybeInstance.viewConfig;
            nativeProps = diffProperties(null, emptyObject$1, nativeProps, viewConfig.validAttributes);
            null != nativeProps && UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, nativeProps);
          }
        },
        focus: function focus() {
          TextInputState.focusTextInput(findNumericNodeHandleFiber(this));
        },
        blur: function blur() {
          TextInputState.blurTextInput(findNumericNodeHandleFiber(this));
        }
      },
      ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin,
      ReactGlobalSharedState: ReactGlobalSharedState,
      ReactNativeComponentTree: ReactNativeComponentTree,
      ReactNativePropRegistry: ReactNativePropRegistry,
      TouchHistoryMath: TouchHistoryMath,
      createReactNativeComponentClass: function createReactNativeComponentClass(name, callback) {
        invariant(!viewConfigCallbacks.has(name), "Tried to register two views with the same name %s", name);
        viewConfigCallbacks.set(name, callback);
        return name;
      },
      takeSnapshot: function takeSnapshot(view, options) {
        "number" !== typeof view && "window" !== view && (view = findNumericNodeHandleFiber(view) || "window");
        return UIManager.__takeSnapshot(view, options);
      }
    }
  };
  NativeRenderer.injectIntoDevTools({
    findFiberByHostInstance: getInstanceFromTag,
    getInspectorDataForViewTag: getInspectorDataForViewTag,
    bundleType: 0,
    version: "16.2.0",
    rendererPackageName: "react-native-renderer"
  });
  var ReactNativeRenderer$2 = Object.freeze({
    default: ReactNativeRenderer
  }),
      ReactNativeRenderer$3 = ReactNativeRenderer$2 && ReactNativeRenderer || ReactNativeRenderer$2;
  module.exports = ReactNativeRenderer$3["default"] ? ReactNativeRenderer$3["default"] : ReactNativeRenderer$3;
},120,[23,13,57,106,107,108,31,115,116,101,111,117,119],"ReactNativeRenderer-prod");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactDebugTool;
},121,[21],"ReactDebugTool");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicator.js";

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var NativeMethodsMixin = require(_dependencyMap[1], 'NativeMethodsMixin');

  var Platform = require(_dependencyMap[2], 'Platform');

  var ProgressBarAndroid = require(_dependencyMap[3], 'ProgressBarAndroid');

  var PropTypes = require(_dependencyMap[4], 'prop-types');

  var React = require(_dependencyMap[5], 'React');

  var StyleSheet = require(_dependencyMap[6], 'StyleSheet');

  var View = require(_dependencyMap[7], 'View');

  var ViewPropTypes = require(_dependencyMap[8], 'ViewPropTypes');

  var createReactClass = require(_dependencyMap[9], 'create-react-class');

  var requireNativeComponent = require(_dependencyMap[10], 'requireNativeComponent');

  var GRAY = '#999999';
  var ActivityIndicator = createReactClass({
    displayName: 'ActivityIndicator',
    mixins: [NativeMethodsMixin],
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      animating: PropTypes.bool,
      color: ColorPropType,
      size: PropTypes.oneOfType([PropTypes.oneOf(['small', 'large']), PropTypes.number]),
      hidesWhenStopped: PropTypes.bool
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        animating: true,
        color: Platform.OS === 'ios' ? GRAY : undefined,
        hidesWhenStopped: true,
        size: 'small'
      };
    },
    render: function render() {
      var _props = this.props,
          onLayout = _props.onLayout,
          style = _props.style,
          props = babelHelpers.objectWithoutProperties(_props, ["onLayout", "style"]);
      var sizeStyle = void 0;

      switch (props.size) {
        case 'small':
          sizeStyle = styles.sizeSmall;
          break;

        case 'large':
          sizeStyle = styles.sizeLarge;
          break;

        default:
          sizeStyle = {
            height: props.size,
            width: props.size
          };
          break;
      }

      var nativeProps = babelHelpers.extends({}, props, {
        style: sizeStyle,
        styleAttr: 'Normal',
        indeterminate: true
      });
      return React.createElement(
        View,
        {
          onLayout: onLayout,
          style: [styles.container, style],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 114
          }
        },
        Platform.OS === 'ios' ? React.createElement(RCTActivityIndicator, babelHelpers.extends({}, nativeProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 116
          }
        })) : React.createElement(ProgressBarAndroid, babelHelpers.extends({}, nativeProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 118
          }
        }))
      );
    }
  });
  var styles = StyleSheet.create({
    container: {
      alignItems: 'center',
      justifyContent: 'center'
    },
    sizeSmall: {
      width: 20,
      height: 20
    },
    sizeLarge: {
      width: 36,
      height: 36
    }
  });

  if (Platform.OS === 'ios') {
    var RCTActivityIndicator = requireNativeComponent('RCTActivityIndicatorView', ActivityIndicator, {
      nativeOnly: {
        activityIndicatorViewStyle: true
      }
    });
  }

  module.exports = ActivityIndicator;
},122,[123,125,52,126,127,130,168,170,131,172,145],"ActivityIndicator");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var normalizeColor = require(_dependencyMap[0], 'normalizeColor');

  var colorPropType = function colorPropType(isRequired, props, propName, componentName, location, propFullName) {
    var color = props[propName];

    if (color === undefined || color === null) {
      if (isRequired) {
        return new Error('Required ' + location + ' `' + (propFullName || propName) + '` was not specified in `' + componentName + '`.');
      }

      return;
    }

    if (typeof color === 'number') {
      return;
    }

    if (normalizeColor(color) === null) {
      return new Error('Invalid ' + location + ' `' + (propFullName || propName) + '` supplied to `' + componentName + '`: ' + color + '\n' + "Valid color formats are\n  - '#f0f' (#rgb)\n  - '#f0fc' (#rgba)\n  - '#ff00ff' (#rrggbb)\n  - '#ff00ff00' (#rrggbbaa)\n  - 'rgb(255, 255, 255)'\n  - 'rgba(255, 255, 255, 1.0)'\n  - 'hsl(360, 100%, 100%)'\n  - 'hsla(360, 100%, 100%, 1.0)'\n  - 'transparent'\n  - 'red'\n  - 0xff00ff00 (0xrrggbbaa)\n");
    }
  };

  var ColorPropType = colorPropType.bind(null, false);
  ColorPropType.isRequired = colorPropType.bind(null, true);
  module.exports = ColorPropType;
},123,[124],"ColorPropType");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function normalizeColor(color) {
    var match;

    if (typeof color === 'number') {
      if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
        return color;
      }

      return null;
    }

    if (match = matchers.hex6.exec(color)) {
      return parseInt(match[1] + 'ff', 16) >>> 0;
    }

    if (names.hasOwnProperty(color)) {
      return names[color];
    }

    if (match = matchers.rgb.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 0x000000ff) >>> 0;
    }

    if (match = matchers.rgba.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
    }

    if (match = matchers.hex3.exec(color)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + 'ff', 16) >>> 0;
    }

    if (match = matchers.hex8.exec(color)) {
      return parseInt(match[1], 16) >>> 0;
    }

    if (match = matchers.hex4.exec(color)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
    }

    if (match = matchers.hsl.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 0x000000ff) >>> 0;
    }

    if (match = matchers.hsla.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
    }

    return null;
  }

  function hue2rgb(p, q, t) {
    if (t < 0) {
      t += 1;
    }

    if (t > 1) {
      t -= 1;
    }

    if (t < 1 / 6) {
      return p + (q - p) * 6 * t;
    }

    if (t < 1 / 2) {
      return q;
    }

    if (t < 2 / 3) {
      return p + (q - p) * (2 / 3 - t) * 6;
    }

    return p;
  }

  function hslToRgb(h, s, l) {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    var r = hue2rgb(p, q, h + 1 / 3);
    var g = hue2rgb(p, q, h);
    var b = hue2rgb(p, q, h - 1 / 3);
    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
  }

  var NUMBER = '[-+]?\\d*\\.?\\d+';
  var PERCENTAGE = NUMBER + '%';

  function call() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return '\\(\\s*(' + args.join(')\\s*,\\s*(') + ')\\s*\\)';
  }

  var matchers = {
    rgb: new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER)),
    rgba: new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER)),
    hsl: new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
    hsla: new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)),
    hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex6: /^#([0-9a-fA-F]{6})$/,
    hex8: /^#([0-9a-fA-F]{8})$/
  };

  function parse255(str) {
    var int = parseInt(str, 10);

    if (int < 0) {
      return 0;
    }

    if (int > 255) {
      return 255;
    }

    return int;
  }

  function parse360(str) {
    var int = parseFloat(str);
    return (int % 360 + 360) % 360 / 360;
  }

  function parse1(str) {
    var num = parseFloat(str);

    if (num < 0) {
      return 0;
    }

    if (num > 1) {
      return 255;
    }

    return Math.round(num * 255);
  }

  function parsePercentage(str) {
    var int = parseFloat(str);

    if (int < 0) {
      return 0;
    }

    if (int > 100) {
      return 1;
    }

    return int / 100;
  }

  var names = {
    transparent: 0x00000000,
    aliceblue: 0xf0f8ffff,
    antiquewhite: 0xfaebd7ff,
    aqua: 0x00ffffff,
    aquamarine: 0x7fffd4ff,
    azure: 0xf0ffffff,
    beige: 0xf5f5dcff,
    bisque: 0xffe4c4ff,
    black: 0x000000ff,
    blanchedalmond: 0xffebcdff,
    blue: 0x0000ffff,
    blueviolet: 0x8a2be2ff,
    brown: 0xa52a2aff,
    burlywood: 0xdeb887ff,
    burntsienna: 0xea7e5dff,
    cadetblue: 0x5f9ea0ff,
    chartreuse: 0x7fff00ff,
    chocolate: 0xd2691eff,
    coral: 0xff7f50ff,
    cornflowerblue: 0x6495edff,
    cornsilk: 0xfff8dcff,
    crimson: 0xdc143cff,
    cyan: 0x00ffffff,
    darkblue: 0x00008bff,
    darkcyan: 0x008b8bff,
    darkgoldenrod: 0xb8860bff,
    darkgray: 0xa9a9a9ff,
    darkgreen: 0x006400ff,
    darkgrey: 0xa9a9a9ff,
    darkkhaki: 0xbdb76bff,
    darkmagenta: 0x8b008bff,
    darkolivegreen: 0x556b2fff,
    darkorange: 0xff8c00ff,
    darkorchid: 0x9932ccff,
    darkred: 0x8b0000ff,
    darksalmon: 0xe9967aff,
    darkseagreen: 0x8fbc8fff,
    darkslateblue: 0x483d8bff,
    darkslategray: 0x2f4f4fff,
    darkslategrey: 0x2f4f4fff,
    darkturquoise: 0x00ced1ff,
    darkviolet: 0x9400d3ff,
    deeppink: 0xff1493ff,
    deepskyblue: 0x00bfffff,
    dimgray: 0x696969ff,
    dimgrey: 0x696969ff,
    dodgerblue: 0x1e90ffff,
    firebrick: 0xb22222ff,
    floralwhite: 0xfffaf0ff,
    forestgreen: 0x228b22ff,
    fuchsia: 0xff00ffff,
    gainsboro: 0xdcdcdcff,
    ghostwhite: 0xf8f8ffff,
    gold: 0xffd700ff,
    goldenrod: 0xdaa520ff,
    gray: 0x808080ff,
    green: 0x008000ff,
    greenyellow: 0xadff2fff,
    grey: 0x808080ff,
    honeydew: 0xf0fff0ff,
    hotpink: 0xff69b4ff,
    indianred: 0xcd5c5cff,
    indigo: 0x4b0082ff,
    ivory: 0xfffff0ff,
    khaki: 0xf0e68cff,
    lavender: 0xe6e6faff,
    lavenderblush: 0xfff0f5ff,
    lawngreen: 0x7cfc00ff,
    lemonchiffon: 0xfffacdff,
    lightblue: 0xadd8e6ff,
    lightcoral: 0xf08080ff,
    lightcyan: 0xe0ffffff,
    lightgoldenrodyellow: 0xfafad2ff,
    lightgray: 0xd3d3d3ff,
    lightgreen: 0x90ee90ff,
    lightgrey: 0xd3d3d3ff,
    lightpink: 0xffb6c1ff,
    lightsalmon: 0xffa07aff,
    lightseagreen: 0x20b2aaff,
    lightskyblue: 0x87cefaff,
    lightslategray: 0x778899ff,
    lightslategrey: 0x778899ff,
    lightsteelblue: 0xb0c4deff,
    lightyellow: 0xffffe0ff,
    lime: 0x00ff00ff,
    limegreen: 0x32cd32ff,
    linen: 0xfaf0e6ff,
    magenta: 0xff00ffff,
    maroon: 0x800000ff,
    mediumaquamarine: 0x66cdaaff,
    mediumblue: 0x0000cdff,
    mediumorchid: 0xba55d3ff,
    mediumpurple: 0x9370dbff,
    mediumseagreen: 0x3cb371ff,
    mediumslateblue: 0x7b68eeff,
    mediumspringgreen: 0x00fa9aff,
    mediumturquoise: 0x48d1ccff,
    mediumvioletred: 0xc71585ff,
    midnightblue: 0x191970ff,
    mintcream: 0xf5fffaff,
    mistyrose: 0xffe4e1ff,
    moccasin: 0xffe4b5ff,
    navajowhite: 0xffdeadff,
    navy: 0x000080ff,
    oldlace: 0xfdf5e6ff,
    olive: 0x808000ff,
    olivedrab: 0x6b8e23ff,
    orange: 0xffa500ff,
    orangered: 0xff4500ff,
    orchid: 0xda70d6ff,
    palegoldenrod: 0xeee8aaff,
    palegreen: 0x98fb98ff,
    paleturquoise: 0xafeeeeff,
    palevioletred: 0xdb7093ff,
    papayawhip: 0xffefd5ff,
    peachpuff: 0xffdab9ff,
    peru: 0xcd853fff,
    pink: 0xffc0cbff,
    plum: 0xdda0ddff,
    powderblue: 0xb0e0e6ff,
    purple: 0x800080ff,
    rebeccapurple: 0x663399ff,
    red: 0xff0000ff,
    rosybrown: 0xbc8f8fff,
    royalblue: 0x4169e1ff,
    saddlebrown: 0x8b4513ff,
    salmon: 0xfa8072ff,
    sandybrown: 0xf4a460ff,
    seagreen: 0x2e8b57ff,
    seashell: 0xfff5eeff,
    sienna: 0xa0522dff,
    silver: 0xc0c0c0ff,
    skyblue: 0x87ceebff,
    slateblue: 0x6a5acdff,
    slategray: 0x708090ff,
    slategrey: 0x708090ff,
    snow: 0xfffafaff,
    springgreen: 0x00ff7fff,
    steelblue: 0x4682b4ff,
    tan: 0xd2b48cff,
    teal: 0x008080ff,
    thistle: 0xd8bfd8ff,
    tomato: 0xff6347ff,
    turquoise: 0x40e0d0ff,
    violet: 0xee82eeff,
    wheat: 0xf5deb3ff,
    white: 0xffffffff,
    whitesmoke: 0xf5f5f5ff,
    yellow: 0xffff00ff,
    yellowgreen: 0x9acd32ff
  };
  module.exports = normalizeColor;
},124,[],"normalizeColor");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  var NativeMethodsMixin = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.NativeMethodsMixin;
  module.exports = NativeMethodsMixin;
},125,[21],"NativeMethodsMixin");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.android.js";

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var PropTypes = require(_dependencyMap[1], 'prop-types');

  var React = require(_dependencyMap[2], 'React');

  var ReactNative = require(_dependencyMap[3], 'ReactNative');

  var ViewPropTypes = require(_dependencyMap[4], 'ViewPropTypes');

  var requireNativeComponent = require(_dependencyMap[5], 'requireNativeComponent');

  var STYLE_ATTRIBUTES = ['Horizontal', 'Normal', 'Small', 'Large', 'Inverse', 'SmallInverse', 'LargeInverse'];

  var indeterminateType = function indeterminateType(props, propName, componentName) {
    var checker = function checker() {
      var indeterminate = props[propName];
      var styleAttr = props.styleAttr;

      if (!indeterminate && styleAttr !== 'Horizontal') {
        return new Error('indeterminate=false is only valid for styleAttr=Horizontal');
      }
    };

    for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      rest[_key - 3] = arguments[_key];
    }

    return PropTypes.bool.apply(PropTypes, [props, propName, componentName].concat(rest)) || checker();
  };

  var ProgressBarAndroid = function (_ReactNative$NativeCo) {
    babelHelpers.inherits(ProgressBarAndroid, _ReactNative$NativeCo);

    function ProgressBarAndroid() {
      babelHelpers.classCallCheck(this, ProgressBarAndroid);
      return babelHelpers.possibleConstructorReturn(this, (ProgressBarAndroid.__proto__ || Object.getPrototypeOf(ProgressBarAndroid)).apply(this, arguments));
    }

    babelHelpers.createClass(ProgressBarAndroid, [{
      key: "render",
      value: function render() {
        return React.createElement(AndroidProgressBar, babelHelpers.extends({}, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 112
          }
        }));
      }
    }]);
    return ProgressBarAndroid;
  }(ReactNative.NativeComponent);

  ProgressBarAndroid.propTypes = babelHelpers.extends({}, ViewPropTypes, {
    styleAttr: PropTypes.oneOf(STYLE_ATTRIBUTES),
    animating: PropTypes.bool,
    indeterminate: indeterminateType,
    progress: PropTypes.number,
    color: ColorPropType,
    testID: PropTypes.string
  });
  ProgressBarAndroid.defaultProps = {
    styleAttr: 'Normal',
    indeterminate: true,
    animating: true
  };
  var AndroidProgressBar = requireNativeComponent('AndroidProgressBar', ProgressBarAndroid, {
    nativeOnly: {
      animating: true
    }
  });
  module.exports = ProgressBarAndroid;
},126,[123,127,130,21,131,145],"ProgressBarAndroid");
__d(function (global, require, module, exports, _dependencyMap) {
  if (process.env.NODE_ENV !== 'production') {
    var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")('react.element') || 0xeac7;

    var isValidElement = function isValidElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    };

    var throwOnDirectAccess = true;
    module.exports = require(_dependencyMap[0], './factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);
  } else {
    module.exports = require(_dependencyMap[1], './factoryWithThrowingShims')();
  }
},127,[128,129],"prop-types/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var emptyFunction = require(_dependencyMap[0], 'fbjs/lib/emptyFunction');

  var invariant = require(_dependencyMap[1], 'fbjs/lib/invariant');

  var warning = require(_dependencyMap[2], 'fbjs/lib/warning');

  var assign = require(_dependencyMap[3], 'object-assign');

  var ReactPropTypesSecret = require(_dependencyMap[4], './lib/ReactPropTypesSecret');

  var checkPropTypes = require(_dependencyMap[5], './checkPropTypes');

  module.exports = function (isValidElement, throwOnDirectAccess) {
    var ITERATOR_SYMBOL = typeof Symbol === 'function' && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");
    var FAUX_ITERATOR_SYMBOL = '@@iterator';

    function getIteratorFn(maybeIterable) {
      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);

      if (typeof iteratorFn === 'function') {
        return iteratorFn;
      }
    }

    var ANONYMOUS = '<<anonymous>>';
    var ReactPropTypes = {
      array: createPrimitiveTypeChecker('array'),
      bool: createPrimitiveTypeChecker('boolean'),
      func: createPrimitiveTypeChecker('function'),
      number: createPrimitiveTypeChecker('number'),
      object: createPrimitiveTypeChecker('object'),
      string: createPrimitiveTypeChecker('string'),
      symbol: createPrimitiveTypeChecker('symbol'),
      any: createAnyTypeChecker(),
      arrayOf: createArrayOfTypeChecker,
      element: createElementTypeChecker(),
      instanceOf: createInstanceTypeChecker,
      node: createNodeChecker(),
      objectOf: createObjectOfTypeChecker,
      oneOf: createEnumTypeChecker,
      oneOfType: createUnionTypeChecker,
      shape: createShapeTypeChecker,
      exact: createStrictShapeTypeChecker
    };

    function is(x, y) {
      if (x === y) {
        return x !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    }

    function PropTypeError(message) {
      this.message = message;
      this.stack = '';
    }

    PropTypeError.prototype = Error.prototype;

    function createChainableTypeChecker(validate) {
      if (process.env.NODE_ENV !== 'production') {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
      }

      function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
        componentName = componentName || ANONYMOUS;
        propFullName = propFullName || propName;

        if (secret !== ReactPropTypesSecret) {
          if (throwOnDirectAccess) {
            invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
          } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
            var cacheKey = componentName + ':' + propName;

            if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
              warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName);
              manualPropTypeCallCache[cacheKey] = true;
              manualPropTypeWarningCount++;
            }
          }
        }

        if (props[propName] == null) {
          if (isRequired) {
            if (props[propName] === null) {
              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
            }

            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
          }

          return null;
        } else {
          return validate(props, propName, componentName, location, propFullName);
        }
      }

      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);
      return chainedCheckType;
    }

    function createPrimitiveTypeChecker(expectedType) {
      function validate(props, propName, componentName, location, propFullName, secret) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== expectedType) {
          var preciseType = getPreciseType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunction.thatReturnsNull);
    }

    function createArrayOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
        }

        var propValue = props[propName];

        if (!Array.isArray(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
        }

        for (var i = 0; i < propValue.length; i++) {
          var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);

          if (error instanceof Error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createElementTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];

        if (!isValidElement(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createInstanceTypeChecker(expectedClass) {
      function validate(props, propName, componentName, location, propFullName) {
        if (!(props[propName] instanceof expectedClass)) {
          var expectedClassName = expectedClass.name || ANONYMOUS;
          var actualClassName = getClassName(props[propName]);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createEnumTypeChecker(expectedValues) {
      if (!Array.isArray(expectedValues)) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
        return emptyFunction.thatReturnsNull;
      }

      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];

        for (var i = 0; i < expectedValues.length; i++) {
          if (is(propValue, expectedValues[i])) {
            return null;
          }
        }

        var valuesString = JSON.stringify(expectedValues);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
      }

      return createChainableTypeChecker(validate);
    }

    function createObjectOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
        }

        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
        }

        for (var key in propValue) {
          if (propValue.hasOwnProperty(key)) {
            var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

            if (error instanceof Error) {
              return error;
            }
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createUnionTypeChecker(arrayOfTypeCheckers) {
      if (!Array.isArray(arrayOfTypeCheckers)) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
        return emptyFunction.thatReturnsNull;
      }

      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];

        if (typeof checker !== 'function') {
          warning(false, 'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received %s at index %s.', getPostfixForTypeWarning(checker), i);
          return emptyFunction.thatReturnsNull;
        }
      }

      function validate(props, propName, componentName, location, propFullName) {
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];

          if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
            return null;
          }
        }

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
      }

      return createChainableTypeChecker(validate);
    }

    function createNodeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        if (!isNode(props[propName])) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }

        for (var key in shapeTypes) {
          var checker = shapeTypes[key];

          if (!checker) {
            continue;
          }

          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

          if (error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createStrictShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }

        var allKeys = assign({}, props[propName], shapeTypes);

        for (var key in allKeys) {
          var checker = shapeTypes[key];

          if (!checker) {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
          }

          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

          if (error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function isNode(propValue) {
      switch (typeof propValue) {
        case 'number':
        case 'string':
        case 'undefined':
          return true;

        case 'boolean':
          return !propValue;

        case 'object':
          if (Array.isArray(propValue)) {
            return propValue.every(isNode);
          }

          if (propValue === null || isValidElement(propValue)) {
            return true;
          }

          var iteratorFn = getIteratorFn(propValue);

          if (iteratorFn) {
            var iterator = iteratorFn.call(propValue);
            var step;

            if (iteratorFn !== propValue.entries) {
              while (!(step = iterator.next()).done) {
                if (!isNode(step.value)) {
                  return false;
                }
              }
            } else {
              while (!(step = iterator.next()).done) {
                var entry = step.value;

                if (entry) {
                  if (!isNode(entry[1])) {
                    return false;
                  }
                }
              }
            }
          } else {
            return false;
          }

          return true;

        default:
          return false;
      }
    }

    function isSymbol(propType, propValue) {
      if (propType === 'symbol') {
        return true;
      }

      if (propValue['@@toStringTag'] === 'Symbol') {
        return true;
      }

      if (typeof Symbol === 'function' && propValue instanceof Symbol) {
        return true;
      }

      return false;
    }

    function getPropType(propValue) {
      var propType = typeof propValue;

      if (Array.isArray(propValue)) {
        return 'array';
      }

      if (propValue instanceof RegExp) {
        return 'object';
      }

      if (isSymbol(propType, propValue)) {
        return 'symbol';
      }

      return propType;
    }

    function getPreciseType(propValue) {
      if (typeof propValue === 'undefined' || propValue === null) {
        return '' + propValue;
      }

      var propType = getPropType(propValue);

      if (propType === 'object') {
        if (propValue instanceof Date) {
          return 'date';
        } else if (propValue instanceof RegExp) {
          return 'regexp';
        }
      }

      return propType;
    }

    function getPostfixForTypeWarning(value) {
      var type = getPreciseType(value);

      switch (type) {
        case 'array':
        case 'object':
          return 'an ' + type;

        case 'boolean':
        case 'date':
        case 'regexp':
          return 'a ' + type;

        default:
          return type;
      }
    }

    function getClassName(propValue) {
      if (!propValue.constructor || !propValue.constructor.name) {
        return ANONYMOUS;
      }

      return propValue.constructor.name;
    }

    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
},128,[57,13,56,110,114,113],"prop-types/factoryWithTypeCheckers.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var emptyFunction = require(_dependencyMap[0], 'fbjs/lib/emptyFunction');

  var invariant = require(_dependencyMap[1], 'fbjs/lib/invariant');

  var ReactPropTypesSecret = require(_dependencyMap[2], './lib/ReactPropTypesSecret');

  module.exports = function () {
    function shim(props, propName, componentName, location, propFullName, secret) {
      if (secret === ReactPropTypesSecret) {
        return;
      }

      invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
    }

    ;
    shim.isRequired = shim;

    function getShim() {
      return shim;
    }

    ;
    var ReactPropTypes = {
      array: shim,
      bool: shim,
      func: shim,
      number: shim,
      object: shim,
      string: shim,
      symbol: shim,
      any: shim,
      arrayOf: getShim,
      element: shim,
      instanceOf: getShim,
      node: shim,
      objectOf: getShim,
      oneOf: getShim,
      oneOfType: getShim,
      shape: getShim,
      exact: getShim
    };
    ReactPropTypes.checkPropTypes = emptyFunction;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
},129,[57,13,114],"prop-types/factoryWithThrowingShims.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = require(_dependencyMap[0], 'react');
},130,[108],"React");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EdgeInsetsPropType = require(_dependencyMap[0], 'EdgeInsetsPropType');

  var PlatformViewPropTypes = require(_dependencyMap[1], 'PlatformViewPropTypes');

  var PropTypes = require(_dependencyMap[2], 'prop-types');

  var StyleSheetPropType = require(_dependencyMap[3], 'StyleSheetPropType');

  var ViewStylePropTypes = require(_dependencyMap[4], 'ViewStylePropTypes');

  var _require = require(_dependencyMap[5], 'ViewAccessibility'),
      AccessibilityComponentTypes = _require.AccessibilityComponentTypes,
      AccessibilityTraits = _require.AccessibilityTraits;

  var stylePropType = StyleSheetPropType(ViewStylePropTypes);
  module.exports = babelHelpers.extends({}, PlatformViewPropTypes, {
    accessible: PropTypes.bool,
    accessibilityLabel: PropTypes.node,
    accessibilityActions: PropTypes.arrayOf(PropTypes.string),
    accessibilityComponentType: PropTypes.oneOf(AccessibilityComponentTypes),
    accessibilityLiveRegion: PropTypes.oneOf(['none', 'polite', 'assertive']),
    importantForAccessibility: PropTypes.oneOf(['auto', 'yes', 'no', 'no-hide-descendants']),
    accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(AccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(AccessibilityTraits))]),
    accessibilityViewIsModal: PropTypes.bool,
    onAccessibilityAction: PropTypes.func,
    onAccessibilityTap: PropTypes.func,
    onMagicTap: PropTypes.func,
    testID: PropTypes.string,
    nativeID: PropTypes.string,
    onResponderGrant: PropTypes.func,
    onResponderMove: PropTypes.func,
    onResponderReject: PropTypes.func,
    onResponderRelease: PropTypes.func,
    onResponderTerminate: PropTypes.func,
    onResponderTerminationRequest: PropTypes.func,
    onStartShouldSetResponder: PropTypes.func,
    onStartShouldSetResponderCapture: PropTypes.func,
    onMoveShouldSetResponder: PropTypes.func,
    onMoveShouldSetResponderCapture: PropTypes.func,
    hitSlop: EdgeInsetsPropType,
    onLayout: PropTypes.func,
    pointerEvents: PropTypes.oneOf(['box-none', 'none', 'box-only', 'auto']),
    style: stylePropType,
    removeClippedSubviews: PropTypes.bool,
    renderToHardwareTextureAndroid: PropTypes.bool,
    shouldRasterizeIOS: PropTypes.bool,
    collapsable: PropTypes.bool,
    needsOffscreenAlphaCompositing: PropTypes.bool
  });
},131,[132,137,127,138,139,144],"ViewPropTypes");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = require(_dependencyMap[0], 'prop-types');

  var createStrictShapeTypeChecker = require(_dependencyMap[1], 'createStrictShapeTypeChecker');

  var EdgeInsetsPropType = createStrictShapeTypeChecker({
    top: PropTypes.number,
    left: PropTypes.number,
    bottom: PropTypes.number,
    right: PropTypes.number
  });
  module.exports = EdgeInsetsPropType;
},132,[127,133],"EdgeInsetsPropType");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var merge = require(_dependencyMap[1], 'merge');

  function createStrictShapeTypeChecker(shapeTypes) {
    function checkType(isRequired, props, propName, componentName, location) {
      if (!props[propName]) {
        if (isRequired) {
          invariant(false, "Required object `" + propName + "` was not specified in " + ("`" + componentName + "`."));
        }

        return;
      }

      var propValue = props[propName];
      var propType = typeof propValue;
      var locationName = location || '(unknown)';

      if (propType !== 'object') {
        invariant(false, "Invalid " + locationName + " `" + propName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
      }

      var allKeys = merge(props[propName], shapeTypes);

      for (var _len = arguments.length, rest = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
        rest[_key - 5] = arguments[_key];
      }

      for (var key in allKeys) {
        var checker = shapeTypes[key];

        if (!checker) {
          invariant(false, "Invalid props." + propName + " key `" + key + "` supplied to `" + componentName + "`." + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }

        var error = checker.apply(undefined, [propValue, key, componentName, location].concat(rest));

        if (error) {
          invariant(false, error.message + '\nBad object: ' + JSON.stringify(props[propName], null, '  '));
        }
      }
    }

    function chainedCheckType(props, propName, componentName, location) {
      for (var _len2 = arguments.length, rest = Array(_len2 > 4 ? _len2 - 4 : 0), _key2 = 4; _key2 < _len2; _key2++) {
        rest[_key2 - 4] = arguments[_key2];
      }

      return checkType.apply(undefined, [false, props, propName, componentName, location].concat(rest));
    }

    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }

  module.exports = createStrictShapeTypeChecker;
},133,[13,134],"createStrictShapeTypeChecker");
__d(function (global, require, module, exports, _dependencyMap) {
  "use strict";

  var mergeInto = require(_dependencyMap[0], 'mergeInto');

  var merge = function merge(one, two) {
    var result = {};
    mergeInto(result, one);
    mergeInto(result, two);
    return result;
  };

  module.exports = merge;
},134,[135],"merge");
__d(function (global, require, module, exports, _dependencyMap) {
  "use strict";

  var mergeHelpers = require(_dependencyMap[0], 'mergeHelpers');

  var checkMergeObjectArg = mergeHelpers.checkMergeObjectArg;
  var checkMergeIntoObjectArg = mergeHelpers.checkMergeIntoObjectArg;

  function mergeInto(one, two) {
    checkMergeIntoObjectArg(one);

    if (two != null) {
      checkMergeObjectArg(two);

      for (var key in two) {
        if (!two.hasOwnProperty(key)) {
          continue;
        }

        one[key] = two[key];
      }
    }
  }

  module.exports = mergeInto;
},135,[136],"mergeInto");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var MAX_MERGE_DEPTH = 36;

  var isTerminal = function isTerminal(o) {
    return typeof o !== 'object' || o instanceof Date || o === null;
  };

  var mergeHelpers = {
    MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,
    isTerminal: isTerminal,
    normalizeMergeArg: function normalizeMergeArg(arg) {
      return arg === undefined || arg === null ? {} : arg;
    },
    checkMergeArrayArgs: function checkMergeArrayArgs(one, two) {
      invariant(Array.isArray(one) && Array.isArray(two), 'Tried to merge arrays, instead got %s and %s.', one, two);
    },
    checkMergeObjectArgs: function checkMergeObjectArgs(one, two) {
      mergeHelpers.checkMergeObjectArg(one);
      mergeHelpers.checkMergeObjectArg(two);
    },
    checkMergeObjectArg: function checkMergeObjectArg(arg) {
      invariant(!isTerminal(arg) && !Array.isArray(arg), 'Tried to merge an object, instead got %s.', arg);
    },
    checkMergeIntoObjectArg: function checkMergeIntoObjectArg(arg) {
      invariant((!isTerminal(arg) || typeof arg === 'function') && !Array.isArray(arg), 'Tried to merge into an object, instead got %s.', arg);
    },
    checkMergeLevel: function checkMergeLevel(level) {
      invariant(level < MAX_MERGE_DEPTH, 'Maximum deep merge depth exceeded. You may be attempting to merge ' + 'circular structures in an unsupported way.');
    },
    checkArrayStrategy: function checkArrayStrategy(strategy) {
      invariant(strategy === undefined || strategy in mergeHelpers.ArrayStrategies, 'You must provide an array strategy to deep merge functions to ' + 'instruct the deep merge how to resolve merging two arrays.');
    },
    ArrayStrategies: {
      Clobber: 'Clobber',
      Concat: 'Concat',
      IndexByIndex: 'IndexByIndex'
    }
  };
  module.exports = mergeHelpers;
},136,[13],"mergeHelpers");
__d(function (global, require, module, exports, _dependencyMap) {
  module.export = {};
},137,[],"PlatformViewPropTypes");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var createStrictShapeTypeChecker = require(_dependencyMap[0], 'createStrictShapeTypeChecker');

  var flattenStyle = require(_dependencyMap[1], 'flattenStyle');

  function StyleSheetPropType(shape) {
    var shapePropType = createStrictShapeTypeChecker(shape);
    return function (props, propName, componentName, location) {
      var newProps = props;

      if (props[propName]) {
        newProps = {};
        newProps[propName] = flattenStyle(props[propName]);
      }

      for (var _len = arguments.length, rest = Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
        rest[_key - 4] = arguments[_key];
      }

      return shapePropType.apply(undefined, [newProps, propName, componentName, location].concat(rest));
    };
  }

  module.exports = StyleSheetPropType;
},138,[133,101],"StyleSheetPropType");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var LayoutPropTypes = require(_dependencyMap[1], 'LayoutPropTypes');

  var ReactPropTypes = require(_dependencyMap[2], 'prop-types');

  var ShadowPropTypesIOS = require(_dependencyMap[3], 'ShadowPropTypesIOS');

  var TransformPropTypes = require(_dependencyMap[4], 'TransformPropTypes');

  var ViewStylePropTypes = babelHelpers.extends({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
    backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
    backgroundColor: ColorPropType,
    borderColor: ColorPropType,
    borderTopColor: ColorPropType,
    borderRightColor: ColorPropType,
    borderBottomColor: ColorPropType,
    borderLeftColor: ColorPropType,
    borderStartColor: ColorPropType,
    borderEndColor: ColorPropType,
    borderRadius: ReactPropTypes.number,
    borderTopLeftRadius: ReactPropTypes.number,
    borderTopRightRadius: ReactPropTypes.number,
    borderTopStartRadius: ReactPropTypes.number,
    borderTopEndRadius: ReactPropTypes.number,
    borderBottomLeftRadius: ReactPropTypes.number,
    borderBottomRightRadius: ReactPropTypes.number,
    borderBottomStartRadius: ReactPropTypes.number,
    borderBottomEndRadius: ReactPropTypes.number,
    borderStyle: ReactPropTypes.oneOf(['solid', 'dotted', 'dashed']),
    borderWidth: ReactPropTypes.number,
    borderTopWidth: ReactPropTypes.number,
    borderRightWidth: ReactPropTypes.number,
    borderBottomWidth: ReactPropTypes.number,
    borderLeftWidth: ReactPropTypes.number,
    opacity: ReactPropTypes.number,
    elevation: ReactPropTypes.number
  });
  module.exports = ViewStylePropTypes;
},139,[123,140,127,141,142],"ViewStylePropTypes");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypes = require(_dependencyMap[0], 'prop-types');

  var LayoutPropTypes = {
    display: ReactPropTypes.oneOf(['none', 'flex']),
    width: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    height: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    start: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    end: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    top: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    left: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    right: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    bottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    minWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    maxWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    minHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    maxHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    margin: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginStart: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginEnd: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    padding: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingStart: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingEnd: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    borderWidth: ReactPropTypes.number,
    borderTopWidth: ReactPropTypes.number,
    borderStartWidth: ReactPropTypes.number,
    borderEndWidth: ReactPropTypes.number,
    borderRightWidth: ReactPropTypes.number,
    borderBottomWidth: ReactPropTypes.number,
    borderLeftWidth: ReactPropTypes.number,
    position: ReactPropTypes.oneOf(['absolute', 'relative']),
    flexDirection: ReactPropTypes.oneOf(['row', 'row-reverse', 'column', 'column-reverse']),
    flexWrap: ReactPropTypes.oneOf(['wrap', 'nowrap']),
    justifyContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'space-between', 'space-around']),
    alignItems: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'baseline']),
    alignSelf: ReactPropTypes.oneOf(['auto', 'flex-start', 'flex-end', 'center', 'stretch', 'baseline']),
    alignContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'space-between', 'space-around']),
    overflow: ReactPropTypes.oneOf(['visible', 'hidden', 'scroll']),
    flex: ReactPropTypes.number,
    flexGrow: ReactPropTypes.number,
    flexShrink: ReactPropTypes.number,
    flexBasis: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    aspectRatio: ReactPropTypes.number,
    zIndex: ReactPropTypes.number,
    direction: ReactPropTypes.oneOf(['inherit', 'ltr', 'rtl'])
  };
  module.exports = LayoutPropTypes;
},140,[127],"LayoutPropTypes");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var ReactPropTypes = require(_dependencyMap[1], 'prop-types');

  var ShadowPropTypesIOS = {
    shadowColor: ColorPropType,
    shadowOffset: ReactPropTypes.shape({
      width: ReactPropTypes.number,
      height: ReactPropTypes.number
    }),
    shadowOpacity: ReactPropTypes.number,
    shadowRadius: ReactPropTypes.number
  };
  module.exports = ShadowPropTypesIOS;
},141,[123,127],"ShadowPropTypesIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypes = require(_dependencyMap[0], 'prop-types');

  var deprecatedPropType = require(_dependencyMap[1], 'deprecatedPropType');

  var TransformMatrixPropType = function TransformMatrixPropType(props, propName, componentName) {
    if (props[propName]) {
      return new Error('The transformMatrix style property is deprecated. ' + 'Use `transform: [{ matrix: ... }]` instead.');
    }
  };

  var DecomposedMatrixPropType = function DecomposedMatrixPropType(props, propName, componentName) {
    if (props[propName]) {
      return new Error('The decomposedMatrix style property is deprecated. ' + 'Use `transform: [...]` instead.');
    }
  };

  var TransformPropTypes = {
    transform: ReactPropTypes.arrayOf(ReactPropTypes.oneOfType([ReactPropTypes.shape({
      perspective: ReactPropTypes.number
    }), ReactPropTypes.shape({
      rotate: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateX: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateY: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateZ: ReactPropTypes.string
    }), ReactPropTypes.shape({
      scale: ReactPropTypes.number
    }), ReactPropTypes.shape({
      scaleX: ReactPropTypes.number
    }), ReactPropTypes.shape({
      scaleY: ReactPropTypes.number
    }), ReactPropTypes.shape({
      translateX: ReactPropTypes.number
    }), ReactPropTypes.shape({
      translateY: ReactPropTypes.number
    }), ReactPropTypes.shape({
      skewX: ReactPropTypes.string
    }), ReactPropTypes.shape({
      skewY: ReactPropTypes.string
    })])),
    transformMatrix: TransformMatrixPropType,
    decomposedMatrix: DecomposedMatrixPropType,
    scaleX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    scaleY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    rotation: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    translateX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    translateY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.')
  };
  module.exports = TransformPropTypes;
},142,[127,143],"TransformPropTypes");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var UIManager = require(_dependencyMap[0], 'UIManager');

  function deprecatedPropType(propType, explanation) {
    return function validate(props, propName, componentName) {
      if (!UIManager[componentName] && props[propName] !== undefined) {
        console.warn("`" + propName + "` supplied to `" + componentName + "` has been deprecated. " + explanation);
      }

      for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
        rest[_key - 3] = arguments[_key];
      }

      return propType.apply(undefined, [props, propName, componentName].concat(rest));
    };
  }

  module.exports = deprecatedPropType;
},143,[107],"deprecatedPropType");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    AccessibilityTraits: ['none', 'button', 'link', 'header', 'search', 'image', 'selected', 'plays', 'key', 'text', 'summary', 'disabled', 'frequentUpdates', 'startsMedia', 'adjustable', 'allowsDirectInteraction', 'pageTurn'],
    AccessibilityComponentTypes: ['none', 'button', 'radiobutton_checked', 'radiobutton_unchecked']
  };
},144,[],"ViewAccessibility");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = require(_dependencyMap[0], 'Platform');

  var ReactNativeBridgeEventPlugin = require(_dependencyMap[1], 'ReactNativeBridgeEventPlugin');

  var ReactNativeStyleAttributes = require(_dependencyMap[2], 'ReactNativeStyleAttributes');

  var UIManager = require(_dependencyMap[3], 'UIManager');

  var createReactNativeComponentClass = require(_dependencyMap[4], 'createReactNativeComponentClass');

  var insetsDiffer = require(_dependencyMap[5], 'insetsDiffer');

  var matricesDiffer = require(_dependencyMap[6], 'matricesDiffer');

  var pointsDiffer = require(_dependencyMap[7], 'pointsDiffer');

  var processColor = require(_dependencyMap[8], 'processColor');

  var resolveAssetSource = require(_dependencyMap[9], 'resolveAssetSource');

  var sizesDiffer = require(_dependencyMap[10], 'sizesDiffer');

  var verifyPropTypes = require(_dependencyMap[11], 'verifyPropTypes');

  var invariant = require(_dependencyMap[12], 'fbjs/lib/invariant');

  var warning = require(_dependencyMap[13], 'fbjs/lib/warning');

  var hasAttachedDefaultEventTypes = false;

  function requireNativeComponent(viewName, componentInterface, extraConfig) {
    function attachDefaultEventTypes(viewConfig) {
      if (Platform.OS === 'android') {
        if (UIManager.ViewManagerNames) {
          viewConfig = merge(viewConfig, UIManager.getDefaultEventTypes());
        } else {
          viewConfig.bubblingEventTypes = merge(viewConfig.bubblingEventTypes, UIManager.genericBubblingEventTypes);
          viewConfig.directEventTypes = merge(viewConfig.directEventTypes, UIManager.genericDirectEventTypes);
        }
      }
    }

    function merge(destination, source) {
      if (!source) {
        return destination;
      }

      if (!destination) {
        return source;
      }

      for (var key in source) {
        if (!source.hasOwnProperty(key)) {
          continue;
        }

        var sourceValue = source[key];

        if (destination.hasOwnProperty(key)) {
          var destinationValue = destination[key];

          if (typeof sourceValue === 'object' && typeof destinationValue === 'object') {
            sourceValue = merge(destinationValue, sourceValue);
          }
        }

        destination[key] = sourceValue;
      }

      return destination;
    }

    function getViewConfig() {
      var viewConfig = UIManager[viewName];
      invariant(viewConfig != null && !viewConfig.NativeProps != null, 'Native component for "%s" does not exist', viewName);
      viewConfig.uiViewClassName = viewName;
      viewConfig.validAttributes = {};

      if (componentInterface) {
        viewConfig.propTypes = typeof componentInterface.__propTypesSecretDontUseThesePlease === 'object' ? componentInterface.__propTypesSecretDontUseThesePlease : componentInterface.propTypes;
      } else {
        viewConfig.propTypes = null;
      }

      var baseModuleName = viewConfig.baseModuleName;
      var nativeProps = babelHelpers.extends({}, viewConfig.NativeProps);

      while (baseModuleName) {
        var baseModule = UIManager[baseModuleName];

        if (!baseModule) {
          warning(false, 'Base module "%s" does not exist', baseModuleName);
          baseModuleName = null;
        } else {
          nativeProps = babelHelpers.extends({}, nativeProps, baseModule.NativeProps);
          baseModuleName = baseModule.baseModuleName;
        }
      }

      for (var key in nativeProps) {
        var useAttribute = false;
        var attribute = {};
        var differ = TypeToDifferMap[nativeProps[key]];

        if (differ) {
          attribute.diff = differ;
          useAttribute = true;
        }

        var processor = TypeToProcessorMap[nativeProps[key]];

        if (processor) {
          attribute.process = processor;
          useAttribute = true;
        }

        viewConfig.validAttributes[key] = useAttribute ? attribute : true;
      }

      viewConfig.validAttributes.style = ReactNativeStyleAttributes;

      if (__DEV__) {
        componentInterface && verifyPropTypes(componentInterface, viewConfig, extraConfig && extraConfig.nativeOnly);
      }

      if (!hasAttachedDefaultEventTypes) {
        attachDefaultEventTypes(viewConfig);
        hasAttachedDefaultEventTypes = true;
      }

      ReactNativeBridgeEventPlugin.processEventTypes(viewConfig);
      return viewConfig;
    }

    return createReactNativeComponentClass(viewName, getViewConfig);
  }

  var TypeToDifferMap = {
    CATransform3D: matricesDiffer,
    CGPoint: pointsDiffer,
    CGSize: sizesDiffer,
    UIEdgeInsets: insetsDiffer
  };

  function processColorArray(colors) {
    return colors && colors.map(processColor);
  }

  var TypeToProcessorMap = {
    CGColor: processColor,
    CGColorArray: processColorArray,
    UIColor: processColor,
    UIColorArray: processColorArray,
    CGImage: resolveAssetSource,
    UIImage: resolveAssetSource,
    RCTImageSource: resolveAssetSource,
    Color: processColor,
    ColorArray: processColorArray
  };
  module.exports = requireNativeComponent;
},145,[52,146,147,107,156,157,158,159,152,160,155,167,13,56],"requireNativeComponent");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactNativeBridgeEventPlugin;
},146,[21],"ReactNativeBridgeEventPlugin");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ImageStylePropTypes = require(_dependencyMap[0], 'ImageStylePropTypes');

  var TextStylePropTypes = require(_dependencyMap[1], 'TextStylePropTypes');

  var ViewStylePropTypes = require(_dependencyMap[2], 'ViewStylePropTypes');

  var keyMirror = require(_dependencyMap[3], 'fbjs/lib/keyMirror');

  var processColor = require(_dependencyMap[4], 'processColor');

  var processTransform = require(_dependencyMap[5], 'processTransform');

  var sizesDiffer = require(_dependencyMap[6], 'sizesDiffer');

  var ReactNativeStyleAttributes = babelHelpers.extends({}, keyMirror(ViewStylePropTypes), keyMirror(TextStylePropTypes), keyMirror(ImageStylePropTypes));
  ReactNativeStyleAttributes.transform = {
    process: processTransform
  };
  ReactNativeStyleAttributes.shadowOffset = {
    diff: sizesDiffer
  };
  var colorAttributes = {
    process: processColor
  };
  ReactNativeStyleAttributes.backgroundColor = colorAttributes;
  ReactNativeStyleAttributes.borderBottomColor = colorAttributes;
  ReactNativeStyleAttributes.borderColor = colorAttributes;
  ReactNativeStyleAttributes.borderLeftColor = colorAttributes;
  ReactNativeStyleAttributes.borderRightColor = colorAttributes;
  ReactNativeStyleAttributes.borderTopColor = colorAttributes;
  ReactNativeStyleAttributes.borderStartColor = colorAttributes;
  ReactNativeStyleAttributes.borderEndColor = colorAttributes;
  ReactNativeStyleAttributes.color = colorAttributes;
  ReactNativeStyleAttributes.shadowColor = colorAttributes;
  ReactNativeStyleAttributes.textDecorationColor = colorAttributes;
  ReactNativeStyleAttributes.tintColor = colorAttributes;
  ReactNativeStyleAttributes.textShadowColor = colorAttributes;
  ReactNativeStyleAttributes.overlayColor = colorAttributes;
  module.exports = ReactNativeStyleAttributes;
},147,[148,151,139,150,152,153,155],"ReactNativeStyleAttributes");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var ImageResizeMode = require(_dependencyMap[1], 'ImageResizeMode');

  var LayoutPropTypes = require(_dependencyMap[2], 'LayoutPropTypes');

  var ReactPropTypes = require(_dependencyMap[3], 'prop-types');

  var ShadowPropTypesIOS = require(_dependencyMap[4], 'ShadowPropTypesIOS');

  var TransformPropTypes = require(_dependencyMap[5], 'TransformPropTypes');

  var ImageStylePropTypes = babelHelpers.extends({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
    resizeMode: ReactPropTypes.oneOf(Object.keys(ImageResizeMode)),
    backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
    backgroundColor: ColorPropType,
    borderColor: ColorPropType,
    borderWidth: ReactPropTypes.number,
    borderRadius: ReactPropTypes.number,
    overflow: ReactPropTypes.oneOf(['visible', 'hidden']),
    tintColor: ColorPropType,
    opacity: ReactPropTypes.number,
    overlayColor: ReactPropTypes.string,
    borderTopLeftRadius: ReactPropTypes.number,
    borderTopRightRadius: ReactPropTypes.number,
    borderBottomLeftRadius: ReactPropTypes.number,
    borderBottomRightRadius: ReactPropTypes.number
  });
  module.exports = ImageStylePropTypes;
},148,[123,149,140,127,141,142],"ImageStylePropTypes");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var keyMirror = require(_dependencyMap[0], 'fbjs/lib/keyMirror');

  var ImageResizeMode = keyMirror({
    contain: null,
    cover: null,
    stretch: null,
    center: null,
    repeat: null
  });
  module.exports = ImageResizeMode;
},149,[150],"ImageResizeMode");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], './invariant');

  var keyMirror = function keyMirror(obj) {
    var ret = {};
    var key;
    !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : void 0;

    for (key in obj) {
      if (!obj.hasOwnProperty(key)) {
        continue;
      }

      ret[key] = key;
    }

    return ret;
  };

  module.exports = keyMirror;
},150,[13],"fbjs/lib/keyMirror.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var ReactPropTypes = require(_dependencyMap[1], 'prop-types');

  var ViewStylePropTypes = require(_dependencyMap[2], 'ViewStylePropTypes');

  var TextStylePropTypes = babelHelpers.extends({}, ViewStylePropTypes, {
    color: ColorPropType,
    fontFamily: ReactPropTypes.string,
    fontSize: ReactPropTypes.number,
    fontStyle: ReactPropTypes.oneOf(['normal', 'italic']),
    fontWeight: ReactPropTypes.oneOf(['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']),
    fontVariant: ReactPropTypes.arrayOf(ReactPropTypes.oneOf(['small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums'])),
    textShadowOffset: ReactPropTypes.shape({
      width: ReactPropTypes.number,
      height: ReactPropTypes.number
    }),
    textShadowRadius: ReactPropTypes.number,
    textShadowColor: ColorPropType,
    letterSpacing: ReactPropTypes.number,
    lineHeight: ReactPropTypes.number,
    textAlign: ReactPropTypes.oneOf(['auto', 'left', 'right', 'center', 'justify']),
    textAlignVertical: ReactPropTypes.oneOf(['auto', 'top', 'bottom', 'center']),
    includeFontPadding: ReactPropTypes.bool,
    textDecorationLine: ReactPropTypes.oneOf(['none', 'underline', 'line-through', 'underline line-through']),
    textDecorationStyle: ReactPropTypes.oneOf(['solid', 'double', 'dotted', 'dashed']),
    textDecorationColor: ColorPropType,
    writingDirection: ReactPropTypes.oneOf(['auto', 'ltr', 'rtl'])
  });
  module.exports = TextStylePropTypes;
},151,[123,127,139],"TextStylePropTypes");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = require(_dependencyMap[0], 'Platform');

  var normalizeColor = require(_dependencyMap[1], 'normalizeColor');

  function processColor(color) {
    if (color === undefined || color === null) {
      return color;
    }

    var int32Color = normalizeColor(color);

    if (int32Color === null || int32Color === undefined) {
      return undefined;
    }

    int32Color = (int32Color << 24 | int32Color >>> 8) >>> 0;

    if (Platform.OS === 'android') {
      int32Color = int32Color | 0x0;
    }

    return int32Color;
  }

  module.exports = processColor;
},152,[52,124],"processColor");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var MatrixMath = require(_dependencyMap[0], 'MatrixMath');

  var Platform = require(_dependencyMap[1], 'Platform');

  var invariant = require(_dependencyMap[2], 'fbjs/lib/invariant');

  var stringifySafe = require(_dependencyMap[3], 'stringifySafe');

  function processTransform(transform) {
    if (__DEV__) {
      _validateTransforms(transform);
    }

    if (Platform.OS === 'android' || Platform.OS === 'ios') {
      return transform;
    }

    var result = MatrixMath.createIdentityMatrix();
    transform.forEach(function (transformation) {
      var key = Object.keys(transformation)[0];
      var value = transformation[key];

      switch (key) {
        case 'matrix':
          MatrixMath.multiplyInto(result, result, value);
          break;

        case 'perspective':
          _multiplyTransform(result, MatrixMath.reusePerspectiveCommand, [value]);

          break;

        case 'rotateX':
          _multiplyTransform(result, MatrixMath.reuseRotateXCommand, [_convertToRadians(value)]);

          break;

        case 'rotateY':
          _multiplyTransform(result, MatrixMath.reuseRotateYCommand, [_convertToRadians(value)]);

          break;

        case 'rotate':
        case 'rotateZ':
          _multiplyTransform(result, MatrixMath.reuseRotateZCommand, [_convertToRadians(value)]);

          break;

        case 'scale':
          _multiplyTransform(result, MatrixMath.reuseScaleCommand, [value]);

          break;

        case 'scaleX':
          _multiplyTransform(result, MatrixMath.reuseScaleXCommand, [value]);

          break;

        case 'scaleY':
          _multiplyTransform(result, MatrixMath.reuseScaleYCommand, [value]);

          break;

        case 'translate':
          _multiplyTransform(result, MatrixMath.reuseTranslate3dCommand, [value[0], value[1], value[2] || 0]);

          break;

        case 'translateX':
          _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [value, 0]);

          break;

        case 'translateY':
          _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [0, value]);

          break;

        case 'skewX':
          _multiplyTransform(result, MatrixMath.reuseSkewXCommand, [_convertToRadians(value)]);

          break;

        case 'skewY':
          _multiplyTransform(result, MatrixMath.reuseSkewYCommand, [_convertToRadians(value)]);

          break;

        default:
          throw new Error('Invalid transform name: ' + key);
      }
    });
    return result;
  }

  function _multiplyTransform(result, matrixMathFunction, args) {
    var matrixToApply = MatrixMath.createIdentityMatrix();
    var argsWithIdentity = [matrixToApply].concat(args);
    matrixMathFunction.apply(this, argsWithIdentity);
    MatrixMath.multiplyInto(result, result, matrixToApply);
  }

  function _convertToRadians(value) {
    var floatValue = parseFloat(value);
    return value.indexOf('rad') > -1 ? floatValue : floatValue * Math.PI / 180;
  }

  function _validateTransforms(transform) {
    transform.forEach(function (transformation) {
      var keys = Object.keys(transformation);
      invariant(keys.length === 1, 'You must specify exactly one property per transform object. Passed properties: %s', stringifySafe(transformation));
      var key = keys[0];
      var value = transformation[key];

      _validateTransform(key, value, transformation);
    });
  }

  function _validateTransform(key, value, transformation) {
    invariant(!value.getValue, 'You passed an Animated.Value to a normal component. ' + 'You need to wrap that component in an Animated. For example, ' + 'replace <View /> by <Animated.View />.');
    var multivalueTransforms = ['matrix', 'translate'];

    if (multivalueTransforms.indexOf(key) !== -1) {
      invariant(Array.isArray(value), 'Transform with key of %s must have an array as the value: %s', key, stringifySafe(transformation));
    }

    switch (key) {
      case 'matrix':
        invariant(value.length === 9 || value.length === 16, 'Matrix transform must have a length of 9 (2d) or 16 (3d). ' + 'Provided matrix has a length of %s: %s', value.length, stringifySafe(transformation));
        break;

      case 'translate':
        invariant(value.length === 2 || value.length === 3, 'Transform with key translate must be an array of length 2 or 3, found %s: %s', value.length, stringifySafe(transformation));
        break;

      case 'rotateX':
      case 'rotateY':
      case 'rotateZ':
      case 'rotate':
      case 'skewX':
      case 'skewY':
        invariant(typeof value === 'string', 'Transform with key of "%s" must be a string: %s', key, stringifySafe(transformation));
        invariant(value.indexOf('deg') > -1 || value.indexOf('rad') > -1, 'Rotate transform must be expressed in degrees (deg) or radians ' + '(rad): %s', stringifySafe(transformation));
        break;

      case 'perspective':
        invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
        invariant(value !== 0, 'Transform with key of "%s" cannot be zero: %s', key, stringifySafe(transformation));
        break;

      case 'translateX':
      case 'translateY':
      case 'scale':
      case 'scaleX':
      case 'scaleY':
        invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
        break;

      default:
        invariant(false, 'Invalid transform %s: %s', key, stringifySafe(transformation));
    }
  }

  module.exports = processTransform;
},153,[154,52,13,39],"processTransform");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var MatrixMath = {
    createIdentityMatrix: function createIdentityMatrix() {
      return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    },
    createCopy: function createCopy(m) {
      return [m[0], m[1], m[2], m[3], m[4], m[5], m[6], m[7], m[8], m[9], m[10], m[11], m[12], m[13], m[14], m[15]];
    },
    createOrthographic: function createOrthographic(left, right, bottom, top, near, far) {
      var a = 2 / (right - left);
      var b = 2 / (top - bottom);
      var c = -2 / (far - near);
      var tx = -(right + left) / (right - left);
      var ty = -(top + bottom) / (top - bottom);
      var tz = -(far + near) / (far - near);
      return [a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, tx, ty, tz, 1];
    },
    createFrustum: function createFrustum(left, right, bottom, top, near, far) {
      var r_width = 1 / (right - left);
      var r_height = 1 / (top - bottom);
      var r_depth = 1 / (near - far);
      var x = 2 * (near * r_width);
      var y = 2 * (near * r_height);
      var A = (right + left) * r_width;
      var B = (top + bottom) * r_height;
      var C = (far + near) * r_depth;
      var D = 2 * (far * near * r_depth);
      return [x, 0, 0, 0, 0, y, 0, 0, A, B, C, -1, 0, 0, D, 0];
    },
    createPerspective: function createPerspective(fovInRadians, aspect, near, far) {
      var h = 1 / Math.tan(fovInRadians / 2);
      var r_depth = 1 / (near - far);
      var C = (far + near) * r_depth;
      var D = 2 * (far * near * r_depth);
      return [h / aspect, 0, 0, 0, 0, h, 0, 0, 0, 0, C, -1, 0, 0, D, 0];
    },
    createTranslate2d: function createTranslate2d(x, y) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseTranslate2dCommand(mat, x, y);
      return mat;
    },
    reuseTranslate2dCommand: function reuseTranslate2dCommand(matrixCommand, x, y) {
      matrixCommand[12] = x;
      matrixCommand[13] = y;
    },
    reuseTranslate3dCommand: function reuseTranslate3dCommand(matrixCommand, x, y, z) {
      matrixCommand[12] = x;
      matrixCommand[13] = y;
      matrixCommand[14] = z;
    },
    createScale: function createScale(factor) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseScaleCommand(mat, factor);
      return mat;
    },
    reuseScaleCommand: function reuseScaleCommand(matrixCommand, factor) {
      matrixCommand[0] = factor;
      matrixCommand[5] = factor;
    },
    reuseScale3dCommand: function reuseScale3dCommand(matrixCommand, x, y, z) {
      matrixCommand[0] = x;
      matrixCommand[5] = y;
      matrixCommand[10] = z;
    },
    reusePerspectiveCommand: function reusePerspectiveCommand(matrixCommand, p) {
      matrixCommand[11] = -1 / p;
    },
    reuseScaleXCommand: function reuseScaleXCommand(matrixCommand, factor) {
      matrixCommand[0] = factor;
    },
    reuseScaleYCommand: function reuseScaleYCommand(matrixCommand, factor) {
      matrixCommand[5] = factor;
    },
    reuseScaleZCommand: function reuseScaleZCommand(matrixCommand, factor) {
      matrixCommand[10] = factor;
    },
    reuseRotateXCommand: function reuseRotateXCommand(matrixCommand, radians) {
      matrixCommand[5] = Math.cos(radians);
      matrixCommand[6] = Math.sin(radians);
      matrixCommand[9] = -Math.sin(radians);
      matrixCommand[10] = Math.cos(radians);
    },
    reuseRotateYCommand: function reuseRotateYCommand(matrixCommand, amount) {
      matrixCommand[0] = Math.cos(amount);
      matrixCommand[2] = -Math.sin(amount);
      matrixCommand[8] = Math.sin(amount);
      matrixCommand[10] = Math.cos(amount);
    },
    reuseRotateZCommand: function reuseRotateZCommand(matrixCommand, radians) {
      matrixCommand[0] = Math.cos(radians);
      matrixCommand[1] = Math.sin(radians);
      matrixCommand[4] = -Math.sin(radians);
      matrixCommand[5] = Math.cos(radians);
    },
    createRotateZ: function createRotateZ(radians) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseRotateZCommand(mat, radians);
      return mat;
    },
    reuseSkewXCommand: function reuseSkewXCommand(matrixCommand, radians) {
      matrixCommand[4] = Math.tan(radians);
    },
    reuseSkewYCommand: function reuseSkewYCommand(matrixCommand, radians) {
      matrixCommand[1] = Math.tan(radians);
    },
    multiplyInto: function multiplyInto(out, a, b) {
      var a00 = a[0],
          a01 = a[1],
          a02 = a[2],
          a03 = a[3],
          a10 = a[4],
          a11 = a[5],
          a12 = a[6],
          a13 = a[7],
          a20 = a[8],
          a21 = a[9],
          a22 = a[10],
          a23 = a[11],
          a30 = a[12],
          a31 = a[13],
          a32 = a[14],
          a33 = a[15];
      var b0 = b[0],
          b1 = b[1],
          b2 = b[2],
          b3 = b[3];
      out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[4];
      b1 = b[5];
      b2 = b[6];
      b3 = b[7];
      out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[8];
      b1 = b[9];
      b2 = b[10];
      b3 = b[11];
      out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[12];
      b1 = b[13];
      b2 = b[14];
      b3 = b[15];
      out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    },
    determinant: function determinant(matrix) {
      var _matrix = babelHelpers.slicedToArray(matrix, 16),
          m00 = _matrix[0],
          m01 = _matrix[1],
          m02 = _matrix[2],
          m03 = _matrix[3],
          m10 = _matrix[4],
          m11 = _matrix[5],
          m12 = _matrix[6],
          m13 = _matrix[7],
          m20 = _matrix[8],
          m21 = _matrix[9],
          m22 = _matrix[10],
          m23 = _matrix[11],
          m30 = _matrix[12],
          m31 = _matrix[13],
          m32 = _matrix[14],
          m33 = _matrix[15];

      return m03 * m12 * m21 * m30 - m02 * m13 * m21 * m30 - m03 * m11 * m22 * m30 + m01 * m13 * m22 * m30 + m02 * m11 * m23 * m30 - m01 * m12 * m23 * m30 - m03 * m12 * m20 * m31 + m02 * m13 * m20 * m31 + m03 * m10 * m22 * m31 - m00 * m13 * m22 * m31 - m02 * m10 * m23 * m31 + m00 * m12 * m23 * m31 + m03 * m11 * m20 * m32 - m01 * m13 * m20 * m32 - m03 * m10 * m21 * m32 + m00 * m13 * m21 * m32 + m01 * m10 * m23 * m32 - m00 * m11 * m23 * m32 - m02 * m11 * m20 * m33 + m01 * m12 * m20 * m33 + m02 * m10 * m21 * m33 - m00 * m12 * m21 * m33 - m01 * m10 * m22 * m33 + m00 * m11 * m22 * m33;
    },
    inverse: function inverse(matrix) {
      var det = MatrixMath.determinant(matrix);

      if (!det) {
        return matrix;
      }

      var _matrix2 = babelHelpers.slicedToArray(matrix, 16),
          m00 = _matrix2[0],
          m01 = _matrix2[1],
          m02 = _matrix2[2],
          m03 = _matrix2[3],
          m10 = _matrix2[4],
          m11 = _matrix2[5],
          m12 = _matrix2[6],
          m13 = _matrix2[7],
          m20 = _matrix2[8],
          m21 = _matrix2[9],
          m22 = _matrix2[10],
          m23 = _matrix2[11],
          m30 = _matrix2[12],
          m31 = _matrix2[13],
          m32 = _matrix2[14],
          m33 = _matrix2[15];

      return [(m12 * m23 * m31 - m13 * m22 * m31 + m13 * m21 * m32 - m11 * m23 * m32 - m12 * m21 * m33 + m11 * m22 * m33) / det, (m03 * m22 * m31 - m02 * m23 * m31 - m03 * m21 * m32 + m01 * m23 * m32 + m02 * m21 * m33 - m01 * m22 * m33) / det, (m02 * m13 * m31 - m03 * m12 * m31 + m03 * m11 * m32 - m01 * m13 * m32 - m02 * m11 * m33 + m01 * m12 * m33) / det, (m03 * m12 * m21 - m02 * m13 * m21 - m03 * m11 * m22 + m01 * m13 * m22 + m02 * m11 * m23 - m01 * m12 * m23) / det, (m13 * m22 * m30 - m12 * m23 * m30 - m13 * m20 * m32 + m10 * m23 * m32 + m12 * m20 * m33 - m10 * m22 * m33) / det, (m02 * m23 * m30 - m03 * m22 * m30 + m03 * m20 * m32 - m00 * m23 * m32 - m02 * m20 * m33 + m00 * m22 * m33) / det, (m03 * m12 * m30 - m02 * m13 * m30 - m03 * m10 * m32 + m00 * m13 * m32 + m02 * m10 * m33 - m00 * m12 * m33) / det, (m02 * m13 * m20 - m03 * m12 * m20 + m03 * m10 * m22 - m00 * m13 * m22 - m02 * m10 * m23 + m00 * m12 * m23) / det, (m11 * m23 * m30 - m13 * m21 * m30 + m13 * m20 * m31 - m10 * m23 * m31 - m11 * m20 * m33 + m10 * m21 * m33) / det, (m03 * m21 * m30 - m01 * m23 * m30 - m03 * m20 * m31 + m00 * m23 * m31 + m01 * m20 * m33 - m00 * m21 * m33) / det, (m01 * m13 * m30 - m03 * m11 * m30 + m03 * m10 * m31 - m00 * m13 * m31 - m01 * m10 * m33 + m00 * m11 * m33) / det, (m03 * m11 * m20 - m01 * m13 * m20 - m03 * m10 * m21 + m00 * m13 * m21 + m01 * m10 * m23 - m00 * m11 * m23) / det, (m12 * m21 * m30 - m11 * m22 * m30 - m12 * m20 * m31 + m10 * m22 * m31 + m11 * m20 * m32 - m10 * m21 * m32) / det, (m01 * m22 * m30 - m02 * m21 * m30 + m02 * m20 * m31 - m00 * m22 * m31 - m01 * m20 * m32 + m00 * m21 * m32) / det, (m02 * m11 * m30 - m01 * m12 * m30 - m02 * m10 * m31 + m00 * m12 * m31 + m01 * m10 * m32 - m00 * m11 * m32) / det, (m01 * m12 * m20 - m02 * m11 * m20 + m02 * m10 * m21 - m00 * m12 * m21 - m01 * m10 * m22 + m00 * m11 * m22) / det];
    },
    transpose: function transpose(m) {
      return [m[0], m[4], m[8], m[12], m[1], m[5], m[9], m[13], m[2], m[6], m[10], m[14], m[3], m[7], m[11], m[15]];
    },
    multiplyVectorByMatrix: function multiplyVectorByMatrix(v, m) {
      var _v = babelHelpers.slicedToArray(v, 4),
          vx = _v[0],
          vy = _v[1],
          vz = _v[2],
          vw = _v[3];

      return [vx * m[0] + vy * m[4] + vz * m[8] + vw * m[12], vx * m[1] + vy * m[5] + vz * m[9] + vw * m[13], vx * m[2] + vy * m[6] + vz * m[10] + vw * m[14], vx * m[3] + vy * m[7] + vz * m[11] + vw * m[15]];
    },
    v3Length: function v3Length(a) {
      return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
    },
    v3Normalize: function v3Normalize(vector, v3Length) {
      var im = 1 / (v3Length || MatrixMath.v3Length(vector));
      return [vector[0] * im, vector[1] * im, vector[2] * im];
    },
    v3Dot: function v3Dot(a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    },
    v3Combine: function v3Combine(a, b, aScale, bScale) {
      return [aScale * a[0] + bScale * b[0], aScale * a[1] + bScale * b[1], aScale * a[2] + bScale * b[2]];
    },
    v3Cross: function v3Cross(a, b) {
      return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
    },
    quaternionToDegreesXYZ: function quaternionToDegreesXYZ(q, matrix, row) {
      var _q = babelHelpers.slicedToArray(q, 4),
          qx = _q[0],
          qy = _q[1],
          qz = _q[2],
          qw = _q[3];

      var qw2 = qw * qw;
      var qx2 = qx * qx;
      var qy2 = qy * qy;
      var qz2 = qz * qz;
      var test = qx * qy + qz * qw;
      var unit = qw2 + qx2 + qy2 + qz2;
      var conv = 180 / Math.PI;

      if (test > 0.49999 * unit) {
        return [0, 2 * Math.atan2(qx, qw) * conv, 90];
      }

      if (test < -0.49999 * unit) {
        return [0, -2 * Math.atan2(qx, qw) * conv, -90];
      }

      return [MatrixMath.roundTo3Places(Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.asin(2 * qx * qy + 2 * qz * qw) * conv)];
    },
    roundTo3Places: function roundTo3Places(n) {
      var arr = n.toString().split('e');
      return Math.round(arr[0] + 'e' + (arr[1] ? +arr[1] - 3 : 3)) * 0.001;
    },
    decomposeMatrix: function decomposeMatrix(transformMatrix) {
      invariant(transformMatrix.length === 16, 'Matrix decomposition needs a list of 3d matrix values, received %s', transformMatrix);
      var perspective = [];
      var quaternion = [];
      var scale = [];
      var skew = [];
      var translation = [];

      if (!transformMatrix[15]) {
        return;
      }

      var matrix = [];
      var perspectiveMatrix = [];

      for (var i = 0; i < 4; i++) {
        matrix.push([]);

        for (var j = 0; j < 4; j++) {
          var value = transformMatrix[i * 4 + j] / transformMatrix[15];
          matrix[i].push(value);
          perspectiveMatrix.push(j === 3 ? 0 : value);
        }
      }

      perspectiveMatrix[15] = 1;

      if (!MatrixMath.determinant(perspectiveMatrix)) {
        return;
      }

      if (matrix[0][3] !== 0 || matrix[1][3] !== 0 || matrix[2][3] !== 0) {
        var rightHandSide = [matrix[0][3], matrix[1][3], matrix[2][3], matrix[3][3]];
        var inversePerspectiveMatrix = MatrixMath.inverse(perspectiveMatrix);
        var transposedInversePerspectiveMatrix = MatrixMath.transpose(inversePerspectiveMatrix);
        var perspective = MatrixMath.multiplyVectorByMatrix(rightHandSide, transposedInversePerspectiveMatrix);
      } else {
        perspective[0] = perspective[1] = perspective[2] = 0;
        perspective[3] = 1;
      }

      for (var i = 0; i < 3; i++) {
        translation[i] = matrix[3][i];
      }

      var row = [];

      for (i = 0; i < 3; i++) {
        row[i] = [matrix[i][0], matrix[i][1], matrix[i][2]];
      }

      scale[0] = MatrixMath.v3Length(row[0]);
      row[0] = MatrixMath.v3Normalize(row[0], scale[0]);
      skew[0] = MatrixMath.v3Dot(row[0], row[1]);
      row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);
      skew[0] = MatrixMath.v3Dot(row[0], row[1]);
      row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);
      scale[1] = MatrixMath.v3Length(row[1]);
      row[1] = MatrixMath.v3Normalize(row[1], scale[1]);
      skew[0] /= scale[1];
      skew[1] = MatrixMath.v3Dot(row[0], row[2]);
      row[2] = MatrixMath.v3Combine(row[2], row[0], 1.0, -skew[1]);
      skew[2] = MatrixMath.v3Dot(row[1], row[2]);
      row[2] = MatrixMath.v3Combine(row[2], row[1], 1.0, -skew[2]);
      scale[2] = MatrixMath.v3Length(row[2]);
      row[2] = MatrixMath.v3Normalize(row[2], scale[2]);
      skew[1] /= scale[2];
      skew[2] /= scale[2];
      var pdum3 = MatrixMath.v3Cross(row[1], row[2]);

      if (MatrixMath.v3Dot(row[0], pdum3) < 0) {
        for (i = 0; i < 3; i++) {
          scale[i] *= -1;
          row[i][0] *= -1;
          row[i][1] *= -1;
          row[i][2] *= -1;
        }
      }

      quaternion[0] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0));
      quaternion[1] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0));
      quaternion[2] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0));
      quaternion[3] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0));

      if (row[2][1] > row[1][2]) {
        quaternion[0] = -quaternion[0];
      }

      if (row[0][2] > row[2][0]) {
        quaternion[1] = -quaternion[1];
      }

      if (row[1][0] > row[0][1]) {
        quaternion[2] = -quaternion[2];
      }

      var rotationDegrees;

      if (quaternion[0] < 0.001 && quaternion[0] >= 0 && quaternion[1] < 0.001 && quaternion[1] >= 0) {
        rotationDegrees = [0, 0, MatrixMath.roundTo3Places(Math.atan2(row[0][1], row[0][0]) * 180 / Math.PI)];
      } else {
        rotationDegrees = MatrixMath.quaternionToDegreesXYZ(quaternion, matrix, row);
      }

      return {
        rotationDegrees: rotationDegrees,
        perspective: perspective,
        quaternion: quaternion,
        scale: scale,
        skew: skew,
        translation: translation,
        rotate: rotationDegrees[2],
        rotateX: rotationDegrees[0],
        rotateY: rotationDegrees[1],
        scaleX: scale[0],
        scaleY: scale[1],
        translateX: translation[0],
        translateY: translation[1]
      };
    }
  };
  module.exports = MatrixMath;
},154,[13],"MatrixMath");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var dummySize = {
    width: undefined,
    height: undefined
  };

  var sizesDiffer = function sizesDiffer(one, two) {
    one = one || dummySize;
    two = two || dummySize;
    return one !== two && (one.width !== two.width || one.height !== two.height);
  };

  module.exports = sizesDiffer;
},155,[],"sizesDiffer");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.createReactNativeComponentClass;
},156,[21],"createReactNativeComponentClass");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var dummyInsets = {
    top: undefined,
    left: undefined,
    right: undefined,
    bottom: undefined
  };

  var insetsDiffer = function insetsDiffer(one, two) {
    one = one || dummyInsets;
    two = two || dummyInsets;
    return one !== two && (one.top !== two.top || one.left !== two.left || one.right !== two.right || one.bottom !== two.bottom);
  };

  module.exports = insetsDiffer;
},157,[],"insetsDiffer");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var matricesDiffer = function matricesDiffer(one, two) {
    if (one === two) {
      return false;
    }

    return !one || !two || one[12] !== two[12] || one[13] !== two[13] || one[14] !== two[14] || one[5] !== two[5] || one[10] !== two[10] || one[1] !== two[1] || one[2] !== two[2] || one[3] !== two[3] || one[4] !== two[4] || one[6] !== two[6] || one[7] !== two[7] || one[8] !== two[8] || one[9] !== two[9] || one[11] !== two[11] || one[15] !== two[15];
  };

  module.exports = matricesDiffer;
},158,[],"matricesDiffer");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var dummyPoint = {
    x: undefined,
    y: undefined
  };

  var pointsDiffer = function pointsDiffer(one, two) {
    one = one || dummyPoint;
    two = two || dummyPoint;
    return one !== two && (one.x !== two.x || one.y !== two.y);
  };

  module.exports = pointsDiffer;
},159,[],"pointsDiffer");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AssetRegistry = require(_dependencyMap[0], 'AssetRegistry');

  var AssetSourceResolver = require(_dependencyMap[1], 'AssetSourceResolver');

  var NativeModules = require(_dependencyMap[2], 'NativeModules');

  var _customSourceTransformer = void 0,
      _serverURL = void 0,
      _scriptURL = void 0;

  function getDevServerURL() {
    if (_serverURL === undefined) {
      var scriptURL = NativeModules.SourceCode.scriptURL;
      var match = scriptURL && scriptURL.match(/^https?:\/\/.*?\//);

      if (match) {
        _serverURL = match[0];
      } else {
        _serverURL = null;
      }
    }

    return _serverURL;
  }

  function _coerceLocalScriptURL(scriptURL) {
    if (scriptURL) {
      if (scriptURL.startsWith('assets://')) {
        return null;
      }

      scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);

      if (!scriptURL.includes('://')) {
        scriptURL = 'file://' + scriptURL;
      }
    }

    return scriptURL;
  }

  function getScriptURL() {
    if (_scriptURL === undefined) {
      var scriptURL = NativeModules.SourceCode.scriptURL;
      _scriptURL = _coerceLocalScriptURL(scriptURL);
    }

    return _scriptURL;
  }

  function setCustomSourceTransformer(transformer) {
    _customSourceTransformer = transformer;
  }

  function resolveAssetSource(source) {
    if (typeof source === 'object') {
      return source;
    }

    var asset = AssetRegistry.getAssetByID(source);

    if (!asset) {
      return null;
    }

    var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);

    if (_customSourceTransformer) {
      return _customSourceTransformer(resolver);
    }

    return resolver.defaultAsset();
  }

  module.exports = resolveAssetSource;
  module.exports.pickScale = AssetSourceResolver.pickScale;
  module.exports.setCustomSourceTransformer = setCustomSourceTransformer;
},160,[161,162,15],"resolveAssetSource");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var assets = [];

  function registerAsset(asset) {
    return assets.push(asset);
  }

  function getAssetByID(assetId) {
    return assets[assetId - 1];
  }

  module.exports = {
    registerAsset: registerAsset,
    getAssetByID: getAssetByID
  };
},161,[],"AssetRegistry");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var PixelRatio = require(_dependencyMap[0], 'PixelRatio');

  var Platform = require(_dependencyMap[1], 'Platform');

  var assetPathUtils = require(_dependencyMap[2], '../../local-cli/bundle/assetPathUtils');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  function getScaledAssetPath(asset) {
    var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
    var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
    var assetDir = assetPathUtils.getBasePath(asset);
    return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
  }

  function getAssetPathInDrawableFolder(asset) {
    var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
    var drawbleFolder = assetPathUtils.getAndroidResourceFolderName(asset, scale);
    var fileName = assetPathUtils.getAndroidResourceIdentifier(asset);
    return drawbleFolder + '/' + fileName + '.' + asset.type;
  }

  var AssetSourceResolver = function () {
    function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
      babelHelpers.classCallCheck(this, AssetSourceResolver);
      this.serverUrl = serverUrl;
      this.jsbundleUrl = jsbundleUrl;
      this.asset = asset;
    }

    babelHelpers.createClass(AssetSourceResolver, [{
      key: "isLoadedFromServer",
      value: function isLoadedFromServer() {
        return !!this.serverUrl;
      }
    }, {
      key: "isLoadedFromFileSystem",
      value: function isLoadedFromFileSystem() {
        return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));
      }
    }, {
      key: "defaultAsset",
      value: function defaultAsset() {
        if (this.isLoadedFromServer()) {
          return this.assetServerURL();
        }

        if (Platform.OS === 'android') {
          return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
        } else {
          return this.scaledAssetURLNearBundle();
        }
      }
    }, {
      key: "assetServerURL",
      value: function assetServerURL() {
        invariant(!!this.serverUrl, 'need server to load from');
        return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);
      }
    }, {
      key: "scaledAssetPath",
      value: function scaledAssetPath() {
        return this.fromSource(getScaledAssetPath(this.asset));
      }
    }, {
      key: "scaledAssetURLNearBundle",
      value: function scaledAssetURLNearBundle() {
        var path = this.jsbundleUrl || 'file://';
        return this.fromSource(path + getScaledAssetPath(this.asset));
      }
    }, {
      key: "resourceIdentifierWithoutScale",
      value: function resourceIdentifierWithoutScale() {
        invariant(Platform.OS === 'android', 'resource identifiers work on Android');
        return this.fromSource(assetPathUtils.getAndroidResourceIdentifier(this.asset));
      }
    }, {
      key: "drawableFolderInBundle",
      value: function drawableFolderInBundle() {
        var path = this.jsbundleUrl || 'file://';
        return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
      }
    }, {
      key: "fromSource",
      value: function fromSource(source) {
        return {
          __packager_asset: true,
          width: this.asset.width,
          height: this.asset.height,
          uri: source,
          scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get())
        };
      }
    }], [{
      key: "pickScale",
      value: function pickScale(scales, deviceScale) {
        for (var i = 0; i < scales.length; i++) {
          if (scales[i] >= deviceScale) {
            return scales[i];
          }
        }

        return scales[scales.length - 1] || 1;
      }
    }]);
    return AssetSourceResolver;
  }();

  module.exports = AssetSourceResolver;
},162,[163,52,166,13],"AssetSourceResolver");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Dimensions = require(_dependencyMap[0], 'Dimensions');

  var PixelRatio = function () {
    function PixelRatio() {
      babelHelpers.classCallCheck(this, PixelRatio);
    }

    babelHelpers.createClass(PixelRatio, null, [{
      key: "get",
      value: function get() {
        return Dimensions.get('window').scale;
      }
    }, {
      key: "getFontScale",
      value: function getFontScale() {
        return Dimensions.get('window').fontScale || PixelRatio.get();
      }
    }, {
      key: "getPixelSizeForLayoutSize",
      value: function getPixelSizeForLayoutSize(layoutSize) {
        return Math.round(layoutSize * PixelRatio.get());
      }
    }, {
      key: "roundToNearestPixel",
      value: function roundToNearestPixel(layoutSize) {
        var ratio = PixelRatio.get();
        return Math.round(layoutSize * ratio) / ratio;
      }
    }, {
      key: "startDetecting",
      value: function startDetecting() {}
    }]);
    return PixelRatio;
  }();

  module.exports = PixelRatio;
},163,[164],"PixelRatio");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var DeviceInfo = require(_dependencyMap[0], 'DeviceInfo');

  var EventEmitter = require(_dependencyMap[1], 'EventEmitter');

  var Platform = require(_dependencyMap[2], 'Platform');

  var RCTDeviceEventEmitter = require(_dependencyMap[3], 'RCTDeviceEventEmitter');

  var invariant = require(_dependencyMap[4], 'fbjs/lib/invariant');

  var eventEmitter = new EventEmitter();
  var dimensionsInitialized = false;
  var dimensions = {};

  var Dimensions = function () {
    function Dimensions() {
      babelHelpers.classCallCheck(this, Dimensions);
    }

    babelHelpers.createClass(Dimensions, null, [{
      key: "set",
      value: function set(dims) {
        if (dims && dims.windowPhysicalPixels) {
          dims = JSON.parse(JSON.stringify(dims));
          var windowPhysicalPixels = dims.windowPhysicalPixels;
          dims.window = {
            width: windowPhysicalPixels.width / windowPhysicalPixels.scale,
            height: windowPhysicalPixels.height / windowPhysicalPixels.scale,
            scale: windowPhysicalPixels.scale,
            fontScale: windowPhysicalPixels.fontScale
          };

          if (Platform.OS === 'android') {
            var screenPhysicalPixels = dims.screenPhysicalPixels;
            dims.screen = {
              width: screenPhysicalPixels.width / screenPhysicalPixels.scale,
              height: screenPhysicalPixels.height / screenPhysicalPixels.scale,
              scale: screenPhysicalPixels.scale,
              fontScale: screenPhysicalPixels.fontScale
            };
            delete dims.screenPhysicalPixels;
          } else {
            dims.screen = dims.window;
          }

          delete dims.windowPhysicalPixels;
        }

        babelHelpers.extends(dimensions, dims);

        if (dimensionsInitialized) {
          eventEmitter.emit('change', {
            window: dimensions.window,
            screen: dimensions.screen
          });
        } else {
          dimensionsInitialized = true;
        }
      }
    }, {
      key: "get",
      value: function get(dim) {
        invariant(dimensions[dim], 'No dimension set for key ' + dim);
        return dimensions[dim];
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        invariant(type === 'change', 'Trying to subscribe to unknown event: "%s"', type);
        eventEmitter.addListener(type, handler);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        invariant(type === 'change', 'Trying to remove listener for unknown event: "%s"', type);
        eventEmitter.removeListener(type, handler);
      }
    }]);
    return Dimensions;
  }();

  Dimensions.set(DeviceInfo.Dimensions);
  RCTDeviceEventEmitter.addListener('didUpdateDimensions', function (update) {
    Dimensions.set(update);
  });
  module.exports = Dimensions;
},164,[165,67,52,70,13],"Dimensions");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var DeviceInfo = require(_dependencyMap[0], 'NativeModules').DeviceInfo;

  var invariant = require(_dependencyMap[1], 'fbjs/lib/invariant');

  invariant(DeviceInfo, 'DeviceInfo native module is not installed correctly');
  module.exports = DeviceInfo;
},165,[15,13],"DeviceInfo");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function getAndroidAssetSuffix(scale) {
    switch (scale) {
      case 0.75:
        return 'ldpi';

      case 1:
        return 'mdpi';

      case 1.5:
        return 'hdpi';

      case 2:
        return 'xhdpi';

      case 3:
        return 'xxhdpi';

      case 4:
        return 'xxxhdpi';
    }

    throw new Error('no such scale');
  }

  var drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'png', 'svg', 'webp', 'xml']);

  function getAndroidResourceFolderName(asset, scale) {
    if (!drawableFileTypes.has(asset.type)) {
      return 'raw';
    }

    var suffix = getAndroidAssetSuffix(scale);

    if (!suffix) {
      throw new Error('Don\'t know which android drawable suffix to use for asset: ' + JSON.stringify(asset));
    }

    var androidFolder = 'drawable-' + suffix;
    return androidFolder;
  }

  function getAndroidResourceIdentifier(asset) {
    var folderPath = getBasePath(asset);
    return (folderPath + '/' + asset.name).toLowerCase().replace(/\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');
  }

  function getBasePath(asset) {
    var basePath = asset.httpServerLocation;

    if (basePath[0] === '/') {
      basePath = basePath.substr(1);
    }

    return basePath;
  }

  module.exports = {
    getAndroidAssetSuffix: getAndroidAssetSuffix,
    getAndroidResourceFolderName: getAndroidResourceFolderName,
    getAndroidResourceIdentifier: getAndroidResourceIdentifier,
    getBasePath: getBasePath
  };
},166,[],"react-native/local-cli/bundle/assetPathUtils.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ReactNativeStyleAttributes = require(_dependencyMap[0], 'ReactNativeStyleAttributes');

  function verifyPropTypes(componentInterface, viewConfig, nativePropsToIgnore) {
    if (!viewConfig) {
      return;
    }

    var componentName = componentInterface.displayName || componentInterface.name || 'unknown';
    var propTypes = componentInterface.__propTypesSecretDontUseThesePlease || componentInterface.propTypes;

    if (!propTypes) {
      throw new Error('`' + componentName + '` has no propTypes defined`');
    }

    var nativeProps = viewConfig.NativeProps;

    for (var prop in nativeProps) {
      if (!propTypes[prop] && !ReactNativeStyleAttributes[prop] && (!nativePropsToIgnore || !nativePropsToIgnore[prop])) {
        var message;

        if (propTypes.hasOwnProperty(prop)) {
          message = '`' + componentName + '` has incorrectly defined propType for native prop `' + viewConfig.uiViewClassName + '.' + prop + '` of native type `' + nativeProps[prop];
        } else {
          message = '`' + componentName + '` has no propType for native prop `' + viewConfig.uiViewClassName + '.' + prop + '` of native type `' + nativeProps[prop] + '`';
        }

        message += "\nIf you haven't changed this prop yourself, this usually means that " + 'your versions of the native code and JavaScript code are out of sync. Updating both ' + 'should make this error go away.';
        throw new Error(message);
      }
    }
  }

  module.exports = verifyPropTypes;
},167,[147],"verifyPropTypes");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var PixelRatio = require(_dependencyMap[0], 'PixelRatio');

  var ReactNativePropRegistry = require(_dependencyMap[1], 'ReactNativePropRegistry');

  var ReactNativeStyleAttributes = require(_dependencyMap[2], 'ReactNativeStyleAttributes');

  var StyleSheetValidation = require(_dependencyMap[3], 'StyleSheetValidation');

  var flatten = require(_dependencyMap[4], 'flattenStyle');

  var hairlineWidth = PixelRatio.roundToNearestPixel(0.4);

  if (hairlineWidth === 0) {
    hairlineWidth = 1 / PixelRatio.get();
  }

  var absoluteFillObject = {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
  };
  var absoluteFill = ReactNativePropRegistry.register(absoluteFillObject);
  module.exports = {
    hairlineWidth: hairlineWidth,
    absoluteFill: absoluteFill,
    absoluteFillObject: absoluteFillObject,
    compose: function compose(style1, style2) {
      if (style1 && style2) {
        return [style1, style2];
      } else {
        return style1 || style2;
      }
    },
    flatten: flatten,
    setStyleAttributePreprocessor: function setStyleAttributePreprocessor(property, process) {
      var value = void 0;

      if (typeof ReactNativeStyleAttributes[property] === 'string') {
        value = {};
      } else if (typeof ReactNativeStyleAttributes[property] === 'object') {
        value = ReactNativeStyleAttributes[property];
      } else {
        console.error(property + " is not a valid style attribute");
        return;
      }

      if (__DEV__ && typeof value.process === 'function') {
        console.warn("Overwriting " + property + " style attribute preprocessor");
      }

      ReactNativeStyleAttributes[property] = babelHelpers.extends({}, value, {
        process: process
      });
    },
    create: function create(obj) {
      var result = {};

      for (var key in obj) {
        StyleSheetValidation.validateStyle(key, obj);
        result[key] = obj[key] && ReactNativePropRegistry.register(obj[key]);
      }

      return result;
    }
  };
},168,[163,102,147,169,101],"StyleSheet");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ImageStylePropTypes = require(_dependencyMap[0], 'ImageStylePropTypes');

  var TextStylePropTypes = require(_dependencyMap[1], 'TextStylePropTypes');

  var ViewStylePropTypes = require(_dependencyMap[2], 'ViewStylePropTypes');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

  var StyleSheetValidation = function () {
    function StyleSheetValidation() {
      babelHelpers.classCallCheck(this, StyleSheetValidation);
    }

    babelHelpers.createClass(StyleSheetValidation, null, [{
      key: "validateStyleProp",
      value: function validateStyleProp(prop, style, caller) {
        if (!__DEV__) {
          return;
        }

        if (allStylePropTypes[prop] === undefined) {
          var message1 = '"' + prop + '" is not a valid style property.';
          var message2 = '\nValid style props: ' + JSON.stringify(Object.keys(allStylePropTypes).sort(), null, '  ');
          styleError(message1, style, caller, message2);
        }

        var error = allStylePropTypes[prop](style, prop, caller, 'prop', null, ReactPropTypesSecret);

        if (error) {
          styleError(error.message, style, caller);
        }
      }
    }, {
      key: "validateStyle",
      value: function validateStyle(name, styles) {
        if (!__DEV__) {
          return;
        }

        for (var prop in styles[name]) {
          StyleSheetValidation.validateStyleProp(prop, styles[name], 'StyleSheet ' + name);
        }
      }
    }, {
      key: "addValidStylePropTypes",
      value: function addValidStylePropTypes(stylePropTypes) {
        for (var key in stylePropTypes) {
          allStylePropTypes[key] = stylePropTypes[key];
        }
      }
    }]);
    return StyleSheetValidation;
  }();

  var styleError = function styleError(message1, style, caller, message2) {
    invariant(false, message1 + '\n' + (caller || '<<unknown>>') + ': ' + JSON.stringify(style, null, '  ') + (message2 || ''));
  };

  var allStylePropTypes = {};
  StyleSheetValidation.addValidStylePropTypes(ImageStylePropTypes);
  StyleSheetValidation.addValidStylePropTypes(TextStylePropTypes);
  StyleSheetValidation.addValidStylePropTypes(ViewStylePropTypes);
  module.exports = StyleSheetValidation;
},169,[148,151,139,13],"StyleSheetValidation");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/View/View.js";

  var NativeMethodsMixin = require(_dependencyMap[0], 'NativeMethodsMixin');

  var Platform = require(_dependencyMap[1], 'Platform');

  var PropTypes = require(_dependencyMap[2], 'prop-types');

  var React = require(_dependencyMap[3], 'React');

  var ReactNativeStyleAttributes = require(_dependencyMap[4], 'ReactNativeStyleAttributes');

  var ReactNativeViewAttributes = require(_dependencyMap[5], 'ReactNativeViewAttributes');

  var ViewPropTypes = require(_dependencyMap[6], 'ViewPropTypes');

  var createReactClass = require(_dependencyMap[7], 'create-react-class');

  var invariant = require(_dependencyMap[8], 'fbjs/lib/invariant');

  var requireNativeComponent = require(_dependencyMap[9], 'requireNativeComponent');

  var View = createReactClass({
    displayName: 'View',
    mixins: [NativeMethodsMixin],
    propTypes: ViewPropTypes,
    viewConfig: {
      uiViewClassName: 'RCTView',
      validAttributes: ReactNativeViewAttributes.RCTView
    },
    contextTypes: {
      isInAParentText: PropTypes.bool
    },
    render: function render() {
      invariant(!(this.context.isInAParentText && Platform.OS === 'android'), 'Nesting of <View> within <Text> is not supported on Android.');
      return React.createElement(RCTView, babelHelpers.extends({}, this.props, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 71
        }
      }));
    }
  });
  var RCTView = requireNativeComponent('RCTView', View, {
    nativeOnly: {
      nativeBackgroundAndroid: true,
      nativeForegroundAndroid: true
    }
  });

  if (__DEV__) {
    var UIManager = require(_dependencyMap[10], 'UIManager');

    var viewConfig = UIManager.viewConfigs && UIManager.viewConfigs.RCTView || {};

    for (var prop in viewConfig.nativeProps) {
      var viewAny = View;

      if (!viewAny.propTypes[prop] && !ReactNativeStyleAttributes[prop]) {
        throw new Error('View is missing propType for native prop `' + prop + '`');
      }
    }
  }

  var ViewToExport = RCTView;

  if (__DEV__) {
    ViewToExport = View;
  }

  module.exports = ViewToExport;
},170,[125,52,127,130,147,171,131,172,13,145,107],"View");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ReactNativeStyleAttributes = require(_dependencyMap[0], 'ReactNativeStyleAttributes');

  var ReactNativeViewAttributes = {};
  ReactNativeViewAttributes.UIView = {
    pointerEvents: true,
    accessible: true,
    accessibilityActions: true,
    accessibilityLabel: true,
    accessibilityComponentType: true,
    accessibilityLiveRegion: true,
    accessibilityTraits: true,
    importantForAccessibility: true,
    nativeID: true,
    testID: true,
    renderToHardwareTextureAndroid: true,
    shouldRasterizeIOS: true,
    onLayout: true,
    onAccessibilityAction: true,
    onAccessibilityTap: true,
    onMagicTap: true,
    collapsable: true,
    needsOffscreenAlphaCompositing: true,
    style: ReactNativeStyleAttributes
  };
  ReactNativeViewAttributes.RCTView = babelHelpers.extends({}, ReactNativeViewAttributes.UIView, {
    removeClippedSubviews: true
  });
  module.exports = ReactNativeViewAttributes;
},171,[147],"ReactNativeViewAttributes");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var React = require(_dependencyMap[0], 'react');

  var factory = require(_dependencyMap[1], './factory');

  if (typeof React === 'undefined') {
    throw Error('create-react-class could not find the React object. If you are using script tags, ' + 'make sure that React is being loaded before create-react-class.');
  }

  var ReactNoopUpdateQueue = new React.Component().updater;
  module.exports = factory(React.Component, React.isValidElement, ReactNoopUpdateQueue);
},172,[108,173],"create-react-class/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _assign = require(_dependencyMap[0], 'object-assign');

  var emptyObject = require(_dependencyMap[1], 'fbjs/lib/emptyObject');

  var _invariant = require(_dependencyMap[2], 'fbjs/lib/invariant');

  if (process.env.NODE_ENV !== 'production') {
    var warning = require(_dependencyMap[3], 'fbjs/lib/warning');
  }

  var MIXINS_KEY = 'mixins';

  function identity(fn) {
    return fn;
  }

  var ReactPropTypeLocationNames;

  if (process.env.NODE_ENV !== 'production') {
    ReactPropTypeLocationNames = {
      prop: 'prop',
      context: 'context',
      childContext: 'child context'
    };
  } else {
    ReactPropTypeLocationNames = {};
  }

  function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
    var injectedMixins = [];
    var ReactClassInterface = {
      mixins: 'DEFINE_MANY',
      statics: 'DEFINE_MANY',
      propTypes: 'DEFINE_MANY',
      contextTypes: 'DEFINE_MANY',
      childContextTypes: 'DEFINE_MANY',
      getDefaultProps: 'DEFINE_MANY_MERGED',
      getInitialState: 'DEFINE_MANY_MERGED',
      getChildContext: 'DEFINE_MANY_MERGED',
      render: 'DEFINE_ONCE',
      componentWillMount: 'DEFINE_MANY',
      componentDidMount: 'DEFINE_MANY',
      componentWillReceiveProps: 'DEFINE_MANY',
      shouldComponentUpdate: 'DEFINE_ONCE',
      componentWillUpdate: 'DEFINE_MANY',
      componentDidUpdate: 'DEFINE_MANY',
      componentWillUnmount: 'DEFINE_MANY',
      UNSAFE_componentWillMount: 'DEFINE_MANY',
      UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',
      UNSAFE_componentWillUpdate: 'DEFINE_MANY',
      updateComponent: 'OVERRIDE_BASE'
    };
    var ReactClassStaticInterface = {
      getDerivedStateFromProps: 'DEFINE_MANY_MERGED'
    };
    var RESERVED_SPEC_KEYS = {
      displayName: function displayName(Constructor, _displayName) {
        Constructor.displayName = _displayName;
      },
      mixins: function mixins(Constructor, _mixins) {
        if (_mixins) {
          for (var i = 0; i < _mixins.length; i++) {
            mixSpecIntoComponent(Constructor, _mixins[i]);
          }
        }
      },
      childContextTypes: function childContextTypes(Constructor, _childContextTypes) {
        if (process.env.NODE_ENV !== 'production') {
          validateTypeDef(Constructor, _childContextTypes, 'childContext');
        }

        Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, _childContextTypes);
      },
      contextTypes: function contextTypes(Constructor, _contextTypes) {
        if (process.env.NODE_ENV !== 'production') {
          validateTypeDef(Constructor, _contextTypes, 'context');
        }

        Constructor.contextTypes = _assign({}, Constructor.contextTypes, _contextTypes);
      },
      getDefaultProps: function getDefaultProps(Constructor, _getDefaultProps) {
        if (Constructor.getDefaultProps) {
          Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, _getDefaultProps);
        } else {
          Constructor.getDefaultProps = _getDefaultProps;
        }
      },
      propTypes: function propTypes(Constructor, _propTypes) {
        if (process.env.NODE_ENV !== 'production') {
          validateTypeDef(Constructor, _propTypes, 'prop');
        }

        Constructor.propTypes = _assign({}, Constructor.propTypes, _propTypes);
      },
      statics: function statics(Constructor, _statics) {
        mixStaticSpecIntoComponent(Constructor, _statics);
      },
      autobind: function autobind() {}
    };

    function validateTypeDef(Constructor, typeDef, location) {
      for (var propName in typeDef) {
        if (typeDef.hasOwnProperty(propName)) {
          if (process.env.NODE_ENV !== 'production') {
            warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName);
          }
        }
      }
    }

    function validateMethodOverride(isAlreadyDefined, name) {
      var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

      if (ReactClassMixin.hasOwnProperty(name)) {
        _invariant(specPolicy === 'OVERRIDE_BASE', 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name);
      }

      if (isAlreadyDefined) {
        _invariant(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED', 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name);
      }
    }

    function mixSpecIntoComponent(Constructor, spec) {
      if (!spec) {
        if (process.env.NODE_ENV !== 'production') {
          var typeofSpec = typeof spec;
          var isMixinValid = typeofSpec === 'object' && spec !== null;

          if (process.env.NODE_ENV !== 'production') {
            warning(isMixinValid, "%s: You're attempting to include a mixin that is either null " + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec);
          }
        }

        return;
      }

      _invariant(typeof spec !== 'function', "ReactClass: You're attempting to " + 'use a component class or function as a mixin. Instead, just use a ' + 'regular object.');

      _invariant(!isValidElement(spec), "ReactClass: You're attempting to " + 'use a component as a mixin. Instead, just use a regular object.');

      var proto = Constructor.prototype;
      var autoBindPairs = proto.__reactAutoBindPairs;

      if (spec.hasOwnProperty(MIXINS_KEY)) {
        RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
      }

      for (var name in spec) {
        if (!spec.hasOwnProperty(name)) {
          continue;
        }

        if (name === MIXINS_KEY) {
          continue;
        }

        var property = spec[name];
        var isAlreadyDefined = proto.hasOwnProperty(name);
        validateMethodOverride(isAlreadyDefined, name);

        if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
          RESERVED_SPEC_KEYS[name](Constructor, property);
        } else {
          var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
          var isFunction = typeof property === 'function';
          var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

          if (shouldAutoBind) {
            autoBindPairs.push(name, property);
            proto[name] = property;
          } else {
            if (isAlreadyDefined) {
              var specPolicy = ReactClassInterface[name];

              _invariant(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY'), 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name);

              if (specPolicy === 'DEFINE_MANY_MERGED') {
                proto[name] = createMergedResultFunction(proto[name], property);
              } else if (specPolicy === 'DEFINE_MANY') {
                proto[name] = createChainedFunction(proto[name], property);
              }
            } else {
              proto[name] = property;

              if (process.env.NODE_ENV !== 'production') {
                if (typeof property === 'function' && spec.displayName) {
                  proto[name].displayName = spec.displayName + '_' + name;
                }
              }
            }
          }
        }
      }
    }

    function mixStaticSpecIntoComponent(Constructor, statics) {
      if (!statics) {
        return;
      }

      for (var name in statics) {
        var property = statics[name];

        if (!statics.hasOwnProperty(name)) {
          continue;
        }

        var isReserved = name in RESERVED_SPEC_KEYS;

        _invariant(!isReserved, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name);

        var isAlreadyDefined = name in Constructor;

        if (isAlreadyDefined) {
          var specPolicy = ReactClassStaticInterface.hasOwnProperty(name) ? ReactClassStaticInterface[name] : null;

          _invariant(specPolicy === 'DEFINE_MANY_MERGED', 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name);

          Constructor[name] = createMergedResultFunction(Constructor[name], property);
          return;
        }

        Constructor[name] = property;
      }
    }

    function mergeIntoWithNoDuplicateKeys(one, two) {
      _invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');

      for (var key in two) {
        if (two.hasOwnProperty(key)) {
          _invariant(one[key] === undefined, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key);

          one[key] = two[key];
        }
      }

      return one;
    }

    function createMergedResultFunction(one, two) {
      return function mergedResult() {
        var a = one.apply(this, arguments);
        var b = two.apply(this, arguments);

        if (a == null) {
          return b;
        } else if (b == null) {
          return a;
        }

        var c = {};
        mergeIntoWithNoDuplicateKeys(c, a);
        mergeIntoWithNoDuplicateKeys(c, b);
        return c;
      };
    }

    function createChainedFunction(one, two) {
      return function chainedFunction() {
        one.apply(this, arguments);
        two.apply(this, arguments);
      };
    }

    function bindAutoBindMethod(component, method) {
      var boundMethod = method.bind(component);

      if (process.env.NODE_ENV !== 'production') {
        boundMethod.__reactBoundContext = component;
        boundMethod.__reactBoundMethod = method;
        boundMethod.__reactBoundArguments = null;
        var componentName = component.constructor.displayName;
        var _bind = boundMethod.bind;

        boundMethod.bind = function (newThis) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          if (newThis !== component && newThis !== null) {
            if (process.env.NODE_ENV !== 'production') {
              warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName);
            }
          } else if (!args.length) {
            if (process.env.NODE_ENV !== 'production') {
              warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName);
            }

            return boundMethod;
          }

          var reboundMethod = _bind.apply(boundMethod, arguments);

          reboundMethod.__reactBoundContext = component;
          reboundMethod.__reactBoundMethod = method;
          reboundMethod.__reactBoundArguments = args;
          return reboundMethod;
        };
      }

      return boundMethod;
    }

    function bindAutoBindMethods(component) {
      var pairs = component.__reactAutoBindPairs;

      for (var i = 0; i < pairs.length; i += 2) {
        var autoBindKey = pairs[i];
        var method = pairs[i + 1];
        component[autoBindKey] = bindAutoBindMethod(component, method);
      }
    }

    var IsMountedPreMixin = {
      componentDidMount: function componentDidMount() {
        this.__isMounted = true;
      }
    };
    var IsMountedPostMixin = {
      componentWillUnmount: function componentWillUnmount() {
        this.__isMounted = false;
      }
    };
    var ReactClassMixin = {
      replaceState: function replaceState(newState, callback) {
        this.updater.enqueueReplaceState(this, newState, callback);
      },
      isMounted: function isMounted() {
        if (process.env.NODE_ENV !== 'production') {
          warning(this.__didWarnIsMounted, '%s: isMounted is deprecated. Instead, make sure to clean up ' + 'subscriptions and pending requests in componentWillUnmount to ' + 'prevent memory leaks.', this.constructor && this.constructor.displayName || this.name || 'Component');
          this.__didWarnIsMounted = true;
        }

        return !!this.__isMounted;
      }
    };

    var ReactClassComponent = function ReactClassComponent() {};

    _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

    function createClass(spec) {
      var Constructor = identity(function (props, context, updater) {
        if (process.env.NODE_ENV !== 'production') {
          warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory');
        }

        if (this.__reactAutoBindPairs.length) {
          bindAutoBindMethods(this);
        }

        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
        this.state = null;
        var initialState = this.getInitialState ? this.getInitialState() : null;

        if (process.env.NODE_ENV !== 'production') {
          if (initialState === undefined && this.getInitialState._isMockFunction) {
            initialState = null;
          }
        }

        _invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent');

        this.state = initialState;
      });
      Constructor.prototype = new ReactClassComponent();
      Constructor.prototype.constructor = Constructor;
      Constructor.prototype.__reactAutoBindPairs = [];
      injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
      mixSpecIntoComponent(Constructor, IsMountedPreMixin);
      mixSpecIntoComponent(Constructor, spec);
      mixSpecIntoComponent(Constructor, IsMountedPostMixin);

      if (Constructor.getDefaultProps) {
        Constructor.defaultProps = Constructor.getDefaultProps();
      }

      if (process.env.NODE_ENV !== 'production') {
        if (Constructor.getDefaultProps) {
          Constructor.getDefaultProps.isReactClassApproved = {};
        }

        if (Constructor.prototype.getInitialState) {
          Constructor.prototype.getInitialState.isReactClassApproved = {};
        }
      }

      _invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.');

      if (process.env.NODE_ENV !== 'production') {
        warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component');
        warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component');
        warning(!Constructor.prototype.UNSAFE_componentWillRecieveProps, '%s has a method called UNSAFE_componentWillRecieveProps(). ' + 'Did you mean UNSAFE_componentWillReceiveProps()?', spec.displayName || 'A component');
      }

      for (var methodName in ReactClassInterface) {
        if (!Constructor.prototype[methodName]) {
          Constructor.prototype[methodName] = null;
        }
      }

      return Constructor;
    }

    return createClass;
  }

  module.exports = factory;
},173,[110,111,13,56],"create-react-class/factory.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/ART/ReactNativeART.js";

  var Color = require(_dependencyMap[0], 'art/core/color');

  var Path = require(_dependencyMap[1], 'ARTSerializablePath');

  var Transform = require(_dependencyMap[2], 'art/core/transform');

  var React = require(_dependencyMap[3], 'React');

  var PropTypes = require(_dependencyMap[4], 'prop-types');

  var ReactNativeViewAttributes = require(_dependencyMap[5], 'ReactNativeViewAttributes');

  var createReactNativeComponentClass = require(_dependencyMap[6], 'createReactNativeComponentClass');

  var merge = require(_dependencyMap[7], 'merge');

  var invariant = require(_dependencyMap[8], 'fbjs/lib/invariant');

  function arrayDiffer(a, b) {
    if (a == null || b == null) {
      return true;
    }

    if (a.length !== b.length) {
      return true;
    }

    for (var i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) {
        return true;
      }
    }

    return false;
  }

  function fontAndLinesDiffer(a, b) {
    if (a === b) {
      return false;
    }

    if (a.font !== b.font) {
      if (a.font === null) {
        return true;
      }

      if (b.font === null) {
        return true;
      }

      if (a.font.fontFamily !== b.font.fontFamily || a.font.fontSize !== b.font.fontSize || a.font.fontWeight !== b.font.fontWeight || a.font.fontStyle !== b.font.fontStyle) {
        return true;
      }
    }

    return arrayDiffer(a.lines, b.lines);
  }

  var SurfaceViewAttributes = merge(ReactNativeViewAttributes.UIView, {});
  var NodeAttributes = {
    transform: {
      diff: arrayDiffer
    },
    opacity: true
  };
  var GroupAttributes = merge(NodeAttributes, {
    clipping: {
      diff: arrayDiffer
    }
  });
  var RenderableAttributes = merge(NodeAttributes, {
    fill: {
      diff: arrayDiffer
    },
    stroke: {
      diff: arrayDiffer
    },
    strokeWidth: true,
    strokeCap: true,
    strokeJoin: true,
    strokeDash: {
      diff: arrayDiffer
    }
  });
  var ShapeAttributes = merge(RenderableAttributes, {
    d: {
      diff: arrayDiffer
    }
  });
  var TextAttributes = merge(RenderableAttributes, {
    alignment: true,
    frame: {
      diff: fontAndLinesDiffer
    },
    path: {
      diff: arrayDiffer
    }
  });
  var NativeSurfaceView = createReactNativeComponentClass('ARTSurfaceView', function () {
    return {
      validAttributes: SurfaceViewAttributes,
      uiViewClassName: 'ARTSurfaceView'
    };
  });
  var NativeGroup = createReactNativeComponentClass('ARTGroup', function () {
    return {
      validAttributes: GroupAttributes,
      uiViewClassName: 'ARTGroup'
    };
  });
  var NativeShape = createReactNativeComponentClass('ARTShape', function () {
    return {
      validAttributes: ShapeAttributes,
      uiViewClassName: 'ARTShape'
    };
  });
  var NativeText = createReactNativeComponentClass('ARTText', function () {
    return {
      validAttributes: TextAttributes,
      uiViewClassName: 'ARTText'
    };
  });

  function childrenAsString(children) {
    if (!children) {
      return '';
    }

    if (typeof children === 'string') {
      return children;
    }

    if (children.length) {
      return children.join('\n');
    }

    return '';
  }

  var Surface = function (_React$Component) {
    babelHelpers.inherits(Surface, _React$Component);

    function Surface() {
      babelHelpers.classCallCheck(this, Surface);
      return babelHelpers.possibleConstructorReturn(this, (Surface.__proto__ || Object.getPrototypeOf(Surface)).apply(this, arguments));
    }

    babelHelpers.createClass(Surface, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          isInSurface: true
        };
      }
    }, {
      key: "render",
      value: function render() {
        var props = this.props;
        var w = extractNumber(props.width, 0);
        var h = extractNumber(props.height, 0);
        return React.createElement(
          NativeSurfaceView,
          {
            style: [props.style, {
              width: w,
              height: h
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 159
            }
          },
          this.props.children
        );
      }
    }]);
    return Surface;
  }(React.Component);

  Surface.childContextTypes = {
    isInSurface: PropTypes.bool
  };

  function extractNumber(value, defaultValue) {
    if (value == null) {
      return defaultValue;
    }

    return +value;
  }

  var pooledTransform = new Transform();

  function extractTransform(props) {
    var scaleX = props.scaleX != null ? props.scaleX : props.scale != null ? props.scale : 1;
    var scaleY = props.scaleY != null ? props.scaleY : props.scale != null ? props.scale : 1;
    pooledTransform.transformTo(1, 0, 0, 1, 0, 0).move(props.x || 0, props.y || 0).rotate(props.rotation || 0, props.originX, props.originY).scale(scaleX, scaleY, props.originX, props.originY);

    if (props.transform != null) {
      pooledTransform.transform(props.transform);
    }

    return [pooledTransform.xx, pooledTransform.yx, pooledTransform.xy, pooledTransform.yy, pooledTransform.x, pooledTransform.y];
  }

  function extractOpacity(props) {
    if (props.visible === false) {
      return 0;
    }

    if (props.opacity == null) {
      return 1;
    }

    return +props.opacity;
  }

  var Group = function (_React$Component2) {
    babelHelpers.inherits(Group, _React$Component2);

    function Group() {
      babelHelpers.classCallCheck(this, Group);
      return babelHelpers.possibleConstructorReturn(this, (Group.__proto__ || Object.getPrototypeOf(Group)).apply(this, arguments));
    }

    babelHelpers.createClass(Group, [{
      key: "render",
      value: function render() {
        var props = this.props;
        invariant(this.context.isInSurface, 'ART: <Group /> must be a child of a <Surface />');
        return React.createElement(
          NativeGroup,
          {
            opacity: extractOpacity(props),
            transform: extractTransform(props),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 231
            }
          },
          this.props.children
        );
      }
    }]);
    return Group;
  }(React.Component);

  Group.contextTypes = {
    isInSurface: PropTypes.bool.isRequired
  };

  var ClippingRectangle = function (_React$Component3) {
    babelHelpers.inherits(ClippingRectangle, _React$Component3);

    function ClippingRectangle() {
      babelHelpers.classCallCheck(this, ClippingRectangle);
      return babelHelpers.possibleConstructorReturn(this, (ClippingRectangle.__proto__ || Object.getPrototypeOf(ClippingRectangle)).apply(this, arguments));
    }

    babelHelpers.createClass(ClippingRectangle, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var x = extractNumber(props.x, 0);
        var y = extractNumber(props.y, 0);
        var w = extractNumber(props.width, 0);
        var h = extractNumber(props.height, 0);
        var clipping = [x, y, w, h];
        var propsExcludingXAndY = merge(props);
        delete propsExcludingXAndY.x;
        delete propsExcludingXAndY.y;
        return React.createElement(
          NativeGroup,
          {
            clipping: clipping,
            opacity: extractOpacity(props),
            transform: extractTransform(propsExcludingXAndY),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 253
            }
          },
          this.props.children
        );
      }
    }]);
    return ClippingRectangle;
  }(React.Component);

  var SOLID_COLOR = 0;
  var LINEAR_GRADIENT = 1;
  var RADIAL_GRADIENT = 2;
  var PATTERN = 3;

  function insertColorIntoArray(color, targetArray, atIndex) {
    var c = new Color(color);
    targetArray[atIndex + 0] = c.red / 255;
    targetArray[atIndex + 1] = c.green / 255;
    targetArray[atIndex + 2] = c.blue / 255;
    targetArray[atIndex + 3] = c.alpha;
  }

  function insertColorsIntoArray(stops, targetArray, atIndex) {
    var i = 0;

    if ('length' in stops) {
      while (i < stops.length) {
        insertColorIntoArray(stops[i], targetArray, atIndex + i * 4);
        i++;
      }
    } else {
      for (var offset in stops) {
        insertColorIntoArray(stops[offset], targetArray, atIndex + i * 4);
        i++;
      }
    }

    return atIndex + i * 4;
  }

  function insertOffsetsIntoArray(stops, targetArray, atIndex, multi, reverse) {
    var offsetNumber;
    var i = 0;

    if ('length' in stops) {
      while (i < stops.length) {
        offsetNumber = i / (stops.length - 1) * multi;
        targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
        i++;
      }
    } else {
      for (var offsetString in stops) {
        offsetNumber = +offsetString * multi;
        targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
        i++;
      }
    }

    return atIndex + i;
  }

  function insertColorStopsIntoArray(stops, targetArray, atIndex) {
    var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
    insertOffsetsIntoArray(stops, targetArray, lastIndex, 1, false);
  }

  function insertDoubleColorStopsIntoArray(stops, targetArray, atIndex) {
    var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
    lastIndex = insertColorsIntoArray(stops, targetArray, lastIndex);
    lastIndex = insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, false);
    insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, true);
  }

  function applyBoundingBoxToBrushData(brushData, props) {
    var type = brushData[0];
    var width = +props.width;
    var height = +props.height;

    if (type === LINEAR_GRADIENT) {
      brushData[1] *= width;
      brushData[2] *= height;
      brushData[3] *= width;
      brushData[4] *= height;
    } else if (type === RADIAL_GRADIENT) {
      brushData[1] *= width;
      brushData[2] *= height;
      brushData[3] *= width;
      brushData[4] *= height;
      brushData[5] *= width;
      brushData[6] *= height;
    } else if (type === PATTERN) {}
  }

  function extractBrush(colorOrBrush, props) {
    if (colorOrBrush == null) {
      return null;
    }

    if (colorOrBrush._brush) {
      if (colorOrBrush._bb) {
        applyBoundingBoxToBrushData(colorOrBrush._brush, props);
        colorOrBrush._bb = false;
      }

      return colorOrBrush._brush;
    }

    var c = new Color(colorOrBrush);
    return [SOLID_COLOR, c.red / 255, c.green / 255, c.blue / 255, c.alpha];
  }

  function extractColor(color) {
    if (color == null) {
      return null;
    }

    var c = new Color(color);
    return [c.red / 255, c.green / 255, c.blue / 255, c.alpha];
  }

  function extractStrokeCap(strokeCap) {
    switch (strokeCap) {
      case 'butt':
        return 0;

      case 'square':
        return 2;

      default:
        return 1;
    }
  }

  function extractStrokeJoin(strokeJoin) {
    switch (strokeJoin) {
      case 'miter':
        return 0;

      case 'bevel':
        return 2;

      default:
        return 1;
    }
  }

  var Shape = function (_React$Component4) {
    babelHelpers.inherits(Shape, _React$Component4);

    function Shape() {
      babelHelpers.classCallCheck(this, Shape);
      return babelHelpers.possibleConstructorReturn(this, (Shape.__proto__ || Object.getPrototypeOf(Shape)).apply(this, arguments));
    }

    babelHelpers.createClass(Shape, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var path = props.d || childrenAsString(props.children);
        var d = (path instanceof Path ? path : new Path(path)).toJSON();
        return React.createElement(NativeShape, {
          fill: extractBrush(props.fill, props),
          opacity: extractOpacity(props),
          stroke: extractColor(props.stroke),
          strokeCap: extractStrokeCap(props.strokeCap),
          strokeDash: props.strokeDash || null,
          strokeJoin: extractStrokeJoin(props.strokeJoin),
          strokeWidth: extractNumber(props.strokeWidth, 1),
          transform: extractTransform(props),
          d: d,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 401
          }
        });
      }
    }]);
    return Shape;
  }(React.Component);

  var cachedFontObjectsFromString = {};
  var fontFamilyPrefix = /^[\s"']*/;
  var fontFamilySuffix = /[\s"']*$/;

  function extractSingleFontFamily(fontFamilyString) {
    return fontFamilyString.split(',')[0].replace(fontFamilyPrefix, '').replace(fontFamilySuffix, '');
  }

  function parseFontString(font) {
    if (cachedFontObjectsFromString.hasOwnProperty(font)) {
      return cachedFontObjectsFromString[font];
    }

    var regexp = /^\s*((?:(?:normal|bold|italic)\s+)*)(?:(\d+(?:\.\d+)?)[ptexm\%]*(?:\s*\/.*?)?\s+)?\s*\"?([^\"]*)/i;
    var match = regexp.exec(font);

    if (!match) {
      return null;
    }

    var fontFamily = extractSingleFontFamily(match[3]);
    var fontSize = +match[2] || 12;
    var isBold = /bold/.exec(match[1]);
    var isItalic = /italic/.exec(match[1]);
    cachedFontObjectsFromString[font] = {
      fontFamily: fontFamily,
      fontSize: fontSize,
      fontWeight: isBold ? 'bold' : 'normal',
      fontStyle: isItalic ? 'italic' : 'normal'
    };
    return cachedFontObjectsFromString[font];
  }

  function extractFont(font) {
    if (font == null) {
      return null;
    }

    if (typeof font === 'string') {
      return parseFontString(font);
    }

    var fontFamily = extractSingleFontFamily(font.fontFamily);
    var fontSize = +font.fontSize || 12;
    var fontWeight = font.fontWeight != null ? font.fontWeight.toString() : '400';
    return {
      fontFamily: fontFamily,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: font.fontStyle
    };
  }

  var newLine = /\n/g;

  function extractFontAndLines(font, text) {
    return {
      font: extractFont(font),
      lines: text.split(newLine)
    };
  }

  function extractAlignment(alignment) {
    switch (alignment) {
      case 'right':
        return 1;

      case 'center':
        return 2;

      default:
        return 0;
    }
  }

  var Text = function (_React$Component5) {
    babelHelpers.inherits(Text, _React$Component5);

    function Text() {
      babelHelpers.classCallCheck(this, Text);
      return babelHelpers.possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).apply(this, arguments));
    }

    babelHelpers.createClass(Text, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var path = props.path;
        var textPath = path ? (path instanceof Path ? path : new Path(path)).toJSON() : null;
        var textFrame = extractFontAndLines(props.font, childrenAsString(props.children));
        return React.createElement(NativeText, {
          fill: extractBrush(props.fill, props),
          opacity: extractOpacity(props),
          stroke: extractColor(props.stroke),
          strokeCap: extractStrokeCap(props.strokeCap),
          strokeDash: props.strokeDash || null,
          strokeJoin: extractStrokeJoin(props.strokeJoin),
          strokeWidth: extractNumber(props.strokeWidth, 1),
          transform: extractTransform(props),
          alignment: extractAlignment(props.alignment),
          frame: textFrame,
          path: textPath,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 500
          }
        });
      }
    }]);
    return Text;
  }(React.Component);

  function LinearGradient(stops, x1, y1, x2, y2) {
    var type = LINEAR_GRADIENT;

    if (arguments.length < 5) {
      var angle = (x1 == null ? 270 : x1) * Math.PI / 180;
      var x = Math.cos(angle);
      var y = -Math.sin(angle);
      var l = (Math.abs(x) + Math.abs(y)) / 2;
      x *= l;
      y *= l;
      x1 = 0.5 - x;
      x2 = 0.5 + x;
      y1 = 0.5 - y;
      y2 = 0.5 + y;
      this._bb = true;
    } else {
      this._bb = false;
    }

    var brushData = [type, +x1, +y1, +x2, +y2];
    insertColorStopsIntoArray(stops, brushData, 5);
    this._brush = brushData;
  }

  function RadialGradient(stops, fx, fy, rx, ry, cx, cy) {
    if (ry == null) {
      ry = rx;
    }

    if (cx == null) {
      cx = fx;
    }

    if (cy == null) {
      cy = fy;
    }

    if (fx == null) {
      fx = fy = rx = ry = cx = cy = 0.5;
      this._bb = true;
    } else {
      this._bb = false;
    }

    var brushData = [RADIAL_GRADIENT, +fx, +fy, +rx * 2, +ry * 2, +cx, +cy];
    insertDoubleColorStopsIntoArray(stops, brushData, 7);
    this._brush = brushData;
  }

  function Pattern(url, width, height, left, top) {
    this._brush = [PATTERN, url, +left || 0, +top || 0, +width, +height];
  }

  var ReactART = {
    LinearGradient: LinearGradient,
    RadialGradient: RadialGradient,
    Pattern: Pattern,
    Transform: Transform,
    Path: Path,
    Surface: Surface,
    Group: Group,
    ClippingRectangle: ClippingRectangle,
    Shape: Shape,
    Text: Text
  };
  module.exports = ReactART;
},174,[175,176,179,130,127,171,156,134,13],"ReactNativeART");
__d(function (global, require, module, exports, _dependencyMap) {
	var colors = {
		maroon: '#800000',
		red: '#ff0000',
		orange: '#ffA500',
		yellow: '#ffff00',
		olive: '#808000',
		purple: '#800080',
		fuchsia: "#ff00ff",
		white: '#ffffff',
		lime: '#00ff00',
		green: '#008000',
		navy: '#000080',
		blue: '#0000ff',
		aqua: '#00ffff',
		teal: '#008080',
		black: '#000000',
		silver: '#c0c0c0',
		gray: '#808080'
	};

	var map = function map(array, fn) {
		var results = [];

		for (var i = 0, l = array.length; i < l; i++) {
			results[i] = fn(array[i], i);
		}

		return results;
	};

	var Color = function Color(color, type) {
		if (color.isColor) {
			this.red = color.red;
			this.green = color.green;
			this.blue = color.blue;
			this.alpha = color.alpha;
		} else {
			var namedColor = colors[color];

			if (namedColor) {
				color = namedColor;
				type = 'hex';
			}

			switch (typeof color) {
				case 'string':
					if (!type) type = (type = color.match(/^rgb|^hsb|^hsl/)) ? type[0] : 'hex';
					break;

				case 'object':
					type = type || 'rgb';
					color = color.toString();
					break;

				case 'number':
					type = 'hex';
					color = color.toString(16);
					break;
			}

			color = Color['parse' + type.toUpperCase()](color);
			this.red = color[0];
			this.green = color[1];
			this.blue = color[2];
			this.alpha = color[3];
		}

		this.isColor = true;
	};

	var limit = function limit(number, min, max) {
		return Math.min(max, Math.max(min, number));
	};

	var listMatch = /([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,?\s*([-.\d]*\%?)/;
	var hexMatch = /^#?([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{0,2})$/i;

	Color.parseRGB = function (color) {
		return map(color.match(listMatch).slice(1), function (bit, i) {
			if (bit) bit = parseFloat(bit) * (bit[bit.length - 1] == '%' ? 2.55 : 1);
			return i < 3 ? Math.round((bit %= 256) < 0 ? bit + 256 : bit) : limit(bit === '' ? 1 : Number(bit), 0, 1);
		});
	};

	Color.parseHEX = function (color) {
		if (color.length == 1) color = color + color + color;
		return map(color.match(hexMatch).slice(1), function (bit, i) {
			if (i == 3) return bit ? parseInt(bit, 16) / 255 : 1;
			return parseInt(bit.length == 1 ? bit + bit : bit, 16);
		});
	};

	Color.parseHSB = function (color) {
		var hsb = map(color.match(listMatch).slice(1), function (bit, i) {
			if (bit) bit = parseFloat(bit);
			if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);
		});
		var a = hsb[3];
		var br = Math.round(hsb[2] / 100 * 255);
		if (hsb[1] == 0) return [br, br, br, a];
		var hue = hsb[0];
		var f = hue % 60;
		var p = Math.round(hsb[2] * (100 - hsb[1]) / 10000 * 255);
		var q = Math.round(hsb[2] * (6000 - hsb[1] * f) / 600000 * 255);
		var t = Math.round(hsb[2] * (6000 - hsb[1] * (60 - f)) / 600000 * 255);

		switch (Math.floor(hue / 60)) {
			case 0:
				return [br, t, p, a];

			case 1:
				return [q, br, p, a];

			case 2:
				return [p, br, t, a];

			case 3:
				return [p, q, br, a];

			case 4:
				return [t, p, br, a];

			default:
				return [br, p, q, a];
		}
	};

	Color.parseHSL = function (color) {
		var hsb = map(color.match(listMatch).slice(1), function (bit, i) {
			if (bit) bit = parseFloat(bit);
			if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);
		});
		var h = hsb[0] / 60;
		var s = hsb[1] / 100;
		var l = hsb[2] / 100;
		var a = hsb[3];
		var c = (1 - Math.abs(2 * l - 1)) * s;
		var x = c * (1 - Math.abs(h % 2 - 1));
		var m = l - c / 2;
		var p = Math.round((c + m) * 255);
		var q = Math.round((x + m) * 255);
		var t = Math.round(m * 255);

		switch (Math.floor(h)) {
			case 0:
				return [p, q, t, a];

			case 1:
				return [q, p, t, a];

			case 2:
				return [t, p, q, a];

			case 3:
				return [t, q, p, a];

			case 4:
				return [q, t, p, a];

			default:
				return [p, t, q, a];
		}
	};

	var toString = function toString(type, array) {
		if (array[3] != 1) type += 'a';else array.pop();
		return type + '(' + array.join(', ') + ')';
	};

	Color.prototype = {
		toHSB: function toHSB(array) {
			var red = this.red,
			    green = this.green,
			    blue = this.blue,
			    alpha = this.alpha;
			var max = Math.max(red, green, blue),
			    min = Math.min(red, green, blue),
			    delta = max - min;
			var hue = 0,
			    saturation = delta != 0 ? delta / max : 0,
			    brightness = max / 255;

			if (saturation) {
				var rr = (max - red) / delta,
				    gr = (max - green) / delta,
				    br = (max - blue) / delta;
				hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;
				if ((hue /= 6) < 0) hue++;
			}

			var hsb = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(brightness * 100), alpha];
			return array ? hsb : toString('hsb', hsb);
		},
		toHSL: function toHSL(array) {
			var red = this.red,
			    green = this.green,
			    blue = this.blue,
			    alpha = this.alpha;
			var max = Math.max(red, green, blue),
			    min = Math.min(red, green, blue),
			    delta = max - min;
			var hue = 0,
			    saturation = delta != 0 ? delta / (255 - Math.abs(max + min - 255)) : 0,
			    lightness = (max + min) / 512;

			if (saturation) {
				var rr = (max - red) / delta,
				    gr = (max - green) / delta,
				    br = (max - blue) / delta;
				hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;
				if ((hue /= 6) < 0) hue++;
			}

			var hsl = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(lightness * 100), alpha];
			return array ? hsl : toString('hsl', hsl);
		},
		toHEX: function toHEX(array) {
			var a = this.alpha;
			var alpha = (a = Math.round(a * 255).toString(16)).length == 1 ? a + a : a;
			var hex = map([this.red, this.green, this.blue], function (bit) {
				bit = bit.toString(16);
				return bit.length == 1 ? '0' + bit : bit;
			});
			return array ? hex.concat(alpha) : '#' + hex.join('') + (alpha == 'ff' ? '' : alpha);
		},
		toRGB: function toRGB(array) {
			var rgb = [this.red, this.green, this.blue, this.alpha];
			return array ? rgb : toString('rgb', rgb);
		}
	};
	Color.prototype.toString = Color.prototype.toRGB;

	Color.hex = function (hex) {
		return new Color(hex, 'hex');
	};

	if (this.hex == null) this.hex = Color.hex;

	Color.hsb = function (h, s, b, a) {
		return new Color([h || 0, s || 0, b || 0, a == null ? 1 : a], 'hsb');
	};

	if (this.hsb == null) this.hsb = Color.hsb;

	Color.hsl = function (h, s, l, a) {
		return new Color([h || 0, s || 0, l || 0, a == null ? 1 : a], 'hsl');
	};

	if (this.hsl == null) this.hsl = Color.hsl;

	Color.rgb = function (r, g, b, a) {
		return new Color([r || 0, g || 0, b || 0, a == null ? 1 : a], 'rgb');
	};

	if (this.rgb == null) this.rgb = Color.rgb;

	Color.detach = function (color) {
		color = new Color(color);
		return [Color.rgb(color.red, color.green, color.blue).toString(), color.alpha];
	};

	module.exports = Color;
},175,[],"art/core/color.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Class = require(_dependencyMap[0], 'art/core/class.js');

  var Path = require(_dependencyMap[1], 'art/core/path.js');

  var MOVE_TO = 0;
  var CLOSE = 1;
  var LINE_TO = 2;
  var CURVE_TO = 3;
  var ARC = 4;
  var SerializablePath = Class(Path, {
    initialize: function initialize(path) {
      this.reset();

      if (path instanceof SerializablePath) {
        this.path = path.path.slice(0);
      } else if (path) {
        if (path.applyToPath) {
          path.applyToPath(this);
        } else {
          this.push(path);
        }
      }
    },
    onReset: function onReset() {
      this.path = [];
    },
    onMove: function onMove(sx, sy, x, y) {
      this.path.push(MOVE_TO, x, y);
    },
    onLine: function onLine(sx, sy, x, y) {
      this.path.push(LINE_TO, x, y);
    },
    onBezierCurve: function onBezierCurve(sx, sy, p1x, p1y, p2x, p2y, x, y) {
      this.path.push(CURVE_TO, p1x, p1y, p2x, p2y, x, y);
    },
    _arcToBezier: Path.prototype.onArc,
    onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {
      if (rx !== ry || rotation) {
        return this._arcToBezier(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation);
      }

      this.path.push(ARC, cx, cy, rx, sa, ea, ccw ? 0 : 1);
    },
    onClose: function onClose() {
      this.path.push(CLOSE);
    },
    toJSON: function toJSON() {
      return this.path;
    }
  });
  module.exports = SerializablePath;
},176,[177,178],"ARTSerializablePath");
__d(function (global, require, module, exports, _dependencyMap) {
	module.exports = function (mixins) {
		var proto = {};

		for (var i = 0, l = arguments.length; i < l; i++) {
			var mixin = arguments[i];
			if (typeof mixin == 'function') mixin = mixin.prototype;

			for (var key in mixin) {
				proto[key] = mixin[key];
			}
		}

		if (!proto.initialize) proto.initialize = function () {};

		proto.constructor = function (a, b, c, d, e, f, g, h) {
			return new proto.initialize(a, b, c, d, e, f, g, h);
		};

		proto.constructor.prototype = proto.initialize.prototype = proto;
		return proto.constructor;
	};
},177,[],"art/core/class.js");
__d(function (global, require, module, exports, _dependencyMap) {
	var Class = require(_dependencyMap[0], './class');

	module.exports = Class({
		initialize: function initialize(path) {
			this.reset().push(path);
		},
		push: function push() {
			var p = Array.prototype.join.call(arguments, ' ').match(/[a-df-z]|[\-+]?(?:[\d\.]e[\-+]?|[^\s\-+,a-z])+/ig);
			if (!p) return this;
			var last,
			    cmd = p[0],
			    i = 1;

			while (cmd) {
				switch (cmd) {
					case 'm':
						this.move(p[i++], p[i++]);
						break;

					case 'l':
						this.line(p[i++], p[i++]);
						break;

					case 'c':
						this.curve(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);
						break;

					case 's':
						this.curve(p[i++], p[i++], null, null, p[i++], p[i++]);
						break;

					case 'q':
						this.curve(p[i++], p[i++], p[i++], p[i++]);
						break;

					case 't':
						this.curve(p[i++], p[i++]);
						break;

					case 'a':
						this.arc(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);
						i += 7;
						break;

					case 'h':
						this.line(p[i++], 0);
						break;

					case 'v':
						this.line(0, p[i++]);
						break;

					case 'M':
						this.moveTo(p[i++], p[i++]);
						break;

					case 'L':
						this.lineTo(p[i++], p[i++]);
						break;

					case 'C':
						this.curveTo(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);
						break;

					case 'S':
						this.curveTo(p[i++], p[i++], null, null, p[i++], p[i++]);
						break;

					case 'Q':
						this.curveTo(p[i++], p[i++], p[i++], p[i++]);
						break;

					case 'T':
						this.curveTo(p[i++], p[i++]);
						break;

					case 'A':
						this.arcTo(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);
						i += 7;
						break;

					case 'H':
						this.lineTo(p[i++], this.penY);
						break;

					case 'V':
						this.lineTo(this.penX, p[i++]);
						break;

					case 'Z':
					case 'z':
						this.close();
						break;

					default:
						cmd = last;
						i--;
						continue;
				}

				last = cmd;
				if (last == 'm') last = 'l';else if (last == 'M') last = 'L';
				cmd = p[i++];
			}

			return this;
		},
		reset: function reset() {
			this.penX = this.penY = 0;
			this.penDownX = this.penDownY = null;
			this._pivotX = this._pivotY = 0;
			this.onReset();
			return this;
		},
		move: function move(x, y) {
			this.onMove(this.penX, this.penY, this._pivotX = this.penX += +x, this._pivotY = this.penY += +y);
			return this;
		},
		moveTo: function moveTo(x, y) {
			this.onMove(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);
			return this;
		},
		line: function line(x, y) {
			return this.lineTo(this.penX + +x, this.penY + +y);
		},
		lineTo: function lineTo(x, y) {
			if (this.penDownX == null) {
				this.penDownX = this.penX;
				this.penDownY = this.penY;
			}

			this.onLine(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);
			return this;
		},
		curve: function curve(c1x, c1y, c2x, c2y, ex, ey) {
			var x = this.penX,
			    y = this.penY;
			return this.curveTo(x + +c1x, y + +c1y, c2x == null ? null : x + +c2x, c2y == null ? null : y + +c2y, ex == null ? null : x + +ex, ey == null ? null : y + +ey);
		},
		curveTo: function curveTo(c1x, c1y, c2x, c2y, ex, ey) {
			var x = this.penX,
			    y = this.penY;

			if (c2x == null) {
				c2x = +c1x;
				c2y = +c1y;
				c1x = x * 2 - (this._pivotX || 0);
				c1y = y * 2 - (this._pivotY || 0);
			}

			if (ex == null) {
				this._pivotX = +c1x;
				this._pivotY = +c1y;
				ex = +c2x;
				ey = +c2y;
				c2x = (ex + +c1x * 2) / 3;
				c2y = (ey + +c1y * 2) / 3;
				c1x = (x + +c1x * 2) / 3;
				c1y = (y + +c1y * 2) / 3;
			} else {
				this._pivotX = +c2x;
				this._pivotY = +c2y;
			}

			if (this.penDownX == null) {
				this.penDownX = x;
				this.penDownY = y;
			}

			this.onBezierCurve(x, y, +c1x, +c1y, +c2x, +c2y, this.penX = +ex, this.penY = +ey);
			return this;
		},
		arc: function arc(x, y, rx, ry, outer, counterClockwise, rotation) {
			return this.arcTo(this.penX + +x, this.penY + +y, rx, ry, outer, counterClockwise, rotation);
		},
		arcTo: function arcTo(x, y, rx, ry, outer, counterClockwise, rotation) {
			ry = Math.abs(+ry || +rx || +y - this.penY);
			rx = Math.abs(+rx || +x - this.penX);
			if (!rx || !ry || x == this.penX && y == this.penY) return this.lineTo(x, y);
			var tX = this.penX,
			    tY = this.penY,
			    clockwise = !+counterClockwise,
			    large = !!+outer;
			var rad = rotation ? rotation * Math.PI / 180 : 0,
			    cos = Math.cos(rad),
			    sin = Math.sin(rad);
			x -= tX;
			y -= tY;
			var cx = cos * x / 2 + sin * y / 2,
			    cy = -sin * x / 2 + cos * y / 2,
			    rxry = rx * rx * ry * ry,
			    rycx = ry * ry * cx * cx,
			    rxcy = rx * rx * cy * cy,
			    a = rxry - rxcy - rycx;

			if (a < 0) {
				a = Math.sqrt(1 - a / rxry);
				rx *= a;
				ry *= a;
				cx = x / 2;
				cy = y / 2;
			} else {
				a = Math.sqrt(a / (rxcy + rycx));
				if (large == clockwise) a = -a;
				var cxd = -a * cy * rx / ry,
				    cyd = a * cx * ry / rx;
				cx = cos * cxd - sin * cyd + x / 2;
				cy = sin * cxd + cos * cyd + y / 2;
			}

			var xx = cos / rx,
			    yx = sin / rx,
			    xy = -sin / ry,
			    yy = cos / ry;
			var sa = Math.atan2(xy * -cx + yy * -cy, xx * -cx + yx * -cy),
			    ea = Math.atan2(xy * (x - cx) + yy * (y - cy), xx * (x - cx) + yx * (y - cy));
			cx += tX;
			cy += tY;
			x += tX;
			y += tY;

			if (this.penDownX == null) {
				this.penDownX = this.penX;
				this.penDownY = this.penY;
			}

			this.onArc(tX, tY, this._pivotX = this.penX = x, this._pivotY = this.penY = y, cx, cy, rx, ry, sa, ea, !clockwise, rotation);
			return this;
		},
		counterArc: function counterArc(x, y, rx, ry, outer) {
			return this.arc(x, y, rx, ry, outer, true);
		},
		counterArcTo: function counterArcTo(x, y, rx, ry, outer) {
			return this.arcTo(x, y, rx, ry, outer, true);
		},
		close: function close() {
			if (this.penDownX != null) {
				this.onClose(this.penX, this.penY, this.penX = this.penDownX, this.penY = this.penDownY);
				this.penDownX = null;
			}

			return this;
		},
		onReset: function onReset() {},
		onMove: function onMove(sx, sy, ex, ey) {},
		onLine: function onLine(sx, sy, ex, ey) {
			this.onBezierCurve(sx, sy, sx, sy, ex, ey, ex, ey);
		},
		onBezierCurve: function onBezierCurve(sx, sy, c1x, c1y, c2x, c2y, ex, ey) {
			var gx = ex - sx,
			    gy = ey - sy,
			    g = gx * gx + gy * gy,
			    v1,
			    v2,
			    cx,
			    cy,
			    u;
			cx = c1x - sx;
			cy = c1y - sy;
			u = cx * gx + cy * gy;

			if (u > g) {
				cx -= gx;
				cy -= gy;
			} else if (u > 0 && g != 0) {
				cx -= u / g * gx;
				cy -= u / g * gy;
			}

			v1 = cx * cx + cy * cy;
			cx = c2x - sx;
			cy = c2y - sy;
			u = cx * gx + cy * gy;

			if (u > g) {
				cx -= gx;
				cy -= gy;
			} else if (u > 0 && g != 0) {
				cx -= u / g * gx;
				cy -= u / g * gy;
			}

			v2 = cx * cx + cy * cy;

			if (v1 < 0.01 && v2 < 0.01) {
				this.onLine(sx, sy, ex, ey);
				return;
			}

			if (isNaN(v1) || isNaN(v2)) {
				throw new Error('Bad input');
			}

			var s1x = (c1x + c2x) * 0.5,
			    s1y = (c1y + c2y) * 0.5,
			    l1x = (c1x + sx) * 0.5,
			    l1y = (c1y + sy) * 0.5,
			    l2x = (l1x + s1x) * 0.5,
			    l2y = (l1y + s1y) * 0.5,
			    r2x = (ex + c2x) * 0.5,
			    r2y = (ey + c2y) * 0.5,
			    r1x = (r2x + s1x) * 0.5,
			    r1y = (r2y + s1y) * 0.5,
			    l2r1x = (l2x + r1x) * 0.5,
			    l2r1y = (l2y + r1y) * 0.5;
			this.onBezierCurve(sx, sy, l1x, l1y, l2x, l2y, l2r1x, l2r1y);
			this.onBezierCurve(l2r1x, l2r1y, r1x, r1y, r2x, r2y, ex, ey);
		},
		onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {
			var rad = rotation ? rotation * Math.PI / 180 : 0,
			    cos = Math.cos(rad),
			    sin = Math.sin(rad),
			    xx = cos * rx,
			    yx = -sin * ry,
			    xy = sin * rx,
			    yy = cos * ry;
			var arc = ea - sa;
			if (arc < 0 && !ccw) arc += Math.PI * 2;else if (arc > 0 && ccw) arc -= Math.PI * 2;
			var n = Math.ceil(Math.abs(arc / (Math.PI / 2))),
			    step = arc / n,
			    k = 4 / 3 * Math.tan(step / 4);
			var x = Math.cos(sa),
			    y = Math.sin(sa);

			for (var i = 0; i < n; i++) {
				var cp1x = x - k * y,
				    cp1y = y + k * x;
				sa += step;
				x = Math.cos(sa);
				y = Math.sin(sa);
				var cp2x = x + k * y,
				    cp2y = y - k * x;
				this.onBezierCurve(sx, sy, cx + xx * cp1x + yx * cp1y, cy + xy * cp1x + yy * cp1y, cx + xx * cp2x + yx * cp2y, cy + xy * cp2x + yy * cp2y, sx = cx + xx * x + yx * y, sy = cy + xy * x + yy * y);
			}
		},
		onClose: function onClose(sx, sy, ex, ey) {
			this.onLine(sx, sy, ex, ey);
		}
	});
},178,[177],"art/core/path.js");
__d(function (global, require, module, exports, _dependencyMap) {
	var Class = require(_dependencyMap[0], './class');

	function Transform(xx, yx, xy, yy, x, y) {
		if (xx && typeof xx == 'object') {
			yx = xx.yx;
			yy = xx.yy;
			y = xx.y;
			xy = xx.xy;
			x = xx.x;
			xx = xx.xx;
		}

		this.xx = xx == null ? 1 : xx;
		this.yx = yx || 0;
		this.xy = xy || 0;
		this.yy = yy == null ? 1 : yy;
		this.x = (x == null ? this.x : x) || 0;
		this.y = (y == null ? this.y : y) || 0;

		this._transform();

		return this;
	}

	;
	module.exports = Class({
		initialize: Transform,
		_transform: function _transform() {},
		xx: 1,
		yx: 0,
		x: 0,
		xy: 0,
		yy: 1,
		y: 0,
		transform: function transform(xx, yx, xy, yy, x, y) {
			var m = this;

			if (xx && typeof xx == 'object') {
				yx = xx.yx;
				yy = xx.yy;
				y = xx.y;
				xy = xx.xy;
				x = xx.x;
				xx = xx.xx;
			}

			if (!x) x = 0;
			if (!y) y = 0;
			return this.transformTo(m.xx * xx + m.xy * yx, m.yx * xx + m.yy * yx, m.xx * xy + m.xy * yy, m.yx * xy + m.yy * yy, m.xx * x + m.xy * y + m.x, m.yx * x + m.yy * y + m.y);
		},
		transformTo: Transform,
		translate: function translate(x, y) {
			return this.transform(1, 0, 0, 1, x, y);
		},
		move: function move(x, y) {
			this.x += x || 0;
			this.y += y || 0;

			this._transform();

			return this;
		},
		scale: function scale(x, y) {
			if (y == null) y = x;
			return this.transform(x, 0, 0, y, 0, 0);
		},
		rotate: function rotate(deg, x, y) {
			if (x == null || y == null) {
				x = (this.left || 0) + (this.width || 0) / 2;
				y = (this.top || 0) + (this.height || 0) / 2;
			}

			var rad = deg * Math.PI / 180,
			    sin = Math.sin(rad),
			    cos = Math.cos(rad);
			this.transform(1, 0, 0, 1, x, y);
			var m = this;
			return this.transformTo(cos * m.xx - sin * m.yx, sin * m.xx + cos * m.yx, cos * m.xy - sin * m.yy, sin * m.xy + cos * m.yy, m.x, m.y).transform(1, 0, 0, 1, -x, -y);
		},
		moveTo: function moveTo(x, y) {
			var m = this;
			return this.transformTo(m.xx, m.yx, m.xy, m.yy, x, y);
		},
		rotateTo: function rotateTo(deg, x, y) {
			var m = this;
			var flip = m.yx / m.xx > m.yy / m.xy ? -1 : 1;
			if (m.xx < 0 ? m.xy >= 0 : m.xy < 0) flip = -flip;
			return this.rotate(deg - Math.atan2(flip * m.yx, flip * m.xx) * 180 / Math.PI, x, y);
		},
		scaleTo: function scaleTo(x, y) {
			var m = this;
			var h = Math.sqrt(m.xx * m.xx + m.yx * m.yx);
			m.xx /= h;
			m.yx /= h;
			h = Math.sqrt(m.yy * m.yy + m.xy * m.xy);
			m.yy /= h;
			m.xy /= h;
			return this.scale(x, y);
		},
		resizeTo: function resizeTo(width, height) {
			var w = this.width,
			    h = this.height;
			if (!w || !h) return this;
			return this.scaleTo(width / w, height / h);
		},
		inversePoint: function inversePoint(x, y) {
			var a = this.xx,
			    b = this.yx,
			    c = this.xy,
			    d = this.yy,
			    e = this.x,
			    f = this.y;
			var det = b * c - a * d;
			if (det == 0) return null;
			return {
				x: (d * (e - x) + c * (y - f)) / det,
				y: (a * (f - y) + b * (x - e)) / det
			};
		},
		point: function point(x, y) {
			var m = this;
			return {
				x: m.xx * x + m.xy * y + m.x,
				y: m.yx * x + m.yy * y + m.y
			};
		}
	});
},179,[177],"art/core/transform.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/Button.js";

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var Platform = require(_dependencyMap[1], 'Platform');

  var React = require(_dependencyMap[2], 'React');

  var PropTypes = require(_dependencyMap[3], 'prop-types');

  var StyleSheet = require(_dependencyMap[4], 'StyleSheet');

  var Text = require(_dependencyMap[5], 'Text');

  var TouchableNativeFeedback = require(_dependencyMap[6], 'TouchableNativeFeedback');

  var TouchableOpacity = require(_dependencyMap[7], 'TouchableOpacity');

  var View = require(_dependencyMap[8], 'View');

  var invariant = require(_dependencyMap[9], 'fbjs/lib/invariant');

  var Button = function (_React$Component) {
    babelHelpers.inherits(Button, _React$Component);

    function Button() {
      babelHelpers.classCallCheck(this, Button);
      return babelHelpers.possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
    }

    babelHelpers.createClass(Button, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            accessibilityLabel = _props.accessibilityLabel,
            color = _props.color,
            onPress = _props.onPress,
            title = _props.title,
            hasTVPreferredFocus = _props.hasTVPreferredFocus,
            disabled = _props.disabled,
            testID = _props.testID;
        var buttonStyles = [styles.button];
        var textStyles = [styles.text];

        if (color) {
          if (Platform.OS === 'ios') {
            textStyles.push({
              color: color
            });
          } else {
            buttonStyles.push({
              backgroundColor: color
            });
          }
        }

        var accessibilityTraits = ['button'];

        if (disabled) {
          buttonStyles.push(styles.buttonDisabled);
          textStyles.push(styles.textDisabled);
          accessibilityTraits.push('disabled');
        }

        invariant(typeof title === 'string', 'The title prop of a Button must be a string');
        var formattedTitle = Platform.OS === 'android' ? title.toUpperCase() : title;
        var Touchable = Platform.OS === 'android' ? TouchableNativeFeedback : TouchableOpacity;
        return React.createElement(
          Touchable,
          {
            accessibilityComponentType: "button",
            accessibilityLabel: accessibilityLabel,
            accessibilityTraits: accessibilityTraits,
            hasTVPreferredFocus: hasTVPreferredFocus,
            testID: testID,
            disabled: disabled,
            onPress: onPress,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 128
            }
          },
          React.createElement(
            View,
            {
              style: buttonStyles,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 136
              }
            },
            React.createElement(
              Text,
              {
                style: textStyles,
                disabled: disabled,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 137
                }
              },
              formattedTitle
            )
          )
        );
      }
    }]);
    return Button;
  }(React.Component);

  Button.propTypes = {
    title: PropTypes.string.isRequired,
    accessibilityLabel: PropTypes.string,
    color: ColorPropType,
    disabled: PropTypes.bool,
    onPress: PropTypes.func.isRequired,
    testID: PropTypes.string,
    hasTVPreferredFocus: PropTypes.bool
  };
  var styles = StyleSheet.create({
    button: Platform.select({
      ios: {},
      android: {
        elevation: 4,
        backgroundColor: '#2196F3',
        borderRadius: 2
      }
    }),
    text: Platform.select({
      ios: {
        color: '#007AFF',
        textAlign: 'center',
        padding: 8,
        fontSize: 18
      },
      android: {
        color: 'white',
        textAlign: 'center',
        padding: 8,
        fontWeight: '500'
      }
    }),
    buttonDisabled: Platform.select({
      ios: {},
      android: {
        elevation: 0,
        backgroundColor: '#dfdfdf'
      }
    }),
    textDisabled: Platform.select({
      ios: {
        color: '#cdcdcd'
      },
      android: {
        color: '#a1a1a1'
      }
    })
  });
  module.exports = Button;
},180,[123,52,130,127,168,181,189,193,170,13],"Button");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Text/Text.js";

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var EdgeInsetsPropType = require(_dependencyMap[1], 'EdgeInsetsPropType');

  var NativeMethodsMixin = require(_dependencyMap[2], 'NativeMethodsMixin');

  var Platform = require(_dependencyMap[3], 'Platform');

  var React = require(_dependencyMap[4], 'React');

  var PropTypes = require(_dependencyMap[5], 'prop-types');

  var ReactNativeViewAttributes = require(_dependencyMap[6], 'ReactNativeViewAttributes');

  var StyleSheetPropType = require(_dependencyMap[7], 'StyleSheetPropType');

  var TextStylePropTypes = require(_dependencyMap[8], 'TextStylePropTypes');

  var Touchable = require(_dependencyMap[9], 'Touchable');

  var createReactClass = require(_dependencyMap[10], 'create-react-class');

  var createReactNativeComponentClass = require(_dependencyMap[11], 'createReactNativeComponentClass');

  var mergeFast = require(_dependencyMap[12], 'mergeFast');

  var processColor = require(_dependencyMap[13], 'processColor');

  var stylePropType = StyleSheetPropType(TextStylePropTypes);
  var viewConfig = {
    validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {
      isHighlighted: true,
      numberOfLines: true,
      ellipsizeMode: true,
      allowFontScaling: true,
      disabled: true,
      selectable: true,
      selectionColor: true,
      adjustsFontSizeToFit: true,
      minimumFontScale: true,
      textBreakStrategy: true
    }),
    uiViewClassName: 'RCTText'
  };
  var Text = createReactClass({
    displayName: 'Text',
    propTypes: {
      ellipsizeMode: PropTypes.oneOf(['head', 'middle', 'tail', 'clip']),
      numberOfLines: PropTypes.number,
      textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
      onLayout: PropTypes.func,
      onPress: PropTypes.func,
      onLongPress: PropTypes.func,
      pressRetentionOffset: EdgeInsetsPropType,
      selectable: PropTypes.bool,
      selectionColor: ColorPropType,
      suppressHighlighting: PropTypes.bool,
      style: stylePropType,
      testID: PropTypes.string,
      nativeID: PropTypes.string,
      allowFontScaling: PropTypes.bool,
      accessible: PropTypes.bool,
      adjustsFontSizeToFit: PropTypes.bool,
      minimumFontScale: PropTypes.number,
      disabled: PropTypes.bool
    },
    getDefaultProps: function getDefaultProps() {
      return {
        accessible: true,
        allowFontScaling: true,
        ellipsizeMode: 'tail'
      };
    },
    getInitialState: function getInitialState() {
      return mergeFast(Touchable.Mixin.touchableGetInitialState(), {
        isHighlighted: false
      });
    },
    mixins: [NativeMethodsMixin],
    viewConfig: viewConfig,
    getChildContext: function getChildContext() {
      return {
        isInAParentText: true
      };
    },
    childContextTypes: {
      isInAParentText: PropTypes.bool
    },
    contextTypes: {
      isInAParentText: PropTypes.bool
    },
    _handlers: null,
    _hasPressHandler: function _hasPressHandler() {
      return !!this.props.onPress || !!this.props.onLongPress;
    },
    touchableHandleActivePressIn: null,
    touchableHandleActivePressOut: null,
    touchableHandlePress: null,
    touchableHandleLongPress: null,
    touchableGetPressRectOffset: null,
    render: function render() {
      var _this = this;

      var newProps = this.props;

      if (this.props.onStartShouldSetResponder || this._hasPressHandler()) {
        if (!this._handlers) {
          this._handlers = {
            onStartShouldSetResponder: function onStartShouldSetResponder() {
              var shouldSetFromProps = _this.props.onStartShouldSetResponder && _this.props.onStartShouldSetResponder();

              var setResponder = shouldSetFromProps || _this._hasPressHandler();

              if (setResponder && !_this.touchableHandleActivePressIn) {
                for (var key in Touchable.Mixin) {
                  if (typeof Touchable.Mixin[key] === 'function') {
                    _this[key] = Touchable.Mixin[key].bind(_this);
                  }
                }

                _this.touchableHandleActivePressIn = function () {
                  if (_this.props.suppressHighlighting || !_this._hasPressHandler()) {
                    return;
                  }

                  _this.setState({
                    isHighlighted: true
                  });
                };

                _this.touchableHandleActivePressOut = function () {
                  if (_this.props.suppressHighlighting || !_this._hasPressHandler()) {
                    return;
                  }

                  _this.setState({
                    isHighlighted: false
                  });
                };

                _this.touchableHandlePress = function (e) {
                  _this.props.onPress && _this.props.onPress(e);
                };

                _this.touchableHandleLongPress = function (e) {
                  _this.props.onLongPress && _this.props.onLongPress(e);
                };

                _this.touchableGetPressRectOffset = function () {
                  return this.props.pressRetentionOffset || PRESS_RECT_OFFSET;
                };
              }

              return setResponder;
            },
            onResponderGrant: function (e, dispatchID) {
              this.touchableHandleResponderGrant(e, dispatchID);
              this.props.onResponderGrant && this.props.onResponderGrant.apply(this, arguments);
            }.bind(this),
            onResponderMove: function (e) {
              this.touchableHandleResponderMove(e);
              this.props.onResponderMove && this.props.onResponderMove.apply(this, arguments);
            }.bind(this),
            onResponderRelease: function (e) {
              this.touchableHandleResponderRelease(e);
              this.props.onResponderRelease && this.props.onResponderRelease.apply(this, arguments);
            }.bind(this),
            onResponderTerminate: function (e) {
              this.touchableHandleResponderTerminate(e);
              this.props.onResponderTerminate && this.props.onResponderTerminate.apply(this, arguments);
            }.bind(this),
            onResponderTerminationRequest: function () {
              var allowTermination = this.touchableHandleResponderTerminationRequest();

              if (allowTermination && this.props.onResponderTerminationRequest) {
                allowTermination = this.props.onResponderTerminationRequest.apply(this, arguments);
              }

              return allowTermination;
            }.bind(this)
          };
        }

        newProps = babelHelpers.extends({}, this.props, this._handlers, {
          isHighlighted: this.state.isHighlighted
        });
      }

      if (newProps.selectionColor != null) {
        newProps = babelHelpers.extends({}, newProps, {
          selectionColor: processColor(newProps.selectionColor)
        });
      }

      if (Touchable.TOUCH_TARGET_DEBUG && newProps.onPress) {
        newProps = babelHelpers.extends({}, newProps, {
          style: [this.props.style, {
            color: 'magenta'
          }]
        });
      }

      if (this.context.isInAParentText) {
        return React.createElement(RCTVirtualText, babelHelpers.extends({}, newProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 546
          }
        }));
      } else {
        return React.createElement(RCTText, babelHelpers.extends({}, newProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 548
          }
        }));
      }
    }
  });
  var PRESS_RECT_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var RCTText = createReactNativeComponentClass(viewConfig.uiViewClassName, function () {
    return viewConfig;
  });
  var RCTVirtualText = RCTText;

  if (Platform.OS === 'android') {
    RCTVirtualText = createReactNativeComponentClass('RCTVirtualText', function () {
      return {
        validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {
          isHighlighted: true
        }),
        uiViewClassName: 'RCTVirtualText'
      };
    });
  }

  module.exports = Text;
},181,[123,132,125,52,130,127,171,138,151,182,172,156,188,152],"Text");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/Touchable/Touchable.js";

  var BoundingDimensions = require(_dependencyMap[0], 'BoundingDimensions');

  var Platform = require(_dependencyMap[1], 'Platform');

  var Position = require(_dependencyMap[2], 'Position');

  var React = require(_dependencyMap[3], 'React');

  var ReactNative = require(_dependencyMap[4], 'ReactNative');

  var TVEventHandler = require(_dependencyMap[5], 'TVEventHandler');

  var TouchEventUtils = require(_dependencyMap[6], 'fbjs/lib/TouchEventUtils');

  var UIManager = require(_dependencyMap[7], 'UIManager');

  var View = require(_dependencyMap[8], 'View');

  var keyMirror = require(_dependencyMap[9], 'fbjs/lib/keyMirror');

  var normalizeColor = require(_dependencyMap[10], 'normalizeColor');

  var States = keyMirror({
    NOT_RESPONDER: null,
    RESPONDER_INACTIVE_PRESS_IN: null,
    RESPONDER_INACTIVE_PRESS_OUT: null,
    RESPONDER_ACTIVE_PRESS_IN: null,
    RESPONDER_ACTIVE_PRESS_OUT: null,
    RESPONDER_ACTIVE_LONG_PRESS_IN: null,
    RESPONDER_ACTIVE_LONG_PRESS_OUT: null,
    ERROR: null
  });
  var IsActive = {
    RESPONDER_ACTIVE_PRESS_OUT: true,
    RESPONDER_ACTIVE_PRESS_IN: true
  };
  var IsPressingIn = {
    RESPONDER_INACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
  };
  var IsLongPressingIn = {
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
  };
  var Signals = keyMirror({
    DELAY: null,
    RESPONDER_GRANT: null,
    RESPONDER_RELEASE: null,
    RESPONDER_TERMINATED: null,
    ENTER_PRESS_RECT: null,
    LEAVE_PRESS_RECT: null,
    LONG_PRESS_DETECTED: null
  });
  var Transitions = {
    NOT_RESPONDER: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
      RESPONDER_RELEASE: States.ERROR,
      RESPONDER_TERMINATED: States.ERROR,
      ENTER_PRESS_RECT: States.ERROR,
      LEAVE_PRESS_RECT: States.ERROR,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_IN: {
      DELAY: States.RESPONDER_ACTIVE_PRESS_IN,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_OUT: {
      DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_PRESS_IN: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_PRESS_OUT: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_LONG_PRESS_IN: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
      LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_LONG_PRESS_OUT: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    error: {
      DELAY: States.NOT_RESPONDER,
      RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.NOT_RESPONDER,
      LEAVE_PRESS_RECT: States.NOT_RESPONDER,
      LONG_PRESS_DETECTED: States.NOT_RESPONDER
    }
  };
  var HIGHLIGHT_DELAY_MS = 130;
  var PRESS_EXPAND_PX = 20;
  var LONG_PRESS_THRESHOLD = 500;
  var LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;
  var LONG_PRESS_ALLOWED_MOVEMENT = 10;
  var TouchableMixin = {
    componentDidMount: function componentDidMount() {
      if (!Platform.isTVOS) {
        return;
      }

      this._tvEventHandler = new TVEventHandler();

      this._tvEventHandler.enable(this, function (cmp, evt) {
        var myTag = ReactNative.findNodeHandle(cmp);
        evt.dispatchConfig = {};

        if (myTag === evt.tag) {
          if (evt.eventType === 'focus') {
            cmp.touchableHandleActivePressIn && cmp.touchableHandleActivePressIn(evt);
          } else if (evt.eventType === 'blur') {
            cmp.touchableHandleActivePressOut && cmp.touchableHandleActivePressOut(evt);
          } else if (evt.eventType === 'select') {
            cmp.touchableHandlePress && cmp.touchableHandlePress(evt);
          }
        }
      });
    },
    componentWillUnmount: function componentWillUnmount() {
      if (this._tvEventHandler) {
        this._tvEventHandler.disable();

        delete this._tvEventHandler;
      }

      this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
      this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
      this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
    },
    touchableGetInitialState: function touchableGetInitialState() {
      return {
        touchable: {
          touchState: undefined,
          responderID: null
        }
      };
    },
    touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {
      return !this.props.rejectResponderTermination;
    },
    touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {
      return !this.props.disabled;
    },
    touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {
      return true;
    },
    touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {
      var dispatchID = e.currentTarget;
      e.persist();
      this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
      this.pressOutDelayTimeout = null;
      this.state.touchable.touchState = States.NOT_RESPONDER;
      this.state.touchable.responderID = dispatchID;

      this._receiveSignal(Signals.RESPONDER_GRANT, e);

      var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;
      delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;

      if (delayMS !== 0) {
        this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);
      } else {
        this._handleDelay(e);
      }

      var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;
      longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;
      this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);
    },
    touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {
      this._receiveSignal(Signals.RESPONDER_RELEASE, e);
    },
    touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {
      this._receiveSignal(Signals.RESPONDER_TERMINATED, e);
    },
    touchableHandleResponderMove: function touchableHandleResponderMove(e) {
      if (this.state.touchable.touchState === States.RESPONDER_INACTIVE_PRESS_IN) {
        return;
      }

      if (!this.state.touchable.positionOnActivate) {
        return;
      }

      var positionOnActivate = this.state.touchable.positionOnActivate;
      var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;
      var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {
        left: PRESS_EXPAND_PX,
        right: PRESS_EXPAND_PX,
        top: PRESS_EXPAND_PX,
        bottom: PRESS_EXPAND_PX
      };
      var pressExpandLeft = pressRectOffset.left;
      var pressExpandTop = pressRectOffset.top;
      var pressExpandRight = pressRectOffset.right;
      var pressExpandBottom = pressRectOffset.bottom;
      var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;

      if (hitSlop) {
        pressExpandLeft += hitSlop.left;
        pressExpandTop += hitSlop.top;
        pressExpandRight += hitSlop.right;
        pressExpandBottom += hitSlop.bottom;
      }

      var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
      var pageX = touch && touch.pageX;
      var pageY = touch && touch.pageY;

      if (this.pressInLocation) {
        var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);

        if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {
          this._cancelLongPressDelayTimeout();
        }
      }

      var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;

      if (isTouchWithinActive) {
        this._receiveSignal(Signals.ENTER_PRESS_RECT, e);

        var curState = this.state.touchable.touchState;

        if (curState === States.RESPONDER_INACTIVE_PRESS_IN) {
          this._cancelLongPressDelayTimeout();
        }
      } else {
        this._cancelLongPressDelayTimeout();

        this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);
      }
    },
    _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {
      var tag = this.state.touchable.responderID;

      if (tag == null) {
        return;
      }

      UIManager.measure(tag, this._handleQueryLayout);
    },
    _handleQueryLayout: function _handleQueryLayout(l, t, w, h, globalX, globalY) {
      if (!l && !t && !w && !h && !globalX && !globalY) {
        return;
      }

      this.state.touchable.positionOnActivate && Position.release(this.state.touchable.positionOnActivate);
      this.state.touchable.dimensionsOnActivate && BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);
      this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY);
      this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(w, h);
    },
    _handleDelay: function _handleDelay(e) {
      this.touchableDelayTimeout = null;

      this._receiveSignal(Signals.DELAY, e);
    },
    _handleLongDelay: function _handleLongDelay(e) {
      this.longPressDelayTimeout = null;
      var curState = this.state.touchable.touchState;

      if (curState !== States.RESPONDER_ACTIVE_PRESS_IN && curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {
        console.error('Attempted to transition from state `' + curState + '` to `' + States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' + 'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');
      } else {
        this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);
      }
    },
    _receiveSignal: function _receiveSignal(signal, e) {
      var responderID = this.state.touchable.responderID;
      var curState = this.state.touchable.touchState;
      var nextState = Transitions[curState] && Transitions[curState][signal];

      if (!responderID && signal === Signals.RESPONDER_RELEASE) {
        return;
      }

      if (!nextState) {
        throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + responderID + '`');
      }

      if (nextState === States.ERROR) {
        throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + responderID + '`');
      }

      if (curState !== nextState) {
        this._performSideEffectsForTransition(curState, nextState, signal, e);

        this.state.touchable.touchState = nextState;
      }
    },
    _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {
      this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
      this.longPressDelayTimeout = null;
    },
    _isHighlight: function _isHighlight(state) {
      return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;
    },
    _savePressInLocation: function _savePressInLocation(e) {
      var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
      var pageX = touch && touch.pageX;
      var pageY = touch && touch.pageY;
      var locationX = touch && touch.locationX;
      var locationY = touch && touch.locationY;
      this.pressInLocation = {
        pageX: pageX,
        pageY: pageY,
        locationX: locationX,
        locationY: locationY
      };
    },
    _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {
      var deltaX = aX - bX;
      var deltaY = aY - bY;
      return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    },
    _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {
      var curIsHighlight = this._isHighlight(curState);

      var newIsHighlight = this._isHighlight(nextState);

      var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;

      if (isFinalSignal) {
        this._cancelLongPressDelayTimeout();
      }

      if (!IsActive[curState] && IsActive[nextState]) {
        this._remeasureMetricsOnActivation();
      }

      if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {
        this.touchableHandleLongPress && this.touchableHandleLongPress(e);
      }

      if (newIsHighlight && !curIsHighlight) {
        this._startHighlight(e);
      } else if (!newIsHighlight && curIsHighlight) {
        this._endHighlight(e);
      }

      if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {
        var hasLongPressHandler = !!this.props.onLongPress;
        var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && (!hasLongPressHandler || !this.touchableLongPressCancelsPress());
        var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;

        if (shouldInvokePress && this.touchableHandlePress) {
          if (!newIsHighlight && !curIsHighlight) {
            this._startHighlight(e);

            this._endHighlight(e);
          }

          this.touchableHandlePress(e);
        }
      }

      this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
      this.touchableDelayTimeout = null;
    },
    _startHighlight: function _startHighlight(e) {
      this._savePressInLocation(e);

      this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);
    },
    _endHighlight: function _endHighlight(e) {
      var _this = this;

      if (this.touchableHandleActivePressOut) {
        if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {
          this.pressOutDelayTimeout = setTimeout(function () {
            _this.touchableHandleActivePressOut(e);
          }, this.touchableGetPressOutDelayMS());
        } else {
          this.touchableHandleActivePressOut(e);
        }
      }
    }
  };
  var Touchable = {
    Mixin: TouchableMixin,
    TOUCH_TARGET_DEBUG: false,
    renderDebugView: function renderDebugView(_ref) {
      var color = _ref.color,
          hitSlop = _ref.hitSlop;

      if (!Touchable.TOUCH_TARGET_DEBUG) {
        return null;
      }

      if (!__DEV__) {
        throw Error('Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!');
      }

      var debugHitSlopStyle = {};
      hitSlop = hitSlop || {
        top: 0,
        bottom: 0,
        left: 0,
        right: 0
      };

      for (var key in hitSlop) {
        debugHitSlopStyle[key] = -hitSlop[key];
      }

      var hexColor = '#' + ('00000000' + normalizeColor(color).toString(16)).substr(-8);
      return React.createElement(View, {
        pointerEvents: "none",
        style: babelHelpers.extends({
          position: 'absolute',
          borderColor: hexColor.slice(0, -2) + '55',
          borderWidth: 1,
          borderStyle: 'dashed',
          backgroundColor: hexColor.slice(0, -2) + '0F'
        }, debugHitSlopStyle),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 793
        }
      });
    }
  };
  module.exports = Touchable;
},182,[183,52,185,130,21,186,187,107,170,150,124],"Touchable");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var PooledClass = require(_dependencyMap[0], 'PooledClass');

  var twoArgumentPooler = PooledClass.twoArgumentPooler;

  function BoundingDimensions(width, height) {
    this.width = width;
    this.height = height;
  }

  BoundingDimensions.prototype.destructor = function () {
    this.width = null;
    this.height = null;
  };

  BoundingDimensions.getPooledFromElement = function (element) {
    return BoundingDimensions.getPooled(element.offsetWidth, element.offsetHeight);
  };

  PooledClass.addPoolingTo(BoundingDimensions, twoArgumentPooler);
  module.exports = BoundingDimensions;
},183,[184],"BoundingDimensions");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, copyFieldsFrom);
      return instance;
    } else {
      return new Klass(copyFieldsFrom);
    }
  };

  var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2);
      return instance;
    } else {
      return new Klass(a1, a2);
    }
  };

  var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2, a3);
      return instance;
    } else {
      return new Klass(a1, a2, a3);
    }
  };

  var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2, a3, a4);
      return instance;
    } else {
      return new Klass(a1, a2, a3, a4);
    }
  };

  var standardReleaser = function standardReleaser(instance) {
    var Klass = this;
    invariant(instance instanceof Klass, 'Trying to release an instance into a pool of a different type.');
    instance.destructor();

    if (Klass.instancePool.length < Klass.poolSize) {
      Klass.instancePool.push(instance);
    }
  };

  var DEFAULT_POOL_SIZE = 10;
  var DEFAULT_POOLER = oneArgumentPooler;

  var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
    var NewKlass = CopyConstructor;
    NewKlass.instancePool = [];
    NewKlass.getPooled = pooler || DEFAULT_POOLER;

    if (!NewKlass.poolSize) {
      NewKlass.poolSize = DEFAULT_POOL_SIZE;
    }

    NewKlass.release = standardReleaser;
    return NewKlass;
  };

  var PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler
  };
  module.exports = PooledClass;
},184,[13],"PooledClass");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var PooledClass = require(_dependencyMap[0], 'PooledClass');

  var twoArgumentPooler = PooledClass.twoArgumentPooler;

  function Position(left, top) {
    this.left = left;
    this.top = top;
  }

  Position.prototype.destructor = function () {
    this.left = null;
    this.top = null;
  };

  PooledClass.addPoolingTo(Position, twoArgumentPooler);
  module.exports = Position;
},185,[184],"Position");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function TVEventHandler() {}

  TVEventHandler.prototype.enable = function (component, callback) {};

  TVEventHandler.prototype.disable = function () {};

  module.exports = TVEventHandler;
},186,[],"TVEventHandler");
__d(function (global, require, module, exports, _dependencyMap) {
  "use strict";

  var TouchEventUtils = {
    extractSingleTouch: function extractSingleTouch(nativeEvent) {
      var touches = nativeEvent.touches;
      var changedTouches = nativeEvent.changedTouches;
      var hasTouches = touches && touches.length > 0;
      var hasChangedTouches = changedTouches && changedTouches.length > 0;
      return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;
    }
  };
  module.exports = TouchEventUtils;
},187,[],"fbjs/lib/TouchEventUtils.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var mergeFast = function mergeFast(one, two) {
    var ret = {};

    for (var keyOne in one) {
      ret[keyOne] = one[keyOne];
    }

    for (var keyTwo in two) {
      ret[keyTwo] = two[keyTwo];
    }

    return ret;
  };

  module.exports = mergeFast;
},188,[],"mergeFast");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = require(_dependencyMap[0], 'Platform');

  var React = require(_dependencyMap[1], 'React');

  var PropTypes = require(_dependencyMap[2], 'prop-types');

  var ReactNative = require(_dependencyMap[3], 'ReactNative');

  var Touchable = require(_dependencyMap[4], 'Touchable');

  var TouchableWithoutFeedback = require(_dependencyMap[5], 'TouchableWithoutFeedback');

  var UIManager = require(_dependencyMap[6], 'UIManager');

  var createReactClass = require(_dependencyMap[7], 'create-react-class');

  var ensurePositiveDelayProps = require(_dependencyMap[8], 'ensurePositiveDelayProps');

  var processColor = require(_dependencyMap[9], 'processColor');

  var rippleBackgroundPropType = PropTypes.shape({
    type: PropTypes.oneOf(['RippleAndroid']),
    color: PropTypes.number,
    borderless: PropTypes.bool
  });
  var themeAttributeBackgroundPropType = PropTypes.shape({
    type: PropTypes.oneOf(['ThemeAttrAndroid']),
    attribute: PropTypes.string.isRequired
  });
  var backgroundPropType = PropTypes.oneOfType([rippleBackgroundPropType, themeAttributeBackgroundPropType]);
  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableNativeFeedback = createReactClass({
    displayName: 'TouchableNativeFeedback',
    propTypes: babelHelpers.extends({}, TouchableWithoutFeedback.propTypes, {
      background: backgroundPropType,
      useForeground: PropTypes.bool
    }),
    statics: {
      SelectableBackground: function SelectableBackground() {
        return {
          type: 'ThemeAttrAndroid',
          attribute: 'selectableItemBackground'
        };
      },
      SelectableBackgroundBorderless: function SelectableBackgroundBorderless() {
        return {
          type: 'ThemeAttrAndroid',
          attribute: 'selectableItemBackgroundBorderless'
        };
      },
      Ripple: function Ripple(color, borderless) {
        return {
          type: 'RippleAndroid',
          color: processColor(color),
          borderless: borderless
        };
      },
      canUseNativeForeground: function canUseNativeForeground() {
        return Platform.OS === 'android' && Platform.Version >= 23;
      }
    },
    mixins: [Touchable.Mixin],
    getDefaultProps: function getDefaultProps() {
      return {
        background: this.SelectableBackground()
      };
    },
    getInitialState: function getInitialState() {
      return this.touchableGetInitialState();
    },
    componentDidMount: function componentDidMount() {
      ensurePositiveDelayProps(this.props);
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      this.props.onPressIn && this.props.onPressIn(e);

      this._dispatchPressedStateChange(true);

      this._dispatchHotspotUpdate(this.pressInLocation.locationX, this.pressInLocation.locationY);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      this.props.onPressOut && this.props.onPressOut(e);

      this._dispatchPressedStateChange(false);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut;
    },
    _handleResponderMove: function _handleResponderMove(e) {
      this.touchableHandleResponderMove(e);

      this._dispatchHotspotUpdate(e.nativeEvent.locationX, e.nativeEvent.locationY);
    },
    _dispatchHotspotUpdate: function _dispatchHotspotUpdate(destX, destY) {
      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.RCTView.Commands.hotspotUpdate, [destX || 0, destY || 0]);
    },
    _dispatchPressedStateChange: function _dispatchPressedStateChange(pressed) {
      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.RCTView.Commands.setPressed, [pressed]);
    },
    render: function render() {
      var _babelHelpers$extends;

      var child = React.Children.only(this.props.children);
      var children = child.props.children;

      if (Touchable.TOUCH_TARGET_DEBUG && child.type.displayName === 'View') {
        if (!Array.isArray(children)) {
          children = [children];
        }

        children.push(Touchable.renderDebugView({
          color: 'brown',
          hitSlop: this.props.hitSlop
        }));
      }

      if (this.props.useForeground && !TouchableNativeFeedback.canUseNativeForeground()) {
        console.warn('Requested foreground ripple, but it is not available on this version of Android. ' + 'Consider calling TouchableNativeFeedback.canUseNativeForeground() and using a different ' + 'Touchable if the result is false.');
      }

      var drawableProp = this.props.useForeground && TouchableNativeFeedback.canUseNativeForeground() ? 'nativeForegroundAndroid' : 'nativeBackgroundAndroid';
      var childProps = babelHelpers.extends({}, child.props, (_babelHelpers$extends = {}, babelHelpers.defineProperty(_babelHelpers$extends, drawableProp, this.props.background), babelHelpers.defineProperty(_babelHelpers$extends, "accessible", this.props.accessible !== false), babelHelpers.defineProperty(_babelHelpers$extends, "accessibilityLabel", this.props.accessibilityLabel), babelHelpers.defineProperty(_babelHelpers$extends, "accessibilityComponentType", this.props.accessibilityComponentType), babelHelpers.defineProperty(_babelHelpers$extends, "accessibilityTraits", this.props.accessibilityTraits), babelHelpers.defineProperty(_babelHelpers$extends, "children", children), babelHelpers.defineProperty(_babelHelpers$extends, "testID", this.props.testID), babelHelpers.defineProperty(_babelHelpers$extends, "onLayout", this.props.onLayout), babelHelpers.defineProperty(_babelHelpers$extends, "hitSlop", this.props.hitSlop), babelHelpers.defineProperty(_babelHelpers$extends, "onStartShouldSetResponder", this.touchableHandleStartShouldSetResponder), babelHelpers.defineProperty(_babelHelpers$extends, "onResponderTerminationRequest", this.touchableHandleResponderTerminationRequest), babelHelpers.defineProperty(_babelHelpers$extends, "onResponderGrant", this.touchableHandleResponderGrant), babelHelpers.defineProperty(_babelHelpers$extends, "onResponderMove", this._handleResponderMove), babelHelpers.defineProperty(_babelHelpers$extends, "onResponderRelease", this.touchableHandleResponderRelease), babelHelpers.defineProperty(_babelHelpers$extends, "onResponderTerminate", this.touchableHandleResponderTerminate), _babelHelpers$extends));
      return React.cloneElement(child, childProps);
    }
  });
  module.exports = TouchableNativeFeedback;
},189,[52,130,127,21,182,190,107,172,192,152],"TouchableNativeFeedback");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EdgeInsetsPropType = require(_dependencyMap[0], 'EdgeInsetsPropType');

  var React = require(_dependencyMap[1], 'React');

  var PropTypes = require(_dependencyMap[2], 'prop-types');

  var TimerMixin = require(_dependencyMap[3], 'react-timer-mixin');

  var Touchable = require(_dependencyMap[4], 'Touchable');

  var createReactClass = require(_dependencyMap[5], 'create-react-class');

  var ensurePositiveDelayProps = require(_dependencyMap[6], 'ensurePositiveDelayProps');

  var warning = require(_dependencyMap[7], 'fbjs/lib/warning');

  var _require = require(_dependencyMap[8], 'ViewAccessibility'),
      AccessibilityComponentTypes = _require.AccessibilityComponentTypes,
      AccessibilityTraits = _require.AccessibilityTraits;

  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableWithoutFeedback = createReactClass({
    displayName: 'TouchableWithoutFeedback',
    mixins: [TimerMixin, Touchable.Mixin],
    propTypes: {
      accessible: PropTypes.bool,
      accessibilityComponentType: PropTypes.oneOf(AccessibilityComponentTypes),
      accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(AccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(AccessibilityTraits))]),
      disabled: PropTypes.bool,
      onPress: PropTypes.func,
      onPressIn: PropTypes.func,
      onPressOut: PropTypes.func,
      onLayout: PropTypes.func,
      onLongPress: PropTypes.func,
      delayPressIn: PropTypes.number,
      delayPressOut: PropTypes.number,
      delayLongPress: PropTypes.number,
      pressRetentionOffset: EdgeInsetsPropType,
      hitSlop: EdgeInsetsPropType
    },
    getInitialState: function getInitialState() {
      return this.touchableGetInitialState();
    },
    componentDidMount: function componentDidMount() {
      ensurePositiveDelayProps(this.props);
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      this.props.onPressIn && this.props.onPressIn(e);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      this.props.onPressOut && this.props.onPressOut(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn || 0;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut || 0;
    },
    render: function render() {
      var child = React.Children.only(this.props.children);
      var children = child.props.children;
      warning(!child.type || child.type.displayName !== 'Text', 'TouchableWithoutFeedback does not work well with Text children. Wrap children in a View instead. See ' + (child._owner && child._owner.getName && child._owner.getName() || '<unknown>'));

      if (Touchable.TOUCH_TARGET_DEBUG && child.type && child.type.displayName === 'View') {
        children = React.Children.toArray(children);
        children.push(Touchable.renderDebugView({
          color: 'red',
          hitSlop: this.props.hitSlop
        }));
      }

      var style = Touchable.TOUCH_TARGET_DEBUG && child.type && child.type.displayName === 'Text' ? [child.props.style, {
        color: 'red'
      }] : child.props.style;
      return React.cloneElement(child, {
        accessible: this.props.accessible !== false,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityComponentType: this.props.accessibilityComponentType,
        accessibilityTraits: this.props.accessibilityTraits,
        nativeID: this.props.nativeID,
        testID: this.props.testID,
        onLayout: this.props.onLayout,
        hitSlop: this.props.hitSlop,
        onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
        onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
        onResponderGrant: this.touchableHandleResponderGrant,
        onResponderMove: this.touchableHandleResponderMove,
        onResponderRelease: this.touchableHandleResponderRelease,
        onResponderTerminate: this.touchableHandleResponderTerminate,
        style: style,
        children: children
      });
    }
  });
  module.exports = TouchableWithoutFeedback;
},190,[132,130,127,191,182,172,192,56,144],"TouchableWithoutFeedback");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var GLOBAL = typeof window === 'undefined' ? global : window;

  var setter = function setter(_setter, _clearer, array) {
    return function (callback, delta) {
      var id = _setter(function () {
        _clearer.call(this, id);

        callback.apply(this, arguments);
      }.bind(this), delta);

      if (!this[array]) {
        this[array] = [id];
      } else {
        this[array].push(id);
      }

      return id;
    };
  };

  var clearer = function clearer(_clearer, array) {
    return function (id) {
      if (this[array]) {
        var index = this[array].indexOf(id);

        if (index !== -1) {
          this[array].splice(index, 1);
        }
      }

      _clearer(id);
    };
  };

  var _timeouts = 'TimerMixin_timeouts';

  var _clearTimeout = clearer(GLOBAL.clearTimeout, _timeouts);

  var _setTimeout = setter(GLOBAL.setTimeout, _clearTimeout, _timeouts);

  var _intervals = 'TimerMixin_intervals';

  var _clearInterval = clearer(GLOBAL.clearInterval, _intervals);

  var _setInterval = setter(GLOBAL.setInterval, function () {}, _intervals);

  var _immediates = 'TimerMixin_immediates';

  var _clearImmediate = clearer(GLOBAL.clearImmediate, _immediates);

  var _setImmediate = setter(GLOBAL.setImmediate, _clearImmediate, _immediates);

  var _rafs = 'TimerMixin_rafs';

  var _cancelAnimationFrame = clearer(GLOBAL.cancelAnimationFrame, _rafs);

  var _requestAnimationFrame = setter(GLOBAL.requestAnimationFrame, _cancelAnimationFrame, _rafs);

  var TimerMixin = {
    componentWillUnmount: function componentWillUnmount() {
      this[_timeouts] && this[_timeouts].forEach(function (id) {
        GLOBAL.clearTimeout(id);
      });
      this[_timeouts] = null;
      this[_intervals] && this[_intervals].forEach(function (id) {
        GLOBAL.clearInterval(id);
      });
      this[_intervals] = null;
      this[_immediates] && this[_immediates].forEach(function (id) {
        GLOBAL.clearImmediate(id);
      });
      this[_immediates] = null;
      this[_rafs] && this[_rafs].forEach(function (id) {
        GLOBAL.cancelAnimationFrame(id);
      });
      this[_rafs] = null;
    },
    setTimeout: _setTimeout,
    clearTimeout: _clearTimeout,
    setInterval: _setInterval,
    clearInterval: _clearInterval,
    setImmediate: _setImmediate,
    clearImmediate: _clearImmediate,
    requestAnimationFrame: _requestAnimationFrame,
    cancelAnimationFrame: _cancelAnimationFrame
  };
  module.exports = TimerMixin;
},191,[],"react-timer-mixin/TimerMixin.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var ensurePositiveDelayProps = function ensurePositiveDelayProps(props) {
    invariant(!(props.delayPressIn < 0 || props.delayPressOut < 0 || props.delayLongPress < 0), 'Touchable components cannot have negative delay properties');
  };

  module.exports = ensurePositiveDelayProps;
},192,[13],"ensurePositiveDelayProps");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js";

  var Animated = require(_dependencyMap[0], 'Animated');

  var Easing = require(_dependencyMap[1], 'Easing');

  var NativeMethodsMixin = require(_dependencyMap[2], 'NativeMethodsMixin');

  var React = require(_dependencyMap[3], 'React');

  var PropTypes = require(_dependencyMap[4], 'prop-types');

  var TimerMixin = require(_dependencyMap[5], 'react-timer-mixin');

  var Touchable = require(_dependencyMap[6], 'Touchable');

  var TouchableWithoutFeedback = require(_dependencyMap[7], 'TouchableWithoutFeedback');

  var createReactClass = require(_dependencyMap[8], 'create-react-class');

  var ensurePositiveDelayProps = require(_dependencyMap[9], 'ensurePositiveDelayProps');

  var flattenStyle = require(_dependencyMap[10], 'flattenStyle');

  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableOpacity = createReactClass({
    displayName: 'TouchableOpacity',
    mixins: [TimerMixin, Touchable.Mixin, NativeMethodsMixin],
    propTypes: babelHelpers.extends({}, TouchableWithoutFeedback.propTypes, {
      activeOpacity: PropTypes.number,
      hasTVPreferredFocus: PropTypes.bool,
      tvParallaxProperties: PropTypes.object
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        activeOpacity: 0.2
      };
    },
    getInitialState: function getInitialState() {
      return babelHelpers.extends({}, this.touchableGetInitialState(), {
        anim: new Animated.Value(this._getChildStyleOpacityWithDefault())
      });
    },
    componentDidMount: function componentDidMount() {
      ensurePositiveDelayProps(this.props);
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    setOpacityTo: function setOpacityTo(value, duration) {
      Animated.timing(this.state.anim, {
        toValue: value,
        duration: duration,
        easing: Easing.inOut(Easing.quad),
        useNativeDriver: true
      }).start();
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      if (e.dispatchConfig.registrationName === 'onResponderGrant') {
        this._opacityActive(0);
      } else {
        this._opacityActive(150);
      }

      this.props.onPressIn && this.props.onPressIn(e);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      this._opacityInactive(250);

      this.props.onPressOut && this.props.onPressOut(e);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn || 0;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut;
    },
    _opacityActive: function _opacityActive(duration) {
      this.setOpacityTo(this.props.activeOpacity, duration);
    },
    _opacityInactive: function _opacityInactive(duration) {
      this.setOpacityTo(this._getChildStyleOpacityWithDefault(), duration);
    },
    _getChildStyleOpacityWithDefault: function _getChildStyleOpacityWithDefault() {
      var childStyle = flattenStyle(this.props.style) || {};
      return childStyle.opacity == undefined ? 1 : childStyle.opacity;
    },
    render: function render() {
      return React.createElement(
        Animated.View,
        {
          accessible: this.props.accessible !== false,
          accessibilityLabel: this.props.accessibilityLabel,
          accessibilityComponentType: this.props.accessibilityComponentType,
          accessibilityTraits: this.props.accessibilityTraits,
          style: [this.props.style, {
            opacity: this.state.anim
          }],
          nativeID: this.props.nativeID,
          testID: this.props.testID,
          onLayout: this.props.onLayout,
          isTVSelectable: true,
          hasTVPreferredFocus: this.props.hasTVPreferredFocus,
          tvParallaxProperties: this.props.tvParallaxProperties,
          hitSlop: this.props.hitSlop,
          onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
          onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
          onResponderGrant: this.touchableHandleResponderGrant,
          onResponderMove: this.touchableHandleResponderMove,
          onResponderRelease: this.touchableHandleResponderRelease,
          onResponderTerminate: this.touchableHandleResponderTerminate,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 245
          }
        },
        this.props.children,
        Touchable.renderDebugView({
          color: 'cyan',
          hitSlop: this.props.hitSlop
        })
      );
    }
  });
  module.exports = TouchableOpacity;
},193,[194,219,125,130,127,191,182,190,172,192,101],"TouchableOpacity");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedImplementation = require(_dependencyMap[0], 'AnimatedImplementation');

  var Image = require(_dependencyMap[1], 'Image');

  var Text = require(_dependencyMap[2], 'Text');

  var View = require(_dependencyMap[3], 'View');

  var AnimatedScrollView = void 0;
  var Animated = {
    View: AnimatedImplementation.createAnimatedComponent(View),
    Text: AnimatedImplementation.createAnimatedComponent(Text),
    Image: AnimatedImplementation.createAnimatedComponent(Image),

    get ScrollView() {
      if (!AnimatedScrollView) {
        AnimatedScrollView = AnimatedImplementation.createAnimatedComponent(require(_dependencyMap[4], 'ScrollView'));
      }

      return AnimatedScrollView;
    }

  };
  babelHelpers.extends(Animated, AnimatedImplementation);
  module.exports = Animated;
},194,[195,222,181,170,224],"Animated");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], './AnimatedEvent'),
      AnimatedEvent = _require.AnimatedEvent,
      attachNativeEvent = _require.attachNativeEvent;

  var AnimatedAddition = require(_dependencyMap[1], './nodes/AnimatedAddition');

  var AnimatedDiffClamp = require(_dependencyMap[2], './nodes/AnimatedDiffClamp');

  var AnimatedDivision = require(_dependencyMap[3], './nodes/AnimatedDivision');

  var AnimatedInterpolation = require(_dependencyMap[4], './nodes/AnimatedInterpolation');

  var AnimatedModulo = require(_dependencyMap[5], './nodes/AnimatedModulo');

  var AnimatedMultiplication = require(_dependencyMap[6], './nodes/AnimatedMultiplication');

  var AnimatedNode = require(_dependencyMap[7], './nodes/AnimatedNode');

  var AnimatedProps = require(_dependencyMap[8], './nodes/AnimatedProps');

  var AnimatedTracking = require(_dependencyMap[9], './nodes/AnimatedTracking');

  var AnimatedValue = require(_dependencyMap[10], './nodes/AnimatedValue');

  var AnimatedValueXY = require(_dependencyMap[11], './nodes/AnimatedValueXY');

  var DecayAnimation = require(_dependencyMap[12], './animations/DecayAnimation');

  var SpringAnimation = require(_dependencyMap[13], './animations/SpringAnimation');

  var TimingAnimation = require(_dependencyMap[14], './animations/TimingAnimation');

  var createAnimatedComponent = require(_dependencyMap[15], './createAnimatedComponent');

  var add = function add(a, b) {
    return new AnimatedAddition(a, b);
  };

  var divide = function divide(a, b) {
    return new AnimatedDivision(a, b);
  };

  var multiply = function multiply(a, b) {
    return new AnimatedMultiplication(a, b);
  };

  var modulo = function modulo(a, modulus) {
    return new AnimatedModulo(a, modulus);
  };

  var diffClamp = function diffClamp(a, min, max) {
    return new AnimatedDiffClamp(a, min, max);
  };

  var _combineCallbacks = function _combineCallbacks(callback, config) {
    if (callback && config.onComplete) {
      return function () {
        config.onComplete && config.onComplete.apply(config, arguments);
        callback && callback.apply(undefined, arguments);
      };
    } else {
      return callback || config.onComplete;
    }
  };

  var maybeVectorAnim = function maybeVectorAnim(value, config, anim) {
    if (value instanceof AnimatedValueXY) {
      var configX = babelHelpers.extends({}, config);
      var configY = babelHelpers.extends({}, config);

      for (var key in config) {
        var _config$key = config[key],
            x = _config$key.x,
            y = _config$key.y;

        if (x !== undefined && y !== undefined) {
          configX[key] = x;
          configY[key] = y;
        }
      }

      var aX = anim(value.x, configX);
      var aY = anim(value.y, configY);
      return parallel([aX, aY], {
        stopTogether: false
      });
    }

    return null;
  };

  var spring = function spring(value, config) {
    var start = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();

      if (configuration.toValue instanceof AnimatedNode) {
        singleValue.track(new AnimatedTracking(singleValue, configuration.toValue, SpringAnimation, singleConfig, callback));
      } else {
        singleValue.animate(new SpringAnimation(singleConfig), callback);
      }
    };

    return maybeVectorAnim(value, config, spring) || {
      start: function (_start) {
        function start(_x) {
          return _start.apply(this, arguments);
        }

        start.toString = function () {
          return _start.toString();
        };

        return start;
      }(function (callback) {
        start(value, config, callback);
      }),
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = babelHelpers.extends({}, config, {
          iterations: iterations
        });
        start(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var timing = function timing(value, config) {
    var start = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();

      if (configuration.toValue instanceof AnimatedNode) {
        singleValue.track(new AnimatedTracking(singleValue, configuration.toValue, TimingAnimation, singleConfig, callback));
      } else {
        singleValue.animate(new TimingAnimation(singleConfig), callback);
      }
    };

    return maybeVectorAnim(value, config, timing) || {
      start: function (_start2) {
        function start(_x2) {
          return _start2.apply(this, arguments);
        }

        start.toString = function () {
          return _start2.toString();
        };

        return start;
      }(function (callback) {
        start(value, config, callback);
      }),
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = babelHelpers.extends({}, config, {
          iterations: iterations
        });
        start(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var decay = function decay(value, config) {
    var start = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();
      singleValue.animate(new DecayAnimation(singleConfig), callback);
    };

    return maybeVectorAnim(value, config, decay) || {
      start: function (_start3) {
        function start(_x3) {
          return _start3.apply(this, arguments);
        }

        start.toString = function () {
          return _start3.toString();
        };

        return start;
      }(function (callback) {
        start(value, config, callback);
      }),
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = babelHelpers.extends({}, config, {
          iterations: iterations
        });
        start(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var sequence = function sequence(animations) {
    var current = 0;
    return {
      start: function start(callback) {
        var onComplete = function onComplete(result) {
          if (!result.finished) {
            callback && callback(result);
            return;
          }

          current++;

          if (current === animations.length) {
            callback && callback(result);
            return;
          }

          animations[current].start(onComplete);
        };

        if (animations.length === 0) {
          callback && callback({
            finished: true
          });
        } else {
          animations[current].start(onComplete);
        }
      },
      stop: function stop() {
        if (current < animations.length) {
          animations[current].stop();
        }
      },
      reset: function reset() {
        animations.forEach(function (animation, idx) {
          if (idx <= current) {
            animation.reset();
          }
        });
        current = 0;
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.sequence animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return false;
      }
    };
  };

  var parallel = function parallel(animations, config) {
    var doneCount = 0;
    var hasEnded = {};
    var stopTogether = !(config && config.stopTogether === false);
    var result = {
      start: function start(callback) {
        if (doneCount === animations.length) {
          callback && callback({
            finished: true
          });
          return;
        }

        animations.forEach(function (animation, idx) {
          var cb = function cb(endResult) {
            hasEnded[idx] = true;
            doneCount++;

            if (doneCount === animations.length) {
              doneCount = 0;
              callback && callback(endResult);
              return;
            }

            if (!endResult.finished && stopTogether) {
              result.stop();
            }
          };

          if (!animation) {
            cb({
              finished: true
            });
          } else {
            animation.start(cb);
          }
        });
      },
      stop: function stop() {
        animations.forEach(function (animation, idx) {
          !hasEnded[idx] && animation.stop();
          hasEnded[idx] = true;
        });
      },
      reset: function reset() {
        animations.forEach(function (animation, idx) {
          animation.reset();
          hasEnded[idx] = false;
          doneCount = 0;
        });
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.parallel animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return false;
      }
    };
    return result;
  };

  var delay = function delay(time) {
    return timing(new AnimatedValue(0), {
      toValue: 0,
      delay: time,
      duration: 0
    });
  };

  var stagger = function stagger(time, animations) {
    return parallel(animations.map(function (animation, i) {
      return sequence([delay(time * i), animation]);
    }));
  };

  var loop = function loop(animation) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$iterations = _ref.iterations,
        iterations = _ref$iterations === undefined ? -1 : _ref$iterations;

    var isFinished = false;
    var iterationsSoFar = 0;
    return {
      start: function start(callback) {
        var restart = function restart() {
          var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
            finished: true
          };

          if (isFinished || iterationsSoFar === iterations || result.finished === false) {
            callback && callback(result);
          } else {
            iterationsSoFar++;
            animation.reset();
            animation.start(restart);
          }
        };

        if (!animation || iterations === 0) {
          callback && callback({
            finished: true
          });
        } else {
          if (animation._isUsingNativeDriver()) {
            animation._startNativeLoop(iterations);
          } else {
            restart();
          }
        }
      },
      stop: function stop() {
        isFinished = true;
        animation.stop();
      },
      reset: function reset() {
        iterationsSoFar = 0;
        isFinished = false;
        animation.reset();
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.loop animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return animation._isUsingNativeDriver();
      }
    };
  };

  function forkEvent(event, listener) {
    if (!event) {
      return listener;
    } else if (event instanceof AnimatedEvent) {
      event.__addListener(listener);

      return event;
    } else {
      return function () {
        typeof event === 'function' && event.apply(undefined, arguments);
        listener.apply(undefined, arguments);
      };
    }
  }

  function unforkEvent(event, listener) {
    if (event && event instanceof AnimatedEvent) {
      event.__removeListener(listener);
    }
  }

  var event = function event(argMapping, config) {
    var animatedEvent = new AnimatedEvent(argMapping, config);

    if (animatedEvent.__isNative) {
      return animatedEvent;
    } else {
      return animatedEvent.__getHandler();
    }
  };

  module.exports = {
    Value: AnimatedValue,
    ValueXY: AnimatedValueXY,
    Interpolation: AnimatedInterpolation,
    Node: AnimatedNode,
    decay: decay,
    timing: timing,
    spring: spring,
    add: add,
    divide: divide,
    multiply: multiply,
    modulo: modulo,
    diffClamp: diffClamp,
    delay: delay,
    sequence: sequence,
    parallel: parallel,
    stagger: stagger,
    loop: loop,
    event: event,
    createAnimatedComponent: createAnimatedComponent,
    attachNativeEvent: attachNativeEvent,
    forkEvent: forkEvent,
    unforkEvent: unforkEvent,
    __PropsOnlyForTests: AnimatedProps
  };
},195,[196,204,205,206,198,207,208,199,209,212,197,213,214,216,218,221],"AnimatedImplementation");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedValue = require(_dependencyMap[0], './nodes/AnimatedValue');

  var NativeAnimatedHelper = require(_dependencyMap[1], './NativeAnimatedHelper');

  var ReactNative = require(_dependencyMap[2], 'ReactNative');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var _require = require(_dependencyMap[1], './NativeAnimatedHelper'),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  function attachNativeEvent(viewRef, eventName, argMapping) {
    var eventMappings = [];

    var traverse = function traverse(value, path) {
      if (value instanceof AnimatedValue) {
        value.__makeNative();

        eventMappings.push({
          nativeEventPath: path,
          animatedValueTag: value.__getNativeTag()
        });
      } else if (typeof value === 'object') {
        for (var _key in value) {
          traverse(value[_key], path.concat(_key));
        }
      }
    };

    invariant(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');
    traverse(argMapping[0].nativeEvent, []);
    var viewTag = ReactNative.findNodeHandle(viewRef);
    eventMappings.forEach(function (mapping) {
      NativeAnimatedHelper.API.addAnimatedEventToView(viewTag, eventName, mapping);
    });
    return {
      detach: function detach() {
        eventMappings.forEach(function (mapping) {
          NativeAnimatedHelper.API.removeAnimatedEventFromView(viewTag, eventName, mapping.animatedValueTag);
        });
      }
    };
  }

  var AnimatedEvent = function () {
    function AnimatedEvent(argMapping) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      babelHelpers.classCallCheck(this, AnimatedEvent);
      this._listeners = [];
      this._argMapping = argMapping;

      if (config.listener) {
        this.__addListener(config.listener);
      }

      this._callListeners = this._callListeners.bind(this);
      this._attachedEvent = null;
      this.__isNative = shouldUseNativeDriver(config);

      if (__DEV__) {
        this._validateMapping();
      }
    }

    babelHelpers.createClass(AnimatedEvent, [{
      key: "__addListener",
      value: function __addListener(callback) {
        this._listeners.push(callback);
      }
    }, {
      key: "__removeListener",
      value: function __removeListener(callback) {
        this._listeners = this._listeners.filter(function (listener) {
          return listener !== callback;
        });
      }
    }, {
      key: "__attach",
      value: function __attach(viewRef, eventName) {
        invariant(this.__isNative, 'Only native driven events need to be attached.');
        this._attachedEvent = attachNativeEvent(viewRef, eventName, this._argMapping);
      }
    }, {
      key: "__detach",
      value: function __detach(viewTag, eventName) {
        invariant(this.__isNative, 'Only native driven events need to be detached.');
        this._attachedEvent && this._attachedEvent.detach();
      }
    }, {
      key: "__getHandler",
      value: function __getHandler() {
        var _this = this;

        if (this.__isNative) {
          return this._callListeners;
        }

        return function () {
          for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
            args[_key2] = arguments[_key2];
          }

          var traverse = function traverse(recMapping, recEvt, key) {
            if (typeof recEvt === 'number' && recMapping instanceof AnimatedValue) {
              recMapping.setValue(recEvt);
            } else if (typeof recMapping === 'object') {
              for (var mappingKey in recMapping) {
                traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
              }
            }
          };

          if (!_this.__isNative) {
            _this._argMapping.forEach(function (mapping, idx) {
              traverse(mapping, args[idx], 'arg' + idx);
            });
          }

          _this._callListeners.apply(_this, babelHelpers.toConsumableArray(args));
        };
      }
    }, {
      key: "_callListeners",
      value: function _callListeners() {
        for (var _len2 = arguments.length, args = Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {
          args[_key3] = arguments[_key3];
        }

        this._listeners.forEach(function (listener) {
          return listener.apply(undefined, args);
        });
      }
    }, {
      key: "_validateMapping",
      value: function _validateMapping() {
        var traverse = function traverse(recMapping, recEvt, key) {
          if (typeof recEvt === 'number') {
            invariant(recMapping instanceof AnimatedValue, 'Bad mapping of type ' + typeof recMapping + ' for key ' + key + ', event value must map to AnimatedValue');
            return;
          }

          invariant(typeof recMapping === 'object', 'Bad mapping of type ' + typeof recMapping + ' for key ' + key);
          invariant(typeof recEvt === 'object', 'Bad event of type ' + typeof recEvt + ' for key ' + key);

          for (var mappingKey in recMapping) {
            traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
          }
        };
      }
    }]);
    return AnimatedEvent;
  }();

  module.exports = {
    AnimatedEvent: AnimatedEvent,
    attachNativeEvent: attachNativeEvent
  };
},196,[197,200,21,13],"AnimatedEvent");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedInterpolation = require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = require(_dependencyMap[1], './AnimatedNode');

  var AnimatedWithChildren = require(_dependencyMap[2], './AnimatedWithChildren');

  var InteractionManager = require(_dependencyMap[3], 'InteractionManager');

  var NativeAnimatedHelper = require(_dependencyMap[4], '../NativeAnimatedHelper');

  var NativeAnimatedAPI = NativeAnimatedHelper.API;
  var _uniqueId = 1;

  function _flush(rootNode) {
    var animatedStyles = new Set();

    function findAnimatedStyles(node) {
      if (typeof node.update === 'function') {
        animatedStyles.add(node);
      } else {
        node.__getChildren().forEach(findAnimatedStyles);
      }
    }

    findAnimatedStyles(rootNode);
    animatedStyles.forEach(function (animatedStyle) {
      return animatedStyle.update();
    });
  }

  var AnimatedValue = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedValue, _AnimatedWithChildren);

    function AnimatedValue(value) {
      babelHelpers.classCallCheck(this, AnimatedValue);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedValue.__proto__ || Object.getPrototypeOf(AnimatedValue)).call(this));

      _this._startingValue = _this._value = value;
      _this._offset = 0;
      _this._animation = null;
      _this._listeners = {};
      return _this;
    }

    babelHelpers.createClass(AnimatedValue, [{
      key: "__detach",
      value: function __detach() {
        this.stopAnimation();
        babelHelpers.get(AnimatedValue.prototype.__proto__ || Object.getPrototypeOf(AnimatedValue.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._value + this._offset;
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        babelHelpers.get(AnimatedValue.prototype.__proto__ || Object.getPrototypeOf(AnimatedValue.prototype), "__makeNative", this).call(this);

        if (Object.keys(this._listeners).length) {
          this._startListeningToNativeValueUpdates();
        }
      }
    }, {
      key: "setValue",
      value: function setValue(value) {
        if (this._animation) {
          this._animation.stop();

          this._animation = null;
        }

        this._updateValue(value, !this.__isNative);

        if (this.__isNative) {
          NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value);
        }
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this._offset = offset;

        if (this.__isNative) {
          NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);
        }
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this._value += this._offset;
        this._offset = 0;

        if (this.__isNative) {
          NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());
        }
      }
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this._offset += this._value;
        this._value = 0;

        if (this.__isNative) {
          NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());
        }
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var id = String(_uniqueId++);
        this._listeners[id] = callback;

        if (this.__isNative) {
          this._startListeningToNativeValueUpdates();
        }

        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        delete this._listeners[id];

        if (this.__isNative && Object.keys(this._listeners).length === 0) {
          this._stopListeningForNativeValueUpdates();
        }
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        this._listeners = {};

        if (this.__isNative) {
          this._stopListeningForNativeValueUpdates();
        }
      }
    }, {
      key: "_startListeningToNativeValueUpdates",
      value: function _startListeningToNativeValueUpdates() {
        var _this2 = this;

        if (this.__nativeAnimatedValueListener) {
          return;
        }

        NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());
        this.__nativeAnimatedValueListener = NativeAnimatedHelper.nativeEventEmitter.addListener('onAnimatedValueUpdate', function (data) {
          if (data.tag !== _this2.__getNativeTag()) {
            return;
          }

          _this2._updateValue(data.value, false);
        });
      }
    }, {
      key: "_stopListeningForNativeValueUpdates",
      value: function _stopListeningForNativeValueUpdates() {
        if (!this.__nativeAnimatedValueListener) {
          return;
        }

        this.__nativeAnimatedValueListener.remove();

        this.__nativeAnimatedValueListener = null;
        NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.stopTracking();
        this._animation && this._animation.stop();
        this._animation = null;
        callback && callback(this.__getValue());
      }
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.stopAnimation(callback);
        this._value = this._startingValue;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "animate",
      value: function animate(animation, callback) {
        var _this3 = this;

        var handle = null;

        if (animation.__isInteraction) {
          handle = InteractionManager.createInteractionHandle();
        }

        var previousAnimation = this._animation;
        this._animation && this._animation.stop();
        this._animation = animation;
        animation.start(this._value, function (value) {
          _this3._updateValue(value, true);
        }, function (result) {
          _this3._animation = null;

          if (handle !== null) {
            InteractionManager.clearInteractionHandle(handle);
          }

          callback && callback(result);
        }, previousAnimation, this);
      }
    }, {
      key: "stopTracking",
      value: function stopTracking() {
        this._tracking && this._tracking.__detach();
        this._tracking = null;
      }
    }, {
      key: "track",
      value: function track(tracking) {
        this.stopTracking();
        this._tracking = tracking;
      }
    }, {
      key: "_updateValue",
      value: function _updateValue(value, flush) {
        this._value = value;

        if (flush) {
          _flush(this);
        }

        for (var _key in this._listeners) {
          this._listeners[_key]({
            value: this.__getValue()
          });
        }
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'value',
          value: this._value,
          offset: this._offset
        };
      }
    }]);
    return AnimatedValue;
  }(AnimatedWithChildren);

  module.exports = AnimatedValue;
},197,[198,199,201,202,200],"AnimatedValue");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedNode = require(_dependencyMap[0], './AnimatedNode');

  var AnimatedWithChildren = require(_dependencyMap[1], './AnimatedWithChildren');

  var NativeAnimatedHelper = require(_dependencyMap[2], '../NativeAnimatedHelper');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var normalizeColor = require(_dependencyMap[4], 'normalizeColor');

  var linear = function linear(t) {
    return t;
  };

  function createInterpolation(config) {
    if (config.outputRange && typeof config.outputRange[0] === 'string') {
      return createInterpolationFromStringOutputRange(config);
    }

    var outputRange = config.outputRange;
    checkInfiniteRange('outputRange', outputRange);
    var inputRange = config.inputRange;
    checkInfiniteRange('inputRange', inputRange);
    checkValidInputRange(inputRange);
    invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');
    var easing = config.easing || linear;
    var extrapolateLeft = 'extend';

    if (config.extrapolateLeft !== undefined) {
      extrapolateLeft = config.extrapolateLeft;
    } else if (config.extrapolate !== undefined) {
      extrapolateLeft = config.extrapolate;
    }

    var extrapolateRight = 'extend';

    if (config.extrapolateRight !== undefined) {
      extrapolateRight = config.extrapolateRight;
    } else if (config.extrapolate !== undefined) {
      extrapolateRight = config.extrapolate;
    }

    return function (input) {
      invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');
      var range = findRange(input, inputRange);
      return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);
    };
  }

  function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {
    var result = input;

    if (result < inputMin) {
      if (extrapolateLeft === 'identity') {
        return result;
      } else if (extrapolateLeft === 'clamp') {
        result = inputMin;
      } else if (extrapolateLeft === 'extend') {}
    }

    if (result > inputMax) {
      if (extrapolateRight === 'identity') {
        return result;
      } else if (extrapolateRight === 'clamp') {
        result = inputMax;
      } else if (extrapolateRight === 'extend') {}
    }

    if (outputMin === outputMax) {
      return outputMin;
    }

    if (inputMin === inputMax) {
      if (input <= inputMin) {
        return outputMin;
      }

      return outputMax;
    }

    if (inputMin === -Infinity) {
      result = -result;
    } else if (inputMax === Infinity) {
      result = result - inputMin;
    } else {
      result = (result - inputMin) / (inputMax - inputMin);
    }

    result = easing(result);

    if (outputMin === -Infinity) {
      result = -result;
    } else if (outputMax === Infinity) {
      result = result + outputMin;
    } else {
      result = result * (outputMax - outputMin) + outputMin;
    }

    return result;
  }

  function colorToRgba(input) {
    var int32Color = normalizeColor(input);

    if (int32Color === null) {
      return input;
    }

    int32Color = int32Color || 0;
    var r = (int32Color & 0xff000000) >>> 24;
    var g = (int32Color & 0x00ff0000) >>> 16;
    var b = (int32Color & 0x0000ff00) >>> 8;
    var a = (int32Color & 0x000000ff) / 255;
    return "rgba(" + r + ", " + g + ", " + b + ", " + a + ")";
  }

  var stringShapeRegex = /[0-9\.-]+/g;

  function createInterpolationFromStringOutputRange(config) {
    var outputRange = config.outputRange;
    invariant(outputRange.length >= 2, 'Bad output range');
    outputRange = outputRange.map(colorToRgba);
    checkPattern(outputRange);
    var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {
      return [];
    });
    outputRange.forEach(function (value) {
      value.match(stringShapeRegex).forEach(function (number, i) {
        outputRanges[i].push(+number);
      });
    });
    var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {
      return createInterpolation(babelHelpers.extends({}, config, {
        outputRange: outputRanges[i]
      }));
    });
    var shouldRound = isRgbOrRgba(outputRange[0]);
    return function (input) {
      var i = 0;
      return outputRange[0].replace(stringShapeRegex, function () {
        var val = +interpolations[i++](input);
        var rounded = shouldRound && i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;
        return String(rounded);
      });
    };
  }

  function isRgbOrRgba(range) {
    return typeof range === 'string' && range.startsWith('rgb');
  }

  function checkPattern(arr) {
    var pattern = arr[0].replace(stringShapeRegex, '');

    for (var i = 1; i < arr.length; ++i) {
      invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);
    }
  }

  function findRange(input, inputRange) {
    var i = void 0;

    for (i = 1; i < inputRange.length - 1; ++i) {
      if (inputRange[i] >= input) {
        break;
      }
    }

    return i - 1;
  }

  function checkValidInputRange(arr) {
    invariant(arr.length >= 2, 'inputRange must have at least 2 elements');

    for (var i = 1; i < arr.length; ++i) {
      invariant(arr[i] >= arr[i - 1], 'inputRange must be monotonically increasing ' + arr);
    }
  }

  function checkInfiniteRange(name, arr) {
    invariant(arr.length >= 2, name + ' must have at least 2 elements');
    invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);
  }

  var AnimatedInterpolation = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedInterpolation, _AnimatedWithChildren);

    function AnimatedInterpolation(parent, config) {
      babelHelpers.classCallCheck(this, AnimatedInterpolation);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedInterpolation.__proto__ || Object.getPrototypeOf(AnimatedInterpolation)).call(this));

      _this._parent = parent;
      _this._config = config;
      _this._interpolation = createInterpolation(config);
      return _this;
    }

    babelHelpers.createClass(AnimatedInterpolation, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._parent.__makeNative();

        babelHelpers.get(AnimatedInterpolation.prototype.__proto__ || Object.getPrototypeOf(AnimatedInterpolation.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var parentValue = this._parent.__getValue();

        invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');
        return this._interpolation(parentValue);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._parent.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._parent.__removeChild(this);

        babelHelpers.get(AnimatedInterpolation.prototype.__proto__ || Object.getPrototypeOf(AnimatedInterpolation.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__transformDataType",
      value: function __transformDataType(range) {
        return range.map(function (value) {
          if (typeof value !== 'string') {
            return value;
          }

          if (/deg$/.test(value)) {
            var degrees = parseFloat(value) || 0;
            var radians = degrees * Math.PI / 180.0;
            return radians;
          } else {
            return parseFloat(value) || 0;
          }
        });
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        if (__DEV__) {
          NativeAnimatedHelper.validateInterpolation(this._config);
        }

        return {
          inputRange: this._config.inputRange,
          outputRange: this.__transformDataType(this._config.outputRange),
          extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',
          extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',
          type: 'interpolation'
        };
      }
    }]);
    return AnimatedInterpolation;
  }(AnimatedWithChildren);

  AnimatedInterpolation.__createInterpolation = createInterpolation;
  module.exports = AnimatedInterpolation;
},198,[199,201,200,13,124],"AnimatedInterpolation");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var NativeAnimatedHelper = require(_dependencyMap[0], '../NativeAnimatedHelper');

  var invariant = require(_dependencyMap[1], 'fbjs/lib/invariant');

  var AnimatedNode = function () {
    function AnimatedNode() {
      babelHelpers.classCallCheck(this, AnimatedNode);
    }

    babelHelpers.createClass(AnimatedNode, [{
      key: "__attach",
      value: function __attach() {}
    }, {
      key: "__detach",
      value: function __detach() {
        if (this.__isNative && this.__nativeTag != null) {
          NativeAnimatedHelper.API.dropAnimatedNode(this.__nativeTag);
          this.__nativeTag = undefined;
        }
      }
    }, {
      key: "__getValue",
      value: function __getValue() {}
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this.__getValue();
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {}
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {}
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return [];
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          throw new Error('This node cannot be made a "native" animated node');
        }
      }
    }, {
      key: "__getNativeTag",
      value: function __getNativeTag() {
        NativeAnimatedHelper.assertNativeAnimatedModule();
        invariant(this.__isNative, 'Attempt to get native tag from node not marked as "native"');

        if (this.__nativeTag == null) {
          var nativeTag = NativeAnimatedHelper.generateNewNodeTag();
          NativeAnimatedHelper.API.createAnimatedNode(nativeTag, this.__getNativeConfig());
          this.__nativeTag = nativeTag;
        }

        return this.__nativeTag;
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        throw new Error('This JS animated node type cannot be used as native animated node');
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.__getValue();
      }
    }]);
    return AnimatedNode;
  }();

  module.exports = AnimatedNode;
},199,[200,13],"AnimatedNode");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var NativeAnimatedModule = require(_dependencyMap[0], 'NativeModules').NativeAnimatedModule;

  var NativeEventEmitter = require(_dependencyMap[1], 'NativeEventEmitter');

  var invariant = require(_dependencyMap[2], 'fbjs/lib/invariant');

  var __nativeAnimatedNodeTagCount = 1;
  var __nativeAnimationIdCount = 1;
  var nativeEventEmitter = void 0;
  var API = {
    createAnimatedNode: function createAnimatedNode(tag, config) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.createAnimatedNode(tag, config);
    },
    startListeningToAnimatedNodeValue: function startListeningToAnimatedNodeValue(tag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.startListeningToAnimatedNodeValue(tag);
    },
    stopListeningToAnimatedNodeValue: function stopListeningToAnimatedNodeValue(tag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.stopListeningToAnimatedNodeValue(tag);
    },
    connectAnimatedNodes: function connectAnimatedNodes(parentTag, childTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.connectAnimatedNodes(parentTag, childTag);
    },
    disconnectAnimatedNodes: function disconnectAnimatedNodes(parentTag, childTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.disconnectAnimatedNodes(parentTag, childTag);
    },
    startAnimatingNode: function startAnimatingNode(animationId, nodeTag, config, endCallback) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.startAnimatingNode(animationId, nodeTag, config, endCallback);
    },
    stopAnimation: function stopAnimation(animationId) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.stopAnimation(animationId);
    },
    setAnimatedNodeValue: function setAnimatedNodeValue(nodeTag, value) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.setAnimatedNodeValue(nodeTag, value);
    },
    setAnimatedNodeOffset: function setAnimatedNodeOffset(nodeTag, offset) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.setAnimatedNodeOffset(nodeTag, offset);
    },
    flattenAnimatedNodeOffset: function flattenAnimatedNodeOffset(nodeTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.flattenAnimatedNodeOffset(nodeTag);
    },
    extractAnimatedNodeOffset: function extractAnimatedNodeOffset(nodeTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.extractAnimatedNodeOffset(nodeTag);
    },
    connectAnimatedNodeToView: function connectAnimatedNodeToView(nodeTag, viewTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.connectAnimatedNodeToView(nodeTag, viewTag);
    },
    disconnectAnimatedNodeFromView: function disconnectAnimatedNodeFromView(nodeTag, viewTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.disconnectAnimatedNodeFromView(nodeTag, viewTag);
    },
    dropAnimatedNode: function dropAnimatedNode(tag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.dropAnimatedNode(tag);
    },
    addAnimatedEventToView: function addAnimatedEventToView(viewTag, eventName, eventMapping) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.addAnimatedEventToView(viewTag, eventName, eventMapping);
    },
    removeAnimatedEventFromView: function removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag);
    }
  };
  var STYLES_WHITELIST = {
    opacity: true,
    transform: true,
    shadowOpacity: true,
    shadowRadius: true,
    scaleX: true,
    scaleY: true,
    translateX: true,
    translateY: true
  };
  var TRANSFORM_WHITELIST = {
    translateX: true,
    translateY: true,
    scale: true,
    scaleX: true,
    scaleY: true,
    rotate: true,
    rotateX: true,
    rotateY: true,
    perspective: true
  };
  var SUPPORTED_INTERPOLATION_PARAMS = {
    inputRange: true,
    outputRange: true,
    extrapolate: true,
    extrapolateRight: true,
    extrapolateLeft: true
  };

  function addWhitelistedStyleProp(prop) {
    STYLES_WHITELIST[prop] = true;
  }

  function addWhitelistedTransformProp(prop) {
    TRANSFORM_WHITELIST[prop] = true;
  }

  function addWhitelistedInterpolationParam(param) {
    SUPPORTED_INTERPOLATION_PARAMS[param] = true;
  }

  function validateTransform(configs) {
    configs.forEach(function (config) {
      if (!TRANSFORM_WHITELIST.hasOwnProperty(config.property)) {
        throw new Error("Property '" + config.property + "' is not supported by native animated module");
      }
    });
  }

  function validateStyles(styles) {
    for (var key in styles) {
      if (!STYLES_WHITELIST.hasOwnProperty(key)) {
        throw new Error("Style property '" + key + "' is not supported by native animated module");
      }
    }
  }

  function validateInterpolation(config) {
    for (var key in config) {
      if (!SUPPORTED_INTERPOLATION_PARAMS.hasOwnProperty(key)) {
        throw new Error("Interpolation property '" + key + "' is not supported by native animated module");
      }
    }
  }

  function generateNewNodeTag() {
    return __nativeAnimatedNodeTagCount++;
  }

  function generateNewAnimationId() {
    return __nativeAnimationIdCount++;
  }

  function assertNativeAnimatedModule() {
    invariant(NativeAnimatedModule, 'Native animated module is not available');
  }

  var _warnedMissingNativeAnimated = false;

  function shouldUseNativeDriver(config) {
    if (config.useNativeDriver && !NativeAnimatedModule) {
      if (!_warnedMissingNativeAnimated) {
        console.warn('Animated: `useNativeDriver` is not supported because the native ' + 'animated module is missing. Falling back to JS-based animation. To ' + 'resolve this, add `RCTAnimation` module to this app, or remove ' + '`useNativeDriver`. ' + 'More info: https://github.com/facebook/react-native/issues/11094#issuecomment-263240420');
        _warnedMissingNativeAnimated = true;
      }

      return false;
    }

    return config.useNativeDriver || false;
  }

  module.exports = {
    API: API,
    addWhitelistedStyleProp: addWhitelistedStyleProp,
    addWhitelistedTransformProp: addWhitelistedTransformProp,
    addWhitelistedInterpolationParam: addWhitelistedInterpolationParam,
    validateStyles: validateStyles,
    validateTransform: validateTransform,
    validateInterpolation: validateInterpolation,
    generateNewNodeTag: generateNewNodeTag,
    generateNewAnimationId: generateNewAnimationId,
    assertNativeAnimatedModule: assertNativeAnimatedModule,
    shouldUseNativeDriver: shouldUseNativeDriver,

    get nativeEventEmitter() {
      if (!nativeEventEmitter) {
        nativeEventEmitter = new NativeEventEmitter(NativeAnimatedModule);
      }

      return nativeEventEmitter;
    }

  };
},200,[15,69,13],"NativeAnimatedHelper");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedNode = require(_dependencyMap[0], './AnimatedNode');

  var NativeAnimatedHelper = require(_dependencyMap[1], '../NativeAnimatedHelper');

  var AnimatedWithChildren = function (_AnimatedNode) {
    babelHelpers.inherits(AnimatedWithChildren, _AnimatedNode);

    function AnimatedWithChildren() {
      babelHelpers.classCallCheck(this, AnimatedWithChildren);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedWithChildren.__proto__ || Object.getPrototypeOf(AnimatedWithChildren)).call(this));

      _this._children = [];
      return _this;
    }

    babelHelpers.createClass(AnimatedWithChildren, [{
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          this.__isNative = true;

          for (var _iterator = this._children, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var child = _ref;

            child.__makeNative();

            NativeAnimatedHelper.API.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
          }
        }
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {
        if (this._children.length === 0) {
          this.__attach();
        }

        this._children.push(child);

        if (this.__isNative) {
          child.__makeNative();

          NativeAnimatedHelper.API.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }
      }
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {
        var index = this._children.indexOf(child);

        if (index === -1) {
          console.warn("Trying to remove a child that doesn't exist");
          return;
        }

        if (this.__isNative && child.__isNative) {
          NativeAnimatedHelper.API.disconnectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }

        this._children.splice(index, 1);

        if (this._children.length === 0) {
          this.__detach();
        }
      }
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return this._children;
      }
    }]);
    return AnimatedWithChildren;
  }(AnimatedNode);

  module.exports = AnimatedWithChildren;
},201,[199,200],"AnimatedWithChildren");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = require(_dependencyMap[0], 'BatchedBridge');

  var EventEmitter = require(_dependencyMap[1], 'EventEmitter');

  var Set = require(_dependencyMap[2], 'Set');

  var TaskQueue = require(_dependencyMap[3], 'TaskQueue');

  var infoLog = require(_dependencyMap[4], 'infoLog');

  var invariant = require(_dependencyMap[5], 'fbjs/lib/invariant');

  var keyMirror = require(_dependencyMap[6], 'fbjs/lib/keyMirror');

  var _emitter = new EventEmitter();

  var DEBUG_DELAY = 0;
  var DEBUG = false;
  var InteractionManager = {
    Events: keyMirror({
      interactionStart: true,
      interactionComplete: true
    }),
    runAfterInteractions: function runAfterInteractions(task) {
      var tasks = [];
      var promise = new Promise(function (resolve) {
        _scheduleUpdate();

        if (task) {
          tasks.push(task);
        }

        tasks.push({
          run: resolve,
          name: 'resolve ' + (task && task.name || '?')
        });

        _taskQueue.enqueueTasks(tasks);
      });
      return {
        then: promise.then.bind(promise),
        done: function done() {
          if (promise.done) {
            return promise.done.apply(promise, arguments);
          } else {
            console.warn('Tried to call done when not supported by current Promise implementation.');
          }
        },
        cancel: function cancel() {
          _taskQueue.cancelTasks(tasks);
        }
      };
    },
    createInteractionHandle: function createInteractionHandle() {
      DEBUG && infoLog('create interaction handle');

      _scheduleUpdate();

      var handle = ++_inc;

      _addInteractionSet.add(handle);

      return handle;
    },
    clearInteractionHandle: function clearInteractionHandle(handle) {
      DEBUG && infoLog('clear interaction handle');
      invariant(!!handle, 'Must provide a handle to clear.');

      _scheduleUpdate();

      _addInteractionSet.delete(handle);

      _deleteInteractionSet.add(handle);
    },
    addListener: _emitter.addListener.bind(_emitter),
    setDeadline: function setDeadline(deadline) {
      _deadline = deadline;
    }
  };

  var _interactionSet = new Set();

  var _addInteractionSet = new Set();

  var _deleteInteractionSet = new Set();

  var _taskQueue = new TaskQueue({
    onMoreTasks: _scheduleUpdate
  });

  var _nextUpdateHandle = 0;
  var _inc = 0;

  var _deadline = -1;

  function _scheduleUpdate() {
    if (!_nextUpdateHandle) {
      if (_deadline > 0) {
        _nextUpdateHandle = setTimeout(_processUpdate, 0 + DEBUG_DELAY);
      } else {
        _nextUpdateHandle = setImmediate(_processUpdate);
      }
    }
  }

  function _processUpdate() {
    _nextUpdateHandle = 0;
    var interactionCount = _interactionSet.size;

    _addInteractionSet.forEach(function (handle) {
      return _interactionSet.add(handle);
    });

    _deleteInteractionSet.forEach(function (handle) {
      return _interactionSet.delete(handle);
    });

    var nextInteractionCount = _interactionSet.size;

    if (interactionCount !== 0 && nextInteractionCount === 0) {
      _emitter.emit(InteractionManager.Events.interactionComplete);
    } else if (interactionCount === 0 && nextInteractionCount !== 0) {
      _emitter.emit(InteractionManager.Events.interactionStart);
    }

    if (nextInteractionCount === 0) {
      while (_taskQueue.hasTasksToProcess()) {
        _taskQueue.processNext();

        if (_deadline > 0 && BatchedBridge.getEventLoopRunningTime() >= _deadline) {
          _scheduleUpdate();

          break;
        }
      }
    }

    _addInteractionSet.clear();

    _deleteInteractionSet.clear();
  }

  module.exports = InteractionManager;
},202,[16,67,30,203,94,13,150],"InteractionManager");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var infoLog = require(_dependencyMap[0], 'infoLog');

  var invariant = require(_dependencyMap[1], 'fbjs/lib/invariant');

  var DEBUG = false;

  var TaskQueue = function () {
    function TaskQueue(_ref) {
      var onMoreTasks = _ref.onMoreTasks;
      babelHelpers.classCallCheck(this, TaskQueue);
      this._onMoreTasks = onMoreTasks;
      this._queueStack = [{
        tasks: [],
        popable: false
      }];
    }

    babelHelpers.createClass(TaskQueue, [{
      key: "enqueue",
      value: function enqueue(task) {
        this._getCurrentQueue().push(task);
      }
    }, {
      key: "enqueueTasks",
      value: function enqueueTasks(tasks) {
        var _this = this;

        tasks.forEach(function (task) {
          return _this.enqueue(task);
        });
      }
    }, {
      key: "cancelTasks",
      value: function cancelTasks(tasksToCancel) {
        this._queueStack = this._queueStack.map(function (queue) {
          return babelHelpers.extends({}, queue, {
            tasks: queue.tasks.filter(function (task) {
              return tasksToCancel.indexOf(task) === -1;
            })
          });
        }).filter(function (queue, idx) {
          return queue.tasks.length > 0 || idx === 0;
        });
      }
    }, {
      key: "hasTasksToProcess",
      value: function hasTasksToProcess() {
        return this._getCurrentQueue().length > 0;
      }
    }, {
      key: "processNext",
      value: function processNext() {
        var queue = this._getCurrentQueue();

        if (queue.length) {
          var task = queue.shift();

          try {
            if (task.gen) {
              DEBUG && infoLog('genPromise for task ' + task.name);

              this._genPromise(task);
            } else if (task.run) {
              DEBUG && infoLog('run task ' + task.name);
              task.run();
            } else {
              invariant(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\n' + JSON.stringify(task, null, 2));
              DEBUG && infoLog('run anonymous task');
              task();
            }
          } catch (e) {
            e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;
            throw e;
          }
        }
      }
    }, {
      key: "_getCurrentQueue",
      value: function _getCurrentQueue() {
        var stackIdx = this._queueStack.length - 1;
        var queue = this._queueStack[stackIdx];

        if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {
          this._queueStack.pop();

          DEBUG && infoLog('popped queue: ', {
            stackIdx: stackIdx,
            queueStackSize: this._queueStack.length
          });
          return this._getCurrentQueue();
        } else {
          return queue.tasks;
        }
      }
    }, {
      key: "_genPromise",
      value: function _genPromise(task) {
        var _this2 = this;

        this._queueStack.push({
          tasks: [],
          popable: false
        });

        var stackIdx = this._queueStack.length - 1;
        DEBUG && infoLog('push new queue: ', {
          stackIdx: stackIdx
        });
        DEBUG && infoLog('exec gen task ' + task.name);
        task.gen().then(function () {
          DEBUG && infoLog('onThen for gen task ' + task.name, {
            stackIdx: stackIdx,
            queueStackSize: _this2._queueStack.length
          });
          _this2._queueStack[stackIdx].popable = true;
          _this2.hasTasksToProcess() && _this2._onMoreTasks();
        }).catch(function (ex) {
          ex.message = "TaskQueue: Error resolving Promise in task " + task.name + ": " + ex.message;
          throw ex;
        }).done();
      }
    }]);
    return TaskQueue;
  }();

  module.exports = TaskQueue;
},203,[94,13],"TaskQueue");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedInterpolation = require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = require(_dependencyMap[1], './AnimatedNode');

  var AnimatedValue = require(_dependencyMap[2], './AnimatedValue');

  var AnimatedWithChildren = require(_dependencyMap[3], './AnimatedWithChildren');

  var AnimatedAddition = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedAddition, _AnimatedWithChildren);

    function AnimatedAddition(a, b) {
      babelHelpers.classCallCheck(this, AnimatedAddition);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedAddition.__proto__ || Object.getPrototypeOf(AnimatedAddition)).call(this));

      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    babelHelpers.createClass(AnimatedAddition, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        babelHelpers.get(AnimatedAddition.prototype.__proto__ || Object.getPrototypeOf(AnimatedAddition.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() + this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        babelHelpers.get(AnimatedAddition.prototype.__proto__ || Object.getPrototypeOf(AnimatedAddition.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'addition',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);
    return AnimatedAddition;
  }(AnimatedWithChildren);

  module.exports = AnimatedAddition;
},204,[198,199,197,201],"AnimatedAddition");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedInterpolation = require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = require(_dependencyMap[1], './AnimatedNode');

  var AnimatedWithChildren = require(_dependencyMap[2], './AnimatedWithChildren');

  var AnimatedDiffClamp = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedDiffClamp, _AnimatedWithChildren);

    function AnimatedDiffClamp(a, min, max) {
      babelHelpers.classCallCheck(this, AnimatedDiffClamp);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedDiffClamp.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp)).call(this));

      _this._a = a;
      _this._min = min;
      _this._max = max;
      _this._value = _this._lastValue = _this._a.__getValue();
      return _this;
    }

    babelHelpers.createClass(AnimatedDiffClamp, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        babelHelpers.get(AnimatedDiffClamp.prototype.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var value = this._a.__getValue();

        var diff = value - this._lastValue;
        this._lastValue = value;
        this._value = Math.min(Math.max(this._value + diff, this._min), this._max);
        return this._value;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        babelHelpers.get(AnimatedDiffClamp.prototype.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'diffclamp',
          input: this._a.__getNativeTag(),
          min: this._min,
          max: this._max
        };
      }
    }]);
    return AnimatedDiffClamp;
  }(AnimatedWithChildren);

  module.exports = AnimatedDiffClamp;
},205,[198,199,201],"AnimatedDiffClamp");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedInterpolation = require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = require(_dependencyMap[1], './AnimatedNode');

  var AnimatedValue = require(_dependencyMap[2], './AnimatedValue');

  var AnimatedWithChildren = require(_dependencyMap[3], './AnimatedWithChildren');

  var AnimatedDivision = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedDivision, _AnimatedWithChildren);

    function AnimatedDivision(a, b) {
      babelHelpers.classCallCheck(this, AnimatedDivision);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedDivision.__proto__ || Object.getPrototypeOf(AnimatedDivision)).call(this));

      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    babelHelpers.createClass(AnimatedDivision, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        babelHelpers.get(AnimatedDivision.prototype.__proto__ || Object.getPrototypeOf(AnimatedDivision.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var a = this._a.__getValue();

        var b = this._b.__getValue();

        if (b === 0) {
          console.error('Detected division by zero in AnimatedDivision');
        }

        return a / b;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        babelHelpers.get(AnimatedDivision.prototype.__proto__ || Object.getPrototypeOf(AnimatedDivision.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'division',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);
    return AnimatedDivision;
  }(AnimatedWithChildren);

  module.exports = AnimatedDivision;
},206,[198,199,197,201],"AnimatedDivision");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedInterpolation = require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = require(_dependencyMap[1], './AnimatedNode');

  var AnimatedWithChildren = require(_dependencyMap[2], './AnimatedWithChildren');

  var AnimatedModulo = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedModulo, _AnimatedWithChildren);

    function AnimatedModulo(a, modulus) {
      babelHelpers.classCallCheck(this, AnimatedModulo);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedModulo.__proto__ || Object.getPrototypeOf(AnimatedModulo)).call(this));

      _this._a = a;
      _this._modulus = modulus;
      return _this;
    }

    babelHelpers.createClass(AnimatedModulo, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        babelHelpers.get(AnimatedModulo.prototype.__proto__ || Object.getPrototypeOf(AnimatedModulo.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return (this._a.__getValue() % this._modulus + this._modulus) % this._modulus;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        babelHelpers.get(AnimatedModulo.prototype.__proto__ || Object.getPrototypeOf(AnimatedModulo.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'modulus',
          input: this._a.__getNativeTag(),
          modulus: this._modulus
        };
      }
    }]);
    return AnimatedModulo;
  }(AnimatedWithChildren);

  module.exports = AnimatedModulo;
},207,[198,199,201],"AnimatedModulo");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedInterpolation = require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = require(_dependencyMap[1], './AnimatedNode');

  var AnimatedValue = require(_dependencyMap[2], './AnimatedValue');

  var AnimatedWithChildren = require(_dependencyMap[3], './AnimatedWithChildren');

  var AnimatedMultiplication = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedMultiplication, _AnimatedWithChildren);

    function AnimatedMultiplication(a, b) {
      babelHelpers.classCallCheck(this, AnimatedMultiplication);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedMultiplication.__proto__ || Object.getPrototypeOf(AnimatedMultiplication)).call(this));

      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    babelHelpers.createClass(AnimatedMultiplication, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        babelHelpers.get(AnimatedMultiplication.prototype.__proto__ || Object.getPrototypeOf(AnimatedMultiplication.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() * this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        babelHelpers.get(AnimatedMultiplication.prototype.__proto__ || Object.getPrototypeOf(AnimatedMultiplication.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'multiplication',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);
    return AnimatedMultiplication;
  }(AnimatedWithChildren);

  module.exports = AnimatedMultiplication;
},208,[198,199,197,201],"AnimatedMultiplication");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], '../AnimatedEvent'),
      AnimatedEvent = _require.AnimatedEvent;

  var AnimatedNode = require(_dependencyMap[1], './AnimatedNode');

  var AnimatedStyle = require(_dependencyMap[2], './AnimatedStyle');

  var NativeAnimatedHelper = require(_dependencyMap[3], '../NativeAnimatedHelper');

  var ReactNative = require(_dependencyMap[4], 'ReactNative');

  var invariant = require(_dependencyMap[5], 'fbjs/lib/invariant');

  var AnimatedProps = function (_AnimatedNode) {
    babelHelpers.inherits(AnimatedProps, _AnimatedNode);

    function AnimatedProps(props, callback) {
      babelHelpers.classCallCheck(this, AnimatedProps);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedProps.__proto__ || Object.getPrototypeOf(AnimatedProps)).call(this));

      if (props.style) {
        props = babelHelpers.extends({}, props, {
          style: new AnimatedStyle(props.style)
        });
      }

      _this._props = props;
      _this._callback = callback;

      _this.__attach();

      return _this;
    }

    babelHelpers.createClass(AnimatedProps, [{
      key: "__getValue",
      value: function __getValue() {
        var props = {};

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            if (!value.__isNative || value instanceof AnimatedStyle) {
              props[key] = value.__getValue();
            }
          } else if (value instanceof AnimatedEvent) {
            props[key] = value.__getHandler();
          } else {
            props[key] = value;
          }
        }

        return props;
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        var props = {};

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            props[key] = value.__getAnimatedValue();
          }
        }

        return props;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            value.__addChild(this);
          }
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        if (this.__isNative && this._animatedView) {
          this.__disconnectAnimatedView();
        }

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            value.__removeChild(this);
          }
        }

        babelHelpers.get(AnimatedProps.prototype.__proto__ || Object.getPrototypeOf(AnimatedProps.prototype), "__detach", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._callback();
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          this.__isNative = true;

          for (var key in this._props) {
            var value = this._props[key];

            if (value instanceof AnimatedNode) {
              value.__makeNative();
            }
          }

          if (this._animatedView) {
            this.__connectAnimatedView();
          }
        }
      }
    }, {
      key: "setNativeView",
      value: function setNativeView(animatedView) {
        if (this._animatedView === animatedView) {
          return;
        }

        this._animatedView = animatedView;

        if (this.__isNative) {
          this.__connectAnimatedView();
        }
      }
    }, {
      key: "__connectAnimatedView",
      value: function __connectAnimatedView() {
        invariant(this.__isNative, 'Expected node to be marked as "native"');
        var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
        invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
        NativeAnimatedHelper.API.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);
      }
    }, {
      key: "__disconnectAnimatedView",
      value: function __disconnectAnimatedView() {
        invariant(this.__isNative, 'Expected node to be marked as "native"');
        var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
        invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
        NativeAnimatedHelper.API.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var propsConfig = {};

        for (var propKey in this._props) {
          var value = this._props[propKey];

          if (value instanceof AnimatedNode) {
            propsConfig[propKey] = value.__getNativeTag();
          }
        }

        return {
          type: 'props',
          props: propsConfig
        };
      }
    }]);
    return AnimatedProps;
  }(AnimatedNode);

  module.exports = AnimatedProps;
},209,[196,199,210,200,21,13],"AnimatedProps");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedNode = require(_dependencyMap[0], './AnimatedNode');

  var AnimatedTransform = require(_dependencyMap[1], './AnimatedTransform');

  var AnimatedWithChildren = require(_dependencyMap[2], './AnimatedWithChildren');

  var NativeAnimatedHelper = require(_dependencyMap[3], '../NativeAnimatedHelper');

  var flattenStyle = require(_dependencyMap[4], 'flattenStyle');

  var AnimatedStyle = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedStyle, _AnimatedWithChildren);

    function AnimatedStyle(style) {
      babelHelpers.classCallCheck(this, AnimatedStyle);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedStyle.__proto__ || Object.getPrototypeOf(AnimatedStyle)).call(this));

      style = flattenStyle(style) || {};

      if (style.transform) {
        style = babelHelpers.extends({}, style, {
          transform: new AnimatedTransform(style.transform)
        });
      }

      _this._style = style;
      return _this;
    }

    babelHelpers.createClass(AnimatedStyle, [{
      key: "_walkStyleAndGetValues",
      value: function _walkStyleAndGetValues(style) {
        var updatedStyle = {};

        for (var key in style) {
          var value = style[key];

          if (value instanceof AnimatedNode) {
            if (!value.__isNative) {
              updatedStyle[key] = value.__getValue();
            }
          } else if (value && !Array.isArray(value) && typeof value === 'object') {
            updatedStyle[key] = this._walkStyleAndGetValues(value);
          } else {
            updatedStyle[key] = value;
          }
        }

        return updatedStyle;
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._walkStyleAndGetValues(this._style);
      }
    }, {
      key: "_walkStyleAndGetAnimatedValues",
      value: function _walkStyleAndGetAnimatedValues(style) {
        var updatedStyle = {};

        for (var key in style) {
          var value = style[key];

          if (value instanceof AnimatedNode) {
            updatedStyle[key] = value.__getAnimatedValue();
          } else if (value && !Array.isArray(value) && typeof value === 'object') {
            updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);
          }
        }

        return updatedStyle;
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this._walkStyleAndGetAnimatedValues(this._style);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof AnimatedNode) {
            value.__addChild(this);
          }
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof AnimatedNode) {
            value.__removeChild(this);
          }
        }

        babelHelpers.get(AnimatedStyle.prototype.__proto__ || Object.getPrototypeOf(AnimatedStyle.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        babelHelpers.get(AnimatedStyle.prototype.__proto__ || Object.getPrototypeOf(AnimatedStyle.prototype), "__makeNative", this).call(this);

        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof AnimatedNode) {
            value.__makeNative();
          }
        }
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var styleConfig = {};

        for (var styleKey in this._style) {
          if (this._style[styleKey] instanceof AnimatedNode) {
            styleConfig[styleKey] = this._style[styleKey].__getNativeTag();
          }
        }

        NativeAnimatedHelper.validateStyles(styleConfig);
        return {
          type: 'style',
          style: styleConfig
        };
      }
    }]);
    return AnimatedStyle;
  }(AnimatedWithChildren);

  module.exports = AnimatedStyle;
},210,[199,211,201,200,101],"AnimatedStyle");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedNode = require(_dependencyMap[0], './AnimatedNode');

  var AnimatedWithChildren = require(_dependencyMap[1], './AnimatedWithChildren');

  var NativeAnimatedHelper = require(_dependencyMap[2], '../NativeAnimatedHelper');

  var AnimatedTransform = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedTransform, _AnimatedWithChildren);

    function AnimatedTransform(transforms) {
      babelHelpers.classCallCheck(this, AnimatedTransform);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedTransform.__proto__ || Object.getPrototypeOf(AnimatedTransform)).call(this));

      _this._transforms = transforms;
      return _this;
    }

    babelHelpers.createClass(AnimatedTransform, [{
      key: "__makeNative",
      value: function __makeNative() {
        babelHelpers.get(AnimatedTransform.prototype.__proto__ || Object.getPrototypeOf(AnimatedTransform.prototype), "__makeNative", this).call(this);

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              value.__makeNative();
            }
          }
        });
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._transforms.map(function (transform) {
          var result = {};

          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              result[key] = value.__getValue();
            } else {
              result[key] = value;
            }
          }

          return result;
        });
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this._transforms.map(function (transform) {
          var result = {};

          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              result[key] = value.__getAnimatedValue();
            } else {
              result[key] = value;
            }
          }

          return result;
        });
      }
    }, {
      key: "__attach",
      value: function __attach() {
        var _this2 = this;

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              value.__addChild(_this2);
            }
          }
        });
      }
    }, {
      key: "__detach",
      value: function __detach() {
        var _this3 = this;

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              value.__removeChild(_this3);
            }
          }
        });

        babelHelpers.get(AnimatedTransform.prototype.__proto__ || Object.getPrototypeOf(AnimatedTransform.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var transConfigs = [];

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              transConfigs.push({
                type: 'animated',
                property: key,
                nodeTag: value.__getNativeTag()
              });
            } else {
              transConfigs.push({
                type: 'static',
                property: key,
                value: value
              });
            }
          }
        });

        NativeAnimatedHelper.validateTransform(transConfigs);
        return {
          type: 'transform',
          transforms: transConfigs
        };
      }
    }]);
    return AnimatedTransform;
  }(AnimatedWithChildren);

  module.exports = AnimatedTransform;
},211,[199,201,200],"AnimatedTransform");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedValue = require(_dependencyMap[0], './AnimatedValue');

  var AnimatedNode = require(_dependencyMap[1], './AnimatedNode');

  var AnimatedTracking = function (_AnimatedNode) {
    babelHelpers.inherits(AnimatedTracking, _AnimatedNode);

    function AnimatedTracking(value, parent, animationClass, animationConfig, callback) {
      babelHelpers.classCallCheck(this, AnimatedTracking);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedTracking.__proto__ || Object.getPrototypeOf(AnimatedTracking)).call(this));

      _this._value = value;
      _this._parent = parent;
      _this._animationClass = animationClass;
      _this._animationConfig = animationConfig;
      _this._callback = callback;

      _this.__attach();

      return _this;
    }

    babelHelpers.createClass(AnimatedTracking, [{
      key: "__getValue",
      value: function __getValue() {
        return this._parent.__getValue();
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._parent.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._parent.__removeChild(this);

        babelHelpers.get(AnimatedTracking.prototype.__proto__ || Object.getPrototypeOf(AnimatedTracking.prototype), "__detach", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._value.animate(new this._animationClass(babelHelpers.extends({}, this._animationConfig, {
          toValue: this._animationConfig.toValue.__getValue()
        })), this._callback);
      }
    }]);
    return AnimatedTracking;
  }(AnimatedNode);

  module.exports = AnimatedTracking;
},212,[197,199],"AnimatedTracking");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedValue = require(_dependencyMap[0], './AnimatedValue');

  var AnimatedWithChildren = require(_dependencyMap[1], './AnimatedWithChildren');

  var invariant = require(_dependencyMap[2], 'fbjs/lib/invariant');

  var _uniqueId = 1;

  var AnimatedValueXY = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedValueXY, _AnimatedWithChildren);

    function AnimatedValueXY(valueIn) {
      babelHelpers.classCallCheck(this, AnimatedValueXY);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedValueXY.__proto__ || Object.getPrototypeOf(AnimatedValueXY)).call(this));

      var value = valueIn || {
        x: 0,
        y: 0
      };

      if (typeof value.x === 'number' && typeof value.y === 'number') {
        _this.x = new AnimatedValue(value.x);
        _this.y = new AnimatedValue(value.y);
      } else {
        invariant(value.x instanceof AnimatedValue && value.y instanceof AnimatedValue, 'AnimatedValueXY must be initalized with an object of numbers or ' + 'AnimatedValues.');
        _this.x = value.x;
        _this.y = value.y;
      }

      _this._listeners = {};
      return _this;
    }

    babelHelpers.createClass(AnimatedValueXY, [{
      key: "setValue",
      value: function setValue(value) {
        this.x.setValue(value.x);
        this.y.setValue(value.y);
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this.x.setOffset(offset.x);
        this.y.setOffset(offset.y);
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this.x.flattenOffset();
        this.y.flattenOffset();
      }
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this.x.extractOffset();
        this.y.extractOffset();
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return {
          x: this.x.__getValue(),
          y: this.y.__getValue()
        };
      }
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.x.resetAnimation();
        this.y.resetAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.x.stopAnimation();
        this.y.stopAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var _this2 = this;

        var id = String(_uniqueId++);

        var jointCallback = function jointCallback(_ref) {
          var number = _ref.value;
          callback(_this2.__getValue());
        };

        this._listeners[id] = {
          x: this.x.addListener(jointCallback),
          y: this.y.addListener(jointCallback)
        };
        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        this.x.removeListener(this._listeners[id].x);
        this.y.removeListener(this._listeners[id].y);
        delete this._listeners[id];
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        this.x.removeAllListeners();
        this.y.removeAllListeners();
        this._listeners = {};
      }
    }, {
      key: "getLayout",
      value: function getLayout() {
        return {
          left: this.x,
          top: this.y
        };
      }
    }, {
      key: "getTranslateTransform",
      value: function getTranslateTransform() {
        return [{
          translateX: this.x
        }, {
          translateY: this.y
        }];
      }
    }]);
    return AnimatedValueXY;
  }(AnimatedWithChildren);

  module.exports = AnimatedValueXY;
},213,[197,201,13],"AnimatedValueXY");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Animation = require(_dependencyMap[0], './Animation');

  var _require = require(_dependencyMap[1], '../NativeAnimatedHelper'),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  var DecayAnimation = function (_Animation) {
    babelHelpers.inherits(DecayAnimation, _Animation);

    function DecayAnimation(config) {
      babelHelpers.classCallCheck(this, DecayAnimation);

      var _this = babelHelpers.possibleConstructorReturn(this, (DecayAnimation.__proto__ || Object.getPrototypeOf(DecayAnimation)).call(this));

      _this._deceleration = config.deceleration !== undefined ? config.deceleration : 0.998;
      _this._velocity = config.velocity;
      _this._useNativeDriver = shouldUseNativeDriver(config);
      _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
      _this.__iterations = config.iterations !== undefined ? config.iterations : 1;
      return _this;
    }

    babelHelpers.createClass(DecayAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        return {
          type: 'decay',
          deceleration: this._deceleration,
          velocity: this._velocity,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        this.__active = true;
        this._lastValue = fromValue;
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        this._startTime = Date.now();

        if (this._useNativeDriver) {
          this.__startNativeAnimation(animatedValue);
        } else {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var now = Date.now();
        var value = this._fromValue + this._velocity / (1 - this._deceleration) * (1 - Math.exp(-(1 - this._deceleration) * (now - this._startTime)));

        this._onUpdate(value);

        if (Math.abs(this._lastValue - value) < 0.1) {
          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._lastValue = value;

        if (this.__active) {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        babelHelpers.get(DecayAnimation.prototype.__proto__ || Object.getPrototypeOf(DecayAnimation.prototype), "stop", this).call(this);
        this.__active = false;
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);
    return DecayAnimation;
  }(Animation);

  module.exports = DecayAnimation;
},214,[215,200],"DecayAnimation");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var NativeAnimatedHelper = require(_dependencyMap[0], 'NativeAnimatedHelper');

  var Animation = function () {
    function Animation() {
      babelHelpers.classCallCheck(this, Animation);
    }

    babelHelpers.createClass(Animation, [{
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
    }, {
      key: "stop",
      value: function stop() {
        if (this.__nativeId) {
          NativeAnimatedHelper.API.stopAnimation(this.__nativeId);
        }
      }
    }, {
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        throw new Error('This animation type cannot be offloaded to native');
      }
    }, {
      key: "__debouncedOnEnd",
      value: function __debouncedOnEnd(result) {
        var onEnd = this.__onEnd;
        this.__onEnd = null;
        onEnd && onEnd(result);
      }
    }, {
      key: "__startNativeAnimation",
      value: function __startNativeAnimation(animatedValue) {
        animatedValue.__makeNative();

        this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();
        NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));
      }
    }]);
    return Animation;
  }();

  module.exports = Animation;
},215,[200],"Animation");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedValue = require(_dependencyMap[0], '../nodes/AnimatedValue');

  var AnimatedValueXY = require(_dependencyMap[1], '../nodes/AnimatedValueXY');

  var Animation = require(_dependencyMap[2], './Animation');

  var SpringConfig = require(_dependencyMap[3], '../SpringConfig');

  var invariant = require(_dependencyMap[4], 'fbjs/lib/invariant');

  var _require = require(_dependencyMap[5], '../NativeAnimatedHelper'),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  function withDefault(value, defaultValue) {
    if (value === undefined || value === null) {
      return defaultValue;
    }

    return value;
  }

  var SpringAnimation = function (_Animation) {
    babelHelpers.inherits(SpringAnimation, _Animation);

    function SpringAnimation(config) {
      babelHelpers.classCallCheck(this, SpringAnimation);

      var _this = babelHelpers.possibleConstructorReturn(this, (SpringAnimation.__proto__ || Object.getPrototypeOf(SpringAnimation)).call(this));

      _this._overshootClamping = withDefault(config.overshootClamping, false);
      _this._restDisplacementThreshold = withDefault(config.restDisplacementThreshold, 0.001);
      _this._restSpeedThreshold = withDefault(config.restSpeedThreshold, 0.001);
      _this._initialVelocity = withDefault(config.velocity, 0);
      _this._lastVelocity = withDefault(config.velocity, 0);
      _this._toValue = config.toValue;
      _this._delay = withDefault(config.delay, 0);
      _this._useNativeDriver = shouldUseNativeDriver(config);
      _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
      _this.__iterations = config.iterations !== undefined ? config.iterations : 1;

      if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {
        invariant(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
        _this._stiffness = withDefault(config.stiffness, 100);
        _this._damping = withDefault(config.damping, 10);
        _this._mass = withDefault(config.mass, 1);
      } else if (config.bounciness !== undefined || config.speed !== undefined) {
        invariant(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
        var springConfig = SpringConfig.fromBouncinessAndSpeed(withDefault(config.bounciness, 8), withDefault(config.speed, 12));
        _this._stiffness = springConfig.stiffness;
        _this._damping = springConfig.damping;
        _this._mass = 1;
      } else {
        var _springConfig = SpringConfig.fromOrigamiTensionAndFriction(withDefault(config.tension, 40), withDefault(config.friction, 7));

        _this._stiffness = _springConfig.stiffness;
        _this._damping = _springConfig.damping;
        _this._mass = 1;
      }

      invariant(_this._stiffness > 0, 'Stiffness value must be greater than 0');
      invariant(_this._damping > 0, 'Damping value must be greater than 0');
      invariant(_this._mass > 0, 'Mass value must be greater than 0');
      return _this;
    }

    babelHelpers.createClass(SpringAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        return {
          type: 'spring',
          overshootClamping: this._overshootClamping,
          restDisplacementThreshold: this._restDisplacementThreshold,
          restSpeedThreshold: this._restSpeedThreshold,
          stiffness: this._stiffness,
          damping: this._damping,
          mass: this._mass,
          initialVelocity: withDefault(this._initialVelocity, this._lastVelocity),
          toValue: this._toValue,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        var _this2 = this;

        this.__active = true;
        this._startPosition = fromValue;
        this._lastPosition = this._startPosition;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        this._lastTime = Date.now();
        this._frameTime = 0.0;

        if (previousAnimation instanceof SpringAnimation) {
          var internalState = previousAnimation.getInternalState();
          this._lastPosition = internalState.lastPosition;
          this._lastVelocity = internalState.lastVelocity;
          this._initialVelocity = this._lastVelocity;
          this._lastTime = internalState.lastTime;
        }

        var start = function start() {
          if (_this2._useNativeDriver) {
            _this2.__startNativeAnimation(animatedValue);
          } else {
            _this2.onUpdate();
          }
        };

        if (this._delay) {
          this._timeout = setTimeout(start, this._delay);
        } else {
          start();
        }
      }
    }, {
      key: "getInternalState",
      value: function getInternalState() {
        return {
          lastPosition: this._lastPosition,
          lastVelocity: this._lastVelocity,
          lastTime: this._lastTime
        };
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var MAX_STEPS = 64;
        var now = Date.now();

        if (now > this._lastTime + MAX_STEPS) {
          now = this._lastTime + MAX_STEPS;
        }

        var deltaTime = (now - this._lastTime) / 1000;
        this._frameTime += deltaTime;
        var c = this._damping;
        var m = this._mass;
        var k = this._stiffness;
        var v0 = -this._initialVelocity;
        var zeta = c / (2 * Math.sqrt(k * m));
        var omega0 = Math.sqrt(k / m);
        var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta);
        var x0 = this._toValue - this._startPosition;
        var position = 0.0;
        var velocity = 0.0;
        var t = this._frameTime;

        if (zeta < 1) {
          var envelope = Math.exp(-zeta * omega0 * t);
          position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t));
          velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));
        } else {
          var _envelope = Math.exp(-omega0 * t);

          position = this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t);
          velocity = _envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));
        }

        this._lastTime = now;
        this._lastPosition = position;
        this._lastVelocity = velocity;

        this._onUpdate(position);

        if (!this.__active) {
          return;
        }

        var isOvershooting = false;

        if (this._overshootClamping && this._stiffness !== 0) {
          if (this._startPosition < this._toValue) {
            isOvershooting = position > this._toValue;
          } else {
            isOvershooting = position < this._toValue;
          }
        }

        var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;

        var isDisplacement = true;

        if (this._stiffness !== 0) {
          isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;
        }

        if (isOvershooting || isVelocity && isDisplacement) {
          if (this._stiffness !== 0) {
            this._lastPosition = this._toValue;
            this._lastVelocity = 0;

            this._onUpdate(this._toValue);
          }

          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }, {
      key: "stop",
      value: function stop() {
        babelHelpers.get(SpringAnimation.prototype.__proto__ || Object.getPrototypeOf(SpringAnimation.prototype), "stop", this).call(this);
        this.__active = false;
        clearTimeout(this._timeout);
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);
    return SpringAnimation;
  }(Animation);

  module.exports = SpringAnimation;
},216,[197,213,215,217,13,200],"SpringAnimation");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function stiffnessFromOrigamiValue(oValue) {
    return (oValue - 30) * 3.62 + 194;
  }

  function dampingFromOrigamiValue(oValue) {
    return (oValue - 8) * 3 + 25;
  }

  function fromOrigamiTensionAndFriction(tension, friction) {
    return {
      stiffness: stiffnessFromOrigamiValue(tension),
      damping: dampingFromOrigamiValue(friction)
    };
  }

  function fromBouncinessAndSpeed(bounciness, speed) {
    function normalize(value, startValue, endValue) {
      return (value - startValue) / (endValue - startValue);
    }

    function projectNormal(n, start, end) {
      return start + n * (end - start);
    }

    function linearInterpolation(t, start, end) {
      return t * end + (1 - t) * start;
    }

    function quadraticOutInterpolation(t, start, end) {
      return linearInterpolation(2 * t - t * t, start, end);
    }

    function b3Friction1(x) {
      return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
    }

    function b3Friction2(x) {
      return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
    }

    function b3Friction3(x) {
      return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
    }

    function b3Nobounce(tension) {
      if (tension <= 18) {
        return b3Friction1(tension);
      } else if (tension > 18 && tension <= 44) {
        return b3Friction2(tension);
      } else {
        return b3Friction3(tension);
      }
    }

    var b = normalize(bounciness / 1.7, 0, 20);
    b = projectNormal(b, 0, 0.8);
    var s = normalize(speed / 1.7, 0, 20);
    var bouncyTension = projectNormal(s, 0.5, 200);
    var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);
    return {
      stiffness: stiffnessFromOrigamiValue(bouncyTension),
      damping: dampingFromOrigamiValue(bouncyFriction)
    };
  }

  module.exports = {
    fromOrigamiTensionAndFriction: fromOrigamiTensionAndFriction,
    fromBouncinessAndSpeed: fromBouncinessAndSpeed
  };
},217,[],"SpringConfig");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedValue = require(_dependencyMap[0], '../nodes/AnimatedValue');

  var AnimatedValueXY = require(_dependencyMap[1], '../nodes/AnimatedValueXY');

  var Animation = require(_dependencyMap[2], './Animation');

  var _require = require(_dependencyMap[3], '../NativeAnimatedHelper'),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  var _easeInOut = void 0;

  function easeInOut() {
    if (!_easeInOut) {
      var Easing = require(_dependencyMap[4], 'Easing');

      _easeInOut = Easing.inOut(Easing.ease);
    }

    return _easeInOut;
  }

  var TimingAnimation = function (_Animation) {
    babelHelpers.inherits(TimingAnimation, _Animation);

    function TimingAnimation(config) {
      babelHelpers.classCallCheck(this, TimingAnimation);

      var _this = babelHelpers.possibleConstructorReturn(this, (TimingAnimation.__proto__ || Object.getPrototypeOf(TimingAnimation)).call(this));

      _this._toValue = config.toValue;
      _this._easing = config.easing !== undefined ? config.easing : easeInOut();
      _this._duration = config.duration !== undefined ? config.duration : 500;
      _this._delay = config.delay !== undefined ? config.delay : 0;
      _this.__iterations = config.iterations !== undefined ? config.iterations : 1;
      _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
      _this._useNativeDriver = shouldUseNativeDriver(config);
      return _this;
    }

    babelHelpers.createClass(TimingAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        var frameDuration = 1000.0 / 60.0;
        var frames = [];

        for (var dt = 0.0; dt < this._duration; dt += frameDuration) {
          frames.push(this._easing(dt / this._duration));
        }

        frames.push(this._easing(1));
        return {
          type: 'frames',
          frames: frames,
          toValue: this._toValue,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        var _this2 = this;

        this.__active = true;
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;

        var start = function start() {
          if (_this2._duration === 0 && !_this2._useNativeDriver) {
            _this2._onUpdate(_this2._toValue);

            _this2.__debouncedOnEnd({
              finished: true
            });
          } else {
            _this2._startTime = Date.now();

            if (_this2._useNativeDriver) {
              _this2.__startNativeAnimation(animatedValue);
            } else {
              _this2._animationFrame = requestAnimationFrame(_this2.onUpdate.bind(_this2));
            }
          }
        };

        if (this._delay) {
          this._timeout = setTimeout(start, this._delay);
        } else {
          start();
        }
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var now = Date.now();

        if (now >= this._startTime + this._duration) {
          if (this._duration === 0) {
            this._onUpdate(this._toValue);
          } else {
            this._onUpdate(this._fromValue + this._easing(1) * (this._toValue - this._fromValue));
          }

          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._onUpdate(this._fromValue + this._easing((now - this._startTime) / this._duration) * (this._toValue - this._fromValue));

        if (this.__active) {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        babelHelpers.get(TimingAnimation.prototype.__proto__ || Object.getPrototypeOf(TimingAnimation.prototype), "stop", this).call(this);
        this.__active = false;
        clearTimeout(this._timeout);
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);
    return TimingAnimation;
  }(Animation);

  module.exports = TimingAnimation;
},218,[197,213,215,200,219],"TimingAnimation");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _ease = void 0;

  var Easing = function () {
    function Easing() {
      babelHelpers.classCallCheck(this, Easing);
    }

    babelHelpers.createClass(Easing, null, [{
      key: "step0",
      value: function step0(n) {
        return n > 0 ? 1 : 0;
      }
    }, {
      key: "step1",
      value: function step1(n) {
        return n >= 1 ? 1 : 0;
      }
    }, {
      key: "linear",
      value: function linear(t) {
        return t;
      }
    }, {
      key: "ease",
      value: function ease(t) {
        if (!_ease) {
          _ease = Easing.bezier(0.42, 0, 1, 1);
        }

        return _ease(t);
      }
    }, {
      key: "quad",
      value: function quad(t) {
        return t * t;
      }
    }, {
      key: "cubic",
      value: function cubic(t) {
        return t * t * t;
      }
    }, {
      key: "poly",
      value: function poly(n) {
        return function (t) {
          return Math.pow(t, n);
        };
      }
    }, {
      key: "sin",
      value: function sin(t) {
        return 1 - Math.cos(t * Math.PI / 2);
      }
    }, {
      key: "circle",
      value: function circle(t) {
        return 1 - Math.sqrt(1 - t * t);
      }
    }, {
      key: "exp",
      value: function exp(t) {
        return Math.pow(2, 10 * (t - 1));
      }
    }, {
      key: "elastic",
      value: function elastic() {
        var bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var p = bounciness * Math.PI;
        return function (t) {
          return 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);
        };
      }
    }, {
      key: "back",
      value: function back(s) {
        if (s === undefined) {
          s = 1.70158;
        }

        return function (t) {
          return t * t * ((s + 1) * t - s);
        };
      }
    }, {
      key: "bounce",
      value: function bounce(t) {
        if (t < 1 / 2.75) {
          return 7.5625 * t * t;
        }

        if (t < 2 / 2.75) {
          t -= 1.5 / 2.75;
          return 7.5625 * t * t + 0.75;
        }

        if (t < 2.5 / 2.75) {
          t -= 2.25 / 2.75;
          return 7.5625 * t * t + 0.9375;
        }

        t -= 2.625 / 2.75;
        return 7.5625 * t * t + 0.984375;
      }
    }, {
      key: "bezier",
      value: function bezier(x1, y1, x2, y2) {
        var _bezier = require(_dependencyMap[0], 'bezier');

        return _bezier(x1, y1, x2, y2);
      }
    }, {
      key: "in",
      value: function _in(easing) {
        return easing;
      }
    }, {
      key: "out",
      value: function out(easing) {
        return function (t) {
          return 1 - easing(1 - t);
        };
      }
    }, {
      key: "inOut",
      value: function inOut(easing) {
        return function (t) {
          if (t < 0.5) {
            return easing(t * 2) / 2;
          }

          return 1 - easing((1 - t) * 2) / 2;
        };
      }
    }]);
    return Easing;
  }();

  module.exports = Easing;
},219,[220],"Easing");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var NEWTON_ITERATIONS = 4;
  var NEWTON_MIN_SLOPE = 0.001;
  var SUBDIVISION_PRECISION = 0.0000001;
  var SUBDIVISION_MAX_ITERATIONS = 10;
  var kSplineTableSize = 11;
  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);
  var float32ArraySupported = typeof Float32Array === 'function';

  function A(aA1, aA2) {
    return 1.0 - 3.0 * aA2 + 3.0 * aA1;
  }

  function B(aA1, aA2) {
    return 3.0 * aA2 - 6.0 * aA1;
  }

  function C(aA1) {
    return 3.0 * aA1;
  }

  function calcBezier(aT, aA1, aA2) {
    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
  }

  function getSlope(aT, aA1, aA2) {
    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
  }

  function binarySubdivide(aX, aA, aB, mX1, mX2) {
    var currentX,
        currentT,
        i = 0;

    do {
      currentT = aA + (aB - aA) / 2.0;
      currentX = calcBezier(currentT, mX1, mX2) - aX;

      if (currentX > 0.0) {
        aB = currentT;
      } else {
        aA = currentT;
      }
    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

    return currentT;
  }

  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
      var currentSlope = getSlope(aGuessT, mX1, mX2);

      if (currentSlope === 0.0) {
        return aGuessT;
      }

      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }

    return aGuessT;
  }

  module.exports = function bezier(mX1, mY1, mX2, mY2) {
    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
      throw new Error('bezier x values must be in [0, 1] range');
    }

    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);

    if (mX1 !== mY1 || mX2 !== mY2) {
      for (var i = 0; i < kSplineTableSize; ++i) {
        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
      }
    }

    function getTForX(aX) {
      var intervalStart = 0.0;
      var currentSample = 1;
      var lastSample = kSplineTableSize - 1;

      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
        intervalStart += kSampleStepSize;
      }

      --currentSample;
      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
      var guessForT = intervalStart + dist * kSampleStepSize;
      var initialSlope = getSlope(guessForT, mX1, mX2);

      if (initialSlope >= NEWTON_MIN_SLOPE) {
        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
      } else if (initialSlope === 0.0) {
        return guessForT;
      } else {
        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
      }
    }

    return function BezierEasing(x) {
      if (mX1 === mY1 && mX2 === mY2) {
        return x;
      }

      if (x === 0) {
        return 0;
      }

      if (x === 1) {
        return 1;
      }

      return calcBezier(getTForX(x), mY1, mY2);
    };
  };
},220,[],"bezier");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Animated/src/createAnimatedComponent.js";

  var _require = require(_dependencyMap[0], './AnimatedEvent'),
      AnimatedEvent = _require.AnimatedEvent;

  var AnimatedProps = require(_dependencyMap[1], './nodes/AnimatedProps');

  var React = require(_dependencyMap[2], 'React');

  var ViewStylePropTypes = require(_dependencyMap[3], 'ViewStylePropTypes');

  function createAnimatedComponent(Component) {
    var AnimatedComponent = function (_React$Component) {
      babelHelpers.inherits(AnimatedComponent, _React$Component);

      function AnimatedComponent(props) {
        babelHelpers.classCallCheck(this, AnimatedComponent);

        var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedComponent.__proto__ || Object.getPrototypeOf(AnimatedComponent)).call(this, props));

        _this._invokeAnimatedPropsCallbackOnMount = false;
        _this._eventDetachers = [];

        _this._animatedPropsCallback = function () {
          if (_this._component == null) {
            _this._invokeAnimatedPropsCallbackOnMount = true;
          } else if (AnimatedComponent.__skipSetNativeProps_FOR_TESTS_ONLY || typeof _this._component.setNativeProps !== 'function') {
            _this.forceUpdate();
          } else if (!_this._propsAnimated.__isNative) {
            _this._component.setNativeProps(_this._propsAnimated.__getAnimatedValue());
          } else {
            throw new Error('Attempting to run JS driven animation on animated ' + 'node that has been moved to "native" earlier by starting an ' + 'animation with `useNativeDriver: true`');
          }
        };

        _this._setComponentRef = _this._setComponentRef.bind(_this);
        return _this;
      }

      babelHelpers.createClass(AnimatedComponent, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._propsAnimated && this._propsAnimated.__detach();

          this._detachNativeEvents();
        }
      }, {
        key: "setNativeProps",
        value: function setNativeProps(props) {
          this._component.setNativeProps(props);
        }
      }, {
        key: "componentWillMount",
        value: function componentWillMount() {
          this._attachProps(this.props);
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          if (this._invokeAnimatedPropsCallbackOnMount) {
            this._invokeAnimatedPropsCallbackOnMount = false;

            this._animatedPropsCallback();
          }

          this._propsAnimated.setNativeView(this._component);

          this._attachNativeEvents();
        }
      }, {
        key: "_attachNativeEvents",
        value: function _attachNativeEvents() {
          var _this2 = this;

          var scrollableNode = this._component.getScrollableNode ? this._component.getScrollableNode() : this._component;

          var _loop = function _loop(key) {
            var prop = _this2.props[key];

            if (prop instanceof AnimatedEvent && prop.__isNative) {
              prop.__attach(scrollableNode, key);

              _this2._eventDetachers.push(function () {
                return prop.__detach(scrollableNode, key);
              });
            }
          };

          for (var key in this.props) {
            _loop(key);
          }
        }
      }, {
        key: "_detachNativeEvents",
        value: function _detachNativeEvents() {
          this._eventDetachers.forEach(function (remove) {
            return remove();
          });

          this._eventDetachers = [];
        }
      }, {
        key: "_attachProps",
        value: function _attachProps(nextProps) {
          var oldPropsAnimated = this._propsAnimated;
          this._propsAnimated = new AnimatedProps(nextProps, this._animatedPropsCallback);
          oldPropsAnimated && oldPropsAnimated.__detach();
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(newProps) {
          this._attachProps(newProps);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (this._component !== this._prevComponent) {
            this._propsAnimated.setNativeView(this._component);
          }

          if (this._component !== this._prevComponent || prevProps !== this.props) {
            this._detachNativeEvents();

            this._attachNativeEvents();
          }
        }
      }, {
        key: "render",
        value: function render() {
          var props = this._propsAnimated.__getValue();

          return React.createElement(Component, babelHelpers.extends({}, props, {
            ref: this._setComponentRef,
            collapsable: this._propsAnimated.__isNative ? false : props.collapsable,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 147
            }
          }));
        }
      }, {
        key: "_setComponentRef",
        value: function _setComponentRef(c) {
          this._prevComponent = this._component;
          this._component = c;
        }
      }, {
        key: "getNode",
        value: function getNode() {
          return this._component;
        }
      }]);
      return AnimatedComponent;
    }(React.Component);

    AnimatedComponent.__skipSetNativeProps_FOR_TESTS_ONLY = false;
    var propTypes = Component.propTypes;
    AnimatedComponent.propTypes = {
      style: function style(props, propName, componentName) {
        if (!propTypes) {
          return;
        }

        for (var key in ViewStylePropTypes) {
          if (!propTypes[key] && props[key] !== undefined) {
            console.warn('You are setting the style `{ ' + key + ': ... }` as a prop. You ' + 'should nest it in a style object. ' + 'E.g. `{ style: { ' + key + ': ... } }`');
          }
        }
      }
    };
    return AnimatedComponent;
  }

  module.exports = createAnimatedComponent;
},221,[196,209,130,139],"createAnimatedComponent");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Image/Image.android.js";

  var ImageResizeMode = require(_dependencyMap[0], 'ImageResizeMode');

  var ImageStylePropTypes = require(_dependencyMap[1], 'ImageStylePropTypes');

  var NativeMethodsMixin = require(_dependencyMap[2], 'NativeMethodsMixin');

  var NativeModules = require(_dependencyMap[3], 'NativeModules');

  var React = require(_dependencyMap[4], 'React');

  var PropTypes = require(_dependencyMap[5], 'prop-types');

  var ReactNativeViewAttributes = require(_dependencyMap[6], 'ReactNativeViewAttributes');

  var Set = require(_dependencyMap[7], 'Set');

  var StyleSheet = require(_dependencyMap[8], 'StyleSheet');

  var StyleSheetPropType = require(_dependencyMap[9], 'StyleSheetPropType');

  var View = require(_dependencyMap[10], 'View');

  var ViewPropTypes = require(_dependencyMap[11], 'ViewPropTypes');

  var ViewStylePropTypes = require(_dependencyMap[12], 'ViewStylePropTypes');

  var createReactClass = require(_dependencyMap[13], 'create-react-class');

  var filterObject = require(_dependencyMap[14], 'fbjs/lib/filterObject');

  var flattenStyle = require(_dependencyMap[15], 'flattenStyle');

  var merge = require(_dependencyMap[16], 'merge');

  var requireNativeComponent = require(_dependencyMap[17], 'requireNativeComponent');

  var resolveAssetSource = require(_dependencyMap[18], 'resolveAssetSource');

  var ImageLoader = NativeModules.ImageLoader;
  var _requestId = 1;

  function generateRequestId() {
    return _requestId++;
  }

  var ImageViewAttributes = merge(ReactNativeViewAttributes.UIView, {
    src: true,
    loadingIndicatorSrc: true,
    resizeMethod: true,
    resizeMode: true,
    progressiveRenderingEnabled: true,
    fadeDuration: true,
    shouldNotifyLoadEvents: true
  });
  var ViewStyleKeys = new Set(Object.keys(ViewStylePropTypes));
  var ImageSpecificStyleKeys = new Set(Object.keys(ImageStylePropTypes).filter(function (x) {
    return !ViewStyleKeys.has(x);
  }));
  var Image = createReactClass({
    displayName: 'Image',
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      style: StyleSheetPropType(ImageStylePropTypes),
      source: PropTypes.oneOfType([PropTypes.shape({
        uri: PropTypes.string,
        headers: PropTypes.objectOf(PropTypes.string)
      }), PropTypes.number, PropTypes.arrayOf(PropTypes.shape({
        uri: PropTypes.string,
        width: PropTypes.number,
        height: PropTypes.number,
        headers: PropTypes.objectOf(PropTypes.string)
      }))]),
      blurRadius: PropTypes.number,
      loadingIndicatorSource: PropTypes.oneOfType([PropTypes.shape({
        uri: PropTypes.string
      }), PropTypes.number]),
      progressiveRenderingEnabled: PropTypes.bool,
      fadeDuration: PropTypes.number,
      onLoadStart: PropTypes.func,
      onError: PropTypes.func,
      onLoad: PropTypes.func,
      onLoadEnd: PropTypes.func,
      testID: PropTypes.string,
      resizeMethod: PropTypes.oneOf(['auto', 'resize', 'scale']),
      resizeMode: PropTypes.oneOf(['cover', 'contain', 'stretch', 'center'])
    }),
    statics: {
      resizeMode: ImageResizeMode,
      getSize: function getSize(url, success, failure) {
        return ImageLoader.getSize(url).then(function (sizes) {
          success(sizes.width, sizes.height);
        }).catch(failure || function () {
          console.warn('Failed to get size for image: ' + url);
        });
      },
      prefetch: function prefetch(url, callback) {
        var requestId = generateRequestId();
        callback && callback(requestId);
        return ImageLoader.prefetchImage(url, requestId);
      },
      abortPrefetch: function abortPrefetch(requestId) {
        ImageLoader.abortRequest(requestId);
      },
      queryCache: function queryCache(urls) {
        return regeneratorRuntime.async(function queryCache$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return regeneratorRuntime.awrap(ImageLoader.queryCache(urls));

              case 2:
                return _context.abrupt("return", _context.sent);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      },
      resolveAssetSource: resolveAssetSource
    },
    mixins: [NativeMethodsMixin],
    viewConfig: {
      uiViewClassName: 'RCTView',
      validAttributes: ReactNativeViewAttributes.RCTView
    },
    contextTypes: {
      isInAParentText: PropTypes.bool
    },
    render: function render() {
      var source = resolveAssetSource(this.props.source);
      var loadingIndicatorSource = resolveAssetSource(this.props.loadingIndicatorSource);

      if (source && source.uri === '') {
        console.warn('source.uri should not be an empty string');
      }

      if (this.props.src) {
        console.warn('The <Image> component requires a `source` property rather than `src`.');
      }

      if (this.props.children) {
        throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
      }

      if (source && (source.uri || Array.isArray(source))) {
        var style = void 0;
        var sources = void 0;

        if (source.uri) {
          var _width = source.width,
              _height = source.height;
          style = flattenStyle([{
            width: _width,
            height: _height
          }, styles.base, this.props.style]);
          sources = [{
            uri: source.uri
          }];
        } else {
          style = flattenStyle([styles.base, this.props.style]);
          sources = source;
        }

        var _props = this.props,
            onLoadStart = _props.onLoadStart,
            onLoad = _props.onLoad,
            onLoadEnd = _props.onLoadEnd,
            onError = _props.onError;
        var nativeProps = merge(this.props, {
          style: style,
          shouldNotifyLoadEvents: !!(onLoadStart || onLoad || onLoadEnd || onError),
          src: sources,
          headers: source.headers,
          loadingIndicatorSrc: loadingIndicatorSource ? loadingIndicatorSource.uri : null
        });

        if (this.context.isInAParentText) {
          return React.createElement(RCTTextInlineImage, babelHelpers.extends({}, nativeProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 302
            }
          }));
        } else {
          return React.createElement(RKImage, babelHelpers.extends({}, nativeProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 304
            }
          }));
        }
      }

      return null;
    }
  });
  var styles = StyleSheet.create({
    base: {
      overflow: 'hidden'
    }
  });
  var cfg = {
    nativeOnly: {
      src: true,
      headers: true,
      loadingIndicatorSrc: true,
      shouldNotifyLoadEvents: true
    }
  };
  var RKImage = requireNativeComponent('RCTImageView', Image, cfg);
  var RCTTextInlineImage = requireNativeComponent('RCTTextInlineImage', Image, cfg);
  module.exports = Image;
},222,[149,148,125,15,130,127,171,30,168,138,170,131,139,172,223,101,134,145,160],"Image");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function filterObject(object, callback, context) {
    if (!object) {
      return null;
    }

    var result = {};

    for (var name in object) {
      if (hasOwnProperty.call(object, name) && callback.call(context, object[name], name, object)) {
        result[name] = object[name];
      }
    }

    return result;
  }

  module.exports = filterObject;
},223,[],"fbjs/lib/filterObject.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js";

  var Animated = require(_dependencyMap[0], 'Animated');

  var ColorPropType = require(_dependencyMap[1], 'ColorPropType');

  var EdgeInsetsPropType = require(_dependencyMap[2], 'EdgeInsetsPropType');

  var Platform = require(_dependencyMap[3], 'Platform');

  var PointPropType = require(_dependencyMap[4], 'PointPropType');

  var PropTypes = require(_dependencyMap[5], 'prop-types');

  var React = require(_dependencyMap[6], 'React');

  var ReactNative = require(_dependencyMap[7], 'ReactNative');

  var ScrollResponder = require(_dependencyMap[8], 'ScrollResponder');

  var ScrollViewStickyHeader = require(_dependencyMap[9], 'ScrollViewStickyHeader');

  var StyleSheet = require(_dependencyMap[10], 'StyleSheet');

  var StyleSheetPropType = require(_dependencyMap[11], 'StyleSheetPropType');

  var View = require(_dependencyMap[12], 'View');

  var ViewPropTypes = require(_dependencyMap[13], 'ViewPropTypes');

  var ViewStylePropTypes = require(_dependencyMap[14], 'ViewStylePropTypes');

  var createReactClass = require(_dependencyMap[15], 'create-react-class');

  var dismissKeyboard = require(_dependencyMap[16], 'dismissKeyboard');

  var flattenStyle = require(_dependencyMap[17], 'flattenStyle');

  var invariant = require(_dependencyMap[18], 'fbjs/lib/invariant');

  var processDecelerationRate = require(_dependencyMap[19], 'processDecelerationRate');

  var requireNativeComponent = require(_dependencyMap[20], 'requireNativeComponent');

  var warning = require(_dependencyMap[21], 'fbjs/lib/warning');

  var ScrollView = createReactClass({
    displayName: 'ScrollView',
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      automaticallyAdjustContentInsets: PropTypes.bool,
      contentInset: EdgeInsetsPropType,
      contentOffset: PointPropType,
      bounces: PropTypes.bool,
      bouncesZoom: PropTypes.bool,
      alwaysBounceHorizontal: PropTypes.bool,
      alwaysBounceVertical: PropTypes.bool,
      centerContent: PropTypes.bool,
      contentContainerStyle: StyleSheetPropType(ViewStylePropTypes),
      decelerationRate: PropTypes.oneOfType([PropTypes.oneOf(['fast', 'normal']), PropTypes.number]),
      horizontal: PropTypes.bool,
      indicatorStyle: PropTypes.oneOf(['default', 'black', 'white']),
      directionalLockEnabled: PropTypes.bool,
      canCancelContentTouches: PropTypes.bool,
      keyboardDismissMode: PropTypes.oneOf(['none', 'on-drag', 'interactive']),
      keyboardShouldPersistTaps: PropTypes.oneOf(['always', 'never', 'handled', false, true]),
      maximumZoomScale: PropTypes.number,
      minimumZoomScale: PropTypes.number,
      onMomentumScrollBegin: PropTypes.func,
      onMomentumScrollEnd: PropTypes.func,
      onScroll: PropTypes.func,
      onScrollBeginDrag: PropTypes.func,
      onScrollEndDrag: PropTypes.func,
      onContentSizeChange: PropTypes.func,
      pagingEnabled: PropTypes.bool,
      pinchGestureEnabled: PropTypes.bool,
      scrollEnabled: PropTypes.bool,
      scrollEventThrottle: PropTypes.number,
      scrollIndicatorInsets: EdgeInsetsPropType,
      scrollsToTop: PropTypes.bool,
      showsHorizontalScrollIndicator: PropTypes.bool,
      showsVerticalScrollIndicator: PropTypes.bool,
      stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number),
      snapToInterval: PropTypes.number,
      snapToAlignment: PropTypes.oneOf(['start', 'center', 'end']),
      removeClippedSubviews: PropTypes.bool,
      zoomScale: PropTypes.number,
      contentInsetAdjustmentBehavior: PropTypes.oneOf(['automatic', 'scrollableAxes', 'never', 'always']),
      refreshControl: PropTypes.element,
      endFillColor: ColorPropType,
      scrollPerfTag: PropTypes.string,
      overScrollMode: PropTypes.oneOf(['auto', 'always', 'never']),
      DEPRECATED_sendUpdatedChildFrames: PropTypes.bool
    }),
    mixins: [ScrollResponder.Mixin],
    _scrollAnimatedValue: new Animated.Value(0),
    _scrollAnimatedValueAttachment: null,
    _stickyHeaderRefs: new Map(),
    _headerLayoutYs: new Map(),
    getInitialState: function getInitialState() {
      return this.scrollResponderMixinGetInitialState();
    },
    componentWillMount: function componentWillMount() {
      this._scrollAnimatedValue = new Animated.Value(this.props.contentOffset ? this.props.contentOffset.y : 0);

      this._scrollAnimatedValue.setOffset(this.props.contentInset ? this.props.contentInset.top : 0);

      this._stickyHeaderRefs = new Map();
      this._headerLayoutYs = new Map();
    },
    componentDidMount: function componentDidMount() {
      this._updateAnimatedNodeAttachment();
    },
    componentDidUpdate: function componentDidUpdate() {
      this._updateAnimatedNodeAttachment();
    },
    componentWillUnmount: function componentWillUnmount() {
      if (this._scrollAnimatedValueAttachment) {
        this._scrollAnimatedValueAttachment.detach();
      }
    },
    setNativeProps: function setNativeProps(props) {
      this._scrollViewRef && this._scrollViewRef.setNativeProps(props);
    },
    getScrollResponder: function getScrollResponder() {
      return this;
    },
    getScrollableNode: function getScrollableNode() {
      return ReactNative.findNodeHandle(this._scrollViewRef);
    },
    getInnerViewNode: function getInnerViewNode() {
      return ReactNative.findNodeHandle(this._innerViewRef);
    },
    scrollTo: function scrollTo(y, x, animated) {
      if (typeof y === 'number') {
        console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' + 'animated: true})` instead.');
      } else {
        var _ref = y || {};

        x = _ref.x;
        y = _ref.y;
        animated = _ref.animated;
      }

      this.getScrollResponder().scrollResponderScrollTo({
        x: x || 0,
        y: y || 0,
        animated: animated !== false
      });
    },
    scrollToEnd: function scrollToEnd(options) {
      var animated = (options && options.animated) !== false;
      this.getScrollResponder().scrollResponderScrollToEnd({
        animated: animated
      });
    },
    scrollWithoutAnimationTo: function scrollWithoutAnimationTo() {
      var y = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      console.warn('`scrollWithoutAnimationTo` is deprecated. Use `scrollTo` instead');
      this.scrollTo({
        x: x,
        y: y,
        animated: false
      });
    },
    flashScrollIndicators: function flashScrollIndicators() {
      this.getScrollResponder().scrollResponderFlashScrollIndicators();
    },
    _getKeyForIndex: function _getKeyForIndex(index, childArray) {
      var child = childArray[index];
      return child && child.key;
    },
    _updateAnimatedNodeAttachment: function _updateAnimatedNodeAttachment() {
      if (this._scrollAnimatedValueAttachment) {
        this._scrollAnimatedValueAttachment.detach();
      }

      if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {
        this._scrollAnimatedValueAttachment = Animated.attachNativeEvent(this._scrollViewRef, 'onScroll', [{
          nativeEvent: {
            contentOffset: {
              y: this._scrollAnimatedValue
            }
          }
        }]);
      }
    },
    _setStickyHeaderRef: function _setStickyHeaderRef(key, ref) {
      if (ref) {
        this._stickyHeaderRefs.set(key, ref);
      } else {
        this._stickyHeaderRefs.delete(key);
      }
    },
    _onStickyHeaderLayout: function _onStickyHeaderLayout(index, event, key) {
      if (!this.props.stickyHeaderIndices) {
        return;
      }

      var childArray = React.Children.toArray(this.props.children);

      if (key !== this._getKeyForIndex(index, childArray)) {
        return;
      }

      var layoutY = event.nativeEvent.layout.y;

      this._headerLayoutYs.set(key, layoutY);

      var indexOfIndex = this.props.stickyHeaderIndices.indexOf(index);
      var previousHeaderIndex = this.props.stickyHeaderIndices[indexOfIndex - 1];

      if (previousHeaderIndex != null) {
        var previousHeader = this._stickyHeaderRefs.get(this._getKeyForIndex(previousHeaderIndex, childArray));

        previousHeader && previousHeader.setNextHeaderY(layoutY);
      }
    },
    _handleScroll: function _handleScroll(e) {
      if (__DEV__) {
        if (this.props.onScroll && this.props.scrollEventThrottle == null && Platform.OS === 'ios') {
          console.log('You specified `onScroll` on a <ScrollView> but not ' + '`scrollEventThrottle`. You will only receive one event. ' + 'Using `16` you get all the events but be aware that it may ' + 'cause frame drops, use a bigger number if you don\'t need as ' + 'much precision.');
        }
      }

      if (Platform.OS === 'android') {
        if (this.props.keyboardDismissMode === 'on-drag') {
          dismissKeyboard();
        }
      }

      this.scrollResponderHandleScroll(e);
    },
    _handleContentOnLayout: function _handleContentOnLayout(e) {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
          width = _e$nativeEvent$layout.width,
          height = _e$nativeEvent$layout.height;
      this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
    },
    _scrollViewRef: null,
    _setScrollViewRef: function _setScrollViewRef(ref) {
      this._scrollViewRef = ref;
    },
    _innerViewRef: null,
    _setInnerViewRef: function _setInnerViewRef(ref) {
      this._innerViewRef = ref;
    },
    render: function render() {
      var _this = this;

      var ScrollViewClass = void 0;
      var ScrollContentContainerViewClass = void 0;

      if (Platform.OS === 'ios') {
        ScrollViewClass = RCTScrollView;
        ScrollContentContainerViewClass = RCTScrollContentView;
        warning(!this.props.snapToInterval || !this.props.pagingEnabled, 'snapToInterval is currently ignored when pagingEnabled is true.');
      } else if (Platform.OS === 'android') {
        if (this.props.horizontal) {
          ScrollViewClass = AndroidHorizontalScrollView;
          ScrollContentContainerViewClass = AndroidHorizontalScrollContentView;
        } else {
          ScrollViewClass = AndroidScrollView;
          ScrollContentContainerViewClass = View;
        }
      }

      invariant(ScrollViewClass !== undefined, 'ScrollViewClass must not be undefined');
      invariant(ScrollContentContainerViewClass !== undefined, 'ScrollContentContainerViewClass must not be undefined');
      var contentContainerStyle = [this.props.horizontal && styles.contentContainerHorizontal, this.props.contentContainerStyle];
      var style = void 0,
          childLayoutProps = void 0;

      if (__DEV__ && this.props.style) {
        style = flattenStyle(this.props.style);
        childLayoutProps = ['alignItems', 'justifyContent'].filter(function (prop) {
          return style && style[prop] !== undefined;
        });
        invariant(childLayoutProps.length === 0, 'ScrollView child layout (' + JSON.stringify(childLayoutProps) + ') must be applied through the contentContainerStyle prop.');
      }

      var contentSizeChangeProps = {};

      if (this.props.onContentSizeChange) {
        contentSizeChangeProps = {
          onLayout: this._handleContentOnLayout
        };
      }

      var stickyHeaderIndices = this.props.stickyHeaderIndices;
      var hasStickyHeaders = stickyHeaderIndices && stickyHeaderIndices.length > 0;
      var childArray = hasStickyHeaders && React.Children.toArray(this.props.children);
      var children = hasStickyHeaders ? childArray.map(function (child, index) {
        var indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;

        if (indexOfIndex > -1) {
          var key = child.key;
          var nextIndex = stickyHeaderIndices[indexOfIndex + 1];
          return React.createElement(
            ScrollViewStickyHeader,
            {
              key: key,
              ref: function ref(_ref2) {
                return _this._setStickyHeaderRef(key, _ref2);
              },
              nextHeaderLayoutY: _this._headerLayoutYs.get(_this._getKeyForIndex(nextIndex, childArray)),
              onLayout: function onLayout(event) {
                return _this._onStickyHeaderLayout(index, event, key);
              },
              scrollAnimatedValue: _this._scrollAnimatedValue,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 709
              }
            },
            child
          );
        } else {
          return child;
        }
      }) : this.props.children;
      var contentContainer = React.createElement(
        ScrollContentContainerViewClass,
        babelHelpers.extends({}, contentSizeChangeProps, {
          ref: this._setInnerViewRef,
          style: contentContainerStyle,
          removeClippedSubviews: Platform.OS === 'android' && hasStickyHeaders ? false : this.props.removeClippedSubviews,
          collapsable: false,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 726
          }
        }),
        children
      );
      var alwaysBounceHorizontal = this.props.alwaysBounceHorizontal !== undefined ? this.props.alwaysBounceHorizontal : this.props.horizontal;
      var alwaysBounceVertical = this.props.alwaysBounceVertical !== undefined ? this.props.alwaysBounceVertical : !this.props.horizontal;
      var DEPRECATED_sendUpdatedChildFrames = !!this.props.DEPRECATED_sendUpdatedChildFrames;
      var baseStyle = this.props.horizontal ? styles.baseHorizontal : styles.baseVertical;
      var props = babelHelpers.extends({}, this.props, {
        alwaysBounceHorizontal: alwaysBounceHorizontal,
        alwaysBounceVertical: alwaysBounceVertical,
        style: [baseStyle, this.props.style],
        onContentSizeChange: null,
        onMomentumScrollBegin: this.scrollResponderHandleMomentumScrollBegin,
        onMomentumScrollEnd: this.scrollResponderHandleMomentumScrollEnd,
        onResponderGrant: this.scrollResponderHandleResponderGrant,
        onResponderReject: this.scrollResponderHandleResponderReject,
        onResponderRelease: this.scrollResponderHandleResponderRelease,
        onResponderTerminate: this.scrollResponderHandleTerminate,
        onResponderTerminationRequest: this.scrollResponderHandleTerminationRequest,
        onScroll: this._handleScroll,
        onScrollBeginDrag: this.scrollResponderHandleScrollBeginDrag,
        onScrollEndDrag: this.scrollResponderHandleScrollEndDrag,
        onScrollShouldSetResponder: this.scrollResponderHandleScrollShouldSetResponder,
        onStartShouldSetResponder: this.scrollResponderHandleStartShouldSetResponder,
        onStartShouldSetResponderCapture: this.scrollResponderHandleStartShouldSetResponderCapture,
        onTouchEnd: this.scrollResponderHandleTouchEnd,
        onTouchMove: this.scrollResponderHandleTouchMove,
        onTouchStart: this.scrollResponderHandleTouchStart,
        onTouchCancel: this.scrollResponderHandleTouchCancel,
        scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,
        sendMomentumEvents: this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ? true : false,
        DEPRECATED_sendUpdatedChildFrames: DEPRECATED_sendUpdatedChildFrames
      });
      var decelerationRate = this.props.decelerationRate;

      if (decelerationRate) {
        props.decelerationRate = processDecelerationRate(decelerationRate);
      }

      var refreshControl = this.props.refreshControl;

      if (refreshControl) {
        if (Platform.OS === 'ios') {
          return React.createElement(
            ScrollViewClass,
            babelHelpers.extends({}, props, {
              ref: this._setScrollViewRef,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 798
              }
            }),
            Platform.isTVOS ? null : refreshControl,
            contentContainer
          );
        } else if (Platform.OS === 'android') {
          return React.cloneElement(refreshControl, {
            style: props.style
          }, React.createElement(
            ScrollViewClass,
            babelHelpers.extends({}, props, {
              style: baseStyle,
              ref: this._setScrollViewRef,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 813
              }
            }),
            contentContainer
          ));
        }
      }

      return React.createElement(
        ScrollViewClass,
        babelHelpers.extends({}, props, {
          ref: this._setScrollViewRef,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 820
          }
        }),
        contentContainer
      );
    }
  });
  var styles = StyleSheet.create({
    baseVertical: {
      flexGrow: 1,
      flexShrink: 1,
      flexDirection: 'column',
      overflow: 'scroll'
    },
    baseHorizontal: {
      flexGrow: 1,
      flexShrink: 1,
      flexDirection: 'row',
      overflow: 'scroll'
    },
    contentContainerHorizontal: {
      flexDirection: 'row'
    }
  });
  var nativeOnlyProps = void 0,
      AndroidScrollView = void 0,
      AndroidHorizontalScrollContentView = void 0,
      AndroidHorizontalScrollView = void 0,
      RCTScrollView = void 0,
      RCTScrollContentView = void 0;

  if (Platform.OS === 'android') {
    nativeOnlyProps = {
      nativeOnly: {
        sendMomentumEvents: true
      }
    };
    AndroidScrollView = requireNativeComponent('RCTScrollView', ScrollView, nativeOnlyProps);
    AndroidHorizontalScrollView = requireNativeComponent('AndroidHorizontalScrollView', ScrollView, nativeOnlyProps);
    AndroidHorizontalScrollContentView = requireNativeComponent('AndroidHorizontalScrollContentView');
  } else if (Platform.OS === 'ios') {
    nativeOnlyProps = {
      nativeOnly: {
        onMomentumScrollBegin: true,
        onMomentumScrollEnd: true,
        onScrollBeginDrag: true,
        onScrollEndDrag: true
      }
    };
    RCTScrollView = requireNativeComponent('RCTScrollView', ScrollView, nativeOnlyProps);
    RCTScrollContentView = requireNativeComponent('RCTScrollContentView', View);
  }

  module.exports = ScrollView;
},224,[194,123,132,52,225,127,130,21,226,234,168,138,170,131,139,172,230,101,13,235,145,56],"ScrollView");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = require(_dependencyMap[0], 'prop-types');

  var createStrictShapeTypeChecker = require(_dependencyMap[1], 'createStrictShapeTypeChecker');

  var PointPropType = createStrictShapeTypeChecker({
    x: PropTypes.number,
    y: PropTypes.number
  });
  module.exports = PointPropType;
},225,[127,133],"PointPropType");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Dimensions = require(_dependencyMap[0], 'Dimensions');

  var FrameRateLogger = require(_dependencyMap[1], 'FrameRateLogger');

  var Keyboard = require(_dependencyMap[2], 'Keyboard');

  var ReactNative = require(_dependencyMap[3], 'ReactNative');

  var Subscribable = require(_dependencyMap[4], 'Subscribable');

  var TextInputState = require(_dependencyMap[5], 'TextInputState');

  var UIManager = require(_dependencyMap[6], 'UIManager');

  var invariant = require(_dependencyMap[7], 'fbjs/lib/invariant');

  var nullthrows = require(_dependencyMap[8], 'fbjs/lib/nullthrows');

  var performanceNow = require(_dependencyMap[9], 'fbjs/lib/performanceNow');

  var warning = require(_dependencyMap[10], 'fbjs/lib/warning');

  var _require = require(_dependencyMap[11], 'NativeModules'),
      ScrollViewManager = _require.ScrollViewManager;

  var _require2 = require(_dependencyMap[12], 'ReactNativeComponentTree'),
      getInstanceFromNode = _require2.getInstanceFromNode;

  var IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;

  function isTagInstanceOfTextInput(tag) {
    var instance = getInstanceFromNode(tag);
    return instance && instance.viewConfig && (instance.viewConfig.uiViewClassName === 'AndroidTextInput' || instance.viewConfig.uiViewClassName === 'RCTMultilineTextInputView' || instance.viewConfig.uiViewClassName === 'RCTSinglelineTextInputView');
  }

  var ScrollResponderMixin = {
    mixins: [Subscribable.Mixin],
    scrollResponderMixinGetInitialState: function scrollResponderMixinGetInitialState() {
      return {
        isTouching: false,
        lastMomentumScrollBeginTime: 0,
        lastMomentumScrollEndTime: 0,
        observedScrollSinceBecomingResponder: false,
        becameResponderWhileAnimating: false
      };
    },
    scrollResponderHandleScrollShouldSetResponder: function scrollResponderHandleScrollShouldSetResponder() {
      return this.state.isTouching;
    },
    scrollResponderHandleStartShouldSetResponder: function scrollResponderHandleStartShouldSetResponder(e) {
      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();

      if (this.props.keyboardShouldPersistTaps === 'handled' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput) {
        return true;
      }

      return false;
    },
    scrollResponderHandleStartShouldSetResponderCapture: function scrollResponderHandleStartShouldSetResponderCapture(e) {
      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();
      var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;
      var keyboardNeverPersistTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';

      if (keyboardNeverPersistTaps && currentlyFocusedTextInput != null && !isTagInstanceOfTextInput(e.target)) {
        return true;
      }

      return this.scrollResponderIsAnimating();
    },
    scrollResponderHandleResponderReject: function scrollResponderHandleResponderReject() {},
    scrollResponderHandleTerminationRequest: function scrollResponderHandleTerminationRequest() {
      return !this.state.observedScrollSinceBecomingResponder;
    },
    scrollResponderHandleTouchEnd: function scrollResponderHandleTouchEnd(e) {
      var nativeEvent = e.nativeEvent;
      this.state.isTouching = nativeEvent.touches.length !== 0;
      this.props.onTouchEnd && this.props.onTouchEnd(e);
    },
    scrollResponderHandleTouchCancel: function scrollResponderHandleTouchCancel(e) {
      this.state.isTouching = false;
      this.props.onTouchCancel && this.props.onTouchCancel(e);
    },
    scrollResponderHandleResponderRelease: function scrollResponderHandleResponderRelease(e) {
      this.props.onResponderRelease && this.props.onResponderRelease(e);
      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();

      if (this.props.keyboardShouldPersistTaps !== true && this.props.keyboardShouldPersistTaps !== 'always' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !this.state.observedScrollSinceBecomingResponder && !this.state.becameResponderWhileAnimating) {
        this.props.onScrollResponderKeyboardDismissed && this.props.onScrollResponderKeyboardDismissed(e);
        TextInputState.blurTextInput(currentlyFocusedTextInput);
      }
    },
    scrollResponderHandleScroll: function scrollResponderHandleScroll(e) {
      this.state.observedScrollSinceBecomingResponder = true;
      this.props.onScroll && this.props.onScroll(e);
    },
    scrollResponderHandleResponderGrant: function scrollResponderHandleResponderGrant(e) {
      this.state.observedScrollSinceBecomingResponder = false;
      this.props.onResponderGrant && this.props.onResponderGrant(e);
      this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();
    },
    scrollResponderHandleScrollBeginDrag: function scrollResponderHandleScrollBeginDrag(e) {
      FrameRateLogger.beginScroll();
      this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);
    },
    scrollResponderHandleScrollEndDrag: function scrollResponderHandleScrollEndDrag(e) {
      var velocity = e.nativeEvent.velocity;

      if (!this.scrollResponderIsAnimating() && (!velocity || velocity.x === 0 && velocity.y === 0)) {
        FrameRateLogger.endScroll();
      }

      this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);
    },
    scrollResponderHandleMomentumScrollBegin: function scrollResponderHandleMomentumScrollBegin(e) {
      this.state.lastMomentumScrollBeginTime = performanceNow();
      this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);
    },
    scrollResponderHandleMomentumScrollEnd: function scrollResponderHandleMomentumScrollEnd(e) {
      FrameRateLogger.endScroll();
      this.state.lastMomentumScrollEndTime = performanceNow();
      this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);
    },
    scrollResponderHandleTouchStart: function scrollResponderHandleTouchStart(e) {
      this.state.isTouching = true;
      this.props.onTouchStart && this.props.onTouchStart(e);
    },
    scrollResponderHandleTouchMove: function scrollResponderHandleTouchMove(e) {
      this.props.onTouchMove && this.props.onTouchMove(e);
    },
    scrollResponderIsAnimating: function scrollResponderIsAnimating() {
      var now = performanceNow();
      var timeSinceLastMomentumScrollEnd = now - this.state.lastMomentumScrollEndTime;
      var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this.state.lastMomentumScrollEndTime < this.state.lastMomentumScrollBeginTime;
      return isAnimating;
    },
    scrollResponderGetScrollableNode: function scrollResponderGetScrollableNode() {
      return this.getScrollableNode ? this.getScrollableNode() : ReactNative.findNodeHandle(this);
    },
    scrollResponderScrollTo: function scrollResponderScrollTo(x, y, animated) {
      if (typeof x === 'number') {
        console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');
      } else {
        var _ref = x || {};

        x = _ref.x;
        y = _ref.y;
        animated = _ref.animated;
      }

      UIManager.dispatchViewManagerCommand(nullthrows(this.scrollResponderGetScrollableNode()), UIManager.RCTScrollView.Commands.scrollTo, [x || 0, y || 0, animated !== false]);
    },
    scrollResponderScrollToEnd: function scrollResponderScrollToEnd(options) {
      var animated = (options && options.animated) !== false;
      UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.RCTScrollView.Commands.scrollToEnd, [animated]);
    },
    scrollResponderScrollWithoutAnimationTo: function scrollResponderScrollWithoutAnimationTo(offsetX, offsetY) {
      console.warn('`scrollResponderScrollWithoutAnimationTo` is deprecated. Use `scrollResponderScrollTo` instead');
      this.scrollResponderScrollTo({
        x: offsetX,
        y: offsetY,
        animated: false
      });
    },
    scrollResponderZoomTo: function scrollResponderZoomTo(rect, animated) {
      invariant(ScrollViewManager && ScrollViewManager.zoomToRect, 'zoomToRect is not implemented');

      if ('animated' in rect) {
        animated = rect.animated;
        delete rect.animated;
      } else if (typeof animated !== 'undefined') {
        console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead');
      }

      ScrollViewManager.zoomToRect(this.scrollResponderGetScrollableNode(), rect, animated !== false);
    },
    scrollResponderFlashScrollIndicators: function scrollResponderFlashScrollIndicators() {
      UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.RCTScrollView.Commands.flashScrollIndicators, []);
    },
    scrollResponderScrollNativeHandleToKeyboard: function scrollResponderScrollNativeHandleToKeyboard(nodeHandle, additionalOffset, preventNegativeScrollOffset) {
      this.additionalScrollOffset = additionalOffset || 0;
      this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;
      UIManager.measureLayout(nodeHandle, ReactNative.findNodeHandle(this.getInnerViewNode()), this.scrollResponderTextInputFocusError, this.scrollResponderInputMeasureAndScrollToKeyboard);
    },
    scrollResponderInputMeasureAndScrollToKeyboard: function scrollResponderInputMeasureAndScrollToKeyboard(left, top, width, height) {
      var keyboardScreenY = Dimensions.get('window').height;

      if (this.keyboardWillOpenTo) {
        keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;
      }

      var scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset;

      if (this.preventNegativeScrollOffset) {
        scrollOffsetY = Math.max(0, scrollOffsetY);
      }

      this.scrollResponderScrollTo({
        x: 0,
        y: scrollOffsetY,
        animated: true
      });
      this.additionalOffset = 0;
      this.preventNegativeScrollOffset = false;
    },
    scrollResponderTextInputFocusError: function scrollResponderTextInputFocusError(e) {
      console.error('Error measuring text field: ', e);
    },
    componentWillMount: function componentWillMount() {
      var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;
      warning(typeof keyboardShouldPersistTaps !== 'boolean', "'keyboardShouldPersistTaps={" + keyboardShouldPersistTaps + "}' is deprecated. " + ("Use 'keyboardShouldPersistTaps=\"" + (keyboardShouldPersistTaps ? 'always' : 'never') + "\"' instead"));
      this.keyboardWillOpenTo = null;
      this.additionalScrollOffset = 0;
      this.addListenerOn(Keyboard, 'keyboardWillShow', this.scrollResponderKeyboardWillShow);
      this.addListenerOn(Keyboard, 'keyboardWillHide', this.scrollResponderKeyboardWillHide);
      this.addListenerOn(Keyboard, 'keyboardDidShow', this.scrollResponderKeyboardDidShow);
      this.addListenerOn(Keyboard, 'keyboardDidHide', this.scrollResponderKeyboardDidHide);
    },
    scrollResponderKeyboardWillShow: function scrollResponderKeyboardWillShow(e) {
      this.keyboardWillOpenTo = e;
      this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);
    },
    scrollResponderKeyboardWillHide: function scrollResponderKeyboardWillHide(e) {
      this.keyboardWillOpenTo = null;
      this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);
    },
    scrollResponderKeyboardDidShow: function scrollResponderKeyboardDidShow(e) {
      if (e) {
        this.keyboardWillOpenTo = e;
      }

      this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);
    },
    scrollResponderKeyboardDidHide: function scrollResponderKeyboardDidHide(e) {
      this.keyboardWillOpenTo = null;
      this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);
    }
  };
  var ScrollResponder = {
    Mixin: ScrollResponderMixin
  };
  module.exports = ScrollResponder;
},226,[164,227,228,21,231,115,107,13,232,53,56,15,233],"ScrollResponder");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = require(_dependencyMap[0], 'NativeModules');

  var invariant = require(_dependencyMap[1], 'fbjs/lib/invariant');

  var FrameRateLogger = {
    setGlobalOptions: function setGlobalOptions(options) {
      if (options.debug !== undefined) {
        invariant(NativeModules.FrameRateLogger, 'Trying to debug FrameRateLogger without the native module!');
      }

      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setGlobalOptions(options);
    },
    setContext: function setContext(context) {
      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setContext(context);
    },
    beginScroll: function beginScroll() {
      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.beginScroll();
    },
    endScroll: function endScroll() {
      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.endScroll();
    }
  };
  module.exports = FrameRateLogger;
},227,[15,13],"FrameRateLogger");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var LayoutAnimation = require(_dependencyMap[0], 'LayoutAnimation');

  var invariant = require(_dependencyMap[1], 'fbjs/lib/invariant');

  var NativeEventEmitter = require(_dependencyMap[2], 'NativeEventEmitter');

  var KeyboardObserver = require(_dependencyMap[3], 'NativeModules').KeyboardObserver;

  var dismissKeyboard = require(_dependencyMap[4], 'dismissKeyboard');

  var KeyboardEventEmitter = new NativeEventEmitter(KeyboardObserver);
  var Keyboard = {
    addListener: function addListener(eventName, callback) {
      invariant(false, 'Dummy method used for documentation');
    },
    removeListener: function removeListener(eventName, callback) {
      invariant(false, 'Dummy method used for documentation');
    },
    removeAllListeners: function removeAllListeners(eventName) {
      invariant(false, 'Dummy method used for documentation');
    },
    dismiss: function dismiss() {
      invariant(false, 'Dummy method used for documentation');
    },
    scheduleLayoutAnimation: function scheduleLayoutAnimation(event) {
      invariant(false, 'Dummy method used for documentation');
    }
  };
  Keyboard = KeyboardEventEmitter;
  Keyboard.dismiss = dismissKeyboard;

  Keyboard.scheduleLayoutAnimation = function (event) {
    var duration = event.duration,
        easing = event.easing;

    if (duration) {
      LayoutAnimation.configureNext({
        duration: duration,
        update: {
          duration: duration,
          type: easing && LayoutAnimation.Types[easing] || 'keyboard'
        }
      });
    }
  };

  module.exports = Keyboard;
},228,[229,13,69,15,230],"Keyboard");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = require(_dependencyMap[0], 'prop-types');

  var UIManager = require(_dependencyMap[1], 'UIManager');

  var keyMirror = require(_dependencyMap[2], 'fbjs/lib/keyMirror');

  var checkPropTypes = PropTypes.checkPropTypes;
  var TypesEnum = {
    spring: true,
    linear: true,
    easeInEaseOut: true,
    easeIn: true,
    easeOut: true,
    keyboard: true
  };
  var Types = keyMirror(TypesEnum);
  var PropertiesEnum = {
    opacity: true,
    scaleXY: true
  };
  var Properties = keyMirror(PropertiesEnum);
  var animType = PropTypes.shape({
    duration: PropTypes.number,
    delay: PropTypes.number,
    springDamping: PropTypes.number,
    initialVelocity: PropTypes.number,
    type: PropTypes.oneOf(Object.keys(Types)).isRequired,
    property: PropTypes.oneOf(Object.keys(Properties))
  });
  var configType = PropTypes.shape({
    duration: PropTypes.number.isRequired,
    create: animType,
    update: animType,
    delete: animType
  });

  function checkConfig(config, location, name) {
    checkPropTypes({
      config: configType
    }, {
      config: config
    }, location, name);
  }

  function configureNext(config, onAnimationDidEnd) {
    if (__DEV__) {
      checkConfig(config, 'config', 'LayoutAnimation.configureNext');
    }

    UIManager.configureNextLayoutAnimation(config, onAnimationDidEnd || function () {}, function () {});
  }

  function create(duration, type, creationProp) {
    return {
      duration: duration,
      create: {
        type: type,
        property: creationProp
      },
      update: {
        type: type
      },
      delete: {
        type: type,
        property: creationProp
      }
    };
  }

  var Presets = {
    easeInEaseOut: create(300, Types.easeInEaseOut, Properties.opacity),
    linear: create(500, Types.linear, Properties.opacity),
    spring: {
      duration: 700,
      create: {
        type: Types.linear,
        property: Properties.opacity
      },
      update: {
        type: Types.spring,
        springDamping: 0.4
      },
      delete: {
        type: Types.linear,
        property: Properties.opacity
      }
    }
  };
  var LayoutAnimation = {
    configureNext: configureNext,
    create: create,
    Types: Types,
    Properties: Properties,
    checkConfig: checkConfig,
    Presets: Presets,
    easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
    linear: configureNext.bind(null, Presets.linear),
    spring: configureNext.bind(null, Presets.spring)
  };
  module.exports = LayoutAnimation;
},229,[127,107,150],"LayoutAnimation");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var TextInputState = require(_dependencyMap[0], 'TextInputState');

  function dismissKeyboard() {
    TextInputState.blurTextInput(TextInputState.currentlyFocusedField());
  }

  module.exports = dismissKeyboard;
},230,[115],"dismissKeyboard");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Subscribable = {};
  Subscribable.Mixin = {
    componentWillMount: function componentWillMount() {
      this._subscribableSubscriptions = [];
    },
    componentWillUnmount: function componentWillUnmount() {
      this._subscribableSubscriptions.forEach(function (subscription) {
        return subscription.remove();
      });

      this._subscribableSubscriptions = null;
    },
    addListenerOn: function addListenerOn(eventEmitter, eventType, listener, context) {
      this._subscribableSubscriptions.push(eventEmitter.addListener(eventType, listener, context));
    }
  };
  module.exports = Subscribable;
},231,[],"Subscribable");
__d(function (global, require, module, exports, _dependencyMap) {
  "use strict";

  var nullthrows = function nullthrows(x) {
    if (x != null) {
      return x;
    }

    throw new Error("Got unexpected null or undefined");
  };

  module.exports = nullthrows;
},232,[],"fbjs/lib/nullthrows.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactNativeComponentTree;
},233,[21],"ReactNativeComponentTree");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js";

  var Animated = require(_dependencyMap[0], 'Animated');

  var React = require(_dependencyMap[1], 'React');

  var StyleSheet = require(_dependencyMap[2], 'StyleSheet');

  var ScrollViewStickyHeader = function (_React$Component) {
    babelHelpers.inherits(ScrollViewStickyHeader, _React$Component);

    function ScrollViewStickyHeader(props, context) {
      babelHelpers.classCallCheck(this, ScrollViewStickyHeader);

      var _this = babelHelpers.possibleConstructorReturn(this, (ScrollViewStickyHeader.__proto__ || Object.getPrototypeOf(ScrollViewStickyHeader)).call(this, props, context));

      _this._onLayout = function (event) {
        _this.setState({
          measured: true,
          layoutY: event.nativeEvent.layout.y,
          layoutHeight: event.nativeEvent.layout.height
        });

        _this.props.onLayout(event);

        var child = React.Children.only(_this.props.children);

        if (child.props.onLayout) {
          child.props.onLayout(event);
        }
      };

      _this.state = {
        measured: false,
        layoutY: 0,
        layoutHeight: 0,
        nextHeaderLayoutY: props.nextHeaderLayoutY
      };
      return _this;
    }

    babelHelpers.createClass(ScrollViewStickyHeader, [{
      key: "setNextHeaderY",
      value: function setNextHeaderY(y) {
        this.setState({
          nextHeaderLayoutY: y
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _state = this.state,
            measured = _state.measured,
            layoutHeight = _state.layoutHeight,
            layoutY = _state.layoutY,
            nextHeaderLayoutY = _state.nextHeaderLayoutY;
        var inputRange = [-1, 0];
        var outputRange = [0, 0];

        if (measured) {
          inputRange.push(layoutY);
          outputRange.push(0);
          var collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;

          if (collisionPoint >= layoutY) {
            inputRange.push(collisionPoint, collisionPoint + 1);
            outputRange.push(collisionPoint - layoutY, collisionPoint - layoutY);
          } else {
            inputRange.push(layoutY + 1);
            outputRange.push(1);
          }
        }

        var translateY = this.props.scrollAnimatedValue.interpolate({
          inputRange: inputRange,
          outputRange: outputRange
        });
        var child = React.Children.only(this.props.children);
        return React.createElement(
          Animated.View,
          {
            collapsable: false,
            onLayout: this._onLayout,
            style: [child.props.style, styles.header, {
              transform: [{
                translateY: translateY
              }]
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 96
            }
          },
          React.cloneElement(child, {
            style: styles.fill,
            onLayout: undefined
          })
        );
      }
    }]);
    return ScrollViewStickyHeader;
  }(React.Component);

  var styles = StyleSheet.create({
    header: {
      zIndex: 10
    },
    fill: {
      flex: 1
    }
  });
  module.exports = ScrollViewStickyHeader;
},234,[194,130,168],"ScrollViewStickyHeader");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function processDecelerationRate(decelerationRate) {
    if (decelerationRate === 'normal') {
      decelerationRate = 0.998;
    } else if (decelerationRate === 'fast') {
      decelerationRate = 0.99;
    }

    return decelerationRate;
  }

  module.exports = processDecelerationRate;
},235,[],"processDecelerationRate");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/CheckBox/CheckBox.android.js";

  var NativeMethodsMixin = require(_dependencyMap[0], 'NativeMethodsMixin');

  var PropTypes = require(_dependencyMap[1], 'prop-types');

  var React = require(_dependencyMap[2], 'React');

  var StyleSheet = require(_dependencyMap[3], 'StyleSheet');

  var ViewPropTypes = require(_dependencyMap[4], 'ViewPropTypes');

  var createReactClass = require(_dependencyMap[5], 'create-react-class');

  var requireNativeComponent = require(_dependencyMap[6], 'requireNativeComponent');

  var CheckBox = createReactClass({
    displayName: 'CheckBox',
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      value: PropTypes.bool,
      disabled: PropTypes.bool,
      onChange: PropTypes.func,
      onValueChange: PropTypes.func,
      testID: PropTypes.string
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        value: false,
        disabled: false
      };
    },
    mixins: [NativeMethodsMixin],
    _rctCheckBox: {},
    _onChange: function _onChange(event) {
      this._rctCheckBox.setNativeProps({
        value: this.props.value
      });

      this.props.onChange && this.props.onChange(event);
      this.props.onValueChange && this.props.onValueChange(event.nativeEvent.value);
    },
    render: function render() {
      var _this = this;

      var props = babelHelpers.extends({}, this.props);

      props.onStartShouldSetResponder = function () {
        return true;
      };

      props.onResponderTerminationRequest = function () {
        return false;
      };

      props.enabled = !this.props.disabled;
      props.on = this.props.value;
      props.style = [styles.rctCheckBox, this.props.style];
      return React.createElement(RCTCheckBox, babelHelpers.extends({}, props, {
        ref: function ref(_ref) {
          _this._rctCheckBox = _ref;
        },
        onChange: this._onChange,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 140
        }
      }));
    }
  });
  var styles = StyleSheet.create({
    rctCheckBox: {
      height: 32,
      width: 32
    }
  });
  var RCTCheckBox = requireNativeComponent('AndroidCheckBox', CheckBox, {
    nativeOnly: {
      onChange: true,
      on: true,
      enabled: true
    }
  });
  module.exports = CheckBox;
},236,[125,127,130,168,131,172,145],"CheckBox");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/DatePicker/DatePickerIOS.android.js";

  var React = require(_dependencyMap[0], 'React');

  var StyleSheet = require(_dependencyMap[1], 'StyleSheet');

  var Text = require(_dependencyMap[2], 'Text');

  var View = require(_dependencyMap[3], 'View');

  var DummyDatePickerIOS = function (_React$Component) {
    babelHelpers.inherits(DummyDatePickerIOS, _React$Component);

    function DummyDatePickerIOS() {
      babelHelpers.classCallCheck(this, DummyDatePickerIOS);
      return babelHelpers.possibleConstructorReturn(this, (DummyDatePickerIOS.__proto__ || Object.getPrototypeOf(DummyDatePickerIOS)).apply(this, arguments));
    }

    babelHelpers.createClass(DummyDatePickerIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: [styles.dummyDatePickerIOS, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 22
            }
          },
          React.createElement(
            Text,
            {
              style: styles.datePickerText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 23
              }
            },
            "DatePickerIOS is not supported on this platform!"
          )
        );
      }
    }]);
    return DummyDatePickerIOS;
  }(React.Component);

  var styles = StyleSheet.create({
    dummyDatePickerIOS: {
      height: 100,
      width: 300,
      backgroundColor: '#ffbcbc',
      borderWidth: 1,
      borderColor: 'red',
      alignItems: 'center',
      justifyContent: 'center',
      margin: 10
    },
    datePickerText: {
      color: '#333333',
      margin: 20
    }
  });
  module.exports = DummyDatePickerIOS;
},237,[130,168,181,170],"DatePickerIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.android.js";

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var NativeMethodsMixin = require(_dependencyMap[1], 'NativeMethodsMixin');

  var Platform = require(_dependencyMap[2], 'Platform');

  var React = require(_dependencyMap[3], 'React');

  var PropTypes = require(_dependencyMap[4], 'prop-types');

  var ReactNative = require(_dependencyMap[5], 'ReactNative');

  var StatusBar = require(_dependencyMap[6], 'StatusBar');

  var StyleSheet = require(_dependencyMap[7], 'StyleSheet');

  var UIManager = require(_dependencyMap[8], 'UIManager');

  var View = require(_dependencyMap[9], 'View');

  var ViewPropTypes = require(_dependencyMap[10], 'ViewPropTypes');

  var DrawerConsts = UIManager.AndroidDrawerLayout.Constants;

  var createReactClass = require(_dependencyMap[11], 'create-react-class');

  var dismissKeyboard = require(_dependencyMap[12], 'dismissKeyboard');

  var requireNativeComponent = require(_dependencyMap[13], 'requireNativeComponent');

  var RK_DRAWER_REF = 'drawerlayout';
  var INNERVIEW_REF = 'innerView';
  var DRAWER_STATES = ['Idle', 'Dragging', 'Settling'];
  var DrawerLayoutAndroid = createReactClass({
    displayName: 'DrawerLayoutAndroid',
    statics: {
      positions: DrawerConsts.DrawerPosition
    },
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      keyboardDismissMode: PropTypes.oneOf(['none', 'on-drag']),
      drawerBackgroundColor: ColorPropType,
      drawerPosition: PropTypes.oneOf([DrawerConsts.DrawerPosition.Left, DrawerConsts.DrawerPosition.Right]),
      drawerWidth: PropTypes.number,
      drawerLockMode: PropTypes.oneOf(['unlocked', 'locked-closed', 'locked-open']),
      onDrawerSlide: PropTypes.func,
      onDrawerStateChanged: PropTypes.func,
      onDrawerOpen: PropTypes.func,
      onDrawerClose: PropTypes.func,
      renderNavigationView: PropTypes.func.isRequired,
      statusBarBackgroundColor: ColorPropType
    }),
    mixins: [NativeMethodsMixin],
    getDefaultProps: function getDefaultProps() {
      return {
        drawerBackgroundColor: 'white'
      };
    },
    getInitialState: function getInitialState() {
      return {
        statusBarBackgroundColor: undefined
      };
    },
    getInnerViewNode: function getInnerViewNode() {
      return this.refs[INNERVIEW_REF].getInnerViewNode();
    },
    render: function render() {
      var drawStatusBar = Platform.Version >= 21 && this.props.statusBarBackgroundColor;
      var drawerViewWrapper = React.createElement(
        View,
        {
          style: [styles.drawerSubview, {
            width: this.props.drawerWidth,
            backgroundColor: this.props.drawerBackgroundColor
          }],
          collapsable: false,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 176
          }
        },
        this.props.renderNavigationView(),
        drawStatusBar && React.createElement(View, {
          style: styles.drawerStatusBar,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 183
          }
        })
      );
      var childrenWrapper = React.createElement(
        View,
        {
          ref: INNERVIEW_REF,
          style: styles.mainSubview,
          collapsable: false,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 186
          }
        },
        drawStatusBar && React.createElement(StatusBar, {
          translucent: true,
          backgroundColor: this.props.statusBarBackgroundColor,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 188
          }
        }),
        drawStatusBar && React.createElement(View, {
          style: [styles.statusBar, {
            backgroundColor: this.props.statusBarBackgroundColor
          }],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 193
          }
        }),
        this.props.children
      );
      return React.createElement(
        AndroidDrawerLayout,
        babelHelpers.extends({}, this.props, {
          ref: RK_DRAWER_REF,
          drawerWidth: this.props.drawerWidth,
          drawerPosition: this.props.drawerPosition,
          drawerLockMode: this.props.drawerLockMode,
          style: [styles.base, this.props.style],
          onDrawerSlide: this._onDrawerSlide,
          onDrawerOpen: this._onDrawerOpen,
          onDrawerClose: this._onDrawerClose,
          onDrawerStateChanged: this._onDrawerStateChanged,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 200
          }
        }),
        childrenWrapper,
        drawerViewWrapper
      );
    },
    _onDrawerSlide: function _onDrawerSlide(event) {
      if (this.props.onDrawerSlide) {
        this.props.onDrawerSlide(event);
      }

      if (this.props.keyboardDismissMode === 'on-drag') {
        dismissKeyboard();
      }
    },
    _onDrawerOpen: function _onDrawerOpen() {
      if (this.props.onDrawerOpen) {
        this.props.onDrawerOpen();
      }
    },
    _onDrawerClose: function _onDrawerClose() {
      if (this.props.onDrawerClose) {
        this.props.onDrawerClose();
      }
    },
    _onDrawerStateChanged: function _onDrawerStateChanged(event) {
      if (this.props.onDrawerStateChanged) {
        this.props.onDrawerStateChanged(DRAWER_STATES[event.nativeEvent.drawerState]);
      }
    },
    openDrawer: function openDrawer() {
      UIManager.dispatchViewManagerCommand(this._getDrawerLayoutHandle(), UIManager.AndroidDrawerLayout.Commands.openDrawer, null);
    },
    closeDrawer: function closeDrawer() {
      UIManager.dispatchViewManagerCommand(this._getDrawerLayoutHandle(), UIManager.AndroidDrawerLayout.Commands.closeDrawer, null);
    },
    _getDrawerLayoutHandle: function _getDrawerLayoutHandle() {
      return ReactNative.findNodeHandle(this.refs[RK_DRAWER_REF]);
    }
  });
  var styles = StyleSheet.create({
    base: {
      flex: 1,
      elevation: 16
    },
    mainSubview: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    drawerSubview: {
      position: 'absolute',
      top: 0,
      bottom: 0
    },
    statusBar: {
      height: StatusBar.currentHeight
    },
    drawerStatusBar: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      height: StatusBar.currentHeight,
      backgroundColor: 'rgba(0, 0, 0, 0.251)'
    }
  });
  var AndroidDrawerLayout = requireNativeComponent('AndroidDrawerLayout', DrawerLayoutAndroid);
  module.exports = DrawerLayoutAndroid;
},238,[123,125,52,130,127,21,239,168,107,170,131,172,230,145],"DrawerLayoutAndroid");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var React = require(_dependencyMap[0], 'React');

  var PropTypes = require(_dependencyMap[1], 'prop-types');

  var ColorPropType = require(_dependencyMap[2], 'ColorPropType');

  var Platform = require(_dependencyMap[3], 'Platform');

  var processColor = require(_dependencyMap[4], 'processColor');

  var StatusBarManager = require(_dependencyMap[5], 'NativeModules').StatusBarManager;

  function mergePropsStack(propsStack, defaultValues) {
    return propsStack.reduce(function (prev, cur) {
      for (var prop in cur) {
        if (cur[prop] != null) {
          prev[prop] = cur[prop];
        }
      }

      return prev;
    }, babelHelpers.extends({}, defaultValues));
  }

  function createStackEntry(props) {
    return {
      backgroundColor: props.backgroundColor != null ? {
        value: props.backgroundColor,
        animated: props.animated
      } : null,
      barStyle: props.barStyle != null ? {
        value: props.barStyle,
        animated: props.animated
      } : null,
      translucent: props.translucent,
      hidden: props.hidden != null ? {
        value: props.hidden,
        animated: props.animated,
        transition: props.showHideTransition
      } : null,
      networkActivityIndicatorVisible: props.networkActivityIndicatorVisible
    };
  }

  var StatusBar = function (_React$Component) {
    babelHelpers.inherits(StatusBar, _React$Component);

    function StatusBar() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, StatusBar);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = StatusBar.__proto__ || Object.getPrototypeOf(StatusBar)).call.apply(_ref, [this].concat(args))), _this), _this._stackEntry = null, _this._updatePropsStack = function () {
        clearImmediate(StatusBar._updateImmediate);
        StatusBar._updateImmediate = setImmediate(function () {
          var oldProps = StatusBar._currentValues;
          var mergedProps = mergePropsStack(StatusBar._propsStack, StatusBar._defaultProps);

          if (Platform.OS === 'ios') {
            if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
              StatusBarManager.setStyle(mergedProps.barStyle.value, mergedProps.barStyle.animated);
            }

            if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
              StatusBarManager.setHidden(mergedProps.hidden.value, mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none');
            }

            if (!oldProps || oldProps.networkActivityIndicatorVisible !== mergedProps.networkActivityIndicatorVisible) {
              StatusBarManager.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);
            }
          } else if (Platform.OS === 'android') {
            if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
              StatusBarManager.setStyle(mergedProps.barStyle.value);
            }

            if (!oldProps || oldProps.backgroundColor.value !== mergedProps.backgroundColor.value) {
              StatusBarManager.setColor(processColor(mergedProps.backgroundColor.value), mergedProps.backgroundColor.animated);
            }

            if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
              StatusBarManager.setHidden(mergedProps.hidden.value);
            }

            if (!oldProps || oldProps.translucent !== mergedProps.translucent) {
              StatusBarManager.setTranslucent(mergedProps.translucent);
            }
          }

          StatusBar._currentValues = mergedProps;
        });
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(StatusBar, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._stackEntry = createStackEntry(this.props);

        StatusBar._propsStack.push(this._stackEntry);

        this._updatePropsStack();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var index = StatusBar._propsStack.indexOf(this._stackEntry);

        StatusBar._propsStack.splice(index, 1);

        this._updatePropsStack();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        var index = StatusBar._propsStack.indexOf(this._stackEntry);

        this._stackEntry = createStackEntry(this.props);
        StatusBar._propsStack[index] = this._stackEntry;

        this._updatePropsStack();
      }
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }], [{
      key: "setHidden",
      value: function setHidden(hidden, animation) {
        animation = animation || 'none';
        StatusBar._defaultProps.hidden.value = hidden;

        if (Platform.OS === 'ios') {
          StatusBarManager.setHidden(hidden, animation);
        } else if (Platform.OS === 'android') {
          StatusBarManager.setHidden(hidden);
        }
      }
    }, {
      key: "setBarStyle",
      value: function setBarStyle(style, animated) {
        animated = animated || false;
        StatusBar._defaultProps.barStyle.value = style;

        if (Platform.OS === 'ios') {
          StatusBarManager.setStyle(style, animated);
        } else if (Platform.OS === 'android') {
          StatusBarManager.setStyle(style);
        }
      }
    }, {
      key: "setNetworkActivityIndicatorVisible",
      value: function setNetworkActivityIndicatorVisible(visible) {
        if (Platform.OS !== 'ios') {
          console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');
          return;
        }

        StatusBar._defaultProps.networkActivityIndicatorVisible = visible;
        StatusBarManager.setNetworkActivityIndicatorVisible(visible);
      }
    }, {
      key: "setBackgroundColor",
      value: function setBackgroundColor(color, animated) {
        if (Platform.OS !== 'android') {
          console.warn('`setBackgroundColor` is only available on Android');
          return;
        }

        animated = animated || false;
        StatusBar._defaultProps.backgroundColor.value = color;
        StatusBarManager.setColor(processColor(color), animated);
      }
    }, {
      key: "setTranslucent",
      value: function setTranslucent(translucent) {
        if (Platform.OS !== 'android') {
          console.warn('`setTranslucent` is only available on Android');
          return;
        }

        StatusBar._defaultProps.translucent = translucent;
        StatusBarManager.setTranslucent(translucent);
      }
    }]);
    return StatusBar;
  }(React.Component);

  StatusBar._propsStack = [];
  StatusBar._defaultProps = createStackEntry({
    animated: false,
    showHideTransition: 'fade',
    backgroundColor: 'black',
    barStyle: 'default',
    translucent: false,
    hidden: false,
    networkActivityIndicatorVisible: false
  });
  StatusBar._updateImmediate = null;
  StatusBar._currentValues = null;
  StatusBar.currentHeight = StatusBarManager.HEIGHT;
  StatusBar.propTypes = {
    hidden: PropTypes.bool,
    animated: PropTypes.bool,
    backgroundColor: ColorPropType,
    translucent: PropTypes.bool,
    barStyle: PropTypes.oneOf(['default', 'light-content', 'dark-content']),
    networkActivityIndicatorVisible: PropTypes.bool,
    showHideTransition: PropTypes.oneOf(['fade', 'slide'])
  };
  StatusBar.defaultProps = {
    animated: false,
    showHideTransition: 'fade'
  };
  module.exports = StatusBar;
},239,[130,127,123,52,152,15],"StatusBar");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Lists/FlatList.js";

  var MetroListView = require(_dependencyMap[0], 'MetroListView');

  var React = require(_dependencyMap[1], 'React');

  var View = require(_dependencyMap[2], 'View');

  var VirtualizedList = require(_dependencyMap[3], 'VirtualizedList');

  var ListView = require(_dependencyMap[4], 'ListView');

  var invariant = require(_dependencyMap[5], 'fbjs/lib/invariant');

  var defaultProps = babelHelpers.extends({}, VirtualizedList.defaultProps, {
    numColumns: 1
  });

  var FlatList = function (_React$PureComponent) {
    babelHelpers.inherits(FlatList, _React$PureComponent);
    babelHelpers.createClass(FlatList, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        if (this._listRef) {
          this._listRef.scrollToEnd(params);
        }
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        if (this._listRef) {
          this._listRef.scrollToIndex(params);
        }
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        if (this._listRef) {
          this._listRef.scrollToItem(params);
        }
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        if (this._listRef) {
          this._listRef.scrollToOffset(params);
        }
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        if (this._listRef) {
          this._listRef.recordInteraction();
        }
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        if (this._listRef) {
          this._listRef.flashScrollIndicators();
        }
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._listRef) {
          return this._listRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        if (this._listRef) {
          return this._listRef.getScrollableNode();
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._listRef) {
          this._listRef.setNativeProps(props);
        }
      }
    }, {
      key: "componentWillMount",
      value: function componentWillMount() {
        this._checkProps(this.props);
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        invariant(nextProps.numColumns === this.props.numColumns, 'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' + 'changing the number of columns to force a fresh render of the component.');
        invariant(nextProps.onViewableItemsChanged === this.props.onViewableItemsChanged, 'Changing onViewableItemsChanged on the fly is not supported');
        invariant(nextProps.viewabilityConfig === this.props.viewabilityConfig, 'Changing viewabilityConfig on the fly is not supported');
        invariant(nextProps.viewabilityConfigCallbackPairs === this.props.viewabilityConfigCallbackPairs, 'Changing viewabilityConfigCallbackPairs on the fly is not supported');

        this._checkProps(nextProps);
      }
    }]);

    function FlatList(props) {
      babelHelpers.classCallCheck(this, FlatList);

      var _this = babelHelpers.possibleConstructorReturn(this, (FlatList.__proto__ || Object.getPrototypeOf(FlatList)).call(this, props));

      _this._hasWarnedLegacy = false;
      _this._virtualizedListPairs = [];

      _this._captureRef = function (ref) {
        _this._listRef = ref;
      };

      _this._getItem = function (data, index) {
        var numColumns = _this.props.numColumns;

        if (numColumns > 1) {
          var ret = [];

          for (var kk = 0; kk < numColumns; kk++) {
            var _item = data[index * numColumns + kk];
            _item && ret.push(_item);
          }

          return ret;
        } else {
          return data[index];
        }
      };

      _this._getItemCount = function (data) {
        return data ? Math.ceil(data.length / _this.props.numColumns) : 0;
      };

      _this._keyExtractor = function (items, index) {
        var _this$props = _this.props,
            keyExtractor = _this$props.keyExtractor,
            numColumns = _this$props.numColumns;

        if (numColumns > 1) {
          invariant(Array.isArray(items), 'FlatList: Encountered internal consistency error, expected each item to consist of an ' + 'array with 1-%s columns; instead, received a single item.', numColumns);
          return items.map(function (it, kk) {
            return keyExtractor(it, index * numColumns + kk);
          }).join(':');
        } else {
          return keyExtractor(items, index);
        }
      };

      _this._renderItem = function (info) {
        var _this$props2 = _this.props,
            renderItem = _this$props2.renderItem,
            numColumns = _this$props2.numColumns,
            columnWrapperStyle = _this$props2.columnWrapperStyle;

        if (numColumns > 1) {
          var _item2 = info.item,
              _index = info.index;
          invariant(Array.isArray(_item2), 'Expected array of items with numColumns > 1');
          return React.createElement(
            View,
            {
              style: [{
                flexDirection: 'row'
              }, columnWrapperStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 613
              }
            },
            _item2.map(function (it, kk) {
              var element = renderItem({
                item: it,
                index: _index * numColumns + kk,
                separators: info.separators
              });
              return element && React.cloneElement(element, {
                key: kk
              });
            })
          );
        } else {
          return renderItem(info);
        }
      };

      if (_this.props.viewabilityConfigCallbackPairs) {
        _this._virtualizedListPairs = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
          return {
            viewabilityConfig: pair.viewabilityConfig,
            onViewableItemsChanged: _this._createOnViewableItemsChanged(pair.onViewableItemsChanged)
          };
        });
      } else if (_this.props.onViewableItemsChanged) {
        _this._virtualizedListPairs.push({
          viewabilityConfig: _this.props.viewabilityConfig,
          onViewableItemsChanged: _this._createOnViewableItemsChanged(_this.props.onViewableItemsChanged)
        });
      }

      return _this;
    }

    babelHelpers.createClass(FlatList, [{
      key: "_checkProps",
      value: function _checkProps(props) {
        var getItem = props.getItem,
            getItemCount = props.getItemCount,
            horizontal = props.horizontal,
            legacyImplementation = props.legacyImplementation,
            numColumns = props.numColumns,
            columnWrapperStyle = props.columnWrapperStyle,
            onViewableItemsChanged = props.onViewableItemsChanged,
            viewabilityConfigCallbackPairs = props.viewabilityConfigCallbackPairs;
        invariant(!getItem && !getItemCount, 'FlatList does not support custom data formats.');

        if (numColumns > 1) {
          invariant(!horizontal, 'numColumns does not support horizontal.');
        } else {
          invariant(!columnWrapperStyle, 'columnWrapperStyle not supported for single column lists');
        }

        if (legacyImplementation) {
          invariant(numColumns === 1, 'Legacy list does not support multiple columns.');

          if (!this._hasWarnedLegacy) {
            console.warn('FlatList: Using legacyImplementation - some features not supported and performance ' + 'may suffer');
            this._hasWarnedLegacy = true;
          }
        }

        invariant(!(onViewableItemsChanged && viewabilityConfigCallbackPairs), 'FlatList does not support setting both onViewableItemsChanged and ' + 'viewabilityConfigCallbackPairs.');
      }
    }, {
      key: "_pushMultiColumnViewable",
      value: function _pushMultiColumnViewable(arr, v) {
        var _props = this.props,
            numColumns = _props.numColumns,
            keyExtractor = _props.keyExtractor;
        v.item.forEach(function (item, ii) {
          invariant(v.index != null, 'Missing index!');
          var index = v.index * numColumns + ii;
          arr.push(babelHelpers.extends({}, v, {
            item: item,
            key: keyExtractor(item, index),
            index: index
          }));
        });
      }
    }, {
      key: "_createOnViewableItemsChanged",
      value: function _createOnViewableItemsChanged(onViewableItemsChanged) {
        var _this2 = this;

        return function (info) {
          var numColumns = _this2.props.numColumns;

          if (onViewableItemsChanged) {
            if (numColumns > 1) {
              var _changed = [];
              var _viewableItems = [];
              info.viewableItems.forEach(function (v) {
                return _this2._pushMultiColumnViewable(_viewableItems, v);
              });
              info.changed.forEach(function (v) {
                return _this2._pushMultiColumnViewable(_changed, v);
              });
              onViewableItemsChanged({
                viewableItems: _viewableItems,
                changed: _changed
              });
            } else {
              onViewableItemsChanged(info);
            }
          }
        };
      }
    }, {
      key: "render",
      value: function render() {
        if (this.props.legacyImplementation) {
          return React.createElement(MetroListView, babelHelpers.extends({}, this.props, {
            items: this.props.data,
            ref: this._captureRef,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 632
            }
          }));
        } else {
          return React.createElement(VirtualizedList, babelHelpers.extends({}, this.props, {
            renderItem: this._renderItem,
            getItem: this._getItem,
            getItemCount: this._getItemCount,
            keyExtractor: this._keyExtractor,
            ref: this._captureRef,
            viewabilityConfigCallbackPairs: this._virtualizedListPairs,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 640
            }
          }));
        }
      }
    }]);
    return FlatList;
  }(React.PureComponent);

  FlatList.defaultProps = defaultProps;
  module.exports = FlatList;
},240,[241,130,170,248,242,13],"FlatList");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Lists/MetroListView.js";

  var ListView = require(_dependencyMap[0], 'ListView');

  var React = require(_dependencyMap[1], 'React');

  var RefreshControl = require(_dependencyMap[2], 'RefreshControl');

  var ScrollView = require(_dependencyMap[3], 'ScrollView');

  var invariant = require(_dependencyMap[4], 'fbjs/lib/invariant');

  var MetroListView = function (_React$Component) {
    babelHelpers.inherits(MetroListView, _React$Component);

    function MetroListView() {
      var _ref,
          _this2 = this;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, MetroListView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = MetroListView.__proto__ || Object.getPrototypeOf(MetroListView)).call.apply(_ref, [this].concat(args))), _this), _this.state = _this._computeState(_this.props, {
        ds: new ListView.DataSource({
          rowHasChanged: function rowHasChanged(itemA, itemB) {
            return true;
          },
          sectionHeaderHasChanged: function sectionHeaderHasChanged() {
            return true;
          },
          getSectionHeaderData: function getSectionHeaderData(dataBlob, sectionID) {
            return _this.state.sectionHeaderData[sectionID];
          }
        }),
        sectionHeaderData: {}
      }), _this._captureRef = function (ref) {
        _this._listRef = ref;
      }, _this._renderFooter = function () {
        return React.createElement(_this2.props.FooterComponent, {
          key: "$footer",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 183
          }
        });
      }, _this._renderRow = function (item, sectionID, rowID, highlightRow) {
        return _this.props.renderItem({
          item: item,
          index: rowID
        });
      }, _this._renderSectionHeader = function (section, sectionID) {
        var renderSectionHeader = _this.props.renderSectionHeader;
        invariant(renderSectionHeader, 'Must provide renderSectionHeader with sections prop');
        return renderSectionHeader({
          section: section
        });
      }, _this._renderSeparator = function (sID, rID) {
        return React.createElement(_this2.props.SeparatorComponent, {
          key: sID + rID,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 199
          }
        });
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(MetroListView, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        throw new Error('scrollToEnd not supported in legacy ListView.');
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        throw new Error('scrollToIndex not supported in legacy ListView.');
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        throw new Error('scrollToItem not supported in legacy ListView.');
      }
    }, {
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        throw new Error('scrollToLocation not supported in legacy ListView.');
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        var animated = params.animated,
            offset = params.offset;

        this._listRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "getListRef",
      value: function getListRef() {
        return this._listRef;
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._listRef) {
          this._listRef.setNativeProps(props);
        }
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(newProps) {
        var _this3 = this;

        this.setState(function (state) {
          return _this3._computeState(newProps, state);
        });
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(ListView, babelHelpers.extends({}, this.props, {
          dataSource: this.state.ds,
          ref: this._captureRef,
          renderRow: this._renderRow,
          renderFooter: this.props.FooterComponent && this._renderFooter,
          renderSectionHeader: this.props.sections && this._renderSectionHeader,
          renderSeparator: this.props.SeparatorComponent && this._renderSeparator,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 143
          }
        }));
      }
    }, {
      key: "_computeState",
      value: function _computeState(props, state) {
        var sectionHeaderData = {};

        if (props.sections) {
          invariant(!props.items, 'Cannot have both sections and items props.');
          var _sections = {};
          props.sections.forEach(function (sectionIn, ii) {
            var sectionID = 's' + ii;
            _sections[sectionID] = sectionIn.data;
            sectionHeaderData[sectionID] = sectionIn;
          });
          return {
            ds: state.ds.cloneWithRowsAndSections(_sections),
            sectionHeaderData: sectionHeaderData
          };
        } else {
          invariant(!props.sections, 'Cannot have both sections and items props.');
          return {
            ds: state.ds.cloneWithRows(props.items),
            sectionHeaderData: sectionHeaderData
          };
        }
      }
    }]);
    return MetroListView;
  }(React.Component);

  MetroListView.defaultProps = {
    keyExtractor: function keyExtractor(item, index) {
      return item.key || String(index);
    },
    renderScrollComponent: function renderScrollComponent(props) {
      if (props.onRefresh) {
        return React.createElement(ScrollView, babelHelpers.extends({}, props, {
          refreshControl: React.createElement(RefreshControl, {
            refreshing: props.refreshing,
            onRefresh: props.onRefresh,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 117
            }
          }),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 110
          }
        }));
      } else {
        return React.createElement(ScrollView, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 125
          }
        }));
      }
    }
  };
  module.exports = MetroListView;
},241,[242,130,247,224,13],"MetroListView");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Lists/ListView/ListView.js";

  var ListViewDataSource = require(_dependencyMap[0], 'ListViewDataSource');

  var Platform = require(_dependencyMap[1], 'Platform');

  var React = require(_dependencyMap[2], 'React');

  var PropTypes = require(_dependencyMap[3], 'prop-types');

  var ReactNative = require(_dependencyMap[4], 'ReactNative');

  var RCTScrollViewManager = require(_dependencyMap[5], 'NativeModules').ScrollViewManager;

  var ScrollView = require(_dependencyMap[6], 'ScrollView');

  var ScrollResponder = require(_dependencyMap[7], 'ScrollResponder');

  var StaticRenderer = require(_dependencyMap[8], 'StaticRenderer');

  var TimerMixin = require(_dependencyMap[9], 'react-timer-mixin');

  var View = require(_dependencyMap[10], 'View');

  var cloneReferencedElement = require(_dependencyMap[11], 'react-clone-referenced-element');

  var createReactClass = require(_dependencyMap[12], 'create-react-class');

  var isEmpty = require(_dependencyMap[13], 'isEmpty');

  var merge = require(_dependencyMap[14], 'merge');

  var DEFAULT_PAGE_SIZE = 1;
  var DEFAULT_INITIAL_ROWS = 10;
  var DEFAULT_SCROLL_RENDER_AHEAD = 1000;
  var DEFAULT_END_REACHED_THRESHOLD = 1000;
  var DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;
  var ListView = createReactClass({
    displayName: 'ListView',
    _childFrames: [],
    _sentEndForContentLength: null,
    _scrollComponent: null,
    _prevRenderedRowsCount: 0,
    _visibleRows: {},
    scrollProperties: {},
    mixins: [ScrollResponder.Mixin, TimerMixin],
    statics: {
      DataSource: ListViewDataSource
    },
    propTypes: babelHelpers.extends({}, ScrollView.propTypes, {
      dataSource: PropTypes.instanceOf(ListViewDataSource).isRequired,
      renderSeparator: PropTypes.func,
      renderRow: PropTypes.func.isRequired,
      initialListSize: PropTypes.number.isRequired,
      onEndReached: PropTypes.func,
      onEndReachedThreshold: PropTypes.number.isRequired,
      pageSize: PropTypes.number.isRequired,
      renderFooter: PropTypes.func,
      renderHeader: PropTypes.func,
      renderSectionHeader: PropTypes.func,
      renderScrollComponent: PropTypes.func.isRequired,
      scrollRenderAheadDistance: PropTypes.number.isRequired,
      onChangeVisibleRows: PropTypes.func,
      removeClippedSubviews: PropTypes.bool,
      stickySectionHeadersEnabled: PropTypes.bool,
      stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number).isRequired,
      enableEmptySections: PropTypes.bool
    }),
    getMetrics: function getMetrics() {
      return {
        contentLength: this.scrollProperties.contentLength,
        totalRows: this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount(),
        renderedRows: this.state.curRenderedRowsCount,
        visibleRows: Object.keys(this._visibleRows).length
      };
    },
    getScrollResponder: function getScrollResponder() {
      if (this._scrollComponent && this._scrollComponent.getScrollResponder) {
        return this._scrollComponent.getScrollResponder();
      }
    },
    getScrollableNode: function getScrollableNode() {
      if (this._scrollComponent && this._scrollComponent.getScrollableNode) {
        return this._scrollComponent.getScrollableNode();
      } else {
        return ReactNative.findNodeHandle(this._scrollComponent);
      }
    },
    scrollTo: function scrollTo() {
      if (this._scrollComponent && this._scrollComponent.scrollTo) {
        var _scrollComponent;

        (_scrollComponent = this._scrollComponent).scrollTo.apply(_scrollComponent, arguments);
      }
    },
    scrollToEnd: function scrollToEnd(options) {
      if (this._scrollComponent) {
        if (this._scrollComponent.scrollToEnd) {
          this._scrollComponent.scrollToEnd(options);
        } else {
          console.warn('The scroll component used by the ListView does not support ' + 'scrollToEnd. Check the renderScrollComponent prop of your ListView.');
        }
      }
    },
    flashScrollIndicators: function flashScrollIndicators() {
      if (this._scrollComponent && this._scrollComponent.flashScrollIndicators) {
        this._scrollComponent.flashScrollIndicators();
      }
    },
    setNativeProps: function setNativeProps(props) {
      if (this._scrollComponent) {
        this._scrollComponent.setNativeProps(props);
      }
    },
    getDefaultProps: function getDefaultProps() {
      return {
        initialListSize: DEFAULT_INITIAL_ROWS,
        pageSize: DEFAULT_PAGE_SIZE,
        renderScrollComponent: function renderScrollComponent(props) {
          return React.createElement(ScrollView, babelHelpers.extends({}, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 338
            }
          }));
        },
        scrollRenderAheadDistance: DEFAULT_SCROLL_RENDER_AHEAD,
        onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,
        stickySectionHeadersEnabled: Platform.OS === 'ios',
        stickyHeaderIndices: []
      };
    },
    getInitialState: function getInitialState() {
      return {
        curRenderedRowsCount: this.props.initialListSize,
        highlightedRow: {}
      };
    },
    getInnerViewNode: function getInnerViewNode() {
      return this._scrollComponent.getInnerViewNode();
    },
    componentWillMount: function componentWillMount() {
      this.scrollProperties = {
        visibleLength: null,
        contentLength: null,
        offset: 0
      };
      this._childFrames = [];
      this._visibleRows = {};
      this._prevRenderedRowsCount = 0;
      this._sentEndForContentLength = null;
    },
    componentDidMount: function componentDidMount() {
      var _this = this;

      this.requestAnimationFrame(function () {
        _this._measureAndUpdateScrollProps();
      });
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (this.props.dataSource !== nextProps.dataSource || this.props.initialListSize !== nextProps.initialListSize) {
        this.setState(function (state, props) {
          _this2._prevRenderedRowsCount = 0;
          return {
            curRenderedRowsCount: Math.min(Math.max(state.curRenderedRowsCount, props.initialListSize), props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount())
          };
        }, function () {
          return _this2._renderMoreRowsIfNeeded();
        });
      }
    },
    componentDidUpdate: function componentDidUpdate() {
      var _this3 = this;

      this.requestAnimationFrame(function () {
        _this3._measureAndUpdateScrollProps();
      });
    },
    _onRowHighlighted: function _onRowHighlighted(sectionID, rowID) {
      this.setState({
        highlightedRow: {
          sectionID: sectionID,
          rowID: rowID
        }
      });
    },
    render: function render() {
      var bodyComponents = [];
      var dataSource = this.props.dataSource;
      var allRowIDs = dataSource.rowIdentities;
      var rowCount = 0;
      var stickySectionHeaderIndices = [];
      var renderSectionHeader = this.props.renderSectionHeader;
      var header = this.props.renderHeader && this.props.renderHeader();
      var footer = this.props.renderFooter && this.props.renderFooter();
      var totalIndex = header ? 1 : 0;

      for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
        var sectionID = dataSource.sectionIdentities[sectionIdx];
        var rowIDs = allRowIDs[sectionIdx];

        if (rowIDs.length === 0) {
          if (this.props.enableEmptySections === undefined) {
            var warning = require(_dependencyMap[15], 'fbjs/lib/warning');

            warning(false, 'In next release empty section headers will be rendered.' + " In this release you can use 'enableEmptySections' flag to render empty section headers.");
            continue;
          } else {
            var invariant = require(_dependencyMap[16], 'fbjs/lib/invariant');

            invariant(this.props.enableEmptySections, "In next release 'enableEmptySections' flag will be deprecated, empty section headers will always be rendered." + ' If empty section headers are not desirable their indices should be excluded from sectionIDs object.' + " In this release 'enableEmptySections' may only have value 'true' to allow empty section headers rendering.");
          }
        }

        if (renderSectionHeader) {
          var element = renderSectionHeader(dataSource.getSectionHeaderData(sectionIdx), sectionID);

          if (element) {
            bodyComponents.push(React.cloneElement(element, {
              key: 's_' + sectionID
            }));

            if (this.props.stickySectionHeadersEnabled) {
              stickySectionHeaderIndices.push(totalIndex);
            }

            totalIndex++;
          }
        }

        for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
          var rowID = rowIDs[rowIdx];
          var comboID = sectionID + '_' + rowID;
          var shouldUpdateRow = rowCount >= this._prevRenderedRowsCount && dataSource.rowShouldUpdate(sectionIdx, rowIdx);
          var row = React.createElement(StaticRenderer, {
            key: 'r_' + comboID,
            shouldUpdate: !!shouldUpdateRow,
            render: this.props.renderRow.bind(null, dataSource.getRowData(sectionIdx, rowIdx), sectionID, rowID, this._onRowHighlighted),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 473
            }
          });
          bodyComponents.push(row);
          totalIndex++;

          if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
            var adjacentRowHighlighted = this.state.highlightedRow.sectionID === sectionID && (this.state.highlightedRow.rowID === rowID || this.state.highlightedRow.rowID === rowIDs[rowIdx + 1]);
            var separator = this.props.renderSeparator(sectionID, rowID, adjacentRowHighlighted);

            if (separator) {
              bodyComponents.push(React.createElement(
                View,
                {
                  key: 's_' + comboID,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 502
                  }
                },
                separator
              ));
              totalIndex++;
            }
          }

          if (++rowCount === this.state.curRenderedRowsCount) {
            break;
          }
        }

        if (rowCount >= this.state.curRenderedRowsCount) {
          break;
        }
      }

      var _props = this.props,
          renderScrollComponent = _props.renderScrollComponent,
          props = babelHelpers.objectWithoutProperties(_props, ["renderScrollComponent"]);

      if (!props.scrollEventThrottle) {
        props.scrollEventThrottle = DEFAULT_SCROLL_CALLBACK_THROTTLE;
      }

      if (props.removeClippedSubviews === undefined) {
        props.removeClippedSubviews = true;
      }

      babelHelpers.extends(props, {
        onScroll: this._onScroll,
        stickyHeaderIndices: this.props.stickyHeaderIndices.concat(stickySectionHeaderIndices),
        onKeyboardWillShow: undefined,
        onKeyboardWillHide: undefined,
        onKeyboardDidShow: undefined,
        onKeyboardDidHide: undefined
      });
      return cloneReferencedElement(renderScrollComponent(props), {
        ref: this._setScrollComponentRef,
        onContentSizeChange: this._onContentSizeChange,
        onLayout: this._onLayout,
        DEPRECATED_sendUpdatedChildFrames: typeof props.onChangeVisibleRows !== undefined
      }, header, bodyComponents, footer);
    },
    _measureAndUpdateScrollProps: function _measureAndUpdateScrollProps() {
      var scrollComponent = this.getScrollResponder();

      if (!scrollComponent || !scrollComponent.getInnerViewNode) {
        return;
      }

      RCTScrollViewManager && RCTScrollViewManager.calculateChildFrames && RCTScrollViewManager.calculateChildFrames(ReactNative.findNodeHandle(scrollComponent), this._updateVisibleRows);
    },
    _setScrollComponentRef: function _setScrollComponentRef(scrollComponent) {
      this._scrollComponent = scrollComponent;
    },
    _onContentSizeChange: function _onContentSizeChange(width, height) {
      var contentLength = !this.props.horizontal ? height : width;

      if (contentLength !== this.scrollProperties.contentLength) {
        this.scrollProperties.contentLength = contentLength;

        this._updateVisibleRows();

        this._renderMoreRowsIfNeeded();
      }

      this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
    },
    _onLayout: function _onLayout(event) {
      var _event$nativeEvent$la = event.nativeEvent.layout,
          width = _event$nativeEvent$la.width,
          height = _event$nativeEvent$la.height;
      var visibleLength = !this.props.horizontal ? height : width;

      if (visibleLength !== this.scrollProperties.visibleLength) {
        this.scrollProperties.visibleLength = visibleLength;

        this._updateVisibleRows();

        this._renderMoreRowsIfNeeded();
      }

      this.props.onLayout && this.props.onLayout(event);
    },
    _maybeCallOnEndReached: function _maybeCallOnEndReached(event) {
      if (this.props.onEndReached && this.scrollProperties.contentLength !== this._sentEndForContentLength && this._getDistanceFromEnd(this.scrollProperties) < this.props.onEndReachedThreshold && this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
        this._sentEndForContentLength = this.scrollProperties.contentLength;
        this.props.onEndReached(event);
        return true;
      }

      return false;
    },
    _renderMoreRowsIfNeeded: function _renderMoreRowsIfNeeded() {
      if (this.scrollProperties.contentLength === null || this.scrollProperties.visibleLength === null || this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
        this._maybeCallOnEndReached();

        return;
      }

      var distanceFromEnd = this._getDistanceFromEnd(this.scrollProperties);

      if (distanceFromEnd < this.props.scrollRenderAheadDistance) {
        this._pageInNewRows();
      }
    },
    _pageInNewRows: function _pageInNewRows() {
      var _this4 = this;

      this.setState(function (state, props) {
        var rowsToRender = Math.min(state.curRenderedRowsCount + props.pageSize, props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount());
        _this4._prevRenderedRowsCount = state.curRenderedRowsCount;
        return {
          curRenderedRowsCount: rowsToRender
        };
      }, function () {
        _this4._measureAndUpdateScrollProps();

        _this4._prevRenderedRowsCount = _this4.state.curRenderedRowsCount;
      });
    },
    _getDistanceFromEnd: function _getDistanceFromEnd(scrollProperties) {
      return scrollProperties.contentLength - scrollProperties.visibleLength - scrollProperties.offset;
    },
    _updateVisibleRows: function _updateVisibleRows(updatedFrames) {
      var _this5 = this;

      if (!this.props.onChangeVisibleRows) {
        return;
      }

      if (updatedFrames) {
        updatedFrames.forEach(function (newFrame) {
          _this5._childFrames[newFrame.index] = merge(newFrame);
        });
      }

      var isVertical = !this.props.horizontal;
      var dataSource = this.props.dataSource;
      var visibleMin = this.scrollProperties.offset;
      var visibleMax = visibleMin + this.scrollProperties.visibleLength;
      var allRowIDs = dataSource.rowIdentities;
      var header = this.props.renderHeader && this.props.renderHeader();
      var totalIndex = header ? 1 : 0;
      var visibilityChanged = false;
      var changedRows = {};

      for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
        var rowIDs = allRowIDs[sectionIdx];

        if (rowIDs.length === 0) {
          continue;
        }

        var sectionID = dataSource.sectionIdentities[sectionIdx];

        if (this.props.renderSectionHeader) {
          totalIndex++;
        }

        var visibleSection = this._visibleRows[sectionID];

        if (!visibleSection) {
          visibleSection = {};
        }

        for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
          var rowID = rowIDs[rowIdx];
          var frame = this._childFrames[totalIndex];
          totalIndex++;

          if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
            totalIndex++;
          }

          if (!frame) {
            break;
          }

          var rowVisible = visibleSection[rowID];
          var min = isVertical ? frame.y : frame.x;
          var max = min + (isVertical ? frame.height : frame.width);

          if (!min && !max || min === max) {
            break;
          }

          if (min > visibleMax || max < visibleMin) {
            if (rowVisible) {
              visibilityChanged = true;
              delete visibleSection[rowID];

              if (!changedRows[sectionID]) {
                changedRows[sectionID] = {};
              }

              changedRows[sectionID][rowID] = false;
            }
          } else if (!rowVisible) {
            visibilityChanged = true;
            visibleSection[rowID] = true;

            if (!changedRows[sectionID]) {
              changedRows[sectionID] = {};
            }

            changedRows[sectionID][rowID] = true;
          }
        }

        if (!isEmpty(visibleSection)) {
          this._visibleRows[sectionID] = visibleSection;
        } else if (this._visibleRows[sectionID]) {
          delete this._visibleRows[sectionID];
        }
      }

      visibilityChanged && this.props.onChangeVisibleRows(this._visibleRows, changedRows);
    },
    _onScroll: function _onScroll(e) {
      var isVertical = !this.props.horizontal;
      this.scrollProperties.visibleLength = e.nativeEvent.layoutMeasurement[isVertical ? 'height' : 'width'];
      this.scrollProperties.contentLength = e.nativeEvent.contentSize[isVertical ? 'height' : 'width'];
      this.scrollProperties.offset = e.nativeEvent.contentOffset[isVertical ? 'y' : 'x'];

      this._updateVisibleRows(e.nativeEvent.updatedChildFrames);

      if (!this._maybeCallOnEndReached(e)) {
        this._renderMoreRowsIfNeeded();
      }

      if (this.props.onEndReached && this._getDistanceFromEnd(this.scrollProperties) > this.props.onEndReachedThreshold) {
        this._sentEndForContentLength = null;
      }

      this.props.onScroll && this.props.onScroll(e);
    }
  });
  module.exports = ListView;
},242,[243,52,130,127,21,15,224,226,245,191,170,246,172,244,134,56,13],"ListView");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var isEmpty = require(_dependencyMap[1], 'isEmpty');

  var warning = require(_dependencyMap[2], 'fbjs/lib/warning');

  function defaultGetRowData(dataBlob, sectionID, rowID) {
    return dataBlob[sectionID][rowID];
  }

  function defaultGetSectionHeaderData(dataBlob, sectionID) {
    return dataBlob[sectionID];
  }

  var ListViewDataSource = function () {
    function ListViewDataSource(params) {
      babelHelpers.classCallCheck(this, ListViewDataSource);
      invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');
      this._rowHasChanged = params.rowHasChanged;
      this._getRowData = params.getRowData || defaultGetRowData;
      this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;
      this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;
      this._dataBlob = null;
      this._dirtyRows = [];
      this._dirtySections = [];
      this._cachedRowCount = 0;
      this.rowIdentities = [];
      this.sectionIdentities = [];
    }

    babelHelpers.createClass(ListViewDataSource, [{
      key: "cloneWithRows",
      value: function cloneWithRows(dataBlob, rowIdentities) {
        var rowIds = rowIdentities ? [[].concat(babelHelpers.toConsumableArray(rowIdentities))] : null;

        if (!this._sectionHeaderHasChanged) {
          this._sectionHeaderHasChanged = function () {
            return false;
          };
        }

        return this.cloneWithRowsAndSections({
          s1: dataBlob
        }, ['s1'], rowIds);
      }
    }, {
      key: "cloneWithRowsAndSections",
      value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
        invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');
        invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');
        var newSource = new ListViewDataSource({
          getRowData: this._getRowData,
          getSectionHeaderData: this._getSectionHeaderData,
          rowHasChanged: this._rowHasChanged,
          sectionHeaderHasChanged: this._sectionHeaderHasChanged
        });
        newSource._dataBlob = dataBlob;

        if (sectionIdentities) {
          newSource.sectionIdentities = sectionIdentities;
        } else {
          newSource.sectionIdentities = Object.keys(dataBlob);
        }

        if (rowIdentities) {
          newSource.rowIdentities = rowIdentities;
        } else {
          newSource.rowIdentities = [];
          newSource.sectionIdentities.forEach(function (sectionID) {
            newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));
          });
        }

        newSource._cachedRowCount = countRows(newSource.rowIdentities);

        newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);

        return newSource;
      }
    }, {
      key: "getRowCount",
      value: function getRowCount() {
        return this._cachedRowCount;
      }
    }, {
      key: "getRowAndSectionCount",
      value: function getRowAndSectionCount() {
        return this._cachedRowCount + this.sectionIdentities.length;
      }
    }, {
      key: "rowShouldUpdate",
      value: function rowShouldUpdate(sectionIndex, rowIndex) {
        var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];
        warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);
        return needsUpdate;
      }
    }, {
      key: "getRowData",
      value: function getRowData(sectionIndex, rowIndex) {
        var sectionID = this.sectionIdentities[sectionIndex];
        var rowID = this.rowIdentities[sectionIndex][rowIndex];
        warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);
        return this._getRowData(this._dataBlob, sectionID, rowID);
      }
    }, {
      key: "getRowIDForFlatIndex",
      value: function getRowIDForFlatIndex(index) {
        var accessIndex = index;

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          if (accessIndex >= this.rowIdentities[ii].length) {
            accessIndex -= this.rowIdentities[ii].length;
          } else {
            return this.rowIdentities[ii][accessIndex];
          }
        }

        return null;
      }
    }, {
      key: "getSectionIDForFlatIndex",
      value: function getSectionIDForFlatIndex(index) {
        var accessIndex = index;

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          if (accessIndex >= this.rowIdentities[ii].length) {
            accessIndex -= this.rowIdentities[ii].length;
          } else {
            return this.sectionIdentities[ii];
          }
        }

        return null;
      }
    }, {
      key: "getSectionLengths",
      value: function getSectionLengths() {
        var results = [];

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          results.push(this.rowIdentities[ii].length);
        }

        return results;
      }
    }, {
      key: "sectionHeaderShouldUpdate",
      value: function sectionHeaderShouldUpdate(sectionIndex) {
        var needsUpdate = this._dirtySections[sectionIndex];
        warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);
        return needsUpdate;
      }
    }, {
      key: "getSectionHeaderData",
      value: function getSectionHeaderData(sectionIndex) {
        if (!this._getSectionHeaderData) {
          return null;
        }

        var sectionID = this.sectionIdentities[sectionIndex];
        warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);
        return this._getSectionHeaderData(this._dataBlob, sectionID);
      }
    }, {
      key: "_calculateDirtyArrays",
      value: function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {
        var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);
        var prevRowsHash = {};

        for (var ii = 0; ii < prevRowIDs.length; ii++) {
          var sectionID = prevSectionIDs[ii];
          warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);
          prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);
        }

        this._dirtySections = [];
        this._dirtyRows = [];
        var dirty;

        for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {
          var sectionID = this.sectionIdentities[sIndex];
          dirty = !prevSectionsHash[sectionID];
          var sectionHeaderHasChanged = this._sectionHeaderHasChanged;

          if (!dirty && sectionHeaderHasChanged) {
            dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));
          }

          this._dirtySections.push(!!dirty);

          this._dirtyRows[sIndex] = [];

          for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {
            var rowID = this.rowIdentities[sIndex][rIndex];
            dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));

            this._dirtyRows[sIndex].push(!!dirty);
          }
        }
      }
    }]);
    return ListViewDataSource;
  }();

  function countRows(allRowIDs) {
    var totalRows = 0;

    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
      var rowIDs = allRowIDs[sectionIdx];
      totalRows += rowIDs.length;
    }

    return totalRows;
  }

  function keyedDictionaryFromArray(arr) {
    if (isEmpty(arr)) {
      return {};
    }

    var result = {};

    for (var ii = 0; ii < arr.length; ii++) {
      var key = arr[ii];
      warning(!result[key], 'Value appears more than once in array: ' + key);
      result[key] = true;
    }

    return result;
  }

  module.exports = ListViewDataSource;
},243,[13,244,56],"ListViewDataSource");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function isEmpty(obj) {
    if (Array.isArray(obj)) {
      return obj.length === 0;
    } else if (typeof obj === 'object') {
      for (var i in obj) {
        return false;
      }

      return true;
    } else {
      return !obj;
    }
  }

  module.exports = isEmpty;
},244,[],"isEmpty");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var React = require(_dependencyMap[0], 'React');

  var PropTypes = require(_dependencyMap[1], 'prop-types');

  var StaticRenderer = function (_React$Component) {
    babelHelpers.inherits(StaticRenderer, _React$Component);

    function StaticRenderer() {
      babelHelpers.classCallCheck(this, StaticRenderer);
      return babelHelpers.possibleConstructorReturn(this, (StaticRenderer.__proto__ || Object.getPrototypeOf(StaticRenderer)).apply(this, arguments));
    }

    babelHelpers.createClass(StaticRenderer, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps) {
        return nextProps.shouldUpdate;
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.render();
      }
    }]);
    return StaticRenderer;
  }(React.Component);

  StaticRenderer.propTypes = {
    shouldUpdate: PropTypes.bool.isRequired,
    render: PropTypes.func.isRequired
  };
  module.exports = StaticRenderer;
},245,[130,127],"StaticRenderer");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var React = require(_dependencyMap[0], 'react');

  function cloneReferencedElement(element, config) {
    var cloneRef = config.ref;
    var originalRef = element.ref;

    for (var _len = arguments.length, children = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      children[_key - 2] = arguments[_key];
    }

    if (originalRef == null || cloneRef == null) {
      return React.cloneElement.apply(React, [element, config].concat(children));
    }

    if (typeof originalRef !== 'function') {
      if (__DEV__) {
        console.warn('Cloning an element with a ref that will be overwritten because it ' + 'is not a function. Use a composable callback-style ref instead. ' + 'Ignoring ref: ' + originalRef);
      }

      return React.cloneElement.apply(React, [element, config].concat(children));
    }

    return React.cloneElement.apply(React, [element, babelHelpers.extends({}, config, {
      ref: function ref(component) {
        cloneRef(component);
        originalRef(component);
      }
    })].concat(children));
  }

  module.exports = cloneReferencedElement;
},246,[108],"react-clone-referenced-element/cloneReferencedElement.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js";

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var NativeMethodsMixin = require(_dependencyMap[1], 'NativeMethodsMixin');

  var Platform = require(_dependencyMap[2], 'Platform');

  var React = require(_dependencyMap[3], 'React');

  var PropTypes = require(_dependencyMap[4], 'prop-types');

  var ViewPropTypes = require(_dependencyMap[5], 'ViewPropTypes');

  var createReactClass = require(_dependencyMap[6], 'create-react-class');

  var requireNativeComponent = require(_dependencyMap[7], 'requireNativeComponent');

  if (Platform.OS === 'android') {
    var RefreshLayoutConsts = require(_dependencyMap[8], 'UIManager').AndroidSwipeRefreshLayout.Constants;
  } else {
    var RefreshLayoutConsts = {
      SIZE: {}
    };
  }

  var RefreshControl = createReactClass({
    displayName: 'RefreshControl',
    statics: {
      SIZE: RefreshLayoutConsts.SIZE
    },
    mixins: [NativeMethodsMixin],
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      onRefresh: PropTypes.func,
      refreshing: PropTypes.bool.isRequired,
      tintColor: ColorPropType,
      titleColor: ColorPropType,
      title: PropTypes.string,
      enabled: PropTypes.bool,
      colors: PropTypes.arrayOf(ColorPropType),
      progressBackgroundColor: ColorPropType,
      size: PropTypes.oneOf([RefreshLayoutConsts.SIZE.DEFAULT, RefreshLayoutConsts.SIZE.LARGE]),
      progressViewOffset: PropTypes.number
    }),
    _nativeRef: null,
    _lastNativeRefreshing: false,
    componentDidMount: function componentDidMount() {
      this._lastNativeRefreshing = this.props.refreshing;
    },
    componentDidUpdate: function componentDidUpdate(prevProps) {
      if (this.props.refreshing !== prevProps.refreshing) {
        this._lastNativeRefreshing = this.props.refreshing;
      } else if (this.props.refreshing !== this._lastNativeRefreshing) {
        this._nativeRef.setNativeProps({
          refreshing: this.props.refreshing
        });

        this._lastNativeRefreshing = this.props.refreshing;
      }
    },
    render: function render() {
      var _this = this;

      return React.createElement(NativeRefreshControl, babelHelpers.extends({}, this.props, {
        ref: function ref(_ref) {
          _this._nativeRef = _ref;
        },
        onRefresh: this._onRefresh,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 156
        }
      }));
    },
    _onRefresh: function _onRefresh() {
      this._lastNativeRefreshing = true;
      this.props.onRefresh && this.props.onRefresh();
      this.forceUpdate();
    }
  });

  if (Platform.OS === 'ios') {
    var NativeRefreshControl = requireNativeComponent('RCTRefreshControl', RefreshControl);
  } else if (Platform.OS === 'android') {
    var NativeRefreshControl = requireNativeComponent('AndroidSwipeRefreshLayout', RefreshControl);
  }

  module.exports = RefreshControl;
},247,[123,125,52,130,127,131,172,145,107],"RefreshControl");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Lists/VirtualizedList.js";

  var Batchinator = require(_dependencyMap[0], 'Batchinator');

  var FillRateHelper = require(_dependencyMap[1], 'FillRateHelper');

  var PropTypes = require(_dependencyMap[2], 'prop-types');

  var React = require(_dependencyMap[3], 'React');

  var ReactNative = require(_dependencyMap[4], 'ReactNative');

  var RefreshControl = require(_dependencyMap[5], 'RefreshControl');

  var ScrollView = require(_dependencyMap[6], 'ScrollView');

  var StyleSheet = require(_dependencyMap[7], 'StyleSheet');

  var UIManager = require(_dependencyMap[8], 'UIManager');

  var View = require(_dependencyMap[9], 'View');

  var ViewabilityHelper = require(_dependencyMap[10], 'ViewabilityHelper');

  var flattenStyle = require(_dependencyMap[11], 'flattenStyle');

  var infoLog = require(_dependencyMap[12], 'infoLog');

  var invariant = require(_dependencyMap[13], 'fbjs/lib/invariant');

  var warning = require(_dependencyMap[14], 'fbjs/lib/warning');

  var _require = require(_dependencyMap[15], 'VirtualizeUtils'),
      computeWindowedRenderLimits = _require.computeWindowedRenderLimits;

  var _usedIndexForKey = false;

  var VirtualizedList = function (_React$PureComponent) {
    babelHelpers.inherits(VirtualizedList, _React$PureComponent);
    babelHelpers.createClass(VirtualizedList, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        var animated = params ? params.animated : true;
        var veryLast = this.props.getItemCount(this.props.data) - 1;

        var frame = this._getFrameMetricsApprox(veryLast);

        var offset = Math.max(0, frame.offset + frame.length + this._footerLength - this._scrollMetrics.visibleLength);

        this._scrollRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        var _props = this.props,
            data = _props.data,
            horizontal = _props.horizontal,
            getItemCount = _props.getItemCount,
            getItemLayout = _props.getItemLayout,
            onScrollToIndexFailed = _props.onScrollToIndexFailed;
        var animated = params.animated,
            index = params.index,
            viewOffset = params.viewOffset,
            viewPosition = params.viewPosition;
        invariant(index >= 0 && index < getItemCount(data), "scrollToIndex out of range: " + index + " vs " + (getItemCount(data) - 1));

        if (!getItemLayout && index > this._highestMeasuredFrameIndex) {
          invariant(!!onScrollToIndexFailed, 'scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, ' + 'otherwise there is no way to know the location of offscreen indices or handle failures.');
          onScrollToIndexFailed({
            averageItemLength: this._averageCellLength,
            highestMeasuredFrameIndex: this._highestMeasuredFrameIndex,
            index: index
          });
          return;
        }

        var frame = this._getFrameMetricsApprox(index);

        var offset = Math.max(0, frame.offset - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length)) - (viewOffset || 0);

        this._scrollRef.scrollTo(horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        var item = params.item;
        var _props2 = this.props,
            data = _props2.data,
            getItem = _props2.getItem,
            getItemCount = _props2.getItemCount;
        var itemCount = getItemCount(data);

        for (var _index = 0; _index < itemCount; _index++) {
          if (getItem(data, _index) === item) {
            this.scrollToIndex(babelHelpers.extends({}, params, {
              index: _index
            }));
            break;
          }
        }
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        var animated = params.animated,
            offset = params.offset;

        this._scrollRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        this._viewabilityTuples.forEach(function (t) {
          t.viewabilityHelper.recordInteraction();
        });

        this._updateViewableItems(this.props.data);
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        this._scrollRef.flashScrollIndicators();
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._scrollRef && this._scrollRef.getScrollResponder) {
          return this._scrollRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        if (this._scrollRef && this._scrollRef.getScrollableNode) {
          return this._scrollRef.getScrollableNode();
        } else {
          return ReactNative.findNodeHandle(this._scrollRef);
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._scrollRef) {
          this._scrollRef.setNativeProps(props);
        }
      }
    }, {
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedList: {
            getScrollMetrics: this._getScrollMetrics,
            horizontal: this.props.horizontal,
            getOutermostParentListRef: this._getOutermostParentListRef,
            registerAsNestedChild: this._registerAsNestedChild,
            unregisterAsNestedChild: this._unregisterAsNestedChild
          }
        };
      }
    }, {
      key: "_getCellKey",
      value: function _getCellKey() {
        return this.context.virtualizedCell && this.context.virtualizedCell.cellKey || 'rootList';
      }
    }, {
      key: "hasMore",
      value: function hasMore() {
        return this._hasMore;
      }
    }]);

    function VirtualizedList(props, context) {
      babelHelpers.classCallCheck(this, VirtualizedList);

      var _this = babelHelpers.possibleConstructorReturn(this, (VirtualizedList.__proto__ || Object.getPrototypeOf(VirtualizedList)).call(this, props, context));

      _initialiseProps.call(_this);

      invariant(!props.onScroll || !props.onScroll.__isNative, 'Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent ' + 'to support native onScroll events with useNativeDriver');
      invariant(props.windowSize > 0, 'VirtualizedList: The windowSize prop must be present and set to a value greater than 0.');
      _this._fillRateHelper = new FillRateHelper(_this._getFrameMetrics);
      _this._updateCellsToRenderBatcher = new Batchinator(_this._updateCellsToRender, _this.props.updateCellsBatchingPeriod);

      if (_this.props.viewabilityConfigCallbackPairs) {
        _this._viewabilityTuples = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
          return {
            viewabilityHelper: new ViewabilityHelper(pair.viewabilityConfig),
            onViewableItemsChanged: pair.onViewableItemsChanged
          };
        });
      } else if (_this.props.onViewableItemsChanged) {
        _this._viewabilityTuples.push({
          viewabilityHelper: new ViewabilityHelper(_this.props.viewabilityConfig),
          onViewableItemsChanged: _this.props.onViewableItemsChanged
        });
      }

      var initialState = {
        first: _this.props.initialScrollIndex || 0,
        last: Math.min(_this.props.getItemCount(_this.props.data), (_this.props.initialScrollIndex || 0) + _this.props.initialNumToRender) - 1
      };

      if (_this._isNestedWithSameOrientation()) {
        var storedState = _this.context.virtualizedList.registerAsNestedChild({
          cellKey: _this._getCellKey(),
          key: _this.props.listKey || _this._getCellKey(),
          ref: _this
        });

        if (storedState) {
          initialState = storedState;
          _this.state = storedState;
          _this._frames = storedState.frames;
        }
      }

      _this.state = initialState;
      return _this;
    }

    babelHelpers.createClass(VirtualizedList, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        if (this.props.initialScrollIndex) {
          this._initialScrollIndexTimeout = setTimeout(function () {
            return _this2.scrollToIndex({
              animated: false,
              index: _this2.props.initialScrollIndex
            });
          }, 0);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._isNestedWithSameOrientation()) {
          this.context.virtualizedList.unregisterAsNestedChild({
            key: this.props.listKey || this._getCellKey(),
            state: {
              first: this.state.first,
              last: this.state.last,
              frames: this._frames
            }
          });
        }

        this._updateViewableItems(null);

        this._updateCellsToRenderBatcher.dispose({
          abort: true
        });

        this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.dispose();
        });

        this._fillRateHelper.deactivateAndFlush();

        clearTimeout(this._initialScrollIndexTimeout);
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(newProps) {
        var data = newProps.data,
            extraData = newProps.extraData,
            getItemCount = newProps.getItemCount,
            maxToRenderPerBatch = newProps.maxToRenderPerBatch;
        this.setState({
          first: Math.max(0, Math.min(this.state.first, getItemCount(data) - 1 - maxToRenderPerBatch)),
          last: Math.max(0, Math.min(this.state.last, getItemCount(data) - 1))
        });

        if (data !== this.props.data || extraData !== this.props.extraData) {
          this._hasDataChangedSinceEndReached = true;

          this._viewabilityTuples.forEach(function (tuple) {
            tuple.viewabilityHelper.resetViewableIndices();
          });
        }
      }
    }, {
      key: "_pushCells",
      value: function _pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, first, last, inversionStyle) {
        var _this3 = this;

        var _props3 = this.props,
            CellRendererComponent = _props3.CellRendererComponent,
            ItemSeparatorComponent = _props3.ItemSeparatorComponent,
            data = _props3.data,
            getItem = _props3.getItem,
            getItemCount = _props3.getItemCount,
            horizontal = _props3.horizontal,
            keyExtractor = _props3.keyExtractor;
        var stickyOffset = this.props.ListHeaderComponent ? 1 : 0;
        var end = getItemCount(data) - 1;
        var prevCellKey = void 0;
        last = Math.min(end, last);

        var _loop = function _loop(ii) {
          var item = getItem(data, ii);
          var key = keyExtractor(item, ii);

          _this3._indicesToKeys.set(ii, key);

          if (stickyIndicesFromProps.has(ii + stickyOffset)) {
            stickyHeaderIndices.push(cells.length);
          }

          cells.push(React.createElement(CellRenderer, {
            CellRendererComponent: CellRendererComponent,
            ItemSeparatorComponent: ii < end ? ItemSeparatorComponent : undefined,
            cellKey: key,
            fillRateHelper: _this3._fillRateHelper,
            horizontal: horizontal,
            index: ii,
            inversionStyle: inversionStyle,
            item: item,
            key: key,
            prevCellKey: prevCellKey,
            onUpdateSeparators: _this3._onUpdateSeparators,
            onLayout: function onLayout(e) {
              return _this3._onCellLayout(e, key, ii);
            },
            onUnmount: _this3._onCellUnmount,
            parentProps: _this3.props,
            ref: function (_ref) {
              function ref(_x) {
                return _ref.apply(this, arguments);
              }

              ref.toString = function () {
                return _ref.toString();
              };

              return ref;
            }(function (ref) {
              _this3._cellRefs[key] = ref;
            }),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 681
            }
          }));
          prevCellKey = key;
        };

        for (var ii = first; ii <= last; ii++) {
          _loop(ii);
        }
      }
    }, {
      key: "_isVirtualizationDisabled",
      value: function _isVirtualizationDisabled() {
        return this.props.disableVirtualization;
      }
    }, {
      key: "_isNestedWithSameOrientation",
      value: function _isNestedWithSameOrientation() {
        var nestedContext = this.context.virtualizedList;
        return !!(nestedContext && !!nestedContext.horizontal === !!this.props.horizontal);
      }
    }, {
      key: "render",
      value: function render() {
        if (__DEV__) {
          var flatStyles = flattenStyle(this.props.contentContainerStyle);
          warning(flatStyles == null || flatStyles.flexWrap !== 'wrap', '`flexWrap: `wrap`` is not supported with the `VirtualizedList` components.' + 'Consider using `numColumns` with `FlatList` instead.');
        }

        var _props4 = this.props,
            ListEmptyComponent = _props4.ListEmptyComponent,
            ListFooterComponent = _props4.ListFooterComponent,
            ListHeaderComponent = _props4.ListHeaderComponent;
        var _props5 = this.props,
            data = _props5.data,
            horizontal = _props5.horizontal;

        var isVirtualizationDisabled = this._isVirtualizationDisabled();

        var inversionStyle = this.props.inverted ? this.props.horizontal ? styles.horizontallyInverted : styles.verticallyInverted : null;
        var cells = [];
        var stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);
        var stickyHeaderIndices = [];

        if (ListHeaderComponent) {
          if (stickyIndicesFromProps.has(0)) {
            stickyHeaderIndices.push(0);
          }

          var element = React.isValidElement(ListHeaderComponent) ? ListHeaderComponent : React.createElement(ListHeaderComponent, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 755
            }
          });
          cells.push(React.createElement(
            VirtualizedCellWrapper,
            {
              cellKey: this._getCellKey() + '-header',
              key: "$header",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 758
              }
            },
            React.createElement(
              View,
              {
                onLayout: this._onLayoutHeader,
                style: inversionStyle,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 761
                }
              },
              element
            )
          ));
        }

        var itemCount = this.props.getItemCount(data);

        if (itemCount > 0) {
          _usedIndexForKey = false;
          var spacerKey = !horizontal ? 'height' : 'width';
          var lastInitialIndex = this.props.initialScrollIndex ? -1 : this.props.initialNumToRender - 1;
          var _state = this.state,
              _first = _state.first,
              _last = _state.last;

          this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, 0, lastInitialIndex, inversionStyle);

          var firstAfterInitial = Math.max(lastInitialIndex + 1, _first);

          if (!isVirtualizationDisabled && _first > lastInitialIndex + 1) {
            var insertedStickySpacer = false;

            if (stickyIndicesFromProps.size > 0) {
              var stickyOffset = ListHeaderComponent ? 1 : 0;

              for (var ii = firstAfterInitial - 1; ii > lastInitialIndex; ii--) {
                if (stickyIndicesFromProps.has(ii + stickyOffset)) {
                  var initBlock = this._getFrameMetricsApprox(lastInitialIndex);

                  var stickyBlock = this._getFrameMetricsApprox(ii);

                  var leadSpace = stickyBlock.offset - (initBlock.offset + initBlock.length);
                  cells.push(React.createElement(View, {
                    key: "$sticky_lead",
                    style: babelHelpers.defineProperty({}, spacerKey, leadSpace),
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 796
                    }
                  }));

                  this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, ii, ii, inversionStyle);

                  var trailSpace = this._getFrameMetricsApprox(_first).offset - (stickyBlock.offset + stickyBlock.length);
                  cells.push(React.createElement(View, {
                    key: "$sticky_trail",
                    style: babelHelpers.defineProperty({}, spacerKey, trailSpace),
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 810
                    }
                  }));
                  insertedStickySpacer = true;
                  break;
                }
              }
            }

            if (!insertedStickySpacer) {
              var _initBlock = this._getFrameMetricsApprox(lastInitialIndex);

              var firstSpace = this._getFrameMetricsApprox(_first).offset - (_initBlock.offset + _initBlock.length);

              cells.push(React.createElement(View, {
                key: "$lead_spacer",
                style: babelHelpers.defineProperty({}, spacerKey, firstSpace),
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 823
                }
              }));
            }
          }

          this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, firstAfterInitial, _last, inversionStyle);

          if (!this._hasWarned.keys && _usedIndexForKey) {
            console.warn('VirtualizedList: missing keys for items, make sure to specify a key property on each ' + 'item or provide a custom keyExtractor.');
            this._hasWarned.keys = true;
          }

          if (!isVirtualizationDisabled && _last < itemCount - 1) {
            var lastFrame = this._getFrameMetricsApprox(_last);

            var end = this.props.getItemLayout ? itemCount - 1 : Math.min(itemCount - 1, this._highestMeasuredFrameIndex);

            var endFrame = this._getFrameMetricsApprox(end);

            var tailSpacerLength = endFrame.offset + endFrame.length - (lastFrame.offset + lastFrame.length);
            cells.push(React.createElement(View, {
              key: "$tail_spacer",
              style: babelHelpers.defineProperty({}, spacerKey, tailSpacerLength),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 856
              }
            }));
          }
        } else if (ListEmptyComponent) {
          var _element = React.isValidElement(ListEmptyComponent) ? ListEmptyComponent : React.createElement(ListEmptyComponent, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 864
            }
          });

          cells.push(React.createElement(
            View,
            {
              key: "$empty",
              onLayout: this._onLayoutEmpty,
              style: inversionStyle,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 867
              }
            },
            _element
          ));
        }

        if (ListFooterComponent) {
          var _element2 = React.isValidElement(ListFooterComponent) ? ListFooterComponent : React.createElement(ListFooterComponent, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 880
            }
          });

          cells.push(React.createElement(
            VirtualizedCellWrapper,
            {
              cellKey: this._getCellKey() + '-footer',
              key: "$footer",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 883
              }
            },
            React.createElement(
              View,
              {
                onLayout: this._onLayoutFooter,
                style: inversionStyle,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 886
                }
              },
              _element2
            )
          ));
        }

        var scrollProps = babelHelpers.extends({}, this.props, {
          onContentSizeChange: this._onContentSizeChange,
          onLayout: this._onLayout,
          onScroll: this._onScroll,
          onScrollBeginDrag: this._onScrollBeginDrag,
          onScrollEndDrag: this._onScrollEndDrag,
          onMomentumScrollEnd: this._onMomentumScrollEnd,
          scrollEventThrottle: this.props.scrollEventThrottle,
          stickyHeaderIndices: stickyHeaderIndices
        });

        if (inversionStyle) {
          scrollProps.style = [inversionStyle, this.props.style];
        }

        this._hasMore = this.state.last < this.props.getItemCount(this.props.data) - 1;
        var ret = React.cloneElement((this.props.renderScrollComponent || this._defaultRenderScrollComponent)(scrollProps), {
          ref: this._captureScrollRef
        }, cells);

        if (this.props.debug) {
          return React.createElement(
            View,
            {
              style: {
                flex: 1
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 921
              }
            },
            ret,
            this._renderDebugOverlay()
          );
        } else {
          return ret;
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this._scheduleCellsToRenderUpdate();
      }
    }, {
      key: "_computeBlankness",
      value: function _computeBlankness() {
        this._fillRateHelper.computeBlankness(this.props, this.state, this._scrollMetrics);
      }
    }, {
      key: "_onCellLayout",
      value: function _onCellLayout(e, cellKey, index) {
        var layout = e.nativeEvent.layout;
        var next = {
          offset: this._selectOffset(layout),
          length: this._selectLength(layout),
          index: index,
          inLayout: true
        };
        var curr = this._frames[cellKey];

        if (!curr || next.offset !== curr.offset || next.length !== curr.length || index !== curr.index) {
          this._totalCellLength += next.length - (curr ? curr.length : 0);
          this._totalCellsMeasured += curr ? 0 : 1;
          this._averageCellLength = this._totalCellLength / this._totalCellsMeasured;
          this._frames[cellKey] = next;
          this._highestMeasuredFrameIndex = Math.max(this._highestMeasuredFrameIndex, index);

          this._scheduleCellsToRenderUpdate();
        } else {
          this._frames[cellKey].inLayout = true;
        }

        this._computeBlankness();
      }
    }, {
      key: "_measureLayoutRelativeToContainingList",
      value: function _measureLayoutRelativeToContainingList() {
        var _this4 = this;

        UIManager.measureLayout(ReactNative.findNodeHandle(this), ReactNative.findNodeHandle(this.context.virtualizedList.getOutermostParentListRef()), function (error) {
          console.warn("VirtualizedList: Encountered an error while measuring a list's" + ' offset from its containing VirtualizedList.');
        }, function (x, y, width, height) {
          _this4._offsetFromParentVirtualizedList = _this4._selectOffset({
            x: x,
            y: y
          });
          _this4._scrollMetrics.contentLength = _this4._selectLength({
            width: width,
            height: height
          });

          var scrollMetrics = _this4._convertParentScrollMetrics(_this4.context.virtualizedList.getScrollMetrics());

          _this4._scrollMetrics.visibleLength = scrollMetrics.visibleLength;
          _this4._scrollMetrics.offset = scrollMetrics.offset;
        });
      }
    }, {
      key: "_renderDebugOverlay",
      value: function _renderDebugOverlay() {
        var normalize = this._scrollMetrics.visibleLength / this._scrollMetrics.contentLength;
        var framesInLayout = [];
        var itemCount = this.props.getItemCount(this.props.data);

        for (var ii = 0; ii < itemCount; ii++) {
          var frame = this._getFrameMetricsApprox(ii);

          if (frame.inLayout) {
            framesInLayout.push(frame);
          }
        }

        var windowTop = this._getFrameMetricsApprox(this.state.first).offset;

        var frameLast = this._getFrameMetricsApprox(this.state.last);

        var windowLen = frameLast.offset + frameLast.length - windowTop;
        var visTop = this._scrollMetrics.offset;
        var visLen = this._scrollMetrics.visibleLength;
        var baseStyle = {
          position: 'absolute',
          top: 0,
          right: 0
        };
        return React.createElement(
          View,
          {
            style: babelHelpers.extends({}, baseStyle, {
              bottom: 0,
              width: 20,
              borderColor: 'blue',
              borderWidth: 1
            }),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1121
            }
          },
          framesInLayout.map(function (f, ii) {
            return React.createElement(View, {
              key: 'f' + ii,
              style: babelHelpers.extends({}, baseStyle, {
                left: 0,
                top: f.offset * normalize,
                height: f.length * normalize,
                backgroundColor: 'orange'
              }),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 1130
              }
            });
          }),
          React.createElement(View, {
            style: babelHelpers.extends({}, baseStyle, {
              left: 0,
              top: windowTop * normalize,
              height: windowLen * normalize,
              borderColor: 'green',
              borderWidth: 2
            }),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1141
            }
          }),
          React.createElement(View, {
            style: babelHelpers.extends({}, baseStyle, {
              left: 0,
              top: visTop * normalize,
              height: visLen * normalize,
              borderColor: 'red',
              borderWidth: 2
            }),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1151
            }
          })
        );
      }
    }, {
      key: "_selectLength",
      value: function _selectLength(metrics) {
        return !this.props.horizontal ? metrics.height : metrics.width;
      }
    }, {
      key: "_selectOffset",
      value: function _selectOffset(metrics) {
        return !this.props.horizontal ? metrics.y : metrics.x;
      }
    }, {
      key: "_maybeCallOnEndReached",
      value: function _maybeCallOnEndReached() {
        var _props6 = this.props,
            data = _props6.data,
            getItemCount = _props6.getItemCount,
            onEndReached = _props6.onEndReached,
            onEndReachedThreshold = _props6.onEndReachedThreshold;
        var _scrollMetrics = this._scrollMetrics,
            contentLength = _scrollMetrics.contentLength,
            visibleLength = _scrollMetrics.visibleLength,
            offset = _scrollMetrics.offset;
        var distanceFromEnd = contentLength - visibleLength - offset;

        if (onEndReached && this.state.last === getItemCount(data) - 1 && distanceFromEnd < onEndReachedThreshold * visibleLength && (this._hasDataChangedSinceEndReached || this._scrollMetrics.contentLength !== this._sentEndForContentLength)) {
          this._hasDataChangedSinceEndReached = false;
          this._sentEndForContentLength = this._scrollMetrics.contentLength;
          onEndReached({
            distanceFromEnd: distanceFromEnd
          });
        }
      }
    }, {
      key: "_scheduleCellsToRenderUpdate",
      value: function _scheduleCellsToRenderUpdate() {
        var _state2 = this.state,
            first = _state2.first,
            last = _state2.last;
        var _scrollMetrics2 = this._scrollMetrics,
            offset = _scrollMetrics2.offset,
            visibleLength = _scrollMetrics2.visibleLength,
            velocity = _scrollMetrics2.velocity;
        var itemCount = this.props.getItemCount(this.props.data);
        var hiPri = false;

        if (first > 0 || last < itemCount - 1) {
          var distTop = offset - this._getFrameMetricsApprox(first).offset;

          var distBottom = this._getFrameMetricsApprox(last).offset - (offset + visibleLength);
          var scrollingThreshold = this.props.onEndReachedThreshold * visibleLength / 2;
          hiPri = Math.min(distTop, distBottom) < 0 || velocity < -2 && distTop < scrollingThreshold || velocity > 2 && distBottom < scrollingThreshold;
        }

        if (hiPri && this._averageCellLength) {
          this._updateCellsToRenderBatcher.dispose({
            abort: true
          });

          this._updateCellsToRender();

          return;
        } else {
          this._updateCellsToRenderBatcher.schedule();
        }
      }
    }, {
      key: "_updateViewableItems",
      value: function _updateViewableItems(data) {
        var _this5 = this;

        var getItemCount = this.props.getItemCount;

        this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.onUpdate(getItemCount(data), _this5._scrollMetrics.offset, _this5._scrollMetrics.visibleLength, _this5._getFrameMetrics, _this5._createViewToken, tuple.onViewableItemsChanged, _this5.state);
        });
      }
    }]);
    return VirtualizedList;
  }(React.PureComponent);

  VirtualizedList.defaultProps = {
    disableVirtualization: false,
    horizontal: false,
    initialNumToRender: 10,
    keyExtractor: function keyExtractor(item, index) {
      if (item.key != null) {
        return item.key;
      }

      _usedIndexForKey = true;
      return String(index);
    },
    maxToRenderPerBatch: 10,
    onEndReachedThreshold: 2,
    scrollEventThrottle: 50,
    updateCellsBatchingPeriod: 50,
    windowSize: 21
  };
  VirtualizedList.contextTypes = {
    virtualizedCell: PropTypes.shape({
      cellKey: PropTypes.string
    }),
    virtualizedList: PropTypes.shape({
      getScrollMetrics: PropTypes.func,
      horizontal: PropTypes.bool,
      getOutermostParentListRef: PropTypes.func,
      registerAsNestedChild: PropTypes.func,
      unregisterAsNestedChild: PropTypes.func
    })
  };
  VirtualizedList.childContextTypes = {
    virtualizedList: PropTypes.shape({
      getScrollMetrics: PropTypes.func,
      horizontal: PropTypes.bool,
      getOutermostParentListRef: PropTypes.func,
      registerAsNestedChild: PropTypes.func,
      unregisterAsNestedChild: PropTypes.func
    })
  };

  var _initialiseProps = function _initialiseProps() {
    var _this8 = this;

    this._getScrollMetrics = function () {
      return _this8._scrollMetrics;
    };

    this._getOutermostParentListRef = function () {
      if (_this8._isNestedWithSameOrientation()) {
        return _this8.context.virtualizedList.getOutermostParentListRef();
      } else {
        return _this8;
      }
    };

    this._registerAsNestedChild = function (childList) {
      var childListsInCell = _this8._cellKeysToChildListKeys.get(childList.cellKey) || new Set();
      childListsInCell.add(childList.key);

      _this8._cellKeysToChildListKeys.set(childList.cellKey, childListsInCell);

      var existingChildData = _this8._nestedChildLists.get(childList.key);

      invariant(!(existingChildData && existingChildData.ref !== null), 'A VirtualizedList contains a cell which itself contains ' + 'more than one VirtualizedList of the same orientation as the parent ' + 'list. You must pass a unique listKey prop to each sibling list.');

      _this8._nestedChildLists.set(childList.key, {
        ref: childList.ref,
        state: null
      });

      return existingChildData && existingChildData.state;
    };

    this._unregisterAsNestedChild = function (childList) {
      _this8._nestedChildLists.set(childList.key, {
        ref: null,
        state: childList.state
      });
    };

    this._onUpdateSeparators = function (keys, newProps) {
      keys.forEach(function (key) {
        var ref = key != null && _this8._cellRefs[key];
        ref && ref.updateSeparatorProps(newProps);
      });
    };

    this._averageCellLength = 0;
    this._cellKeysToChildListKeys = new Map();
    this._cellRefs = {};
    this._frames = {};
    this._footerLength = 0;
    this._hasDataChangedSinceEndReached = true;
    this._hasMore = false;
    this._hasWarned = {};
    this._highestMeasuredFrameIndex = 0;
    this._headerLength = 0;
    this._indicesToKeys = new Map();
    this._initialScrollIndexTimeout = 0;
    this._nestedChildLists = new Map();
    this._offsetFromParentVirtualizedList = 0;
    this._prevParentOffset = 0;
    this._scrollMetrics = {
      contentLength: 0,
      dOffset: 0,
      dt: 10,
      offset: 0,
      timestamp: 0,
      velocity: 0,
      visibleLength: 0
    };
    this._scrollRef = null;
    this._sentEndForContentLength = 0;
    this._totalCellLength = 0;
    this._totalCellsMeasured = 0;
    this._viewabilityTuples = [];

    this._captureScrollRef = function (ref) {
      _this8._scrollRef = ref;
    };

    this._defaultRenderScrollComponent = function (props) {
      if (_this8._isNestedWithSameOrientation()) {
        return React.createElement(View, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 985
          }
        }));
      } else if (props.onRefresh) {
        invariant(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify(props.refreshing) + '`');
        return React.createElement(ScrollView, babelHelpers.extends({}, props, {
          refreshControl: React.createElement(RefreshControl, {
            refreshing: props.refreshing,
            onRefresh: props.onRefresh,
            progressViewOffset: props.progressViewOffset,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1000
            }
          }),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 994
          }
        }));
      } else {
        return React.createElement(ScrollView, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 1009
          }
        }));
      }
    };

    this._onCellUnmount = function (cellKey) {
      var curr = _this8._frames[cellKey];

      if (curr) {
        _this8._frames[cellKey] = babelHelpers.extends({}, curr, {
          inLayout: false
        });
      }
    };

    this._onLayout = function (e) {
      if (_this8._isNestedWithSameOrientation()) {
        _this8._measureLayoutRelativeToContainingList();
      } else {
        _this8._scrollMetrics.visibleLength = _this8._selectLength(e.nativeEvent.layout);
      }

      _this8.props.onLayout && _this8.props.onLayout(e);

      _this8._scheduleCellsToRenderUpdate();

      _this8._maybeCallOnEndReached();
    };

    this._onLayoutEmpty = function (e) {
      _this8.props.onLayout && _this8.props.onLayout(e);
    };

    this._onLayoutFooter = function (e) {
      _this8._footerLength = _this8._selectLength(e.nativeEvent.layout);
    };

    this._onLayoutHeader = function (e) {
      _this8._headerLength = _this8._selectLength(e.nativeEvent.layout);
    };

    this._onContentSizeChange = function (width, height) {
      if (_this8.props.onContentSizeChange) {
        _this8.props.onContentSizeChange(width, height);
      }

      _this8._scrollMetrics.contentLength = _this8._selectLength({
        height: height,
        width: width
      });

      _this8._scheduleCellsToRenderUpdate();

      _this8._maybeCallOnEndReached();
    };

    this._convertParentScrollMetrics = function (metrics) {
      var offset = metrics.offset - _this8._offsetFromParentVirtualizedList;
      var visibleLength = metrics.visibleLength;
      var dOffset = offset - _this8._scrollMetrics.offset;
      var contentLength = _this8._scrollMetrics.contentLength;
      return {
        visibleLength: visibleLength,
        contentLength: contentLength,
        offset: offset,
        dOffset: dOffset
      };
    };

    this._onScroll = function (e) {
      _this8._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref._onScroll(e);
      });

      if (_this8.props.onScroll) {
        _this8.props.onScroll(e);
      }

      var timestamp = e.timeStamp;

      var visibleLength = _this8._selectLength(e.nativeEvent.layoutMeasurement);

      var contentLength = _this8._selectLength(e.nativeEvent.contentSize);

      var offset = _this8._selectOffset(e.nativeEvent.contentOffset);

      var dOffset = offset - _this8._scrollMetrics.offset;

      if (_this8._isNestedWithSameOrientation()) {
        if (_this8._scrollMetrics.contentLength === 0) {
          return;
        }

        var _convertParentScrollM = _this8._convertParentScrollMetrics({
          visibleLength: visibleLength,
          offset: offset
        });

        visibleLength = _convertParentScrollM.visibleLength;
        contentLength = _convertParentScrollM.contentLength;
        offset = _convertParentScrollM.offset;
        dOffset = _convertParentScrollM.dOffset;
      }

      var dt = _this8._scrollMetrics.timestamp ? Math.max(1, timestamp - _this8._scrollMetrics.timestamp) : 1;
      var velocity = dOffset / dt;

      if (dt > 500 && _this8._scrollMetrics.dt > 500 && contentLength > 5 * visibleLength && !_this8._hasWarned.perf) {
        infoLog('VirtualizedList: You have a large list that is slow to update - make sure your ' + 'renderItem function renders components that follow React performance best practices ' + 'like PureComponent, shouldComponentUpdate, etc.', {
          dt: dt,
          prevDt: _this8._scrollMetrics.dt,
          contentLength: contentLength
        });
        _this8._hasWarned.perf = true;
      }

      _this8._scrollMetrics = {
        contentLength: contentLength,
        dt: dt,
        dOffset: dOffset,
        offset: offset,
        timestamp: timestamp,
        velocity: velocity,
        visibleLength: visibleLength
      };

      _this8._updateViewableItems(_this8.props.data);

      if (!_this8.props) {
        return;
      }

      _this8._maybeCallOnEndReached();

      if (velocity !== 0) {
        _this8._fillRateHelper.activate();
      }

      _this8._computeBlankness();

      _this8._scheduleCellsToRenderUpdate();
    };

    this._onScrollBeginDrag = function (e) {
      _this8._viewabilityTuples.forEach(function (tuple) {
        tuple.viewabilityHelper.recordInteraction();
      });

      _this8.props.onScrollBeginDrag && _this8.props.onScrollBeginDrag(e);
    };

    this._onScrollEndDrag = function (e) {
      var velocity = e.nativeEvent.velocity;

      if (velocity) {
        _this8._scrollMetrics.velocity = _this8._selectOffset(velocity);
      }

      _this8._computeBlankness();

      _this8.props.onScrollEndDrag && _this8.props.onScrollEndDrag(e);
    };

    this._onMomentumScrollEnd = function (e) {
      _this8._scrollMetrics.velocity = 0;

      _this8._computeBlankness();

      _this8.props.onMomentumScrollEnd && _this8.props.onMomentumScrollEnd(e);
    };

    this._updateCellsToRender = function () {
      var _props8 = _this8.props,
          data = _props8.data,
          getItemCount = _props8.getItemCount,
          onEndReachedThreshold = _props8.onEndReachedThreshold;

      var isVirtualizationDisabled = _this8._isVirtualizationDisabled();

      _this8._updateViewableItems(data);

      if (!data) {
        return;
      }

      _this8.setState(function (state) {
        var newState = void 0;

        if (!isVirtualizationDisabled) {
          if (_this8._scrollMetrics.visibleLength) {
            if (!_this8.props.initialScrollIndex || _this8._scrollMetrics.offset) {
              newState = computeWindowedRenderLimits(_this8.props, state, _this8._getFrameMetricsApprox, _this8._scrollMetrics);
            }
          }
        } else {
          var _scrollMetrics3 = _this8._scrollMetrics,
              contentLength = _scrollMetrics3.contentLength,
              _offset = _scrollMetrics3.offset,
              visibleLength = _scrollMetrics3.visibleLength;

          var _distanceFromEnd = contentLength - visibleLength - _offset;

          var renderAhead = _distanceFromEnd < onEndReachedThreshold * visibleLength ? _this8.props.maxToRenderPerBatch : 0;
          newState = {
            first: 0,
            last: Math.min(state.last + renderAhead, getItemCount(data) - 1)
          };
        }

        if (newState && _this8._nestedChildLists.size > 0) {
          var newFirst = newState.first;
          var newLast = newState.last;

          for (var ii = newFirst; ii <= newLast; ii++) {
            var cellKeyForIndex = _this8._indicesToKeys.get(ii);

            var childListKeys = cellKeyForIndex && _this8._cellKeysToChildListKeys.get(cellKeyForIndex);

            if (!childListKeys) {
              continue;
            }

            var someChildHasMore = false;

            for (var _iterator = childListKeys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
              var _ref7;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref7 = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref7 = _i.value;
              }

              var childKey = _ref7;

              var childList = _this8._nestedChildLists.get(childKey);

              if (childList && childList.ref && childList.ref.hasMore()) {
                someChildHasMore = true;
                break;
              }
            }

            if (someChildHasMore) {
              newState.last = ii;
              break;
            }
          }
        }

        return newState;
      });
    };

    this._createViewToken = function (index, isViewable) {
      var _props9 = _this8.props,
          data = _props9.data,
          getItem = _props9.getItem,
          keyExtractor = _props9.keyExtractor;
      var item = getItem(data, index);
      return {
        index: index,
        item: item,
        key: keyExtractor(item, index),
        isViewable: isViewable
      };
    };

    this._getFrameMetricsApprox = function (index) {
      var frame = _this8._getFrameMetrics(index);

      if (frame && frame.index === index) {
        return frame;
      } else {
        var _getItemLayout = _this8.props.getItemLayout;
        invariant(!_getItemLayout, 'Should not have to estimate frames when a measurement metrics function is provided');
        return {
          length: _this8._averageCellLength,
          offset: _this8._averageCellLength * index
        };
      }
    };

    this._getFrameMetrics = function (index) {
      var _props10 = _this8.props,
          data = _props10.data,
          getItem = _props10.getItem,
          getItemCount = _props10.getItemCount,
          getItemLayout = _props10.getItemLayout,
          keyExtractor = _props10.keyExtractor;
      invariant(getItemCount(data) > index, 'Tried to get frame for out of range index ' + index);
      var item = getItem(data, index);

      var frame = item && _this8._frames[keyExtractor(item, index)];

      if (!frame || frame.index !== index) {
        if (getItemLayout) {
          frame = getItemLayout(data, index);

          if (__DEV__) {
            var frameType = PropTypes.shape({
              length: PropTypes.number.isRequired,
              offset: PropTypes.number.isRequired,
              index: PropTypes.number.isRequired
            }).isRequired;
            PropTypes.checkPropTypes({
              frame: frameType
            }, {
              frame: frame
            }, 'frame', 'VirtualizedList.getItemLayout');
          }
        }
      }

      return frame;
    };
  };

  var CellRenderer = function (_React$Component) {
    babelHelpers.inherits(CellRenderer, _React$Component);

    function CellRenderer() {
      var _ref6;

      var _temp, _this6, _ret2;

      babelHelpers.classCallCheck(this, CellRenderer);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret2 = (_temp = (_this6 = babelHelpers.possibleConstructorReturn(this, (_ref6 = CellRenderer.__proto__ || Object.getPrototypeOf(CellRenderer)).call.apply(_ref6, [this].concat(args))), _this6), _this6.state = {
        separatorProps: {
          highlighted: false,
          leadingItem: _this6.props.item
        }
      }, _this6._separators = {
        highlight: function highlight() {
          var _this6$props = _this6.props,
              cellKey = _this6$props.cellKey,
              prevCellKey = _this6$props.prevCellKey;

          _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
            highlighted: true
          });
        },
        unhighlight: function unhighlight() {
          var _this6$props2 = _this6.props,
              cellKey = _this6$props2.cellKey,
              prevCellKey = _this6$props2.prevCellKey;

          _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
            highlighted: false
          });
        },
        updateProps: function updateProps(select, newProps) {
          var _this6$props3 = _this6.props,
              cellKey = _this6$props3.cellKey,
              prevCellKey = _this6$props3.prevCellKey;

          _this6.props.onUpdateSeparators([select === 'leading' ? prevCellKey : cellKey], newProps);
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this6, _ret2);
    }

    babelHelpers.createClass(CellRenderer, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedCell: {
            cellKey: this.props.cellKey
          }
        };
      }
    }, {
      key: "updateSeparatorProps",
      value: function updateSeparatorProps(newProps) {
        this.setState(function (state) {
          return {
            separatorProps: babelHelpers.extends({}, state.separatorProps, newProps)
          };
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.props.onUnmount(this.props.cellKey);
      }
    }, {
      key: "render",
      value: function render() {
        var _props7 = this.props,
            CellRendererComponent = _props7.CellRendererComponent,
            ItemSeparatorComponent = _props7.ItemSeparatorComponent,
            fillRateHelper = _props7.fillRateHelper,
            horizontal = _props7.horizontal,
            item = _props7.item,
            index = _props7.index,
            inversionStyle = _props7.inversionStyle,
            parentProps = _props7.parentProps;
        var renderItem = parentProps.renderItem,
            getItemLayout = parentProps.getItemLayout;
        invariant(renderItem, 'no renderItem!');
        var element = renderItem({
          item: item,
          index: index,
          separators: this._separators
        });
        var onLayout = getItemLayout && !parentProps.debug && !fillRateHelper.enabled() ? undefined : this.props.onLayout;
        var itemSeparator = ItemSeparatorComponent && React.createElement(ItemSeparatorComponent, babelHelpers.extends({}, this.state.separatorProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 1623
          }
        }));
        var cellStyle = inversionStyle ? horizontal ? [{
          flexDirection: 'row-reverse'
        }, inversionStyle] : [{
          flexDirection: 'column-reverse'
        }, inversionStyle] : horizontal ? [{
          flexDirection: 'row'
        }, inversionStyle] : inversionStyle;

        if (!CellRendererComponent) {
          return React.createElement(
            View,
            {
              style: cellStyle,
              onLayout: onLayout,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 1632
              }
            },
            element,
            itemSeparator
          );
        }

        return React.createElement(
          CellRendererComponent,
          babelHelpers.extends({}, this.props, {
            style: cellStyle,
            onLayout: onLayout,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1639
            }
          }),
          element,
          itemSeparator
        );
      }
    }]);
    return CellRenderer;
  }(React.Component);

  CellRenderer.childContextTypes = {
    virtualizedCell: PropTypes.shape({
      cellKey: PropTypes.string
    })
  };

  var VirtualizedCellWrapper = function (_React$Component2) {
    babelHelpers.inherits(VirtualizedCellWrapper, _React$Component2);

    function VirtualizedCellWrapper() {
      babelHelpers.classCallCheck(this, VirtualizedCellWrapper);
      return babelHelpers.possibleConstructorReturn(this, (VirtualizedCellWrapper.__proto__ || Object.getPrototypeOf(VirtualizedCellWrapper)).apply(this, arguments));
    }

    babelHelpers.createClass(VirtualizedCellWrapper, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedCell: {
            cellKey: this.props.cellKey
          }
        };
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.children;
      }
    }]);
    return VirtualizedCellWrapper;
  }(React.Component);

  VirtualizedCellWrapper.childContextTypes = {
    virtualizedCell: PropTypes.shape({
      cellKey: PropTypes.string
    })
  };
  var styles = StyleSheet.create({
    verticallyInverted: {
      transform: [{
        scaleY: -1
      }]
    },
    horizontallyInverted: {
      transform: [{
        scaleX: -1
      }]
    }
  });
  module.exports = VirtualizedList;
},248,[249,250,127,130,21,247,224,168,107,170,251,101,94,13,56,252],"VirtualizedList");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var InteractionManager = require(_dependencyMap[0], 'InteractionManager');

  var Batchinator = function () {
    function Batchinator(callback, delayMS) {
      babelHelpers.classCallCheck(this, Batchinator);
      this._delay = delayMS;
      this._callback = callback;
    }

    babelHelpers.createClass(Batchinator, [{
      key: "dispose",
      value: function dispose() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
          abort: false
        };

        if (this._taskHandle) {
          this._taskHandle.cancel();

          if (!options.abort) {
            this._callback();
          }

          this._taskHandle = null;
        }
      }
    }, {
      key: "schedule",
      value: function schedule() {
        var _this = this;

        if (this._taskHandle) {
          return;
        }

        var timeoutHandle = setTimeout(function () {
          _this._taskHandle = InteractionManager.runAfterInteractions(function () {
            _this._taskHandle = null;

            _this._callback();
          });
        }, this._delay);
        this._taskHandle = {
          cancel: function cancel() {
            return clearTimeout(timeoutHandle);
          }
        };
      }
    }]);
    return Batchinator;
  }();

  module.exports = Batchinator;
},249,[202],"Batchinator");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var performanceNow = require(_dependencyMap[0], 'fbjs/lib/performanceNow');

  var warning = require(_dependencyMap[1], 'fbjs/lib/warning');

  var Info = function Info() {
    babelHelpers.classCallCheck(this, Info);
    this.any_blank_count = 0;
    this.any_blank_ms = 0;
    this.any_blank_speed_sum = 0;
    this.mostly_blank_count = 0;
    this.mostly_blank_ms = 0;
    this.pixels_blank = 0;
    this.pixels_sampled = 0;
    this.pixels_scrolled = 0;
    this.total_time_spent = 0;
    this.sample_count = 0;
  };

  var DEBUG = false;
  var _listeners = [];
  var _minSampleCount = 10;

  var _sampleRate = DEBUG ? 1 : null;

  var FillRateHelper = function () {
    babelHelpers.createClass(FillRateHelper, null, [{
      key: "addListener",
      value: function addListener(callback) {
        warning(_sampleRate !== null, 'Call `FillRateHelper.setSampleRate` before `addListener`.');

        _listeners.push(callback);

        return {
          remove: function remove() {
            _listeners = _listeners.filter(function (listener) {
              return callback !== listener;
            });
          }
        };
      }
    }, {
      key: "setSampleRate",
      value: function setSampleRate(sampleRate) {
        _sampleRate = sampleRate;
      }
    }, {
      key: "setMinSampleCount",
      value: function setMinSampleCount(minSampleCount) {
        _minSampleCount = minSampleCount;
      }
    }]);

    function FillRateHelper(getFrameMetrics) {
      babelHelpers.classCallCheck(this, FillRateHelper);
      this._anyBlankStartTime = null;
      this._enabled = false;
      this._info = new Info();
      this._mostlyBlankStartTime = null;
      this._samplesStartTime = null;
      this._getFrameMetrics = getFrameMetrics;
      this._enabled = (_sampleRate || 0) > Math.random();

      this._resetData();
    }

    babelHelpers.createClass(FillRateHelper, [{
      key: "activate",
      value: function activate() {
        if (this._enabled && this._samplesStartTime == null) {
          DEBUG && console.debug('FillRateHelper: activate');
          this._samplesStartTime = performanceNow();
        }
      }
    }, {
      key: "deactivateAndFlush",
      value: function deactivateAndFlush() {
        if (!this._enabled) {
          return;
        }

        var start = this._samplesStartTime;

        if (start == null) {
          DEBUG && console.debug('FillRateHelper: bail on deactivate with no start time');
          return;
        }

        if (this._info.sample_count < _minSampleCount) {
          this._resetData();

          return;
        }

        var total_time_spent = performanceNow() - start;
        var info = babelHelpers.extends({}, this._info, {
          total_time_spent: total_time_spent
        });

        if (DEBUG) {
          var derived = {
            avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,
            avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),
            avg_speed_when_any_blank: this._info.any_blank_speed_sum / this._info.any_blank_count,
            any_blank_per_min: this._info.any_blank_count / (total_time_spent / 1000 / 60),
            any_blank_time_frac: this._info.any_blank_ms / total_time_spent,
            mostly_blank_per_min: this._info.mostly_blank_count / (total_time_spent / 1000 / 60),
            mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent
          };

          for (var key in derived) {
            derived[key] = Math.round(1000 * derived[key]) / 1000;
          }

          console.debug('FillRateHelper deactivateAndFlush: ', {
            derived: derived,
            info: info
          });
        }

        _listeners.forEach(function (listener) {
          return listener(info);
        });

        this._resetData();
      }
    }, {
      key: "computeBlankness",
      value: function computeBlankness(props, state, scrollMetrics) {
        if (!this._enabled || props.getItemCount(props.data) === 0 || this._samplesStartTime == null) {
          return 0;
        }

        var dOffset = scrollMetrics.dOffset,
            offset = scrollMetrics.offset,
            velocity = scrollMetrics.velocity,
            visibleLength = scrollMetrics.visibleLength;
        this._info.sample_count++;
        this._info.pixels_sampled += Math.round(visibleLength);
        this._info.pixels_scrolled += Math.round(Math.abs(dOffset));
        var scrollSpeed = Math.round(Math.abs(velocity) * 1000);
        var now = performanceNow();

        if (this._anyBlankStartTime != null) {
          this._info.any_blank_ms += now - this._anyBlankStartTime;
        }

        this._anyBlankStartTime = null;

        if (this._mostlyBlankStartTime != null) {
          this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;
        }

        this._mostlyBlankStartTime = null;
        var blankTop = 0;
        var first = state.first;

        var firstFrame = this._getFrameMetrics(first);

        while (first <= state.last && (!firstFrame || !firstFrame.inLayout)) {
          firstFrame = this._getFrameMetrics(first);
          first++;
        }

        if (firstFrame && first > 0) {
          blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));
        }

        var blankBottom = 0;
        var last = state.last;

        var lastFrame = this._getFrameMetrics(last);

        while (last >= state.first && (!lastFrame || !lastFrame.inLayout)) {
          lastFrame = this._getFrameMetrics(last);
          last--;
        }

        if (lastFrame && last < props.getItemCount(props.data) - 1) {
          var bottomEdge = lastFrame.offset + lastFrame.length;
          blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));
        }

        var pixels_blank = Math.round(blankTop + blankBottom);
        var blankness = pixels_blank / visibleLength;

        if (blankness > 0) {
          this._anyBlankStartTime = now;
          this._info.any_blank_speed_sum += scrollSpeed;
          this._info.any_blank_count++;
          this._info.pixels_blank += pixels_blank;

          if (blankness > 0.5) {
            this._mostlyBlankStartTime = now;
            this._info.mostly_blank_count++;
          }
        } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {
          this.deactivateAndFlush();
        }

        return blankness;
      }
    }, {
      key: "enabled",
      value: function enabled() {
        return this._enabled;
      }
    }, {
      key: "_resetData",
      value: function _resetData() {
        this._anyBlankStartTime = null;
        this._info = new Info();
        this._mostlyBlankStartTime = null;
        this._samplesStartTime = null;
      }
    }]);
    return FillRateHelper;
  }();

  module.exports = FillRateHelper;
},250,[53,56],"FillRateHelper");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var ViewabilityHelper = function () {
    function ViewabilityHelper() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        viewAreaCoveragePercentThreshold: 0
      };
      babelHelpers.classCallCheck(this, ViewabilityHelper);
      this._hasInteracted = false;
      this._timers = new Set();
      this._viewableIndices = [];
      this._viewableItems = new Map();
      this._config = config;
    }

    babelHelpers.createClass(ViewabilityHelper, [{
      key: "dispose",
      value: function dispose() {
        this._timers.forEach(clearTimeout);
      }
    }, {
      key: "computeViewableItems",
      value: function computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange) {
        var _config = this._config,
            itemVisiblePercentThreshold = _config.itemVisiblePercentThreshold,
            viewAreaCoveragePercentThreshold = _config.viewAreaCoveragePercentThreshold;
        var viewAreaMode = viewAreaCoveragePercentThreshold != null;
        var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;
        invariant(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');
        var viewableIndices = [];

        if (itemCount === 0) {
          return viewableIndices;
        }

        var firstVisible = -1;

        var _ref = renderRange || {
          first: 0,
          last: itemCount - 1
        },
            first = _ref.first,
            last = _ref.last;

        invariant(last < itemCount, 'Invalid render range ' + JSON.stringify({
          renderRange: renderRange,
          itemCount: itemCount
        }));

        for (var idx = first; idx <= last; idx++) {
          var metrics = getFrameMetrics(idx);

          if (!metrics) {
            continue;
          }

          var top = metrics.offset - scrollOffset;
          var bottom = top + metrics.length;

          if (top < viewportHeight && bottom > 0) {
            firstVisible = idx;

            if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {
              viewableIndices.push(idx);
            }
          } else if (firstVisible >= 0) {
            break;
          }
        }

        return viewableIndices;
      }
    }, {
      key: "onUpdate",
      value: function onUpdate(itemCount, scrollOffset, viewportHeight, getFrameMetrics, createViewToken, onViewableItemsChanged, renderRange) {
        var _this = this;

        if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !getFrameMetrics(0)) {
          return;
        }

        var viewableIndices = [];

        if (itemCount) {
          viewableIndices = this.computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange);
        }

        if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every(function (v, ii) {
          return v === viewableIndices[ii];
        })) {
          return;
        }

        this._viewableIndices = viewableIndices;

        if (this._config.minimumViewTime) {
          var handle = setTimeout(function () {
            _this._timers.delete(handle);

            _this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
          }, this._config.minimumViewTime);

          this._timers.add(handle);
        } else {
          this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
        }
      }
    }, {
      key: "resetViewableIndices",
      value: function resetViewableIndices() {
        this._viewableIndices = [];
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        this._hasInteracted = true;
      }
    }, {
      key: "_onUpdateSync",
      value: function _onUpdateSync(viewableIndicesToCheck, onViewableItemsChanged, createViewToken) {
        var _this2 = this;

        viewableIndicesToCheck = viewableIndicesToCheck.filter(function (ii) {
          return _this2._viewableIndices.includes(ii);
        });
        var prevItems = this._viewableItems;
        var nextItems = new Map(viewableIndicesToCheck.map(function (ii) {
          var viewable = createViewToken(ii, true);
          return [viewable.key, viewable];
        }));
        var changed = [];

        for (var _iterator = nextItems, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref4;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref4 = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref4 = _i.value;
          }

          var _ref2 = _ref4;

          var _ref3 = babelHelpers.slicedToArray(_ref2, 2);

          var _key = _ref3[0];
          var viewable = _ref3[1];

          if (!prevItems.has(_key)) {
            changed.push(viewable);
          }
        }

        for (var _iterator2 = prevItems, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref7;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref7 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref7 = _i2.value;
          }

          var _ref5 = _ref7;

          var _ref6 = babelHelpers.slicedToArray(_ref5, 2);

          var _key2 = _ref6[0];
          var _viewable = _ref6[1];

          if (!nextItems.has(_key2)) {
            changed.push(babelHelpers.extends({}, _viewable, {
              isViewable: false
            }));
          }
        }

        if (changed.length > 0) {
          this._viewableItems = nextItems;
          onViewableItemsChanged({
            viewableItems: Array.from(nextItems.values()),
            changed: changed,
            viewabilityConfig: this._config
          });
        }
      }
    }]);
    return ViewabilityHelper;
  }();

  function _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {
    if (_isEntirelyVisible(top, bottom, viewportHeight)) {
      return true;
    } else {
      var pixels = _getPixelsVisible(top, bottom, viewportHeight);

      var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);
      return percent >= viewablePercentThreshold;
    }
  }

  function _getPixelsVisible(top, bottom, viewportHeight) {
    var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);
    return Math.max(0, visibleHeight);
  }

  function _isEntirelyVisible(top, bottom, viewportHeight) {
    return top >= 0 && bottom <= viewportHeight && bottom > top;
  }

  module.exports = ViewabilityHelper;
},251,[13],"ViewabilityHelper");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  function elementsThatOverlapOffsets(offsets, itemCount, getFrameMetrics) {
    var out = [];
    var outLength = 0;

    for (var ii = 0; ii < itemCount; ii++) {
      var frame = getFrameMetrics(ii);
      var trailingOffset = frame.offset + frame.length;

      for (var kk = 0; kk < offsets.length; kk++) {
        if (out[kk] == null && trailingOffset >= offsets[kk]) {
          out[kk] = ii;
          outLength++;

          if (kk === offsets.length - 1) {
            invariant(outLength === offsets.length, 'bad offsets input, should be in increasing order: %s', JSON.stringify(offsets));
            return out;
          }
        }
      }
    }

    return out;
  }

  function newRangeCount(prev, next) {
    return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));
  }

  function computeWindowedRenderLimits(props, prev, getFrameMetricsApprox, scrollMetrics) {
    var data = props.data,
        getItemCount = props.getItemCount,
        maxToRenderPerBatch = props.maxToRenderPerBatch,
        windowSize = props.windowSize;
    var itemCount = getItemCount(data);

    if (itemCount === 0) {
      return prev;
    }

    var offset = scrollMetrics.offset,
        velocity = scrollMetrics.velocity,
        visibleLength = scrollMetrics.visibleLength;
    var visibleBegin = Math.max(0, offset);
    var visibleEnd = visibleBegin + visibleLength;
    var overscanLength = (windowSize - 1) * visibleLength;
    var leadFactor = 0.5;
    var fillPreference = velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';
    var overscanBegin = Math.max(0, visibleBegin - (1 - leadFactor) * overscanLength);
    var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);
    var lastItemOffset = getFrameMetricsApprox(itemCount - 1).offset;

    if (lastItemOffset < overscanBegin) {
      return {
        first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),
        last: itemCount - 1
      };
    }

    var _elementsThatOverlapO = elementsThatOverlapOffsets([overscanBegin, visibleBegin, visibleEnd, overscanEnd], props.getItemCount(props.data), getFrameMetricsApprox),
        _elementsThatOverlapO2 = babelHelpers.slicedToArray(_elementsThatOverlapO, 4),
        overscanFirst = _elementsThatOverlapO2[0],
        first = _elementsThatOverlapO2[1],
        last = _elementsThatOverlapO2[2],
        overscanLast = _elementsThatOverlapO2[3];

    overscanFirst = overscanFirst == null ? 0 : overscanFirst;
    first = first == null ? Math.max(0, overscanFirst) : first;
    overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;
    last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;
    var visible = {
      first: first,
      last: last
    };
    var newCellCount = newRangeCount(prev, visible);

    while (true) {
      if (first <= overscanFirst && last >= overscanLast) {
        break;
      }

      var maxNewCells = newCellCount >= maxToRenderPerBatch;
      var firstWillAddMore = first <= prev.first || first > prev.last;
      var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);
      var lastWillAddMore = last >= prev.last || last < prev.first;
      var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);

      if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {
        break;
      }

      if (firstShouldIncrement && !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)) {
        if (firstWillAddMore) {
          newCellCount++;
        }

        first--;
      }

      if (lastShouldIncrement && !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)) {
        if (lastWillAddMore) {
          newCellCount++;
        }

        last++;
      }
    }

    if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {
      throw new Error('Bad window calculation ' + JSON.stringify({
        first: first,
        last: last,
        itemCount: itemCount,
        overscanFirst: overscanFirst,
        overscanLast: overscanLast,
        visible: visible
      }));
    }

    return {
      first: first,
      last: last
    };
  }

  var VirtualizeUtils = {
    computeWindowedRenderLimits: computeWindowedRenderLimits,
    elementsThatOverlapOffsets: elementsThatOverlapOffsets,
    newRangeCount: newRangeCount
  };
  module.exports = VirtualizeUtils;
},252,[13],"VirtualizeUtils");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Image/ImageBackground.js";

  var Image = require(_dependencyMap[0], 'Image');

  var React = require(_dependencyMap[1], 'React');

  var StyleSheet = require(_dependencyMap[2], 'StyleSheet');

  var View = require(_dependencyMap[3], 'View');

  var ensureComponentIsNative = require(_dependencyMap[4], 'ensureComponentIsNative');

  var ImageBackground = function (_React$Component) {
    babelHelpers.inherits(ImageBackground, _React$Component);

    function ImageBackground() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, ImageBackground);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ImageBackground.__proto__ || Object.getPrototypeOf(ImageBackground)).call.apply(_ref, [this].concat(args))), _this), _this._viewRef = null, _this._captureRef = function (ref) {
        _this._viewRef = ref;
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(ImageBackground, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        var viewRef = this._viewRef;

        if (viewRef) {
          ensureComponentIsNative(viewRef);
          viewRef.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            children = _props.children,
            style = _props.style,
            imageStyle = _props.imageStyle,
            imageRef = _props.imageRef,
            props = babelHelpers.objectWithoutProperties(_props, ["children", "style", "imageStyle", "imageRef"]);
        return React.createElement(
          View,
          {
            style: style,
            ref: this._captureRef,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 68
            }
          },
          React.createElement(Image, babelHelpers.extends({}, props, {
            style: [StyleSheet.absoluteFill, {
              width: style.width,
              height: style.height
            }, imageStyle],
            ref: imageRef,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 69
            }
          })),
          children
        );
      }
    }]);
    return ImageBackground;
  }(React.Component);

  module.exports = ImageBackground;
},253,[222,130,168,170,254],"ImageBackground");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var ensureComponentIsNative = function ensureComponentIsNative(component) {
    invariant(component && typeof component.setNativeProps === 'function', 'Touchable child must either be native or forward setNativeProps to a ' + 'native component');
  };

  module.exports = ensureComponentIsNative;
},254,[13],"ensureComponentIsNative");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var RCTImageEditingManager = require(_dependencyMap[0], 'NativeModules').ImageEditingManager;

  var ImageEditor = function () {
    function ImageEditor() {
      babelHelpers.classCallCheck(this, ImageEditor);
    }

    babelHelpers.createClass(ImageEditor, null, [{
      key: "cropImage",
      value: function cropImage(uri, cropData, success, failure) {
        RCTImageEditingManager.cropImage(uri, cropData, success, failure);
      }
    }]);
    return ImageEditor;
  }();

  module.exports = ImageEditor;
},255,[15],"ImageEditor");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var RCTImageStoreManager = require(_dependencyMap[0], 'NativeModules').ImageStoreManager;

  var ImageStore = function () {
    function ImageStore() {
      babelHelpers.classCallCheck(this, ImageStore);
    }

    babelHelpers.createClass(ImageStore, null, [{
      key: "hasImageForTag",
      value: function hasImageForTag(uri, callback) {
        if (RCTImageStoreManager.hasImageForTag) {
          RCTImageStoreManager.hasImageForTag(uri, callback);
        } else {
          console.warn('hasImageForTag() not implemented');
        }
      }
    }, {
      key: "removeImageForTag",
      value: function removeImageForTag(uri) {
        if (RCTImageStoreManager.removeImageForTag) {
          RCTImageStoreManager.removeImageForTag(uri);
        } else {
          console.warn('removeImageForTag() not implemented');
        }
      }
    }, {
      key: "addImageFromBase64",
      value: function addImageFromBase64(base64ImageData, success, failure) {
        RCTImageStoreManager.addImageFromBase64(base64ImageData, success, failure);
      }
    }, {
      key: "getBase64ForTag",
      value: function getBase64ForTag(uri, success, failure) {
        RCTImageStoreManager.getBase64ForTag(uri, success, failure);
      }
    }]);
    return ImageStore;
  }();

  module.exports = ImageStore;
},256,[15],"ImageStore");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/Keyboard/KeyboardAvoidingView.js";

  var createReactClass = require(_dependencyMap[0], 'create-react-class');

  var Keyboard = require(_dependencyMap[1], 'Keyboard');

  var LayoutAnimation = require(_dependencyMap[2], 'LayoutAnimation');

  var Platform = require(_dependencyMap[3], 'Platform');

  var PropTypes = require(_dependencyMap[4], 'prop-types');

  var React = require(_dependencyMap[5], 'React');

  var TimerMixin = require(_dependencyMap[6], 'react-timer-mixin');

  var View = require(_dependencyMap[7], 'View');

  var ViewPropTypes = require(_dependencyMap[8], 'ViewPropTypes');

  var viewRef = 'VIEW';
  var KeyboardAvoidingView = createReactClass({
    displayName: 'KeyboardAvoidingView',
    mixins: [TimerMixin],
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      behavior: PropTypes.oneOf(['height', 'position', 'padding']),
      contentContainerStyle: ViewPropTypes.style,
      keyboardVerticalOffset: PropTypes.number.isRequired
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        keyboardVerticalOffset: 0
      };
    },
    getInitialState: function getInitialState() {
      return {
        bottom: 0
      };
    },
    subscriptions: [],
    frame: null,
    _relativeKeyboardHeight: function _relativeKeyboardHeight(keyboardFrame) {
      var frame = this.frame;

      if (!frame || !keyboardFrame) {
        return 0;
      }

      var keyboardY = keyboardFrame.screenY - this.props.keyboardVerticalOffset;
      return Math.max(frame.y + frame.height - keyboardY, 0);
    },
    _onKeyboardChange: function _onKeyboardChange(event) {
      if (!event) {
        this.setState({
          bottom: 0
        });
        return;
      }

      var duration = event.duration,
          easing = event.easing,
          endCoordinates = event.endCoordinates;

      var height = this._relativeKeyboardHeight(endCoordinates);

      if (this.state.bottom === height) {
        return;
      }

      if (duration && easing) {
        LayoutAnimation.configureNext({
          duration: duration,
          update: {
            duration: duration,
            type: LayoutAnimation.Types[easing] || 'keyboard'
          }
        });
      }

      this.setState({
        bottom: height
      });
    },
    _onLayout: function _onLayout(event) {
      this.frame = event.nativeEvent.layout;
    },
    componentWillUpdate: function componentWillUpdate(nextProps, nextState, nextContext) {
      if (nextState.bottom === this.state.bottom && this.props.behavior === 'height' && nextProps.behavior === 'height') {
        nextState.bottom = 0;
      }
    },
    componentWillMount: function componentWillMount() {
      if (Platform.OS === 'ios') {
        this.subscriptions = [Keyboard.addListener('keyboardWillChangeFrame', this._onKeyboardChange)];
      } else {
        this.subscriptions = [Keyboard.addListener('keyboardDidHide', this._onKeyboardChange), Keyboard.addListener('keyboardDidShow', this._onKeyboardChange)];
      }
    },
    componentWillUnmount: function componentWillUnmount() {
      this.subscriptions.forEach(function (sub) {
        return sub.remove();
      });
    },
    render: function render() {
      var _props = this.props,
          behavior = _props.behavior,
          children = _props.children,
          style = _props.style,
          props = babelHelpers.objectWithoutProperties(_props, ["behavior", "children", "style"]);

      switch (behavior) {
        case 'height':
          var heightStyle = void 0;

          if (this.frame) {
            heightStyle = {
              height: this.frame.height - this.state.bottom,
              flex: 0
            };
          }

          return React.createElement(
            View,
            babelHelpers.extends({
              ref: viewRef,
              style: [style, heightStyle],
              onLayout: this._onLayout
            }, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 172
              }
            }),
            children
          );

        case 'position':
          var positionStyle = {
            bottom: this.state.bottom
          };
          var contentContainerStyle = this.props.contentContainerStyle;
          return React.createElement(
            View,
            babelHelpers.extends({
              ref: viewRef,
              style: style,
              onLayout: this._onLayout
            }, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 182
              }
            }),
            React.createElement(
              View,
              {
                style: [contentContainerStyle, positionStyle],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 183
                }
              },
              children
            )
          );

        case 'padding':
          var paddingStyle = {
            paddingBottom: this.state.bottom
          };
          return React.createElement(
            View,
            babelHelpers.extends({
              ref: viewRef,
              style: [style, paddingStyle],
              onLayout: this._onLayout
            }, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 192
              }
            }),
            children
          );

        default:
          return React.createElement(
            View,
            babelHelpers.extends({
              ref: viewRef,
              onLayout: this._onLayout,
              style: style
            }, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 199
              }
            }),
            children
          );
      }
    }
  });
  module.exports = KeyboardAvoidingView;
},257,[172,228,229,52,127,130,191,170,131],"KeyboardAvoidingView");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = require(_dependencyMap[0], 'UnimplementedView');
},258,[259],"MaskedViewIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/UnimplementedViews/UnimplementedView.js";

  var React = require(_dependencyMap[0], 'React');

  var StyleSheet = require(_dependencyMap[1], 'StyleSheet');

  var UnimplementedView = function (_React$Component) {
    babelHelpers.inherits(UnimplementedView, _React$Component);

    function UnimplementedView() {
      babelHelpers.classCallCheck(this, UnimplementedView);
      return babelHelpers.possibleConstructorReturn(this, (UnimplementedView.__proto__ || Object.getPrototypeOf(UnimplementedView)).apply(this, arguments));
    }

    babelHelpers.createClass(UnimplementedView, [{
      key: "setNativeProps",
      value: function setNativeProps() {}
    }, {
      key: "render",
      value: function render() {
        var View = require(_dependencyMap[2], 'View');

        return React.createElement(
          View,
          {
            style: [styles.unimplementedView, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 33
            }
          },
          this.props.children
        );
      }
    }]);
    return UnimplementedView;
  }(React.Component);

  var styles = StyleSheet.create({
    unimplementedView: __DEV__ ? {
      alignSelf: 'flex-start',
      borderColor: 'red',
      borderWidth: 1
    } : {}
  });
  module.exports = UnimplementedView;
},259,[130,168,170],"UnimplementedView");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Modal/Modal.js",
      _container;

  var AppContainer = require(_dependencyMap[0], 'AppContainer');

  var I18nManager = require(_dependencyMap[1], 'I18nManager');

  var NativeEventEmitter = require(_dependencyMap[2], 'NativeEventEmitter');

  var NativeModules = require(_dependencyMap[3], 'NativeModules');

  var Platform = require(_dependencyMap[4], 'Platform');

  var React = require(_dependencyMap[5], 'React');

  var PropTypes = require(_dependencyMap[6], 'prop-types');

  var StyleSheet = require(_dependencyMap[7], 'StyleSheet');

  var View = require(_dependencyMap[8], 'View');

  var deprecatedPropType = require(_dependencyMap[9], 'deprecatedPropType');

  var requireNativeComponent = require(_dependencyMap[10], 'requireNativeComponent');

  var RCTModalHostView = requireNativeComponent('RCTModalHostView', null);
  var ModalEventEmitter = Platform.OS === 'ios' && NativeModules.ModalManager ? new NativeEventEmitter(NativeModules.ModalManager) : null;
  var uniqueModalIdentifier = 0;

  var Modal = function (_React$Component) {
    babelHelpers.inherits(Modal, _React$Component);

    function Modal(props) {
      babelHelpers.classCallCheck(this, Modal);

      var _this = babelHelpers.possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));

      Modal._confirmProps(props);

      _this._identifier = uniqueModalIdentifier++;
      return _this;
    }

    babelHelpers.createClass(Modal, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        if (ModalEventEmitter) {
          this._eventSubscription = ModalEventEmitter.addListener('modalDismissed', function (event) {
            if (event.modalID === _this2._identifier && _this2.props.onDismiss) {
              _this2.props.onDismiss();
            }
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._eventSubscription) {
          this._eventSubscription.remove();
        }
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        Modal._confirmProps(nextProps);
      }
    }, {
      key: "render",
      value: function render() {
        if (this.props.visible === false) {
          return null;
        }

        var containerStyles = {
          backgroundColor: this.props.transparent ? 'transparent' : 'white'
        };
        var animationType = this.props.animationType;

        if (!animationType) {
          animationType = 'none';

          if (this.props.animated) {
            animationType = 'slide';
          }
        }

        var presentationStyle = this.props.presentationStyle;

        if (!presentationStyle) {
          presentationStyle = 'fullScreen';

          if (this.props.transparent) {
            presentationStyle = 'overFullScreen';
          }
        }

        var innerChildren = __DEV__ ? React.createElement(
          AppContainer,
          {
            rootTag: this.context.rootTag,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 238
            }
          },
          this.props.children
        ) : this.props.children;
        return React.createElement(
          RCTModalHostView,
          {
            animationType: animationType,
            presentationStyle: presentationStyle,
            transparent: this.props.transparent,
            hardwareAccelerated: this.props.hardwareAccelerated,
            onRequestClose: this.props.onRequestClose,
            onShow: this.props.onShow,
            identifier: this._identifier,
            style: styles.modal,
            onStartShouldSetResponder: this._shouldSetResponder,
            supportedOrientations: this.props.supportedOrientations,
            onOrientationChange: this.props.onOrientationChange,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 244
            }
          },
          React.createElement(
            View,
            {
              style: [styles.container, containerStyles],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 257
              }
            },
            innerChildren
          )
        );
      }
    }, {
      key: "_shouldSetResponder",
      value: function _shouldSetResponder() {
        return true;
      }
    }], [{
      key: "_confirmProps",
      value: function _confirmProps(props) {
        if (props.presentationStyle && props.presentationStyle !== 'overFullScreen' && props.transparent) {
          console.warn("Modal with '" + props.presentationStyle + "' presentation style and 'transparent' value is not supported.");
        }
      }
    }]);
    return Modal;
  }(React.Component);

  Modal.propTypes = {
    animationType: PropTypes.oneOf(['none', 'slide', 'fade']),
    presentationStyle: PropTypes.oneOf(['fullScreen', 'pageSheet', 'formSheet', 'overFullScreen']),
    transparent: PropTypes.bool,
    hardwareAccelerated: PropTypes.bool,
    visible: PropTypes.bool,
    onRequestClose: Platform.isTVOS || Platform.OS === 'android' ? PropTypes.func.isRequired : PropTypes.func,
    onShow: PropTypes.func,
    onDismiss: PropTypes.func,
    animated: deprecatedPropType(PropTypes.bool, 'Use the `animationType` prop instead.'),
    supportedOrientations: PropTypes.arrayOf(PropTypes.oneOf(['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right'])),
    onOrientationChange: PropTypes.func
  };
  Modal.defaultProps = {
    visible: true,
    hardwareAccelerated: false
  };
  Modal.contextTypes = {
    rootTag: PropTypes.number
  };
  var side = I18nManager.isRTL ? 'right' : 'left';
  var styles = StyleSheet.create({
    modal: {
      position: 'absolute'
    },
    container: (_container = {
      position: 'absolute'
    }, babelHelpers.defineProperty(_container, side, 0), babelHelpers.defineProperty(_container, "top", 0), _container)
  });
  module.exports = Modal;
},260,[261,280,69,15,52,130,127,168,170,143,145],"Modal");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/ReactNative/AppContainer.js";

  var EmitterSubscription = require(_dependencyMap[0], 'EmitterSubscription');

  var PropTypes = require(_dependencyMap[1], 'prop-types');

  var RCTDeviceEventEmitter = require(_dependencyMap[2], 'RCTDeviceEventEmitter');

  var React = require(_dependencyMap[3], 'React');

  var ReactNative = require(_dependencyMap[4], 'ReactNative');

  var StyleSheet = require(_dependencyMap[5], 'StyleSheet');

  var View = require(_dependencyMap[6], 'View');

  var AppContainer = function (_React$Component) {
    babelHelpers.inherits(AppContainer, _React$Component);

    function AppContainer() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, AppContainer);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = AppContainer.__proto__ || Object.getPrototypeOf(AppContainer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        inspector: null,
        mainKey: 1
      }, _this._subscription = null, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(AppContainer, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          rootTag: this.props.rootTag
        };
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        if (__DEV__) {
          if (!global.__RCTProfileIsProfiling) {
            this._subscription = RCTDeviceEventEmitter.addListener('toggleElementInspector', function () {
              var Inspector = require(_dependencyMap[7], 'Inspector');

              var inspector = _this2.state.inspector ? null : React.createElement(Inspector, {
                inspectedViewTag: ReactNative.findNodeHandle(_this2._mainRef),
                onRequestRerenderApp: function onRequestRerenderApp(updateInspectedViewTag) {
                  _this2.setState(function (s) {
                    return {
                      mainKey: s.mainKey + 1
                    };
                  }, function () {
                    return updateInspectedViewTag(ReactNative.findNodeHandle(_this2._mainRef));
                  });
                },
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 66
                }
              });

              _this2.setState({
                inspector: inspector
              });
            });
          }
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._subscription) {
          this._subscription.remove();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var yellowBox = null;

        if (__DEV__) {
          if (!global.__RCTProfileIsProfiling) {
            var YellowBox = require(_dependencyMap[8], 'YellowBox');

            yellowBox = React.createElement(YellowBox, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 97
              }
            });
          }
        }

        var innerView = React.createElement(
          View,
          {
            collapsable: !this.state.inspector,
            key: this.state.mainKey,
            pointerEvents: "box-none",
            style: styles.appContainer,
            ref: function ref(_ref2) {
              _this3._mainRef = _ref2;
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 102
            }
          },
          this.props.children
        );
        var Wrapper = this.props.WrapperComponent;

        if (Wrapper) {
          innerView = React.createElement(
            Wrapper,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 119
              }
            },
            innerView
          );
        }

        return React.createElement(
          View,
          {
            style: styles.appContainer,
            pointerEvents: "box-none",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 122
            }
          },
          innerView,
          yellowBox,
          this.state.inspector
        );
      }
    }]);
    return AppContainer;
  }(React.Component);

  AppContainer.childContextTypes = {
    rootTag: PropTypes.number
  };
  var styles = StyleSheet.create({
    appContainer: {
      flex: 1
    }
  });
  module.exports = AppContainer;
},261,[65,127,70,130,21,168,170,262,278],"AppContainer");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Inspector/Inspector.js";

  var Dimensions = require(_dependencyMap[0], 'Dimensions');

  var InspectorOverlay = require(_dependencyMap[1], 'InspectorOverlay');

  var InspectorPanel = require(_dependencyMap[2], 'InspectorPanel');

  var Platform = require(_dependencyMap[3], 'Platform');

  var React = require(_dependencyMap[4], 'React');

  var ReactNative = require(_dependencyMap[5], 'ReactNative');

  var StyleSheet = require(_dependencyMap[6], 'StyleSheet');

  var Touchable = require(_dependencyMap[7], 'Touchable');

  var UIManager = require(_dependencyMap[8], 'UIManager');

  var View = require(_dependencyMap[9], 'View');

  var emptyObject = require(_dependencyMap[10], 'fbjs/lib/emptyObject');

  var invariant = require(_dependencyMap[11], 'fbjs/lib/invariant');

  var hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
  var renderer = findRenderer();
  hook.resolveRNStyle = require(_dependencyMap[12], 'flattenStyle');

  function findRenderer() {
    var renderers = hook._renderers;
    var keys = Object.keys(renderers);
    invariant(keys.length === 1, 'Expected to find exactly one React Native renderer on DevTools hook.');
    return renderers[keys[0]];
  }

  var Inspector = function (_React$Component) {
    babelHelpers.inherits(Inspector, _React$Component);

    function Inspector(props) {
      babelHelpers.classCallCheck(this, Inspector);

      var _this = babelHelpers.possibleConstructorReturn(this, (Inspector.__proto__ || Object.getPrototypeOf(Inspector)).call(this, props));

      _initialiseProps.call(_this);

      _this.state = {
        devtoolsAgent: null,
        hierarchy: null,
        panelPos: 'bottom',
        inspecting: true,
        perfing: false,
        inspected: null,
        selection: null,
        inspectedViewTag: _this.props.inspectedViewTag,
        networking: false
      };
      return _this;
    }

    babelHelpers.createClass(Inspector, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        hook.on('react-devtools', this.attachToDevtools);

        if (hook.reactDevtoolsAgent) {
          this.attachToDevtools(hook.reactDevtoolsAgent);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._subs) {
          this._subs.map(function (fn) {
            return fn();
          });
        }

        hook.off('react-devtools', this.attachToDevtools);
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(newProps) {
        this.setState({
          inspectedViewTag: newProps.inspectedViewTag
        });
      }
    }, {
      key: "setSelection",
      value: function setSelection(i) {
        var _this2 = this;

        var hierarchyItem = this.state.hierarchy[i];

        var _hierarchyItem$getIns = hierarchyItem.getInspectorData(ReactNative.findNodeHandle),
            measure = _hierarchyItem$getIns.measure,
            props = _hierarchyItem$getIns.props,
            source = _hierarchyItem$getIns.source;

        measure(function (x, y, width, height, left, top) {
          _this2.setState({
            inspected: {
              frame: {
                left: left,
                top: top,
                width: width,
                height: height
              },
              style: props.style,
              source: source
            },
            selection: i
          });
        });
      }
    }, {
      key: "onTouchViewTag",
      value: function onTouchViewTag(touchedViewTag, frame, pointerY) {
        var _renderer$getInspecto = renderer.getInspectorDataForViewTag(touchedViewTag),
            hierarchy = _renderer$getInspecto.hierarchy,
            props = _renderer$getInspecto.props,
            selection = _renderer$getInspecto.selection,
            source = _renderer$getInspecto.source;

        if (this.state.devtoolsAgent) {
          var offsetFromLeaf = hierarchy.length - 1 - selection;
          this.state.devtoolsAgent.selectFromDOMNode(touchedViewTag, true, offsetFromLeaf);
        }

        this.setState({
          panelPos: pointerY > Dimensions.get('window').height / 2 ? 'top' : 'bottom',
          selection: selection,
          hierarchy: hierarchy,
          inspected: {
            style: props.style,
            frame: frame,
            source: source
          }
        });
      }
    }, {
      key: "setPerfing",
      value: function setPerfing(val) {
        this.setState({
          perfing: val,
          inspecting: false,
          inspected: null,
          networking: false
        });
      }
    }, {
      key: "setInspecting",
      value: function setInspecting(val) {
        this.setState({
          inspecting: val,
          inspected: null
        });
      }
    }, {
      key: "setTouchTargetting",
      value: function setTouchTargetting(val) {
        var _this3 = this;

        Touchable.TOUCH_TARGET_DEBUG = val;
        this.props.onRequestRerenderApp(function (inspectedViewTag) {
          _this3.setState({
            inspectedViewTag: inspectedViewTag
          });
        });
      }
    }, {
      key: "setNetworking",
      value: function setNetworking(val) {
        this.setState({
          networking: val,
          perfing: false,
          inspecting: false,
          inspected: null
        });
      }
    }, {
      key: "render",
      value: function render() {
        var panelContainerStyle = this.state.panelPos === 'bottom' ? {
          bottom: 0
        } : {
          top: Platform.OS === 'ios' ? 20 : 0
        };
        return React.createElement(
          View,
          {
            style: styles.container,
            pointerEvents: "box-none",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 232
            }
          },
          this.state.inspecting && React.createElement(InspectorOverlay, {
            inspected: this.state.inspected,
            inspectedViewTag: this.state.inspectedViewTag,
            onTouchViewTag: this.onTouchViewTag.bind(this),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 234
            }
          }),
          React.createElement(
            View,
            {
              style: [styles.panelContainer, panelContainerStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 239
              }
            },
            React.createElement(InspectorPanel, {
              devtoolsIsOpen: !!this.state.devtoolsAgent,
              inspecting: this.state.inspecting,
              perfing: this.state.perfing,
              setPerfing: this.setPerfing.bind(this),
              setInspecting: this.setInspecting.bind(this),
              inspected: this.state.inspected,
              hierarchy: this.state.hierarchy,
              selection: this.state.selection,
              setSelection: this.setSelection.bind(this),
              touchTargetting: Touchable.TOUCH_TARGET_DEBUG,
              setTouchTargetting: this.setTouchTargetting.bind(this),
              networking: this.state.networking,
              setNetworking: this.setNetworking.bind(this),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 240
              }
            })
          )
        );
      }
    }]);
    return Inspector;
  }(React.Component);

  var _initialiseProps = function _initialiseProps() {
    var _this4 = this;

    this.attachToDevtools = function (agent) {
      var _hideWait = null;
      var hlSub = agent.sub('highlight', function (_ref) {
        var node = _ref.node,
            name = _ref.name,
            props = _ref.props;
        clearTimeout(_hideWait);

        if (typeof node !== 'number') {
          node = ReactNative.findNodeHandle(node);
        }

        UIManager.measure(node, function (x, y, width, height, left, top) {
          _this4.setState({
            hierarchy: [],
            inspected: {
              frame: {
                left: left,
                top: top,
                width: width,
                height: height
              },
              style: props ? props.style : emptyObject
            }
          });
        });
      });
      var hideSub = agent.sub('hideHighlight', function () {
        if (_this4.state.inspected === null) {
          return;
        }

        _hideWait = setTimeout(function () {
          _this4.setState({
            inspected: null
          });
        }, 100);
      });
      _this4._subs = [hlSub, hideSub];
      agent.on('shutdown', function () {
        _this4.setState({
          devtoolsAgent: null
        });

        _this4._subs = null;
      });

      _this4.setState({
        devtoolsAgent: agent
      });
    };
  };

  var styles = StyleSheet.create({
    container: {
      position: 'absolute',
      backgroundColor: 'transparent',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    panelContainer: {
      position: 'absolute',
      left: 0,
      right: 0
    }
  });
  module.exports = Inspector;
},262,[164,263,267,52,130,21,168,182,107,170,111,13,101],"Inspector");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Inspector/InspectorOverlay.js";

  var Dimensions = require(_dependencyMap[0], 'Dimensions');

  var ElementBox = require(_dependencyMap[1], 'ElementBox');

  var PropTypes = require(_dependencyMap[2], 'prop-types');

  var React = require(_dependencyMap[3], 'React');

  var StyleSheet = require(_dependencyMap[4], 'StyleSheet');

  var UIManager = require(_dependencyMap[5], 'UIManager');

  var View = require(_dependencyMap[6], 'View');

  var InspectorOverlay = function (_React$Component) {
    babelHelpers.inherits(InspectorOverlay, _React$Component);

    function InspectorOverlay() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, InspectorOverlay);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = InspectorOverlay.__proto__ || Object.getPrototypeOf(InspectorOverlay)).call.apply(_ref, [this].concat(args))), _this), _this.findViewForTouchEvent = function (e) {
        var _e$nativeEvent$touche = e.nativeEvent.touches[0],
            locationX = _e$nativeEvent$touche.locationX,
            locationY = _e$nativeEvent$touche.locationY;
        UIManager.findSubviewIn(_this.props.inspectedViewTag, [locationX, locationY], function (nativeViewTag, left, top, width, height) {
          _this.props.onTouchViewTag(nativeViewTag, {
            left: left,
            top: top,
            width: width,
            height: height
          }, locationY);
        });
      }, _this.shouldSetResponser = function (e) {
        _this.findViewForTouchEvent(e);

        return true;
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(InspectorOverlay, [{
      key: "render",
      value: function render() {
        var content = null;

        if (this.props.inspected) {
          content = React.createElement(ElementBox, {
            frame: this.props.inspected.frame,
            style: this.props.inspected.style,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 62
            }
          });
        }

        return React.createElement(
          View,
          {
            onStartShouldSetResponder: this.shouldSetResponser,
            onResponderMove: this.findViewForTouchEvent,
            style: [styles.inspector, {
              height: Dimensions.get('window').height
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 66
            }
          },
          content
        );
      }
    }]);
    return InspectorOverlay;
  }(React.Component);

  InspectorOverlay.propTypes = {
    inspected: PropTypes.shape({
      frame: PropTypes.object,
      style: PropTypes.any
    }),
    inspectedViewTag: PropTypes.number,
    onTouchViewTag: PropTypes.func.isRequired
  };
  var styles = StyleSheet.create({
    inspector: {
      backgroundColor: 'transparent',
      position: 'absolute',
      left: 0,
      top: 0,
      right: 0
    }
  });
  module.exports = InspectorOverlay;
},263,[164,264,127,130,168,107,170],"InspectorOverlay");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Inspector/ElementBox.js";

  var React = require(_dependencyMap[0], 'React');

  var View = require(_dependencyMap[1], 'View');

  var StyleSheet = require(_dependencyMap[2], 'StyleSheet');

  var BorderBox = require(_dependencyMap[3], 'BorderBox');

  var resolveBoxStyle = require(_dependencyMap[4], 'resolveBoxStyle');

  var flattenStyle = require(_dependencyMap[5], 'flattenStyle');

  var ElementBox = function (_React$Component) {
    babelHelpers.inherits(ElementBox, _React$Component);

    function ElementBox() {
      babelHelpers.classCallCheck(this, ElementBox);
      return babelHelpers.possibleConstructorReturn(this, (ElementBox.__proto__ || Object.getPrototypeOf(ElementBox)).apply(this, arguments));
    }

    babelHelpers.createClass(ElementBox, [{
      key: "render",
      value: function render() {
        var style = flattenStyle(this.props.style) || {};
        var margin = resolveBoxStyle('margin', style);
        var padding = resolveBoxStyle('padding', style);
        var frameStyle = this.props.frame;

        if (margin) {
          frameStyle = {
            top: frameStyle.top - margin.top,
            left: frameStyle.left - margin.left,
            height: frameStyle.height + margin.top + margin.bottom,
            width: frameStyle.width + margin.left + margin.right
          };
        }

        var contentStyle = {
          width: this.props.frame.width,
          height: this.props.frame.height
        };

        if (padding) {
          contentStyle = {
            width: contentStyle.width - padding.left - padding.right,
            height: contentStyle.height - padding.top - padding.bottom
          };
        }

        return React.createElement(
          View,
          {
            style: [styles.frame, frameStyle],
            pointerEvents: "none",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 47
            }
          },
          React.createElement(
            BorderBox,
            {
              box: margin,
              style: styles.margin,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 48
              }
            },
            React.createElement(
              BorderBox,
              {
                box: padding,
                style: styles.padding,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 49
                }
              },
              React.createElement(View, {
                style: [styles.content, contentStyle],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 50
                }
              })
            )
          )
        );
      }
    }]);
    return ElementBox;
  }(React.Component);

  var styles = StyleSheet.create({
    frame: {
      position: 'absolute'
    },
    content: {
      backgroundColor: 'rgba(200, 230, 255, 0.8)'
    },
    padding: {
      borderColor: 'rgba(77, 255, 0, 0.3)'
    },
    margin: {
      borderColor: 'rgba(255, 132, 0, 0.3)'
    }
  });
  module.exports = ElementBox;
},264,[130,170,168,265,266,101],"ElementBox");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Inspector/BorderBox.js";

  var React = require(_dependencyMap[0], 'React');

  var View = require(_dependencyMap[1], 'View');

  var BorderBox = function (_React$Component) {
    babelHelpers.inherits(BorderBox, _React$Component);

    function BorderBox() {
      babelHelpers.classCallCheck(this, BorderBox);
      return babelHelpers.possibleConstructorReturn(this, (BorderBox.__proto__ || Object.getPrototypeOf(BorderBox)).apply(this, arguments));
    }

    babelHelpers.createClass(BorderBox, [{
      key: "render",
      value: function render() {
        var box = this.props.box;

        if (!box) {
          return this.props.children;
        }

        var style = {
          borderTopWidth: box.top,
          borderBottomWidth: box.bottom,
          borderLeftWidth: box.left,
          borderRightWidth: box.right
        };
        return React.createElement(
          View,
          {
            style: [style, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 30
            }
          },
          this.props.children
        );
      }
    }]);
    return BorderBox;
  }(React.Component);

  module.exports = BorderBox;
},265,[130,170],"BorderBox");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function resolveBoxStyle(prefix, style) {
    var res = {};
    var subs = ['top', 'left', 'bottom', 'right'];
    var set = false;
    subs.forEach(function (sub) {
      res[sub] = style[prefix] || 0;
    });

    if (style[prefix]) {
      set = true;
    }

    if (style[prefix + 'Vertical']) {
      res.top = res.bottom = style[prefix + 'Vertical'];
      set = true;
    }

    if (style[prefix + 'Horizontal']) {
      res.left = res.right = style[prefix + 'Horizontal'];
      set = true;
    }

    subs.forEach(function (sub) {
      var val = style[prefix + capFirst(sub)];

      if (val) {
        res[sub] = val;
        set = true;
      }
    });

    if (!set) {
      return;
    }

    return res;
  }

  function capFirst(text) {
    return text[0].toUpperCase() + text.slice(1);
  }

  module.exports = resolveBoxStyle;
},266,[],"resolveBoxStyle");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Inspector/InspectorPanel.js";

  var ElementProperties = require(_dependencyMap[0], 'ElementProperties');

  var NetworkOverlay = require(_dependencyMap[1], 'NetworkOverlay');

  var PerformanceOverlay = require(_dependencyMap[2], 'PerformanceOverlay');

  var React = require(_dependencyMap[3], 'React');

  var PropTypes = require(_dependencyMap[4], 'prop-types');

  var ScrollView = require(_dependencyMap[5], 'ScrollView');

  var StyleSheet = require(_dependencyMap[6], 'StyleSheet');

  var Text = require(_dependencyMap[7], 'Text');

  var TouchableHighlight = require(_dependencyMap[8], 'TouchableHighlight');

  var View = require(_dependencyMap[9], 'View');

  var InspectorPanel = function (_React$Component) {
    babelHelpers.inherits(InspectorPanel, _React$Component);

    function InspectorPanel() {
      babelHelpers.classCallCheck(this, InspectorPanel);
      return babelHelpers.possibleConstructorReturn(this, (InspectorPanel.__proto__ || Object.getPrototypeOf(InspectorPanel)).apply(this, arguments));
    }

    babelHelpers.createClass(InspectorPanel, [{
      key: "renderWaiting",
      value: function renderWaiting() {
        if (this.props.inspecting) {
          return React.createElement(
            Text,
            {
              style: styles.waitingText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 29
              }
            },
            "Tap something to inspect it"
          );
        }

        return React.createElement(
          Text,
          {
            style: styles.waitingText,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 34
            }
          },
          "Nothing is inspected"
        );
      }
    }, {
      key: "render",
      value: function render() {
        var contents = void 0;

        if (this.props.inspected) {
          contents = React.createElement(
            ScrollView,
            {
              style: styles.properties,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 41
              }
            },
            React.createElement(ElementProperties, {
              style: this.props.inspected.style,
              frame: this.props.inspected.frame,
              source: this.props.inspected.source,
              hierarchy: this.props.hierarchy,
              selection: this.props.selection,
              setSelection: this.props.setSelection,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 42
              }
            })
          );
        } else if (this.props.perfing) {
          contents = React.createElement(PerformanceOverlay, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 54
            }
          });
        } else if (this.props.networking) {
          contents = React.createElement(NetworkOverlay, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 58
            }
          });
        } else {
          contents = React.createElement(
            View,
            {
              style: styles.waiting,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 62
              }
            },
            this.renderWaiting()
          );
        }

        return React.createElement(
          View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 68
            }
          },
          !this.props.devtoolsIsOpen && contents,
          React.createElement(
            View,
            {
              style: styles.buttonRow,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 70
              }
            },
            React.createElement(Button, {
              title: 'Inspect',
              pressed: this.props.inspecting,
              onClick: this.props.setInspecting,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 71
              }
            }),
            React.createElement(Button, {
              title: 'Perf',
              pressed: this.props.perfing,
              onClick: this.props.setPerfing,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 76
              }
            }),
            React.createElement(Button, {
              title: 'Network',
              pressed: this.props.networking,
              onClick: this.props.setNetworking,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 80
              }
            }),
            React.createElement(Button, {
              title: 'Touchables',
              pressed: this.props.touchTargetting,
              onClick: this.props.setTouchTargetting,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 84
              }
            })
          )
        );
      }
    }]);
    return InspectorPanel;
  }(React.Component);

  InspectorPanel.propTypes = {
    devtoolsIsOpen: PropTypes.bool,
    inspecting: PropTypes.bool,
    setInspecting: PropTypes.func,
    inspected: PropTypes.object,
    perfing: PropTypes.bool,
    setPerfing: PropTypes.func,
    touchTargetting: PropTypes.bool,
    setTouchTargetting: PropTypes.func,
    networking: PropTypes.bool,
    setNetworking: PropTypes.func
  };

  var Button = function (_React$Component2) {
    babelHelpers.inherits(Button, _React$Component2);

    function Button() {
      babelHelpers.classCallCheck(this, Button);
      return babelHelpers.possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
    }

    babelHelpers.createClass(Button, [{
      key: "render",
      value: function render() {
        var _this3 = this;

        return React.createElement(
          TouchableHighlight,
          {
            onPress: function onPress() {
              return _this3.props.onClick(!_this3.props.pressed);
            },
            style: [styles.button, this.props.pressed && styles.buttonPressed],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 110
            }
          },
          React.createElement(
            Text,
            {
              style: styles.buttonText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 114
              }
            },
            this.props.title
          )
        );
      }
    }]);
    return Button;
  }(React.Component);

  var styles = StyleSheet.create({
    buttonRow: {
      flexDirection: 'row'
    },
    button: {
      backgroundColor: 'rgba(0, 0, 0, 0.3)',
      margin: 2,
      height: 30,
      justifyContent: 'center',
      alignItems: 'center'
    },
    buttonPressed: {
      backgroundColor: 'rgba(255, 255, 255, 0.3)'
    },
    buttonText: {
      textAlign: 'center',
      color: 'white',
      margin: 5
    },
    container: {
      backgroundColor: 'rgba(0, 0, 0, 0.7)'
    },
    properties: {
      height: 200
    },
    waiting: {
      height: 100
    },
    waitingText: {
      fontSize: 20,
      textAlign: 'center',
      marginVertical: 20,
      color: 'white'
    }
  });
  module.exports = InspectorPanel;
},267,[268,274,277,130,127,224,168,181,271,170],"InspectorPanel");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Inspector/ElementProperties.js";

  var BoxInspector = require(_dependencyMap[0], 'BoxInspector');

  var PropTypes = require(_dependencyMap[1], 'prop-types');

  var React = require(_dependencyMap[2], 'React');

  var StyleInspector = require(_dependencyMap[3], 'StyleInspector');

  var StyleSheet = require(_dependencyMap[4], 'StyleSheet');

  var Text = require(_dependencyMap[5], 'Text');

  var TouchableHighlight = require(_dependencyMap[6], 'TouchableHighlight');

  var TouchableWithoutFeedback = require(_dependencyMap[7], 'TouchableWithoutFeedback');

  var View = require(_dependencyMap[8], 'View');

  var flattenStyle = require(_dependencyMap[9], 'flattenStyle');

  var mapWithSeparator = require(_dependencyMap[10], 'mapWithSeparator');

  var openFileInEditor = require(_dependencyMap[11], 'openFileInEditor');

  var ElementProperties = function (_React$Component) {
    babelHelpers.inherits(ElementProperties, _React$Component);

    function ElementProperties() {
      babelHelpers.classCallCheck(this, ElementProperties);
      return babelHelpers.possibleConstructorReturn(this, (ElementProperties.__proto__ || Object.getPrototypeOf(ElementProperties)).apply(this, arguments));
    }

    babelHelpers.createClass(ElementProperties, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var style = flattenStyle(this.props.style);
        var selection = this.props.selection;
        var openFileButton = void 0;
        var source = this.props.source;

        var _ref = source || {},
            fileName = _ref.fileName,
            lineNumber = _ref.lineNumber;

        if (fileName && lineNumber) {
          var parts = fileName.split('/');
          var fileNameShort = parts[parts.length - 1];
          openFileButton = React.createElement(
            TouchableHighlight,
            {
              style: styles.openButton,
              onPress: openFileInEditor.bind(null, fileName, lineNumber),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 62
              }
            },
            React.createElement(
              Text,
              {
                style: styles.openButtonTitle,
                numberOfLines: 1,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 65
                }
              },
              fileNameShort,
              ":",
              lineNumber
            )
          );
        }

        return React.createElement(
          TouchableWithoutFeedback,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 74
            }
          },
          React.createElement(
            View,
            {
              style: styles.info,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 75
              }
            },
            React.createElement(
              View,
              {
                style: styles.breadcrumb,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 76
                }
              },
              mapWithSeparator(this.props.hierarchy, function (hierarchyItem, i) {
                return React.createElement(
                  TouchableHighlight,
                  {
                    key: 'item-' + i,
                    style: [styles.breadItem, i === selection && styles.selected],
                    onPress: function onPress() {
                      return _this2.props.setSelection(i);
                    },
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 80
                    }
                  },
                  React.createElement(
                    Text,
                    {
                      style: styles.breadItemText,
                      __source: {
                        fileName: _jsxFileName,
                        lineNumber: 85
                      }
                    },
                    hierarchyItem.name
                  )
                );
              }, function (i) {
                return React.createElement(
                  Text,
                  {
                    key: 'sep-' + i,
                    style: styles.breadSep,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 91
                    }
                  },
                  "\u25B8"
                );
              })
            ),
            React.createElement(
              View,
              {
                style: styles.row,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 97
                }
              },
              React.createElement(
                View,
                {
                  style: styles.col,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 98
                  }
                },
                React.createElement(StyleInspector, {
                  style: style,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 99
                  }
                }),
                openFileButton
              ),
              React.createElement(BoxInspector, {
                style: style,
                frame: this.props.frame,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 104
                }
              })
            )
          )
        );
      }
    }]);
    return ElementProperties;
  }(React.Component);

  ElementProperties.propTypes = {
    hierarchy: PropTypes.array.isRequired,
    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.number]),
    source: PropTypes.shape({
      fileName: PropTypes.string,
      lineNumber: PropTypes.number
    })
  };
  var styles = StyleSheet.create({
    breadSep: {
      fontSize: 8,
      color: 'white'
    },
    breadcrumb: {
      flexDirection: 'row',
      flexWrap: 'wrap',
      alignItems: 'flex-start',
      marginBottom: 5
    },
    selected: {
      borderColor: 'white',
      borderRadius: 5
    },
    breadItem: {
      borderWidth: 1,
      borderColor: 'transparent',
      marginHorizontal: 2
    },
    breadItemText: {
      fontSize: 10,
      color: 'white',
      marginHorizontal: 5
    },
    row: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between'
    },
    col: {
      flex: 1
    },
    info: {
      padding: 10
    },
    openButton: {
      padding: 10,
      backgroundColor: '#000',
      marginVertical: 5,
      marginRight: 5,
      borderRadius: 2
    },
    openButtonTitle: {
      color: 'white',
      fontSize: 8
    }
  });
  module.exports = ElementProperties;
},268,[269,127,130,270,168,181,271,190,170,101,272,273],"ElementProperties");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Inspector/BoxInspector.js";

  var React = require(_dependencyMap[0], 'React');

  var StyleSheet = require(_dependencyMap[1], 'StyleSheet');

  var Text = require(_dependencyMap[2], 'Text');

  var View = require(_dependencyMap[3], 'View');

  var resolveBoxStyle = require(_dependencyMap[4], 'resolveBoxStyle');

  var blank = {
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  };

  var BoxInspector = function (_React$Component) {
    babelHelpers.inherits(BoxInspector, _React$Component);

    function BoxInspector() {
      babelHelpers.classCallCheck(this, BoxInspector);
      return babelHelpers.possibleConstructorReturn(this, (BoxInspector.__proto__ || Object.getPrototypeOf(BoxInspector)).apply(this, arguments));
    }

    babelHelpers.createClass(BoxInspector, [{
      key: "render",
      value: function render() {
        var frame = this.props.frame;
        var style = this.props.style;
        var margin = style && resolveBoxStyle('margin', style) || blank;
        var padding = style && resolveBoxStyle('padding', style) || blank;
        return React.createElement(
          BoxContainer,
          {
            title: "margin",
            titleStyle: styles.marginLabel,
            box: margin,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 34
            }
          },
          React.createElement(
            BoxContainer,
            {
              title: "padding",
              box: padding,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 35
              }
            },
            React.createElement(
              View,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 36
                }
              },
              React.createElement(
                Text,
                {
                  style: styles.innerText,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 37
                  }
                },
                "(",
                (frame.left || 0).toFixed(1),
                ", ",
                (frame.top || 0).toFixed(1),
                ")"
              ),
              React.createElement(
                Text,
                {
                  style: styles.innerText,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 40
                  }
                },
                (frame.width || 0).toFixed(1),
                " \xD7 ",
                (frame.height || 0).toFixed(1)
              )
            )
          )
        );
      }
    }]);
    return BoxInspector;
  }(React.Component);

  var BoxContainer = function (_React$Component2) {
    babelHelpers.inherits(BoxContainer, _React$Component2);

    function BoxContainer() {
      babelHelpers.classCallCheck(this, BoxContainer);
      return babelHelpers.possibleConstructorReturn(this, (BoxContainer.__proto__ || Object.getPrototypeOf(BoxContainer)).apply(this, arguments));
    }

    babelHelpers.createClass(BoxContainer, [{
      key: "render",
      value: function render() {
        var box = this.props.box;
        return React.createElement(
          View,
          {
            style: styles.box,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 54
            }
          },
          React.createElement(
            View,
            {
              style: styles.row,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 55
              }
            },
            React.createElement(
              Text,
              {
                style: [this.props.titleStyle, styles.label],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 58
                }
              },
              this.props.title
            ),
            React.createElement(
              Text,
              {
                style: styles.boxText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 59
                }
              },
              box.top
            )
          ),
          React.createElement(
            View,
            {
              style: styles.row,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 61
              }
            },
            React.createElement(
              Text,
              {
                style: styles.boxText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 62
                }
              },
              box.left
            ),
            this.props.children,
            React.createElement(
              Text,
              {
                style: styles.boxText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 64
                }
              },
              box.right
            )
          ),
          React.createElement(
            Text,
            {
              style: styles.boxText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 66
              }
            },
            box.bottom
          )
        );
      }
    }]);
    return BoxContainer;
  }(React.Component);

  var styles = StyleSheet.create({
    row: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-around'
    },
    marginLabel: {
      width: 60
    },
    label: {
      fontSize: 10,
      color: 'rgb(255,100,0)',
      marginLeft: 5,
      flex: 1,
      textAlign: 'left',
      top: -3
    },
    buffer: {
      fontSize: 10,
      color: 'yellow',
      flex: 1,
      textAlign: 'center'
    },
    innerText: {
      color: 'yellow',
      fontSize: 12,
      textAlign: 'center',
      width: 70
    },
    box: {
      borderWidth: 1,
      borderColor: 'grey'
    },
    boxText: {
      color: 'white',
      fontSize: 12,
      marginHorizontal: 3,
      marginVertical: 2,
      textAlign: 'center'
    }
  });
  module.exports = BoxInspector;
},269,[130,168,181,170,266],"BoxInspector");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Inspector/StyleInspector.js";

  var React = require(_dependencyMap[0], 'React');

  var StyleSheet = require(_dependencyMap[1], 'StyleSheet');

  var Text = require(_dependencyMap[2], 'Text');

  var View = require(_dependencyMap[3], 'View');

  var StyleInspector = function (_React$Component) {
    babelHelpers.inherits(StyleInspector, _React$Component);

    function StyleInspector() {
      babelHelpers.classCallCheck(this, StyleInspector);
      return babelHelpers.possibleConstructorReturn(this, (StyleInspector.__proto__ || Object.getPrototypeOf(StyleInspector)).apply(this, arguments));
    }

    babelHelpers.createClass(StyleInspector, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        if (!this.props.style) {
          return React.createElement(
            Text,
            {
              style: styles.noStyle,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 22
              }
            },
            "No style"
          );
        }

        var names = Object.keys(this.props.style);
        return React.createElement(
          View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 26
            }
          },
          React.createElement(
            View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 27
              }
            },
            names.map(function (name) {
              return React.createElement(
                Text,
                {
                  key: name,
                  style: styles.attr,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 28
                  }
                },
                name,
                ":"
              );
            })
          ),
          React.createElement(
            View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 31
              }
            },
            names.map(function (name) {
              var value = typeof _this2.props.style[name] === 'object' ? JSON.stringify(_this2.props.style[name]) : _this2.props.style[name];
              return React.createElement(
                Text,
                {
                  key: name,
                  style: styles.value,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 34
                  }
                },
                value
              );
            })
          )
        );
      }
    }]);
    return StyleInspector;
  }(React.Component);

  var styles = StyleSheet.create({
    container: {
      flexDirection: 'row'
    },
    row: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-around'
    },
    attr: {
      fontSize: 10,
      color: '#ccc'
    },
    value: {
      fontSize: 10,
      color: 'white',
      marginLeft: 10
    },
    noStyle: {
      color: 'white',
      fontSize: 10
    }
  });
  module.exports = StyleInspector;
},270,[130,168,181,170],"StyleInspector");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js";

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var NativeMethodsMixin = require(_dependencyMap[1], 'NativeMethodsMixin');

  var PropTypes = require(_dependencyMap[2], 'prop-types');

  var React = require(_dependencyMap[3], 'React');

  var ReactNativeViewAttributes = require(_dependencyMap[4], 'ReactNativeViewAttributes');

  var StyleSheet = require(_dependencyMap[5], 'StyleSheet');

  var Touchable = require(_dependencyMap[6], 'Touchable');

  var TouchableWithoutFeedback = require(_dependencyMap[7], 'TouchableWithoutFeedback');

  var View = require(_dependencyMap[8], 'View');

  var ViewPropTypes = require(_dependencyMap[9], 'ViewPropTypes');

  var createReactClass = require(_dependencyMap[10], 'create-react-class');

  var ensurePositiveDelayProps = require(_dependencyMap[11], 'ensurePositiveDelayProps');

  var DEFAULT_PROPS = {
    activeOpacity: 0.85,
    delayPressOut: 100,
    underlayColor: 'black'
  };
  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableHighlight = createReactClass({
    displayName: 'TouchableHighlight',
    propTypes: babelHelpers.extends({}, TouchableWithoutFeedback.propTypes, {
      activeOpacity: PropTypes.number,
      underlayColor: ColorPropType,
      style: ViewPropTypes.style,
      onShowUnderlay: PropTypes.func,
      onHideUnderlay: PropTypes.func,
      hasTVPreferredFocus: PropTypes.bool,
      tvParallaxProperties: PropTypes.object
    }),
    mixins: [NativeMethodsMixin, Touchable.Mixin],
    getDefaultProps: function getDefaultProps() {
      return DEFAULT_PROPS;
    },
    getInitialState: function getInitialState() {
      this._isMounted = false;
      return babelHelpers.extends({}, this.touchableGetInitialState(), {
        extraChildStyle: null,
        extraUnderlayStyle: null
      });
    },
    componentDidMount: function componentDidMount() {
      this._isMounted = true;
      ensurePositiveDelayProps(this.props);
    },
    componentWillUnmount: function componentWillUnmount() {
      this._isMounted = false;
      clearTimeout(this._hideTimeout);
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    viewConfig: {
      uiViewClassName: 'RCTView',
      validAttributes: ReactNativeViewAttributes.RCTView
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      clearTimeout(this._hideTimeout);
      this._hideTimeout = null;

      this._showUnderlay();

      this.props.onPressIn && this.props.onPressIn(e);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      if (!this._hideTimeout) {
        this._hideUnderlay();
      }

      this.props.onPressOut && this.props.onPressOut(e);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      clearTimeout(this._hideTimeout);

      this._showUnderlay();

      this._hideTimeout = setTimeout(this._hideUnderlay, this.props.delayPressOut);
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut;
    },
    _showUnderlay: function _showUnderlay() {
      if (!this._isMounted || !this._hasPressHandler()) {
        return;
      }

      this.setState({
        extraChildStyle: {
          opacity: this.props.activeOpacity
        },
        extraUnderlayStyle: {
          backgroundColor: this.props.underlayColor
        }
      });
      this.props.onShowUnderlay && this.props.onShowUnderlay();
    },
    _hideUnderlay: function _hideUnderlay() {
      clearTimeout(this._hideTimeout);
      this._hideTimeout = null;

      if (this._hasPressHandler()) {
        this.setState({
          extraChildStyle: null,
          extraUnderlayStyle: null
        });
        this.props.onHideUnderlay && this.props.onHideUnderlay();
      }
    },
    _hasPressHandler: function _hasPressHandler() {
      return !!(this.props.onPress || this.props.onPressIn || this.props.onPressOut || this.props.onLongPress);
    },
    render: function render() {
      var child = React.Children.only(this.props.children);
      return React.createElement(
        View,
        {
          accessible: this.props.accessible !== false,
          accessibilityLabel: this.props.accessibilityLabel,
          accessibilityComponentType: this.props.accessibilityComponentType,
          accessibilityTraits: this.props.accessibilityTraits,
          style: StyleSheet.compose(this.props.style, this.state.extraUnderlayStyle),
          onLayout: this.props.onLayout,
          hitSlop: this.props.hitSlop,
          isTVSelectable: true,
          tvParallaxProperties: this.props.tvParallaxProperties,
          hasTVPreferredFocus: this.props.hasTVPreferredFocus,
          onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
          onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
          onResponderGrant: this.touchableHandleResponderGrant,
          onResponderMove: this.touchableHandleResponderMove,
          onResponderRelease: this.touchableHandleResponderRelease,
          onResponderTerminate: this.touchableHandleResponderTerminate,
          nativeID: this.props.nativeID,
          testID: this.props.testID,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 306
          }
        },
        React.cloneElement(child, {
          style: StyleSheet.compose(child.props.style, this.state.extraChildStyle)
        }),
        Touchable.renderDebugView({
          color: 'green',
          hitSlop: this.props.hitSlop
        })
      );
    }
  });
  module.exports = TouchableHighlight;
},271,[123,125,127,130,171,168,182,190,170,131,172,192],"TouchableHighlight");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function mapWithSeparator(items, itemRenderer, spacerRenderer) {
    var mapped = [];

    if (items.length > 0) {
      mapped.push(itemRenderer(items[0], 0, items));

      for (var ii = 1; ii < items.length; ii++) {
        mapped.push(spacerRenderer(ii - 1), itemRenderer(items[ii], ii, items));
      }
    }

    return mapped;
  }

  module.exports = mapWithSeparator;
},272,[],"mapWithSeparator");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var getDevServer = require(_dependencyMap[0], 'getDevServer');

  function openFileInEditor(file, lineNumber) {
    fetch(getDevServer().url + 'open-stack-frame', {
      method: 'POST',
      body: JSON.stringify({
        file: file,
        lineNumber: lineNumber
      })
    });
  }

  module.exports = openFileInEditor;
},273,[36],"openFileInEditor");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Inspector/NetworkOverlay.js";

  var ListView = require(_dependencyMap[0], 'ListView');

  var React = require(_dependencyMap[1], 'React');

  var ScrollView = require(_dependencyMap[2], 'ScrollView');

  var StyleSheet = require(_dependencyMap[3], 'StyleSheet');

  var Text = require(_dependencyMap[4], 'Text');

  var TouchableHighlight = require(_dependencyMap[5], 'TouchableHighlight');

  var View = require(_dependencyMap[6], 'View');

  var WebSocketInterceptor = require(_dependencyMap[7], 'WebSocketInterceptor');

  var XHRInterceptor = require(_dependencyMap[8], 'XHRInterceptor');

  var LISTVIEW_CELL_HEIGHT = 15;
  var SEPARATOR_THICKNESS = 2;
  var nextXHRId = 0;

  var NetworkOverlay = function (_React$Component) {
    babelHelpers.inherits(NetworkOverlay, _React$Component);

    function NetworkOverlay(props) {
      babelHelpers.classCallCheck(this, NetworkOverlay);

      var _this = babelHelpers.possibleConstructorReturn(this, (NetworkOverlay.__proto__ || Object.getPrototypeOf(NetworkOverlay)).call(this, props));

      _this._requests = [];
      _this._detailViewItems = [];
      _this._listViewDataSource = new ListView.DataSource({
        rowHasChanged: function rowHasChanged(r1, r2) {
          return r1 !== r2;
        }
      });
      _this.state = {
        dataSource: _this._listViewDataSource.cloneWithRows([]),
        newDetailInfo: false,
        detailRowID: null
      };
      _this._listViewHighlighted = false;
      _this._listViewHeight = 0;
      _this._captureRequestListView = _this._captureRequestListView.bind(_this);
      _this._captureDetailScrollView = _this._captureDetailScrollView.bind(_this);
      _this._listViewOnLayout = _this._listViewOnLayout.bind(_this);
      _this._renderRow = _this._renderRow.bind(_this);
      _this._closeButtonClicked = _this._closeButtonClicked.bind(_this);
      _this._socketIdMap = {};
      _this._xhrIdMap = {};
      return _this;
    }

    babelHelpers.createClass(NetworkOverlay, [{
      key: "_enableXHRInterception",
      value: function _enableXHRInterception() {
        var _this2 = this;

        if (XHRInterceptor.isInterceptorEnabled()) {
          return;
        }

        XHRInterceptor.setOpenCallback(function (method, url, xhr) {
          xhr._index = nextXHRId++;
          var xhrIndex = _this2._requests.length;
          _this2._xhrIdMap[xhr._index] = xhrIndex;
          var _xhr = {
            'type': 'XMLHttpRequest',
            'method': method,
            'url': url
          };

          _this2._requests.push(_xhr);

          _this2._detailViewItems.push([]);

          _this2._genDetailViewItem(xhrIndex);

          _this2.setState({
            dataSource: _this2._listViewDataSource.cloneWithRows(_this2._requests)
          }, _this2._scrollToBottom());
        });
        XHRInterceptor.setRequestHeaderCallback(function (header, value, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          var networkInfo = _this2._requests[xhrIndex];

          if (!networkInfo.requestHeaders) {
            networkInfo.requestHeaders = {};
          }

          networkInfo.requestHeaders[header] = value;

          _this2._genDetailViewItem(xhrIndex);
        });
        XHRInterceptor.setSendCallback(function (data, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          _this2._requests[xhrIndex].dataSent = data;

          _this2._genDetailViewItem(xhrIndex);
        });
        XHRInterceptor.setHeaderReceivedCallback(function (type, size, responseHeaders, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          var networkInfo = _this2._requests[xhrIndex];
          networkInfo.responseContentType = type;
          networkInfo.responseSize = size;
          networkInfo.responseHeaders = responseHeaders;

          _this2._genDetailViewItem(xhrIndex);
        });
        XHRInterceptor.setResponseCallback(function (status, timeout, response, responseURL, responseType, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          var networkInfo = _this2._requests[xhrIndex];
          networkInfo.status = status;
          networkInfo.timeout = timeout;
          networkInfo.response = response;
          networkInfo.responseURL = responseURL;
          networkInfo.responseType = responseType;

          _this2._genDetailViewItem(xhrIndex);
        });
        XHRInterceptor.enableInterception();
      }
    }, {
      key: "_enableWebSocketInterception",
      value: function _enableWebSocketInterception() {
        var _this3 = this;

        if (WebSocketInterceptor.isInterceptorEnabled()) {
          return;
        }

        WebSocketInterceptor.setConnectCallback(function (url, protocols, options, socketId) {
          var socketIndex = _this3._requests.length;
          _this3._socketIdMap[socketId] = socketIndex;
          var _webSocket = {
            'type': 'WebSocket',
            'url': url,
            'protocols': protocols
          };

          _this3._requests.push(_webSocket);

          _this3._detailViewItems.push([]);

          _this3._genDetailViewItem(socketIndex);

          _this3.setState({
            dataSource: _this3._listViewDataSource.cloneWithRows(_this3._requests)
          }, _this3._scrollToBottom());
        });
        WebSocketInterceptor.setCloseCallback(function (statusCode, closeReason, socketId) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          if (statusCode !== null && closeReason !== null) {
            _this3._requests[socketIndex].status = statusCode;
            _this3._requests[socketIndex].closeReason = closeReason;
          }

          _this3._genDetailViewItem(socketIndex);
        });
        WebSocketInterceptor.setSendCallback(function (data, socketId) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          if (!_this3._requests[socketIndex].messages) {
            _this3._requests[socketIndex].messages = '';
          }

          _this3._requests[socketIndex].messages += 'Sent: ' + JSON.stringify(data) + '\n';

          _this3._genDetailViewItem(socketIndex);
        });
        WebSocketInterceptor.setOnMessageCallback(function (socketId, message) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          if (!_this3._requests[socketIndex].messages) {
            _this3._requests[socketIndex].messages = '';
          }

          _this3._requests[socketIndex].messages += 'Received: ' + JSON.stringify(message) + '\n';

          _this3._genDetailViewItem(socketIndex);
        });
        WebSocketInterceptor.setOnCloseCallback(function (socketId, message) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          _this3._requests[socketIndex].serverClose = message;

          _this3._genDetailViewItem(socketIndex);
        });
        WebSocketInterceptor.setOnErrorCallback(function (socketId, message) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          _this3._requests[socketIndex].serverError = message;

          _this3._genDetailViewItem(socketIndex);
        });
        WebSocketInterceptor.enableInterception();
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this._enableXHRInterception();

        this._enableWebSocketInterception();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        XHRInterceptor.disableInterception();
        WebSocketInterceptor.disableInterception();
      }
    }, {
      key: "_renderRow",
      value: function _renderRow(rowData, sectionID, rowID, highlightRow) {
        var _this4 = this;

        var urlCellViewStyle = styles.urlEvenCellView;
        var methodCellViewStyle = styles.methodEvenCellView;

        if (rowID % 2 === 1) {
          urlCellViewStyle = styles.urlOddCellView;
          methodCellViewStyle = styles.methodOddCellView;
        }

        return React.createElement(
          TouchableHighlight,
          {
            onPress: function onPress() {
              _this4._pressRow(rowID);

              highlightRow(sectionID, rowID);
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 300
            }
          },
          React.createElement(
            View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 304
              }
            },
            React.createElement(
              View,
              {
                style: styles.tableRow,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 305
                }
              },
              React.createElement(
                View,
                {
                  style: urlCellViewStyle,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 306
                  }
                },
                React.createElement(
                  Text,
                  {
                    style: styles.cellText,
                    numberOfLines: 1,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 307
                    }
                  },
                  rowData.url
                )
              ),
              React.createElement(
                View,
                {
                  style: methodCellViewStyle,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 311
                  }
                },
                React.createElement(
                  Text,
                  {
                    style: styles.cellText,
                    numberOfLines: 1,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 312
                    }
                  },
                  this._getTypeShortName(rowData.type)
                )
              )
            )
          )
        );
      }
    }, {
      key: "_renderSeperator",
      value: function _renderSeperator(sectionID, rowID, adjacentRowHighlighted) {
        return React.createElement(View, {
          key: sectionID + "-" + rowID,
          style: {
            height: adjacentRowHighlighted ? SEPARATOR_THICKNESS : 0,
            backgroundColor: adjacentRowHighlighted ? '#3B5998' : '#CCCCCC'
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 327
          }
        });
      }
    }, {
      key: "_scrollToBottom",
      value: function _scrollToBottom() {
        if (this._listView) {
          var scrollResponder = this._listView.getScrollResponder();

          if (scrollResponder) {
            var scrollY = Math.max(this._requests.length * LISTVIEW_CELL_HEIGHT + (this._listViewHighlighted ? 2 * SEPARATOR_THICKNESS : 0) - this._listViewHeight, 0);
            scrollResponder.scrollResponderScrollTo({
              x: 0,
              y: scrollY,
              animated: true
            });
          }
        }
      }
    }, {
      key: "_captureRequestListView",
      value: function _captureRequestListView(listRef) {
        this._listView = listRef;
      }
    }, {
      key: "_listViewOnLayout",
      value: function _listViewOnLayout(event) {
        var height = event.nativeEvent.layout.height;
        this._listViewHeight = height;
      }
    }, {
      key: "_pressRow",
      value: function _pressRow(rowID) {
        this._listViewHighlighted = true;
        this.setState({
          detailRowID: rowID
        }, this._scrollToTop());
      }
    }, {
      key: "_scrollToTop",
      value: function _scrollToTop() {
        if (this._scrollView) {
          this._scrollView.scrollTo({
            y: 0,
            animated: false
          });
        }
      }
    }, {
      key: "_captureDetailScrollView",
      value: function _captureDetailScrollView(scrollRef) {
        this._scrollView = scrollRef;
      }
    }, {
      key: "_closeButtonClicked",
      value: function _closeButtonClicked() {
        this.setState({
          detailRowID: null
        });
      }
    }, {
      key: "_getStringByValue",
      value: function _getStringByValue(value) {
        if (value === undefined) {
          return 'undefined';
        }

        if (typeof value === 'object') {
          return JSON.stringify(value);
        }

        if (typeof value === 'string' && value.length > 500) {
          return String(value).substr(0, 500).concat('\n***TRUNCATED TO 500 CHARACTERS***');
        }

        return value;
      }
    }, {
      key: "_getRequestIndexByXHRID",
      value: function _getRequestIndexByXHRID(index) {
        if (index === undefined) {
          return -1;
        }

        var xhrIndex = this._xhrIdMap[index];

        if (xhrIndex === undefined) {
          return -1;
        } else {
          return xhrIndex;
        }
      }
    }, {
      key: "_getTypeShortName",
      value: function _getTypeShortName(type) {
        if (type === 'XMLHttpRequest') {
          return 'XHR';
        } else if (type === 'WebSocket') {
          return 'WS';
        }

        return '';
      }
    }, {
      key: "_genDetailViewItem",
      value: function _genDetailViewItem(index) {
        this._detailViewItems[index] = [];
        var detailViewItem = this._detailViewItems[index];
        var requestItem = this._requests[index];

        for (var _key in requestItem) {
          detailViewItem.push(React.createElement(
            View,
            {
              style: styles.detailViewRow,
              key: _key,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 442
              }
            },
            React.createElement(
              Text,
              {
                style: [styles.detailViewText, styles.detailKeyCellView],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 443
                }
              },
              _key
            ),
            React.createElement(
              Text,
              {
                style: [styles.detailViewText, styles.detailValueCellView],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 446
                }
              },
              this._getStringByValue(requestItem[_key])
            )
          ));
        }

        if (this.state.detailRowID != null && Number(this.state.detailRowID) === index) {
          this.setState({
            newDetailInfo: true
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 461
            }
          },
          this.state.detailRowID != null && React.createElement(
            TouchableHighlight,
            {
              style: styles.closeButton,
              onPress: this._closeButtonClicked,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 463
              }
            },
            React.createElement(
              View,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 466
                }
              },
              React.createElement(
                Text,
                {
                  style: styles.clostButtonText,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 467
                  }
                },
                "v"
              )
            )
          ),
          this.state.detailRowID != null && React.createElement(
            ScrollView,
            {
              style: styles.detailScrollView,
              ref: this._captureDetailScrollView,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 471
              }
            },
            this._detailViewItems[this.state.detailRowID]
          ),
          React.createElement(
            View,
            {
              style: styles.listViewTitle,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 476
              }
            },
            this._requests.length > 0 && React.createElement(
              View,
              {
                style: styles.tableRow,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 478
                }
              },
              React.createElement(
                View,
                {
                  style: styles.urlTitleCellView,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 479
                  }
                },
                React.createElement(
                  Text,
                  {
                    style: styles.cellText,
                    numberOfLines: 1,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 480
                    }
                  },
                  "URL"
                )
              ),
              React.createElement(
                View,
                {
                  style: styles.methodTitleCellView,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 482
                  }
                },
                React.createElement(
                  Text,
                  {
                    style: styles.cellText,
                    numberOfLines: 1,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 483
                    }
                  },
                  "Type"
                )
              )
            )
          ),
          React.createElement(ListView, {
            style: styles.listView,
            ref: this._captureRequestListView,
            dataSource: this.state.dataSource,
            renderRow: this._renderRow,
            enableEmptySections: true,
            renderSeparator: this._renderSeperator,
            onLayout: this._listViewOnLayout,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 487
            }
          })
        );
      }
    }]);
    return NetworkOverlay;
  }(React.Component);

  var styles = StyleSheet.create({
    container: {
      paddingTop: 10,
      paddingBottom: 10,
      paddingLeft: 5,
      paddingRight: 5
    },
    listViewTitle: {
      height: 20
    },
    listView: {
      flex: 1,
      height: 60
    },
    tableRow: {
      flexDirection: 'row',
      flex: 1
    },
    cellText: {
      color: 'white',
      fontSize: 12
    },
    methodTitleCellView: {
      height: 18,
      borderColor: '#DCD7CD',
      borderTopWidth: 1,
      borderBottomWidth: 1,
      borderRightWidth: 1,
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: '#444',
      flex: 1
    },
    urlTitleCellView: {
      height: 18,
      borderColor: '#DCD7CD',
      borderTopWidth: 1,
      borderBottomWidth: 1,
      borderLeftWidth: 1,
      borderRightWidth: 1,
      justifyContent: 'center',
      backgroundColor: '#444',
      flex: 5,
      paddingLeft: 3
    },
    methodOddCellView: {
      height: 15,
      borderColor: '#DCD7CD',
      borderRightWidth: 1,
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: '#000',
      flex: 1
    },
    urlOddCellView: {
      height: 15,
      borderColor: '#DCD7CD',
      borderLeftWidth: 1,
      borderRightWidth: 1,
      justifyContent: 'center',
      backgroundColor: '#000',
      flex: 5,
      paddingLeft: 3
    },
    methodEvenCellView: {
      height: 15,
      borderColor: '#DCD7CD',
      borderRightWidth: 1,
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: '#888',
      flex: 1
    },
    urlEvenCellView: {
      height: 15,
      borderColor: '#DCD7CD',
      borderLeftWidth: 1,
      borderRightWidth: 1,
      justifyContent: 'center',
      backgroundColor: '#888',
      flex: 5,
      paddingLeft: 3
    },
    detailScrollView: {
      flex: 1,
      height: 180,
      marginTop: 5,
      marginBottom: 5
    },
    detailKeyCellView: {
      flex: 1.3
    },
    detailValueCellView: {
      flex: 2
    },
    detailViewRow: {
      flexDirection: 'row',
      paddingHorizontal: 3
    },
    detailViewText: {
      color: 'white',
      fontSize: 11
    },
    clostButtonText: {
      color: 'white',
      fontSize: 10
    },
    closeButton: {
      marginTop: 5,
      backgroundColor: '#888',
      justifyContent: 'center',
      alignItems: 'center'
    }
  });
  module.exports = NetworkOverlay;
},274,[242,130,224,168,181,271,170,275,276],"NetworkOverlay");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var RCTWebSocketModule = require(_dependencyMap[0], 'NativeModules').WebSocketModule;

  var NativeEventEmitter = require(_dependencyMap[1], 'NativeEventEmitter');

  var base64 = require(_dependencyMap[2], 'base64-js');

  var originalRCTWebSocketConnect = RCTWebSocketModule.connect;
  var originalRCTWebSocketSend = RCTWebSocketModule.send;
  var originalRCTWebSocketSendBinary = RCTWebSocketModule.sendBinary;
  var originalRCTWebSocketClose = RCTWebSocketModule.close;
  var eventEmitter = void 0;
  var subscriptions = void 0;
  var closeCallback = void 0;
  var sendCallback = void 0;
  var connectCallback = void 0;
  var onOpenCallback = void 0;
  var onMessageCallback = void 0;
  var onErrorCallback = void 0;
  var onCloseCallback = void 0;
  var _isInterceptorEnabled = false;
  var WebSocketInterceptor = {
    setCloseCallback: function setCloseCallback(callback) {
      closeCallback = callback;
    },
    setSendCallback: function setSendCallback(callback) {
      sendCallback = callback;
    },
    setConnectCallback: function setConnectCallback(callback) {
      connectCallback = callback;
    },
    setOnOpenCallback: function setOnOpenCallback(callback) {
      onOpenCallback = callback;
    },
    setOnMessageCallback: function setOnMessageCallback(callback) {
      onMessageCallback = callback;
    },
    setOnErrorCallback: function setOnErrorCallback(callback) {
      onErrorCallback = callback;
    },
    setOnCloseCallback: function setOnCloseCallback(callback) {
      onCloseCallback = callback;
    },
    isInterceptorEnabled: function isInterceptorEnabled() {
      return _isInterceptorEnabled;
    },
    _unregisterEvents: function _unregisterEvents() {
      subscriptions.forEach(function (e) {
        return e.remove();
      });
      subscriptions = [];
    },
    _registerEvents: function _registerEvents() {
      subscriptions = [eventEmitter.addListener('websocketMessage', function (ev) {
        if (onMessageCallback) {
          onMessageCallback(ev.id, ev.type === 'binary' ? WebSocketInterceptor._arrayBufferToString(ev.data) : ev.data);
        }
      }), eventEmitter.addListener('websocketOpen', function (ev) {
        if (onOpenCallback) {
          onOpenCallback(ev.id);
        }
      }), eventEmitter.addListener('websocketClosed', function (ev) {
        if (onCloseCallback) {
          onCloseCallback(ev.id, {
            code: ev.code,
            reason: ev.reason
          });
        }
      }), eventEmitter.addListener('websocketFailed', function (ev) {
        if (onErrorCallback) {
          onErrorCallback(ev.id, {
            message: ev.message
          });
        }
      })];
    },
    enableInterception: function enableInterception() {
      if (_isInterceptorEnabled) {
        return;
      }

      eventEmitter = new NativeEventEmitter(RCTWebSocketModule);

      WebSocketInterceptor._registerEvents();

      RCTWebSocketModule.connect = function (url, protocols, options, socketId) {
        if (connectCallback) {
          connectCallback(url, protocols, options, socketId);
        }

        originalRCTWebSocketConnect.apply(this, arguments);
      };

      RCTWebSocketModule.send = function (data, socketId) {
        if (sendCallback) {
          sendCallback(data, socketId);
        }

        originalRCTWebSocketSend.apply(this, arguments);
      };

      RCTWebSocketModule.sendBinary = function (data, socketId) {
        if (sendCallback) {
          sendCallback(WebSocketInterceptor._arrayBufferToString(data), socketId);
        }

        originalRCTWebSocketSendBinary.apply(this, arguments);
      };

      RCTWebSocketModule.close = function () {
        if (closeCallback) {
          if (arguments.length === 3) {
            closeCallback(arguments[0], arguments[1], arguments[2]);
          } else {
            closeCallback(null, null, arguments[0]);
          }
        }

        originalRCTWebSocketClose.apply(this, arguments);
      };

      _isInterceptorEnabled = true;
    },
    _arrayBufferToString: function _arrayBufferToString(data) {
      var value = base64.toByteArray(data).buffer;

      if (value === undefined || value === null) {
        return '(no value)';
      }

      if (typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined' && value instanceof ArrayBuffer) {
        return "ArrayBuffer {" + String(Array.from(new Uint8Array(value))) + "}";
      }

      return value;
    },
    disableInterception: function disableInterception() {
      if (!_isInterceptorEnabled) {
        return;
      }

      _isInterceptorEnabled = false;
      RCTWebSocketModule.send = originalRCTWebSocketSend;
      RCTWebSocketModule.sendBinary = originalRCTWebSocketSendBinary;
      RCTWebSocketModule.close = originalRCTWebSocketClose;
      RCTWebSocketModule.connect = originalRCTWebSocketConnect;
      connectCallback = null;
      closeCallback = null;
      sendCallback = null;
      onOpenCallback = null;
      onMessageCallback = null;
      onCloseCallback = null;
      onErrorCallback = null;

      WebSocketInterceptor._unregisterEvents();
    }
  };
  module.exports = WebSocketInterceptor;
},275,[15,69,73],"WebSocketInterceptor");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var XMLHttpRequest = require(_dependencyMap[0], 'XMLHttpRequest');

  var originalXHROpen = XMLHttpRequest.prototype.open;
  var originalXHRSend = XMLHttpRequest.prototype.send;
  var originalXHRSetRequestHeader = XMLHttpRequest.prototype.setRequestHeader;
  var openCallback;
  var sendCallback;
  var requestHeaderCallback;
  var headerReceivedCallback;
  var responseCallback;
  var _isInterceptorEnabled = false;
  var XHRInterceptor = {
    setOpenCallback: function setOpenCallback(callback) {
      openCallback = callback;
    },
    setSendCallback: function setSendCallback(callback) {
      sendCallback = callback;
    },
    setHeaderReceivedCallback: function setHeaderReceivedCallback(callback) {
      headerReceivedCallback = callback;
    },
    setResponseCallback: function setResponseCallback(callback) {
      responseCallback = callback;
    },
    setRequestHeaderCallback: function setRequestHeaderCallback(callback) {
      requestHeaderCallback = callback;
    },
    isInterceptorEnabled: function isInterceptorEnabled() {
      return _isInterceptorEnabled;
    },
    enableInterception: function enableInterception() {
      if (_isInterceptorEnabled) {
        return;
      }

      XMLHttpRequest.prototype.open = function (method, url) {
        if (openCallback) {
          openCallback(method, url, this);
        }

        originalXHROpen.apply(this, arguments);
      };

      XMLHttpRequest.prototype.setRequestHeader = function (header, value) {
        if (requestHeaderCallback) {
          requestHeaderCallback(header, value, this);
        }

        originalXHRSetRequestHeader.apply(this, arguments);
      };

      XMLHttpRequest.prototype.send = function (data) {
        var _this = this;

        if (sendCallback) {
          sendCallback(data, this);
        }

        if (this.addEventListener) {
          this.addEventListener('readystatechange', function () {
            if (!_isInterceptorEnabled) {
              return;
            }

            if (_this.readyState === _this.HEADERS_RECEIVED) {
              var contentTypeString = _this.getResponseHeader('Content-Type');

              var contentLengthString = _this.getResponseHeader('Content-Length');

              var responseContentType = void 0,
                  responseSize = void 0;

              if (contentTypeString) {
                responseContentType = contentTypeString.split(';')[0];
              }

              if (contentLengthString) {
                responseSize = parseInt(contentLengthString, 10);
              }

              if (headerReceivedCallback) {
                headerReceivedCallback(responseContentType, responseSize, _this.getAllResponseHeaders(), _this);
              }
            }

            if (_this.readyState === _this.DONE) {
              if (responseCallback) {
                responseCallback(_this.status, _this.timeout, _this.response, _this.responseURL, _this.responseType, _this);
              }
            }
          }, false);
        }

        originalXHRSend.apply(this, arguments);
      };

      _isInterceptorEnabled = true;
    },
    disableInterception: function disableInterception() {
      if (!_isInterceptorEnabled) {
        return;
      }

      _isInterceptorEnabled = false;
      XMLHttpRequest.prototype.send = originalXHRSend;
      XMLHttpRequest.prototype.open = originalXHROpen;
      XMLHttpRequest.prototype.setRequestHeader = originalXHRSetRequestHeader;
      responseCallback = null;
      openCallback = null;
      sendCallback = null;
      headerReceivedCallback = null;
      requestHeaderCallback = null;
    }
  };
  module.exports = XHRInterceptor;
},276,[58],"XHRInterceptor");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Inspector/PerformanceOverlay.js";

  var PerformanceLogger = require(_dependencyMap[0], 'PerformanceLogger');

  var React = require(_dependencyMap[1], 'React');

  var StyleSheet = require(_dependencyMap[2], 'StyleSheet');

  var Text = require(_dependencyMap[3], 'Text');

  var View = require(_dependencyMap[4], 'View');

  var PerformanceOverlay = function (_React$Component) {
    babelHelpers.inherits(PerformanceOverlay, _React$Component);

    function PerformanceOverlay() {
      babelHelpers.classCallCheck(this, PerformanceOverlay);
      return babelHelpers.possibleConstructorReturn(this, (PerformanceOverlay.__proto__ || Object.getPrototypeOf(PerformanceOverlay)).apply(this, arguments));
    }

    babelHelpers.createClass(PerformanceOverlay, [{
      key: "render",
      value: function render() {
        var perfLogs = PerformanceLogger.getTimespans();
        var items = [];

        for (var key in perfLogs) {
          if (perfLogs[key].totalTime) {
            var unit = key === 'BundleSize' ? 'b' : 'ms';
            items.push(React.createElement(
              View,
              {
                style: styles.row,
                key: key,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 29
                }
              },
              React.createElement(
                Text,
                {
                  style: [styles.text, styles.label],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 30
                  }
                },
                key
              ),
              React.createElement(
                Text,
                {
                  style: [styles.text, styles.totalTime],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 31
                  }
                },
                perfLogs[key].totalTime + unit
              )
            ));
          }
        }

        return React.createElement(
          View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 40
            }
          },
          items
        );
      }
    }]);
    return PerformanceOverlay;
  }(React.Component);

  var styles = StyleSheet.create({
    container: {
      height: 100,
      paddingTop: 10
    },
    label: {
      flex: 1
    },
    row: {
      flexDirection: 'row',
      paddingHorizontal: 10
    },
    text: {
      color: 'white',
      fontSize: 12
    },
    totalTime: {
      paddingRight: 100
    }
  });
  module.exports = PerformanceOverlay;
},277,[93,130,168,181,170],"PerformanceOverlay");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/ReactNative/YellowBox.js";

  var EventEmitter = require(_dependencyMap[0], 'EventEmitter');

  var Platform = require(_dependencyMap[1], 'Platform');

  var React = require(_dependencyMap[2], 'React');

  var SafeAreaView = require(_dependencyMap[3], 'SafeAreaView');

  var StyleSheet = require(_dependencyMap[4], 'StyleSheet');

  var RCTLog = require(_dependencyMap[5], 'RCTLog');

  var infoLog = require(_dependencyMap[6], 'infoLog');

  var openFileInEditor = require(_dependencyMap[7], 'openFileInEditor');

  var parseErrorStack = require(_dependencyMap[8], 'parseErrorStack');

  var stringifySafe = require(_dependencyMap[9], 'stringifySafe');

  var symbolicateStackTrace = require(_dependencyMap[10], 'symbolicateStackTrace');

  var _warningEmitter = new EventEmitter();

  var _warningMap = new Map();

  var IGNORED_WARNINGS = [];

  if (__DEV__) {
    var _console = console,
        error = _console.error,
        warn = _console.warn;

    console.error = function () {
      error.apply(console, arguments);

      if (typeof arguments[0] === 'string' && arguments[0].startsWith('Warning: ')) {
        updateWarningMap.apply(null, arguments);
      }
    };

    console.warn = function () {
      warn.apply(console, arguments);
      updateWarningMap.apply(null, arguments);
    };

    if (Platform.isTesting) {
      console.disableYellowBox = true;
    }

    RCTLog.setWarningHandler(function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      updateWarningMap.apply(null, args);
    });
  }

  function sprintf(format) {
    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    var index = 0;
    return format.replace(/%s/g, function (match) {
      return args[index++];
    });
  }

  function updateWarningMap() {
    if (console.disableYellowBox) {
      return;
    }

    var warning = void 0;

    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    if (typeof args[0] === 'string') {
      var format = args[0],
          formatArgs = args.slice(1);
      var argCount = (format.match(/%s/g) || []).length;
      warning = [sprintf.apply(undefined, [format].concat(babelHelpers.toConsumableArray(formatArgs.slice(0, argCount).map(stringifySafe))))].concat(babelHelpers.toConsumableArray(formatArgs.slice(argCount).map(stringifySafe))).join(' ');
    } else {
      warning = args.map(stringifySafe).join(' ');
    }

    if (warning.startsWith('(ADVICE)')) {
      return;
    }

    var warningInfo = _warningMap.get(warning);

    if (warningInfo) {
      warningInfo.count += 1;
    } else {
      var _error = new Error();

      _error.framesToPop = 2;

      _warningMap.set(warning, {
        count: 1,
        stacktrace: parseErrorStack(_error),
        symbolicated: false
      });
    }

    _warningEmitter.emit('warning', _warningMap);
  }

  function ensureSymbolicatedWarning(warning) {
    var prevWarningInfo = _warningMap.get(warning);

    if (!prevWarningInfo || prevWarningInfo.symbolicated) {
      return;
    }

    prevWarningInfo.symbolicated = true;
    symbolicateStackTrace(prevWarningInfo.stacktrace).then(function (stack) {
      var nextWarningInfo = _warningMap.get(warning);

      if (nextWarningInfo) {
        nextWarningInfo.stacktrace = stack;

        _warningEmitter.emit('warning', _warningMap);
      }
    }, function (error) {
      var nextWarningInfo = _warningMap.get(warning);

      if (nextWarningInfo) {
        infoLog('Failed to symbolicate warning, "%s":', warning, error);

        _warningEmitter.emit('warning', _warningMap);
      }
    });
  }

  function isWarningIgnored(warning) {
    var isIgnored = IGNORED_WARNINGS.some(function (ignoredWarning) {
      return warning.startsWith(ignoredWarning);
    });

    if (isIgnored) {
      return true;
    }

    return Array.isArray(console.ignoredYellowBox) && console.ignoredYellowBox.some(function (ignorePrefix) {
      return warning.startsWith(String(ignorePrefix));
    });
  }

  var WarningRow = function WarningRow(_ref) {
    var count = _ref.count,
        warning = _ref.warning,
        onPress = _ref.onPress;

    var Text = require(_dependencyMap[11], 'Text');

    var TouchableHighlight = require(_dependencyMap[12], 'TouchableHighlight');

    var View = require(_dependencyMap[13], 'View');

    var countText = count > 1 ? React.createElement(
      Text,
      {
        style: styles.listRowCount,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 197
        }
      },
      '(' + count + ') '
    ) : null;
    return React.createElement(
      View,
      {
        style: styles.listRow,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 201
        }
      },
      React.createElement(
        TouchableHighlight,
        {
          activeOpacity: 0.5,
          onPress: onPress,
          style: styles.listRowContent,
          underlayColor: "transparent",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 202
          }
        },
        React.createElement(
          Text,
          {
            style: styles.listRowText,
            numberOfLines: 2,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 207
            }
          },
          countText,
          warning
        )
      )
    );
  };

  var StackRow = function StackRow(_ref2) {
    var frame = _ref2.frame;

    var Text = require(_dependencyMap[11], 'Text');

    var TouchableHighlight = require(_dependencyMap[12], 'TouchableHighlight');

    var file = frame.file,
        lineNumber = frame.lineNumber;
    var fileName = void 0;

    if (file) {
      var fileParts = file.split('/');
      fileName = fileParts[fileParts.length - 1];
    } else {
      fileName = '<unknown file>';
    }

    return React.createElement(
      TouchableHighlight,
      {
        activeOpacity: 0.5,
        style: styles.openInEditorButton,
        underlayColor: "transparent",
        onPress: openFileInEditor.bind(null, file, lineNumber),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 230
        }
      },
      React.createElement(
        Text,
        {
          style: styles.inspectorCountText,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 235
          }
        },
        fileName,
        ":",
        lineNumber
      )
    );
  };

  var WarningInspector = function WarningInspector(_ref3) {
    var warningInfo = _ref3.warningInfo,
        warning = _ref3.warning,
        stacktraceVisible = _ref3.stacktraceVisible,
        onDismiss = _ref3.onDismiss,
        onDismissAll = _ref3.onDismissAll,
        onMinimize = _ref3.onMinimize,
        toggleStacktrace = _ref3.toggleStacktrace;

    var ScrollView = require(_dependencyMap[14], 'ScrollView');

    var Text = require(_dependencyMap[11], 'Text');

    var TouchableHighlight = require(_dependencyMap[12], 'TouchableHighlight');

    var View = require(_dependencyMap[13], 'View');

    var _ref4 = warningInfo || {},
        count = _ref4.count,
        stacktrace = _ref4.stacktrace;

    var countSentence = 'Warning encountered ' + count + ' time' + (count - 1 ? 's' : '') + '.';
    var stacktraceList = void 0;

    if (stacktraceVisible && stacktrace) {
      stacktraceList = React.createElement(
        View,
        {
          style: styles.stacktraceList,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 263
          }
        },
        stacktrace.map(function (frame, ii) {
          return React.createElement(StackRow, {
            frame: frame,
            key: ii,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 264
            }
          });
        })
      );
    }

    return React.createElement(
      View,
      {
        style: styles.inspector,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 270
        }
      },
      React.createElement(
        SafeAreaView,
        {
          style: styles.safeArea,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 271
          }
        },
        React.createElement(
          View,
          {
            style: styles.inspectorCount,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 272
            }
          },
          React.createElement(
            Text,
            {
              style: styles.inspectorCountText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 273
              }
            },
            countSentence
          ),
          React.createElement(
            TouchableHighlight,
            {
              onPress: toggleStacktrace,
              underlayColor: "transparent",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 274
              }
            },
            React.createElement(
              Text,
              {
                style: styles.inspectorButtonText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 277
                }
              },
              stacktraceVisible ? "\u25BC" : "\u25B6",
              " Stacktrace"
            )
          )
        ),
        React.createElement(
          ScrollView,
          {
            style: styles.inspectorWarning,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 282
            }
          },
          stacktraceList,
          React.createElement(
            Text,
            {
              style: styles.inspectorWarningText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 284
              }
            },
            warning
          )
        ),
        React.createElement(
          View,
          {
            style: styles.inspectorButtons,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 286
            }
          },
          React.createElement(
            TouchableHighlight,
            {
              activeOpacity: 0.5,
              onPress: onMinimize,
              style: styles.inspectorButton,
              underlayColor: "transparent",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 287
              }
            },
            React.createElement(
              Text,
              {
                style: styles.inspectorButtonText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 292
                }
              },
              "Minimize"
            )
          ),
          React.createElement(
            TouchableHighlight,
            {
              activeOpacity: 0.5,
              onPress: onDismiss,
              style: styles.inspectorButton,
              underlayColor: "transparent",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 294
              }
            },
            React.createElement(
              Text,
              {
                style: styles.inspectorButtonText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 299
                }
              },
              "Dismiss"
            )
          ),
          React.createElement(
            TouchableHighlight,
            {
              activeOpacity: 0.5,
              onPress: onDismissAll,
              style: styles.inspectorButton,
              underlayColor: "transparent",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 301
              }
            },
            React.createElement(
              Text,
              {
                style: styles.inspectorButtonText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 306
                }
              },
              "Dismiss All"
            )
          )
        )
      )
    );
  };

  var YellowBox = function (_React$Component) {
    babelHelpers.inherits(YellowBox, _React$Component);

    function YellowBox(props, context) {
      babelHelpers.classCallCheck(this, YellowBox);

      var _this = babelHelpers.possibleConstructorReturn(this, (YellowBox.__proto__ || Object.getPrototypeOf(YellowBox)).call(this, props, context));

      _this.state = {
        inspecting: null,
        stacktraceVisible: false,
        warningMap: _warningMap
      };

      _this.dismissWarning = function (warning) {
        var _this$state = _this.state,
            inspecting = _this$state.inspecting,
            warningMap = _this$state.warningMap;

        if (warning) {
          warningMap.delete(warning);
        } else {
          warningMap.clear();
        }

        _this.setState({
          inspecting: warning && inspecting !== warning ? inspecting : null,
          warningMap: warningMap
        });
      };

      return _this;
    }

    babelHelpers.createClass(YellowBox, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        var scheduled = null;
        this._listener = _warningEmitter.addListener('warning', function (warningMap) {
          scheduled = scheduled || setImmediate(function () {
            scheduled = null;

            _this2.setState({
              warningMap: warningMap
            });
          });
        });
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        var inspecting = this.state.inspecting;

        if (inspecting != null) {
          ensureSymbolicatedWarning(inspecting);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._listener) {
          this._listener.remove();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        if (console.disableYellowBox || this.state.warningMap.size === 0) {
          return null;
        }

        var ScrollView = require(_dependencyMap[14], 'ScrollView');

        var View = require(_dependencyMap[13], 'View');

        var _state = this.state,
            inspecting = _state.inspecting,
            stacktraceVisible = _state.stacktraceVisible;
        var inspector = inspecting !== null ? React.createElement(WarningInspector, {
          warningInfo: this.state.warningMap.get(inspecting),
          warning: inspecting,
          stacktraceVisible: stacktraceVisible,
          onDismiss: function onDismiss() {
            return _this3.dismissWarning(inspecting);
          },
          onDismissAll: function onDismissAll() {
            return _this3.dismissWarning(null);
          },
          onMinimize: function onMinimize() {
            return _this3.setState({
              inspecting: null
            });
          },
          toggleStacktrace: function toggleStacktrace() {
            return _this3.setState({
              stacktraceVisible: !stacktraceVisible
            });
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 393
          }
        }) : null;
        var rows = [];
        this.state.warningMap.forEach(function (warningInfo, warning) {
          if (!isWarningIgnored(warning)) {
            rows.push(React.createElement(WarningRow, {
              key: warning,
              count: warningInfo.count,
              warning: warning,
              onPress: function onPress() {
                return _this3.setState({
                  inspecting: warning
                });
              },
              onDismiss: function onDismiss() {
                return _this3.dismissWarning(warning);
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 410
              }
            }));
          }
        });
        var listStyle = [styles.list, {
          height: Math.min(rows.length, 4.4) * (rowGutter + rowHeight)
        }];
        return React.createElement(
          View,
          {
            style: inspector ? styles.fullScreen : listStyle,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 427
            }
          },
          React.createElement(
            ScrollView,
            {
              style: listStyle,
              scrollsToTop: false,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 428
              }
            },
            rows
          ),
          inspector
        );
      }
    }], [{
      key: "ignoreWarnings",
      value: function ignoreWarnings(warnings) {
        warnings.forEach(function (warning) {
          if (IGNORED_WARNINGS.indexOf(warning) === -1) {
            IGNORED_WARNINGS.push(warning);
          }
        });
      }
    }]);
    return YellowBox;
  }(React.Component);

  var backgroundColor = function backgroundColor(opacity) {
    return 'rgba(250, 186, 48, ' + opacity + ')';
  };

  var textColor = 'white';
  var rowGutter = 1;
  var rowHeight = 46;
  var elevation = Platform.OS === 'android' ? Number.MAX_SAFE_INTEGER : undefined;
  var styles = StyleSheet.create({
    fullScreen: {
      height: '100%',
      width: '100%',
      elevation: elevation,
      position: 'absolute'
    },
    inspector: {
      backgroundColor: backgroundColor(0.95),
      height: '100%',
      paddingTop: 5,
      elevation: elevation
    },
    inspectorButtons: {
      flexDirection: 'row'
    },
    inspectorButton: {
      flex: 1,
      paddingVertical: 22,
      backgroundColor: backgroundColor(1)
    },
    safeArea: {
      flex: 1
    },
    stacktraceList: {
      paddingBottom: 5
    },
    inspectorButtonText: {
      color: textColor,
      fontSize: 14,
      opacity: 0.8,
      textAlign: 'center'
    },
    openInEditorButton: {
      paddingTop: 5,
      paddingBottom: 5
    },
    inspectorCount: {
      padding: 15,
      paddingBottom: 0,
      flexDirection: 'row',
      justifyContent: 'space-between'
    },
    inspectorCountText: {
      color: textColor,
      fontSize: 14
    },
    inspectorWarning: {
      flex: 1,
      paddingHorizontal: 15
    },
    inspectorWarningText: {
      color: textColor,
      fontSize: 16,
      fontWeight: '600'
    },
    list: {
      backgroundColor: 'transparent',
      position: 'absolute',
      left: 0,
      right: 0,
      bottom: 0,
      elevation: elevation
    },
    listRow: {
      backgroundColor: backgroundColor(0.95),
      height: rowHeight,
      marginTop: rowGutter
    },
    listRowContent: {
      flex: 1
    },
    listRowCount: {
      color: 'rgba(255, 255, 255, 0.5)'
    },
    listRowText: {
      color: textColor,
      position: 'absolute',
      left: 0,
      top: Platform.OS === 'android' ? 5 : 7,
      marginLeft: 15,
      marginRight: 15
    }
  });
  module.exports = YellowBox;
},278,[67,52,130,279,168,91,94,273,32,39,35,181,271,170,224],"YellowBox");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = require(_dependencyMap[0], 'View');
},279,[170],"SafeAreaView");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var I18nManager = require(_dependencyMap[0], 'NativeModules').I18nManager || {
    isRTL: false,
    doLeftAndRightSwapInRTL: true,
    allowRTL: function allowRTL() {},
    forceRTL: function forceRTL() {},
    swapLeftAndRightInRTL: function swapLeftAndRightInRTL() {}
  };
  module.exports = I18nManager;
},280,[15],"I18nManager");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = require(_dependencyMap[0], 'UnimplementedView');
},281,[259],"NavigatorIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/Picker/Picker.js";

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var PickerIOS = require(_dependencyMap[1], 'PickerIOS');

  var PickerAndroid = require(_dependencyMap[2], 'PickerAndroid');

  var Platform = require(_dependencyMap[3], 'Platform');

  var React = require(_dependencyMap[4], 'React');

  var PropTypes = require(_dependencyMap[5], 'prop-types');

  var StyleSheetPropType = require(_dependencyMap[6], 'StyleSheetPropType');

  var TextStylePropTypes = require(_dependencyMap[7], 'TextStylePropTypes');

  var UnimplementedView = require(_dependencyMap[8], 'UnimplementedView');

  var ViewPropTypes = require(_dependencyMap[9], 'ViewPropTypes');

  var ViewStylePropTypes = require(_dependencyMap[10], 'ViewStylePropTypes');

  var itemStylePropType = StyleSheetPropType(TextStylePropTypes);
  var pickerStyleType = StyleSheetPropType(babelHelpers.extends({}, ViewStylePropTypes, {
    color: ColorPropType
  }));
  var MODE_DIALOG = 'dialog';
  var MODE_DROPDOWN = 'dropdown';

  var PickerItem = function (_React$Component) {
    babelHelpers.inherits(PickerItem, _React$Component);

    function PickerItem() {
      babelHelpers.classCallCheck(this, PickerItem);
      return babelHelpers.possibleConstructorReturn(this, (PickerItem.__proto__ || Object.getPrototypeOf(PickerItem)).apply(this, arguments));
    }

    babelHelpers.createClass(PickerItem, [{
      key: "render",
      value: function render() {
        throw null;
      }
    }]);
    return PickerItem;
  }(React.Component);

  PickerItem.propTypes = {
    label: PropTypes.string.isRequired,
    value: PropTypes.any,
    color: ColorPropType,
    testID: PropTypes.string
  };

  var Picker = function (_React$Component2) {
    babelHelpers.inherits(Picker, _React$Component2);

    function Picker() {
      babelHelpers.classCallCheck(this, Picker);
      return babelHelpers.possibleConstructorReturn(this, (Picker.__proto__ || Object.getPrototypeOf(Picker)).apply(this, arguments));
    }

    babelHelpers.createClass(Picker, [{
      key: "render",
      value: function render() {
        if (Platform.OS === 'ios') {
          return React.createElement(
            PickerIOS,
            babelHelpers.extends({}, this.props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 157
              }
            }),
            this.props.children
          );
        } else if (Platform.OS === 'android') {
          return React.createElement(
            PickerAndroid,
            babelHelpers.extends({}, this.props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 160
              }
            }),
            this.props.children
          );
        } else {
          return React.createElement(UnimplementedView, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 162
            }
          });
        }
      }
    }]);
    return Picker;
  }(React.Component);

  Picker.MODE_DIALOG = MODE_DIALOG;
  Picker.MODE_DROPDOWN = MODE_DROPDOWN;
  Picker.Item = PickerItem;
  Picker.defaultProps = {
    mode: MODE_DIALOG
  };
  Picker.propTypes = babelHelpers.extends({}, ViewPropTypes, {
    style: pickerStyleType,
    selectedValue: PropTypes.any,
    onValueChange: PropTypes.func,
    enabled: PropTypes.bool,
    mode: PropTypes.oneOf(['dialog', 'dropdown']),
    itemStyle: itemStylePropType,
    prompt: PropTypes.string,
    testID: PropTypes.string
  });
  module.exports = Picker;
},282,[123,283,284,52,130,127,138,151,259,131,139],"Picker");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = require(_dependencyMap[0], 'UnimplementedView');
},283,[259],"PickerIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/Picker/PickerAndroid.android.js";

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var React = require(_dependencyMap[1], 'React');

  var ReactPropTypes = require(_dependencyMap[2], 'prop-types');

  var StyleSheet = require(_dependencyMap[3], 'StyleSheet');

  var StyleSheetPropType = require(_dependencyMap[4], 'StyleSheetPropType');

  var ViewPropTypes = require(_dependencyMap[5], 'ViewPropTypes');

  var ViewStylePropTypes = require(_dependencyMap[6], 'ViewStylePropTypes');

  var processColor = require(_dependencyMap[7], 'processColor');

  var requireNativeComponent = require(_dependencyMap[8], 'requireNativeComponent');

  var REF_PICKER = 'picker';
  var MODE_DROPDOWN = 'dropdown';
  var pickerStyleType = StyleSheetPropType(babelHelpers.extends({}, ViewStylePropTypes, {
    color: ColorPropType
  }));

  var PickerAndroid = function (_React$Component) {
    babelHelpers.inherits(PickerAndroid, _React$Component);

    function PickerAndroid(props, context) {
      babelHelpers.classCallCheck(this, PickerAndroid);

      var _this = babelHelpers.possibleConstructorReturn(this, (PickerAndroid.__proto__ || Object.getPrototypeOf(PickerAndroid)).call(this, props, context));

      _initialiseProps.call(_this);

      var state = _this._stateFromProps(props);

      _this.state = babelHelpers.extends({}, state, {
        initialSelectedIndex: state.selectedIndex
      });
      return _this;
    }

    babelHelpers.createClass(PickerAndroid, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        this.setState(this._stateFromProps(nextProps));
      }
    }, {
      key: "render",
      value: function render() {
        var Picker = this.props.mode === MODE_DROPDOWN ? DropdownPicker : DialogPicker;
        var nativeProps = {
          enabled: this.props.enabled,
          items: this.state.items,
          mode: this.props.mode,
          onSelect: this._onChange,
          prompt: this.props.prompt,
          selected: this.state.initialSelectedIndex,
          testID: this.props.testID,
          style: [styles.pickerAndroid, this.props.style],
          accessibilityLabel: this.props.accessibilityLabel
        };
        return React.createElement(Picker, babelHelpers.extends({
          ref: REF_PICKER
        }, nativeProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 107
          }
        }));
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this._lastNativePosition = this.state.initialSelectedIndex;
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        if (this.refs[REF_PICKER] && this.state.selectedIndex !== this._lastNativePosition) {
          this.refs[REF_PICKER].setNativeProps({
            selected: this.state.selectedIndex
          });
          this._lastNativePosition = this.state.selectedIndex;
        }
      }
    }]);
    return PickerAndroid;
  }(React.Component);

  PickerAndroid.propTypes = babelHelpers.extends({}, ViewPropTypes, {
    style: pickerStyleType,
    selectedValue: ReactPropTypes.any,
    enabled: ReactPropTypes.bool,
    mode: ReactPropTypes.oneOf(['dialog', 'dropdown']),
    onValueChange: ReactPropTypes.func,
    prompt: ReactPropTypes.string,
    testID: ReactPropTypes.string
  });

  var _initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this._stateFromProps = function (props) {
      var selectedIndex = 0;
      var items = React.Children.map(props.children, function (child, index) {
        if (child.props.value === props.selectedValue) {
          selectedIndex = index;
        }

        var childProps = {
          value: child.props.value,
          label: child.props.label
        };

        if (child.props.color) {
          childProps.color = processColor(child.props.color);
        }

        return childProps;
      });
      return {
        selectedIndex: selectedIndex,
        items: items
      };
    };

    this._onChange = function (event) {
      if (_this2.props.onValueChange) {
        var position = event.nativeEvent.position;

        if (position >= 0) {
          var children = React.Children.toArray(_this2.props.children);
          var value = children[position].props.value;

          _this2.props.onValueChange(value, position);
        } else {
          _this2.props.onValueChange(null, position);
        }
      }

      _this2._lastNativePosition = event.nativeEvent.position;

      _this2.forceUpdate();
    };
  };

  var styles = StyleSheet.create({
    pickerAndroid: {
      height: 50
    }
  });
  var cfg = {
    nativeOnly: {
      items: true,
      selected: true
    }
  };
  var DropdownPicker = requireNativeComponent('AndroidDropdownPicker', PickerAndroid, cfg);
  var DialogPicker = requireNativeComponent('AndroidDialogPicker', PickerAndroid, cfg);
  module.exports = PickerAndroid;
},284,[123,130,127,168,138,131,139,152,145],"PickerAndroid");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/ProgressViewIOS/ProgressViewIOS.android.js";

  var React = require(_dependencyMap[0], 'React');

  var StyleSheet = require(_dependencyMap[1], 'StyleSheet');

  var Text = require(_dependencyMap[2], 'Text');

  var View = require(_dependencyMap[3], 'View');

  var DummyProgressViewIOS = function (_React$Component) {
    babelHelpers.inherits(DummyProgressViewIOS, _React$Component);

    function DummyProgressViewIOS() {
      babelHelpers.classCallCheck(this, DummyProgressViewIOS);
      return babelHelpers.possibleConstructorReturn(this, (DummyProgressViewIOS.__proto__ || Object.getPrototypeOf(DummyProgressViewIOS)).apply(this, arguments));
    }

    babelHelpers.createClass(DummyProgressViewIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: [styles.dummy, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 23
            }
          },
          React.createElement(
            Text,
            {
              style: styles.text,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 24
              }
            },
            "ProgressViewIOS is not supported on this platform!"
          )
        );
      }
    }]);
    return DummyProgressViewIOS;
  }(React.Component);

  var styles = StyleSheet.create({
    dummy: {
      width: 120,
      height: 20,
      backgroundColor: '#ffbcbc',
      borderWidth: 1,
      borderColor: 'red',
      alignItems: 'center',
      justifyContent: 'center'
    },
    text: {
      color: '#333333',
      margin: 5,
      fontSize: 10
    }
  });
  module.exports = DummyProgressViewIOS;
},285,[130,168,181,170],"ProgressViewIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Lists/SectionList.js";

  var MetroListView = require(_dependencyMap[0], 'MetroListView');

  var Platform = require(_dependencyMap[1], 'Platform');

  var React = require(_dependencyMap[2], 'React');

  var ScrollView = require(_dependencyMap[3], 'ScrollView');

  var VirtualizedSectionList = require(_dependencyMap[4], 'VirtualizedSectionList');

  var defaultProps = babelHelpers.extends({}, VirtualizedSectionList.defaultProps, {
    stickySectionHeadersEnabled: Platform.OS === 'ios'
  });

  var SectionList = function (_React$PureComponent) {
    babelHelpers.inherits(SectionList, _React$PureComponent);

    function SectionList() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, SectionList);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = SectionList.__proto__ || Object.getPrototypeOf(SectionList)).call.apply(_ref, [this].concat(args))), _this), _this._captureRef = function (ref) {
        _this._wrapperListRef = ref;
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(SectionList, [{
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        this._wrapperListRef.scrollToLocation(params);
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        listRef && listRef.recordInteraction();
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        listRef && listRef.flashScrollIndicators();
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          return listRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          return listRef.getScrollableNode();
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          listRef.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var List = this.props.legacyImplementation ? MetroListView : VirtualizedSectionList;
        return React.createElement(List, babelHelpers.extends({}, this.props, {
          ref: this._captureRef,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 331
          }
        }));
      }
    }]);
    return SectionList;
  }(React.PureComponent);

  SectionList.defaultProps = defaultProps;
  module.exports = SectionList;
},286,[241,52,130,224,287],"SectionList");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Lists/VirtualizedSectionList.js";

  var React = require(_dependencyMap[0], 'React');

  var View = require(_dependencyMap[1], 'View');

  var VirtualizedList = require(_dependencyMap[2], 'VirtualizedList');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var VirtualizedSectionList = function (_React$PureComponent) {
    babelHelpers.inherits(VirtualizedSectionList, _React$PureComponent);
    babelHelpers.createClass(VirtualizedSectionList, [{
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        var index = params.itemIndex + 1;

        for (var ii = 0; ii < params.sectionIndex; ii++) {
          index += this.props.sections[ii].data.length + 2;
        }

        var toIndexParams = babelHelpers.extends({}, params, {
          index: index
        });

        this._listRef.scrollToIndex(toIndexParams);
      }
    }, {
      key: "getListRef",
      value: function getListRef() {
        return this._listRef;
      }
    }, {
      key: "_subExtractor",
      value: function _subExtractor(index) {
        var itemIndex = index;
        var defaultKeyExtractor = this.props.keyExtractor;

        for (var ii = 0; ii < this.props.sections.length; ii++) {
          var _section = this.props.sections[ii];

          var _key = _section.key || String(ii);

          itemIndex -= 1;

          if (itemIndex >= _section.data.length + 1) {
            itemIndex -= _section.data.length + 1;
          } else if (itemIndex === -1) {
            return {
              section: _section,
              key: _key + ':header',
              index: null,
              header: true,
              trailingSection: this.props.sections[ii + 1]
            };
          } else if (itemIndex === _section.data.length) {
            return {
              section: _section,
              key: _key + ':footer',
              index: null,
              header: false,
              trailingSection: this.props.sections[ii + 1]
            };
          } else {
            var _keyExtractor = _section.keyExtractor || defaultKeyExtractor;

            return {
              section: _section,
              key: _key + ':' + _keyExtractor(_section.data[itemIndex], itemIndex),
              index: itemIndex,
              leadingItem: _section.data[itemIndex - 1],
              leadingSection: this.props.sections[ii - 1],
              trailingItem: _section.data[itemIndex + 1],
              trailingSection: this.props.sections[ii + 1]
            };
          }
        }
      }
    }, {
      key: "_getSeparatorComponent",
      value: function _getSeparatorComponent(index, info) {
        info = info || this._subExtractor(index);

        if (!info) {
          return null;
        }

        var ItemSeparatorComponent = info.section.ItemSeparatorComponent || this.props.ItemSeparatorComponent;
        var SectionSeparatorComponent = this.props.SectionSeparatorComponent;
        var isLastItemInList = index === this.state.childProps.getItemCount() - 1;
        var isLastItemInSection = info.index === info.section.data.length - 1;

        if (SectionSeparatorComponent && isLastItemInSection) {
          return SectionSeparatorComponent;
        }

        if (ItemSeparatorComponent && !isLastItemInSection && !isLastItemInList) {
          return ItemSeparatorComponent;
        }

        return null;
      }
    }, {
      key: "_computeState",
      value: function _computeState(props) {
        var offset = props.ListHeaderComponent ? 1 : 0;
        var stickyHeaderIndices = [];
        var itemCount = props.sections.reduce(function (v, section) {
          stickyHeaderIndices.push(v + offset);
          return v + section.data.length + 2;
        }, 0);
        return {
          childProps: babelHelpers.extends({}, props, {
            renderItem: this._renderItem,
            ItemSeparatorComponent: undefined,
            data: props.sections,
            getItemCount: function getItemCount() {
              return itemCount;
            },
            getItem: getItem,
            keyExtractor: this._keyExtractor,
            onViewableItemsChanged: props.onViewableItemsChanged ? this._onViewableItemsChanged : undefined,
            stickyHeaderIndices: props.stickySectionHeadersEnabled ? stickyHeaderIndices : undefined
          })
        };
      }
    }]);

    function VirtualizedSectionList(props, context) {
      babelHelpers.classCallCheck(this, VirtualizedSectionList);

      var _this = babelHelpers.possibleConstructorReturn(this, (VirtualizedSectionList.__proto__ || Object.getPrototypeOf(VirtualizedSectionList)).call(this, props, context));

      _this._keyExtractor = function (item, index) {
        var info = _this._subExtractor(index);

        return info && info.key || String(index);
      };

      _this._convertViewable = function (viewable) {
        invariant(viewable.index != null, 'Received a broken ViewToken');

        var info = _this._subExtractor(viewable.index);

        if (!info) {
          return null;
        }

        var keyExtractor = info.section.keyExtractor || _this.props.keyExtractor;
        return babelHelpers.extends({}, viewable, {
          index: info.index,
          key: keyExtractor(viewable.item, info.index),
          section: info.section
        });
      };

      _this._onViewableItemsChanged = function (_ref) {
        var viewableItems = _ref.viewableItems,
            changed = _ref.changed;

        if (_this.props.onViewableItemsChanged) {
          _this.props.onViewableItemsChanged({
            viewableItems: viewableItems.map(_this._convertViewable, _this).filter(Boolean),
            changed: changed.map(_this._convertViewable, _this).filter(Boolean)
          });
        }
      };

      _this._renderItem = function (_ref2) {
        var item = _ref2.item,
            index = _ref2.index;

        var info = _this._subExtractor(index);

        if (!info) {
          return null;
        }

        var infoIndex = info.index;

        if (infoIndex == null) {
          var _section2 = info.section;

          if (info.header === true) {
            var _renderSectionHeader = _this.props.renderSectionHeader;
            return _renderSectionHeader ? _renderSectionHeader({
              section: _section2
            }) : null;
          } else {
            var _renderSectionFooter = _this.props.renderSectionFooter;
            return _renderSectionFooter ? _renderSectionFooter({
              section: _section2
            }) : null;
          }
        } else {
          var _renderItem = info.section.renderItem || _this.props.renderItem;

          var _SeparatorComponent = _this._getSeparatorComponent(index, info);

          invariant(_renderItem, 'no renderItem!');
          return React.createElement(ItemWithSeparator, {
            SeparatorComponent: _SeparatorComponent,
            LeadingSeparatorComponent: infoIndex === 0 ? _this.props.SectionSeparatorComponent : undefined,
            cellKey: info.key,
            index: infoIndex,
            item: item,
            leadingItem: info.leadingItem,
            leadingSection: info.leadingSection,
            onUpdateSeparator: _this._onUpdateSeparator,
            prevCellKey: (_this._subExtractor(index - 1) || {}).key,
            ref: function ref(_ref3) {
              _this._cellRefs[info.key] = _ref3;
            },
            renderItem: _renderItem,
            section: info.section,
            trailingItem: info.trailingItem,
            trailingSection: info.trailingSection,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 281
            }
          });
        }
      };

      _this._onUpdateSeparator = function (key, newProps) {
        var ref = _this._cellRefs[key];
        ref && ref.updateSeparatorProps(newProps);
      };

      _this._cellRefs = {};

      _this._captureRef = function (ref) {
        _this._listRef = ref;
      };

      _this.state = _this._computeState(props);
      return _this;
    }

    babelHelpers.createClass(VirtualizedSectionList, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        this.setState(this._computeState(nextProps));
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(VirtualizedList, babelHelpers.extends({}, this.state.childProps, {
          ref: this._captureRef,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 370
          }
        }));
      }
    }]);
    return VirtualizedSectionList;
  }(React.PureComponent);

  VirtualizedSectionList.defaultProps = babelHelpers.extends({}, VirtualizedList.defaultProps, {
    data: []
  });

  var ItemWithSeparator = function (_React$Component) {
    babelHelpers.inherits(ItemWithSeparator, _React$Component);

    function ItemWithSeparator() {
      var _ref4;

      var _temp, _this2, _ret;

      babelHelpers.classCallCheck(this, ItemWithSeparator);

      for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return _ret = (_temp = (_this2 = babelHelpers.possibleConstructorReturn(this, (_ref4 = ItemWithSeparator.__proto__ || Object.getPrototypeOf(ItemWithSeparator)).call.apply(_ref4, [this].concat(args))), _this2), _this2.state = {
        separatorProps: {
          highlighted: false,
          leadingItem: _this2.props.item,
          leadingSection: _this2.props.leadingSection,
          section: _this2.props.section,
          trailingItem: _this2.props.trailingItem,
          trailingSection: _this2.props.trailingSection
        },
        leadingSeparatorProps: {
          highlighted: false,
          leadingItem: _this2.props.leadingItem,
          leadingSection: _this2.props.leadingSection,
          section: _this2.props.section,
          trailingItem: _this2.props.item,
          trailingSection: _this2.props.trailingSection
        }
      }, _this2._separators = {
        highlight: function highlight() {
          ['leading', 'trailing'].forEach(function (s) {
            return _this2._separators.updateProps(s, {
              highlighted: true
            });
          });
        },
        unhighlight: function unhighlight() {
          ['leading', 'trailing'].forEach(function (s) {
            return _this2._separators.updateProps(s, {
              highlighted: false
            });
          });
        },
        updateProps: function updateProps(select, newProps) {
          var _this2$props = _this2.props,
              LeadingSeparatorComponent = _this2$props.LeadingSeparatorComponent,
              cellKey = _this2$props.cellKey,
              prevCellKey = _this2$props.prevCellKey;

          if (select === 'leading' && LeadingSeparatorComponent) {
            _this2.setState(function (state) {
              return {
                leadingSeparatorProps: babelHelpers.extends({}, state.leadingSeparatorProps, newProps)
              };
            });
          } else {
            _this2.props.onUpdateSeparator(select === 'leading' && prevCellKey || cellKey, newProps);
          }
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this2, _ret);
    }

    babelHelpers.createClass(ItemWithSeparator, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(props) {
        var _this3 = this;

        this.setState(function (state) {
          return {
            separatorProps: babelHelpers.extends({}, _this3.state.separatorProps, {
              leadingItem: props.item,
              leadingSection: props.leadingSection,
              section: props.section,
              trailingItem: props.trailingItem,
              trailingSection: props.trailingSection
            }),
            leadingSeparatorProps: babelHelpers.extends({}, _this3.state.leadingSeparatorProps, {
              leadingItem: props.leadingItem,
              leadingSection: props.leadingSection,
              section: props.section,
              trailingItem: props.item,
              trailingSection: props.trailingSection
            })
          };
        });
      }
    }, {
      key: "updateSeparatorProps",
      value: function updateSeparatorProps(newProps) {
        this.setState(function (state) {
          return {
            separatorProps: babelHelpers.extends({}, state.separatorProps, newProps)
          };
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            LeadingSeparatorComponent = _props.LeadingSeparatorComponent,
            SeparatorComponent = _props.SeparatorComponent,
            item = _props.item,
            index = _props.index,
            section = _props.section;
        var element = this.props.renderItem({
          item: item,
          index: index,
          section: section,
          separators: this._separators
        });
        var leadingSeparator = LeadingSeparatorComponent && React.createElement(LeadingSeparatorComponent, babelHelpers.extends({}, this.state.leadingSeparatorProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 491
          }
        }));
        var separator = SeparatorComponent && React.createElement(SeparatorComponent, babelHelpers.extends({}, this.state.separatorProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 494
          }
        }));
        return leadingSeparator || separator ? React.createElement(
          View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 497
            }
          },
          leadingSeparator,
          element,
          separator
        ) : element;
      }
    }]);
    return ItemWithSeparator;
  }(React.Component);

  function getItem(sections, index) {
    if (!sections) {
      return null;
    }

    var itemIdx = index - 1;

    for (var ii = 0; ii < sections.length; ii++) {
      if (itemIdx === -1 || itemIdx === sections[ii].data.length) {
        return sections[ii];
      } else if (itemIdx < sections[ii].data.length) {
        return sections[ii].data[itemIdx];
      } else {
        itemIdx -= sections[ii].data.length + 2;
      }
    }

    return null;
  }

  module.exports = VirtualizedSectionList;
},287,[130,170,248,13],"VirtualizedSectionList");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/SegmentedControlIOS/SegmentedControlIOS.android.js";

  var React = require(_dependencyMap[0], 'React');

  var StyleSheet = require(_dependencyMap[1], 'StyleSheet');

  var Text = require(_dependencyMap[2], 'Text');

  var View = require(_dependencyMap[3], 'View');

  var DummySegmentedControlIOS = function (_React$Component) {
    babelHelpers.inherits(DummySegmentedControlIOS, _React$Component);

    function DummySegmentedControlIOS() {
      babelHelpers.classCallCheck(this, DummySegmentedControlIOS);
      return babelHelpers.possibleConstructorReturn(this, (DummySegmentedControlIOS.__proto__ || Object.getPrototypeOf(DummySegmentedControlIOS)).apply(this, arguments));
    }

    babelHelpers.createClass(DummySegmentedControlIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: [styles.dummy, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 23
            }
          },
          React.createElement(
            Text,
            {
              style: styles.text,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 24
              }
            },
            "SegmentedControlIOS is not supported on this platform!"
          )
        );
      }
    }]);
    return DummySegmentedControlIOS;
  }(React.Component);

  var styles = StyleSheet.create({
    dummy: {
      width: 120,
      height: 50,
      backgroundColor: '#ffbcbc',
      borderWidth: 1,
      borderColor: 'red',
      alignItems: 'center',
      justifyContent: 'center'
    },
    text: {
      color: '#333333',
      margin: 5,
      fontSize: 10
    }
  });
  module.exports = DummySegmentedControlIOS;
},288,[130,168,181,170],"SegmentedControlIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/Slider/Slider.js";

  var Image = require(_dependencyMap[0], 'Image');

  var ColorPropType = require(_dependencyMap[1], 'ColorPropType');

  var NativeMethodsMixin = require(_dependencyMap[2], 'NativeMethodsMixin');

  var ReactNativeViewAttributes = require(_dependencyMap[3], 'ReactNativeViewAttributes');

  var Platform = require(_dependencyMap[4], 'Platform');

  var React = require(_dependencyMap[5], 'React');

  var PropTypes = require(_dependencyMap[6], 'prop-types');

  var StyleSheet = require(_dependencyMap[7], 'StyleSheet');

  var ViewPropTypes = require(_dependencyMap[8], 'ViewPropTypes');

  var createReactClass = require(_dependencyMap[9], 'create-react-class');

  var requireNativeComponent = require(_dependencyMap[10], 'requireNativeComponent');

  var Slider = createReactClass({
    displayName: 'Slider',
    mixins: [NativeMethodsMixin],
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      style: ViewPropTypes.style,
      value: PropTypes.number,
      step: PropTypes.number,
      minimumValue: PropTypes.number,
      maximumValue: PropTypes.number,
      minimumTrackTintColor: ColorPropType,
      maximumTrackTintColor: ColorPropType,
      disabled: PropTypes.bool,
      trackImage: Image.propTypes.source,
      minimumTrackImage: Image.propTypes.source,
      maximumTrackImage: Image.propTypes.source,
      thumbImage: Image.propTypes.source,
      thumbTintColor: ColorPropType,
      onValueChange: PropTypes.func,
      onSlidingComplete: PropTypes.func,
      testID: PropTypes.string
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        disabled: false,
        value: 0,
        minimumValue: 0,
        maximumValue: 1,
        step: 0
      };
    },
    viewConfig: {
      uiViewClassName: 'RCTSlider',
      validAttributes: babelHelpers.extends({}, ReactNativeViewAttributes.RCTView, {
        value: true
      })
    },
    render: function render() {
      var _props = this.props,
          style = _props.style,
          onValueChange = _props.onValueChange,
          onSlidingComplete = _props.onSlidingComplete,
          props = babelHelpers.objectWithoutProperties(_props, ["style", "onValueChange", "onSlidingComplete"]);
      props.style = [styles.slider, style];

      props.onValueChange = onValueChange && function (event) {
        var userEvent = true;

        if (Platform.OS === 'android') {
          userEvent = event.nativeEvent.fromUser;
        }

        onValueChange && userEvent && onValueChange(event.nativeEvent.value);
      };

      props.onChange = props.onValueChange;

      props.onSlidingComplete = onSlidingComplete && function (event) {
        onSlidingComplete && onSlidingComplete(event.nativeEvent.value);
      };

      return React.createElement(RCTSlider, babelHelpers.extends({}, props, {
        enabled: !this.props.disabled,
        onStartShouldSetResponder: function onStartShouldSetResponder() {
          return true;
        },
        onResponderTerminationRequest: function onResponderTerminationRequest() {
          return false;
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 248
        }
      }));
    }
  });
  var styles = void 0;

  if (Platform.OS === 'ios') {
    styles = StyleSheet.create({
      slider: {
        height: 40
      }
    });
  } else {
    styles = StyleSheet.create({
      slider: {}
    });
  }

  var options = {};

  if (Platform.OS === 'android') {
    options = {
      nativeOnly: {
        enabled: true
      }
    };
  }

  var RCTSlider = requireNativeComponent('RCTSlider', Slider, options);
  module.exports = Slider;
},289,[222,123,125,171,52,130,127,168,131,172,145],"Slider");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = require(_dependencyMap[0], 'UnimplementedView');
},290,[259],"SnapshotViewIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/Switch/Switch.js";

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var NativeMethodsMixin = require(_dependencyMap[1], 'NativeMethodsMixin');

  var Platform = require(_dependencyMap[2], 'Platform');

  var React = require(_dependencyMap[3], 'React');

  var PropTypes = require(_dependencyMap[4], 'prop-types');

  var StyleSheet = require(_dependencyMap[5], 'StyleSheet');

  var ViewPropTypes = require(_dependencyMap[6], 'ViewPropTypes');

  var createReactClass = require(_dependencyMap[7], 'create-react-class');

  var requireNativeComponent = require(_dependencyMap[8], 'requireNativeComponent');

  var Switch = createReactClass({
    displayName: 'Switch',
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      value: PropTypes.bool,
      disabled: PropTypes.bool,
      onValueChange: PropTypes.func,
      testID: PropTypes.string,
      tintColor: ColorPropType,
      onTintColor: ColorPropType,
      thumbTintColor: ColorPropType
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        value: false,
        disabled: false
      };
    },
    mixins: [NativeMethodsMixin],
    _rctSwitch: {},
    _onChange: function _onChange(event) {
      if (Platform.OS === 'android') {
        this._rctSwitch.setNativeProps({
          on: this.props.value
        });
      } else {
        this._rctSwitch.setNativeProps({
          value: this.props.value
        });
      }

      this.props.onChange && this.props.onChange(event);
      this.props.onValueChange && this.props.onValueChange(event.nativeEvent.value);
    },
    render: function render() {
      var _this = this;

      var props = babelHelpers.extends({}, this.props);

      props.onStartShouldSetResponder = function () {
        return true;
      };

      props.onResponderTerminationRequest = function () {
        return false;
      };

      if (Platform.OS === 'android') {
        props.enabled = !this.props.disabled;
        props.on = this.props.value;
        props.style = this.props.style;
        props.trackTintColor = this.props.value ? this.props.onTintColor : this.props.tintColor;
      } else if (Platform.OS === 'ios') {
        props.style = [styles.rctSwitchIOS, this.props.style];
      }

      return React.createElement(RCTSwitch, babelHelpers.extends({}, props, {
        ref: function ref(_ref) {
          _this._rctSwitch = _ref;
        },
        onChange: this._onChange,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 115
        }
      }));
    }
  });
  var styles = StyleSheet.create({
    rctSwitchIOS: {
      height: 31,
      width: 51
    }
  });

  if (Platform.OS === 'android') {
    var RCTSwitch = requireNativeComponent('AndroidSwitch', Switch, {
      nativeOnly: {
        onChange: true,
        on: true,
        enabled: true,
        trackTintColor: true
      }
    });
  } else {
    var RCTSwitch = requireNativeComponent('RCTSwitch', Switch, {
      nativeOnly: {
        onChange: true
      }
    });
  }

  module.exports = Switch;
},291,[123,125,52,130,127,168,131,172,145],"Switch");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableFlatList.js";

  var PropTypes = require(_dependencyMap[0], 'prop-types');

  var React = require(_dependencyMap[1], 'React');

  var SwipeableRow = require(_dependencyMap[2], 'SwipeableRow');

  var FlatList = require(_dependencyMap[3], 'FlatList');

  var SwipeableFlatList = function (_React$Component) {
    babelHelpers.inherits(SwipeableFlatList, _React$Component);

    function SwipeableFlatList(props, context) {
      babelHelpers.classCallCheck(this, SwipeableFlatList);

      var _this = babelHelpers.possibleConstructorReturn(this, (SwipeableFlatList.__proto__ || Object.getPrototypeOf(SwipeableFlatList)).call(this, props, context));

      _this._flatListRef = null;
      _this._shouldBounceFirstRowOnMount = false;

      _this._onScroll = function (e) {
        if (_this.state.openRowKey) {
          _this.setState({
            openRowKey: null
          });
        }

        _this.props.onScroll && _this.props.onScroll(e);
      };

      _this._renderItem = function (info) {
        var slideoutView = _this.props.renderQuickActions(info);

        var key = _this.props.keyExtractor(info.item, info.index);

        if (!slideoutView) {
          return _this.props.renderItem(info);
        }

        var shouldBounceOnMount = false;

        if (_this._shouldBounceFirstRowOnMount) {
          _this._shouldBounceFirstRowOnMount = false;
          shouldBounceOnMount = true;
        }

        return React.createElement(
          SwipeableRow,
          {
            slideoutView: slideoutView,
            isOpen: key === _this.state.openRowKey,
            maxSwipeDistance: _this._getMaxSwipeDistance(info),
            onOpen: function onOpen() {
              return _this._onOpen(key);
            },
            onClose: function onClose() {
              return _this._onClose(key);
            },
            shouldBounceOnMount: shouldBounceOnMount,
            onSwipeEnd: _this._setListViewScrollable,
            onSwipeStart: _this._setListViewNotScrollable,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 137
            }
          },
          _this.props.renderItem(info)
        );
      };

      _this._setListViewScrollable = function () {
        _this._setListViewScrollableTo(true);
      };

      _this._setListViewNotScrollable = function () {
        _this._setListViewScrollableTo(false);
      };

      _this.state = {
        openRowKey: null
      };
      _this._shouldBounceFirstRowOnMount = _this.props.bounceFirstRowOnMount;
      return _this;
    }

    babelHelpers.createClass(SwipeableFlatList, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return React.createElement(FlatList, babelHelpers.extends({}, this.props, {
          ref: function ref(_ref) {
            _this2._flatListRef = _ref;
          },
          onScroll: this._onScroll,
          renderItem: this._renderItem,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 99
          }
        }));
      }
    }, {
      key: "_getMaxSwipeDistance",
      value: function _getMaxSwipeDistance(info) {
        if (typeof this.props.maxSwipeDistance === 'function') {
          return this.props.maxSwipeDistance(info);
        }

        return this.props.maxSwipeDistance;
      }
    }, {
      key: "_setListViewScrollableTo",
      value: function _setListViewScrollableTo(value) {
        if (this._flatListRef) {
          this._flatListRef.setNativeProps({
            scrollEnabled: value
          });
        }
      }
    }, {
      key: "_onOpen",
      value: function _onOpen(key) {
        this.setState({
          openRowKey: key
        });
      }
    }, {
      key: "_onClose",
      value: function _onClose(key) {
        this.setState({
          openRowKey: null
        });
      }
    }]);
    return SwipeableFlatList;
  }(React.Component);

  SwipeableFlatList.propTypes = babelHelpers.extends({}, FlatList.propTypes, {
    bounceFirstRowOnMount: PropTypes.bool.isRequired,
    maxSwipeDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,
    renderQuickActions: PropTypes.func.isRequired
  });
  SwipeableFlatList.defaultProps = babelHelpers.extends({}, FlatList.defaultProps, {
    bounceFirstRowOnMount: true,
    renderQuickActions: function renderQuickActions() {
      return null;
    }
  });
  module.exports = SwipeableFlatList;
},292,[127,130,293,240],"SwipeableFlatList");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableRow.js";

  var Animated = require(_dependencyMap[0], 'Animated');

  var I18nManager = require(_dependencyMap[1], 'I18nManager');

  var PanResponder = require(_dependencyMap[2], 'PanResponder');

  var React = require(_dependencyMap[3], 'React');

  var PropTypes = require(_dependencyMap[4], 'prop-types');

  var StyleSheet = require(_dependencyMap[5], 'StyleSheet');

  var TimerMixin = require(_dependencyMap[6], 'react-timer-mixin');

  var View = require(_dependencyMap[7], 'View');

  var createReactClass = require(_dependencyMap[8], 'create-react-class');

  var emptyFunction = require(_dependencyMap[9], 'fbjs/lib/emptyFunction');

  var IS_RTL = I18nManager.isRTL;
  var CLOSED_LEFT_POSITION = 0;
  var HORIZONTAL_SWIPE_DISTANCE_THRESHOLD = 10;
  var HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD = 0.3;
  var SLOW_SPEED_SWIPE_FACTOR = 4;
  var SWIPE_DURATION = 300;
  var ON_MOUNT_BOUNCE_DELAY = 700;
  var ON_MOUNT_BOUNCE_DURATION = 400;
  var RIGHT_SWIPE_BOUNCE_BACK_DISTANCE = 30;
  var RIGHT_SWIPE_BOUNCE_BACK_DURATION = 300;
  var RIGHT_SWIPE_THRESHOLD = 30 * SLOW_SPEED_SWIPE_FACTOR;
  var SwipeableRow = createReactClass({
    displayName: 'SwipeableRow',
    _panResponder: {},
    _previousLeft: CLOSED_LEFT_POSITION,
    mixins: [TimerMixin],
    propTypes: {
      children: PropTypes.any,
      isOpen: PropTypes.bool,
      preventSwipeRight: PropTypes.bool,
      maxSwipeDistance: PropTypes.number.isRequired,
      onOpen: PropTypes.func.isRequired,
      onClose: PropTypes.func.isRequired,
      onSwipeEnd: PropTypes.func.isRequired,
      onSwipeStart: PropTypes.func.isRequired,
      shouldBounceOnMount: PropTypes.bool,
      slideoutView: PropTypes.node.isRequired,
      swipeThreshold: PropTypes.number.isRequired
    },
    getInitialState: function getInitialState() {
      return {
        currentLeft: new Animated.Value(this._previousLeft),
        isSwipeableViewRendered: false,
        rowHeight: null
      };
    },
    getDefaultProps: function getDefaultProps() {
      return {
        isOpen: false,
        preventSwipeRight: false,
        maxSwipeDistance: 0,
        onOpen: emptyFunction,
        onClose: emptyFunction,
        onSwipeEnd: emptyFunction,
        onSwipeStart: emptyFunction,
        swipeThreshold: 30
      };
    },
    componentWillMount: function componentWillMount() {
      this._panResponder = PanResponder.create({
        onMoveShouldSetPanResponderCapture: this._handleMoveShouldSetPanResponderCapture,
        onPanResponderGrant: this._handlePanResponderGrant,
        onPanResponderMove: this._handlePanResponderMove,
        onPanResponderRelease: this._handlePanResponderEnd,
        onPanResponderTerminationRequest: this._onPanResponderTerminationRequest,
        onPanResponderTerminate: this._handlePanResponderEnd,
        onShouldBlockNativeResponder: function onShouldBlockNativeResponder(event, gestureState) {
          return false;
        }
      });
    },
    componentDidMount: function componentDidMount() {
      var _this = this;

      if (this.props.shouldBounceOnMount) {
        this.setTimeout(function () {
          _this._animateBounceBack(ON_MOUNT_BOUNCE_DURATION);
        }, ON_MOUNT_BOUNCE_DELAY);
      }
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
      if (this.props.isOpen && !nextProps.isOpen) {
        this._animateToClosedPosition();
      }
    },
    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
      if (this.props.shouldBounceOnMount && !nextProps.shouldBounceOnMount) {
        return false;
      }

      return true;
    },
    render: function render() {
      var slideOutView = void 0;

      if (this.state.isSwipeableViewRendered && this.state.rowHeight) {
        slideOutView = React.createElement(
          View,
          {
            style: [styles.slideOutContainer, {
              height: this.state.rowHeight
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 176
            }
          },
          this.props.slideoutView
        );
      }

      var swipeableView = React.createElement(
        Animated.View,
        {
          onLayout: this._onSwipeableViewLayout,
          style: {
            transform: [{
              translateX: this.state.currentLeft
            }]
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 187
          }
        },
        this.props.children
      );
      return React.createElement(
        View,
        babelHelpers.extends({}, this._panResponder.panHandlers, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 195
          }
        }),
        slideOutView,
        swipeableView
      );
    },
    close: function close() {
      this.props.onClose();

      this._animateToClosedPosition();
    },
    _onSwipeableViewLayout: function _onSwipeableViewLayout(event) {
      this.setState({
        isSwipeableViewRendered: true,
        rowHeight: event.nativeEvent.layout.height
      });
    },
    _handleMoveShouldSetPanResponderCapture: function _handleMoveShouldSetPanResponderCapture(event, gestureState) {
      return gestureState.dy < 10 && this._isValidSwipe(gestureState);
    },
    _handlePanResponderGrant: function _handlePanResponderGrant(event, gestureState) {},
    _handlePanResponderMove: function _handlePanResponderMove(event, gestureState) {
      if (this._isSwipingExcessivelyRightFromClosedPosition(gestureState)) {
        return;
      }

      this.props.onSwipeStart();

      if (this._isSwipingRightFromClosed(gestureState)) {
        this._swipeSlowSpeed(gestureState);
      } else {
        this._swipeFullSpeed(gestureState);
      }
    },
    _isSwipingRightFromClosed: function _isSwipingRightFromClosed(gestureState) {
      var gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;
      return this._previousLeft === CLOSED_LEFT_POSITION && gestureStateDx > 0;
    },
    _swipeFullSpeed: function _swipeFullSpeed(gestureState) {
      this.state.currentLeft.setValue(this._previousLeft + gestureState.dx);
    },
    _swipeSlowSpeed: function _swipeSlowSpeed(gestureState) {
      this.state.currentLeft.setValue(this._previousLeft + gestureState.dx / SLOW_SPEED_SWIPE_FACTOR);
    },
    _isSwipingExcessivelyRightFromClosedPosition: function _isSwipingExcessivelyRightFromClosedPosition(gestureState) {
      var gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;
      return this._isSwipingRightFromClosed(gestureState) && gestureStateDx > RIGHT_SWIPE_THRESHOLD;
    },
    _onPanResponderTerminationRequest: function _onPanResponderTerminationRequest(event, gestureState) {
      return false;
    },
    _animateTo: function _animateTo(toValue) {
      var _this2 = this;

      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SWIPE_DURATION;
      var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : emptyFunction;
      Animated.timing(this.state.currentLeft, {
        duration: duration,
        toValue: toValue,
        useNativeDriver: true
      }).start(function () {
        _this2._previousLeft = toValue;
        callback();
      });
    },
    _animateToOpenPosition: function _animateToOpenPosition() {
      var maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;

      this._animateTo(-maxSwipeDistance);
    },
    _animateToOpenPositionWith: function _animateToOpenPositionWith(speed, distMoved) {
      speed = speed > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD ? speed : HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD;
      var duration = Math.abs((this.props.maxSwipeDistance - Math.abs(distMoved)) / speed);
      var maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;

      this._animateTo(-maxSwipeDistance, duration);
    },
    _animateToClosedPosition: function _animateToClosedPosition() {
      var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SWIPE_DURATION;

      this._animateTo(CLOSED_LEFT_POSITION, duration);
    },
    _animateToClosedPositionDuringBounce: function _animateToClosedPositionDuringBounce() {
      this._animateToClosedPosition(RIGHT_SWIPE_BOUNCE_BACK_DURATION);
    },
    _animateBounceBack: function _animateBounceBack(duration) {
      var swipeBounceBackDistance = IS_RTL ? -RIGHT_SWIPE_BOUNCE_BACK_DISTANCE : RIGHT_SWIPE_BOUNCE_BACK_DISTANCE;

      this._animateTo(-swipeBounceBackDistance, duration, this._animateToClosedPositionDuringBounce);
    },
    _isValidSwipe: function _isValidSwipe(gestureState) {
      if (this.props.preventSwipeRight && this._previousLeft === CLOSED_LEFT_POSITION && gestureState.dx > 0) {
        return false;
      }

      return Math.abs(gestureState.dx) > HORIZONTAL_SWIPE_DISTANCE_THRESHOLD;
    },
    _shouldAnimateRemainder: function _shouldAnimateRemainder(gestureState) {
      return Math.abs(gestureState.dx) > this.props.swipeThreshold || gestureState.vx > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD;
    },
    _handlePanResponderEnd: function _handlePanResponderEnd(event, gestureState) {
      var horizontalDistance = IS_RTL ? -gestureState.dx : gestureState.dx;

      if (this._isSwipingRightFromClosed(gestureState)) {
        this.props.onOpen();

        this._animateBounceBack(RIGHT_SWIPE_BOUNCE_BACK_DURATION);
      } else if (this._shouldAnimateRemainder(gestureState)) {
        if (horizontalDistance < 0) {
          this.props.onOpen();

          this._animateToOpenPositionWith(gestureState.vx, horizontalDistance);
        } else {
          this.props.onClose();

          this._animateToClosedPosition();
        }
      } else {
        if (this._previousLeft === CLOSED_LEFT_POSITION) {
          this._animateToClosedPosition();
        } else {
          this._animateToOpenPosition();
        }
      }

      this.props.onSwipeEnd();
    }
  });
  var styles = StyleSheet.create({
    slideOutContainer: {
      bottom: 0,
      left: 0,
      position: 'absolute',
      right: 0,
      top: 0
    }
  });
  module.exports = SwipeableRow;
},293,[194,280,294,130,127,168,191,170,172,57],"SwipeableRow");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var InteractionManager = require(_dependencyMap[0], './InteractionManager');

  var TouchHistoryMath = require(_dependencyMap[1], 'TouchHistoryMath');

  var currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;
  var currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;
  var previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;
  var previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;
  var currentCentroidX = TouchHistoryMath.currentCentroidX;
  var currentCentroidY = TouchHistoryMath.currentCentroidY;
  var PanResponder = {
    _initializeGestureState: function _initializeGestureState(gestureState) {
      gestureState.moveX = 0;
      gestureState.moveY = 0;
      gestureState.x0 = 0;
      gestureState.y0 = 0;
      gestureState.dx = 0;
      gestureState.dy = 0;
      gestureState.vx = 0;
      gestureState.vy = 0;
      gestureState.numberActiveTouches = 0;
      gestureState._accountsForMovesUpTo = 0;
    },
    _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {
      gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
      gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
      gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
      var movedAfter = gestureState._accountsForMovesUpTo;
      var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
      var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
      var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
      var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
      var nextDX = gestureState.dx + (x - prevX);
      var nextDY = gestureState.dy + (y - prevY);
      var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;
      gestureState.vx = (nextDX - gestureState.dx) / dt;
      gestureState.vy = (nextDY - gestureState.dy) / dt;
      gestureState.dx = nextDX;
      gestureState.dy = nextDY;
      gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;
    },
    create: function create(config) {
      var interactionState = {
        handle: null
      };
      var gestureState = {
        stateID: Math.random()
      };

      PanResponder._initializeGestureState(gestureState);

      var panHandlers = {
        onStartShouldSetResponder: function onStartShouldSetResponder(e) {
          return config.onStartShouldSetPanResponder === undefined ? false : config.onStartShouldSetPanResponder(e, gestureState);
        },
        onMoveShouldSetResponder: function onMoveShouldSetResponder(e) {
          return config.onMoveShouldSetPanResponder === undefined ? false : config.onMoveShouldSetPanResponder(e, gestureState);
        },
        onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(e) {
          if (e.nativeEvent.touches.length === 1) {
            PanResponder._initializeGestureState(gestureState);
          }

          gestureState.numberActiveTouches = e.touchHistory.numberActiveTouches;
          return config.onStartShouldSetPanResponderCapture !== undefined ? config.onStartShouldSetPanResponderCapture(e, gestureState) : false;
        },
        onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(e) {
          var touchHistory = e.touchHistory;

          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
            return false;
          }

          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);

          return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(e, gestureState) : false;
        },
        onResponderGrant: function onResponderGrant(e) {
          if (!interactionState.handle) {
            interactionState.handle = InteractionManager.createInteractionHandle();
          }

          gestureState.x0 = currentCentroidX(e.touchHistory);
          gestureState.y0 = currentCentroidY(e.touchHistory);
          gestureState.dx = 0;
          gestureState.dy = 0;

          if (config.onPanResponderGrant) {
            config.onPanResponderGrant(e, gestureState);
          }

          return config.onShouldBlockNativeResponder === undefined ? true : config.onShouldBlockNativeResponder();
        },
        onResponderReject: function onResponderReject(e) {
          clearInteractionHandle(interactionState, config.onPanResponderReject, e, gestureState);
        },
        onResponderRelease: function onResponderRelease(e) {
          clearInteractionHandle(interactionState, config.onPanResponderRelease, e, gestureState);

          PanResponder._initializeGestureState(gestureState);
        },
        onResponderStart: function onResponderStart(e) {
          var touchHistory = e.touchHistory;
          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;

          if (config.onPanResponderStart) {
            config.onPanResponderStart(e, gestureState);
          }
        },
        onResponderMove: function onResponderMove(e) {
          var touchHistory = e.touchHistory;

          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
            return;
          }

          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);

          if (config.onPanResponderMove) {
            config.onPanResponderMove(e, gestureState);
          }
        },
        onResponderEnd: function onResponderEnd(e) {
          var touchHistory = e.touchHistory;
          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
          clearInteractionHandle(interactionState, config.onPanResponderEnd, e, gestureState);
        },
        onResponderTerminate: function onResponderTerminate(e) {
          clearInteractionHandle(interactionState, config.onPanResponderTerminate, e, gestureState);

          PanResponder._initializeGestureState(gestureState);
        },
        onResponderTerminationRequest: function onResponderTerminationRequest(e) {
          return config.onPanResponderTerminationRequest === undefined ? true : config.onPanResponderTerminationRequest(e, gestureState);
        }
      };
      return {
        panHandlers: panHandlers,
        getInteractionHandle: function getInteractionHandle() {
          return interactionState.handle;
        }
      };
    }
  };

  function clearInteractionHandle(interactionState, callback, event, gestureState) {
    if (interactionState.handle) {
      InteractionManager.clearInteractionHandle(interactionState.handle);
      interactionState.handle = null;
    }

    if (callback) {
      callback(event, gestureState);
    }
  }

  module.exports = PanResponder;
},294,[202,295],"PanResponder");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.TouchHistoryMath;
},295,[21],"TouchHistoryMath");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListView.js";

  var ListView = require(_dependencyMap[0], 'ListView');

  var PropTypes = require(_dependencyMap[1], 'prop-types');

  var React = require(_dependencyMap[2], 'React');

  var SwipeableListViewDataSource = require(_dependencyMap[3], 'SwipeableListViewDataSource');

  var SwipeableRow = require(_dependencyMap[4], 'SwipeableRow');

  var SwipeableListView = function (_React$Component) {
    babelHelpers.inherits(SwipeableListView, _React$Component);
    babelHelpers.createClass(SwipeableListView, null, [{
      key: "getNewDataSource",
      value: function getNewDataSource() {
        return new SwipeableListViewDataSource({
          getRowData: function getRowData(data, sectionID, rowID) {
            return data[sectionID][rowID];
          },
          getSectionHeaderData: function getSectionHeaderData(data, sectionID) {
            return data[sectionID];
          },
          rowHasChanged: function rowHasChanged(row1, row2) {
            return row1 !== row2;
          },
          sectionHeaderHasChanged: function sectionHeaderHasChanged(s1, s2) {
            return s1 !== s2;
          }
        });
      }
    }]);

    function SwipeableListView(props, context) {
      babelHelpers.classCallCheck(this, SwipeableListView);

      var _this = babelHelpers.possibleConstructorReturn(this, (SwipeableListView.__proto__ || Object.getPrototypeOf(SwipeableListView)).call(this, props, context));

      _this._listViewRef = null;
      _this._shouldBounceFirstRowOnMount = false;

      _this._onScroll = function (e) {
        if (_this.props.dataSource.getOpenRowID()) {
          _this.setState({
            dataSource: _this.state.dataSource.setOpenRowID(null)
          });
        }

        _this.props.onScroll && _this.props.onScroll(e);
      };

      _this._renderRow = function (rowData, sectionID, rowID) {
        var slideoutView = _this.props.renderQuickActions(rowData, sectionID, rowID);

        if (!slideoutView) {
          return _this.props.renderRow(rowData, sectionID, rowID);
        }

        var shouldBounceOnMount = false;

        if (_this._shouldBounceFirstRowOnMount) {
          _this._shouldBounceFirstRowOnMount = false;
          shouldBounceOnMount = rowID === _this.props.dataSource.getFirstRowID();
        }

        return React.createElement(
          SwipeableRow,
          {
            slideoutView: slideoutView,
            isOpen: rowData.id === _this.props.dataSource.getOpenRowID(),
            maxSwipeDistance: _this._getMaxSwipeDistance(rowData, sectionID, rowID),
            key: rowID,
            onOpen: function onOpen() {
              return _this._onOpen(rowData.id);
            },
            onClose: function onClose() {
              return _this._onClose(rowData.id);
            },
            onSwipeEnd: function onSwipeEnd() {
              return _this._setListViewScrollable(true);
            },
            onSwipeStart: function onSwipeStart() {
              return _this._setListViewScrollable(false);
            },
            shouldBounceOnMount: shouldBounceOnMount,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 185
            }
          },
          _this.props.renderRow(rowData, sectionID, rowID)
        );
      };

      _this._shouldBounceFirstRowOnMount = _this.props.bounceFirstRowOnMount;
      _this.state = {
        dataSource: _this.props.dataSource
      };
      return _this;
    }

    babelHelpers.createClass(SwipeableListView, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        if (this.state.dataSource.getDataSource() !== nextProps.dataSource.getDataSource()) {
          this.setState({
            dataSource: nextProps.dataSource
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return React.createElement(ListView, babelHelpers.extends({}, this.props, {
          ref: function ref(_ref) {
            _this2._listViewRef = _ref;
          },
          dataSource: this.state.dataSource.getDataSource(),
          onScroll: this._onScroll,
          renderRow: this._renderRow,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 118
          }
        }));
      }
    }, {
      key: "_setListViewScrollable",
      value: function _setListViewScrollable(value) {
        if (this._listViewRef && typeof this._listViewRef.setNativeProps === 'function') {
          this._listViewRef.setNativeProps({
            scrollEnabled: value
          });
        }
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._listViewRef && typeof this._listViewRef.getScrollResponder === 'function') {
          return this._listViewRef.getScrollResponder();
        }
      }
    }, {
      key: "_getMaxSwipeDistance",
      value: function _getMaxSwipeDistance(rowData, sectionID, rowID) {
        if (typeof this.props.maxSwipeDistance === 'function') {
          return this.props.maxSwipeDistance(rowData, sectionID, rowID);
        }

        return this.props.maxSwipeDistance;
      }
    }, {
      key: "_onOpen",
      value: function _onOpen(rowID) {
        this.setState({
          dataSource: this.state.dataSource.setOpenRowID(rowID)
        });
      }
    }, {
      key: "_onClose",
      value: function _onClose(rowID) {
        this.setState({
          dataSource: this.state.dataSource.setOpenRowID(null)
        });
      }
    }]);
    return SwipeableListView;
  }(React.Component);

  SwipeableListView.propTypes = {
    bounceFirstRowOnMount: PropTypes.bool.isRequired,
    dataSource: PropTypes.instanceOf(SwipeableListViewDataSource).isRequired,
    maxSwipeDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,
    renderRow: PropTypes.func.isRequired,
    renderQuickActions: PropTypes.func.isRequired
  };
  SwipeableListView.defaultProps = {
    bounceFirstRowOnMount: false,
    renderQuickActions: function renderQuickActions() {
      return null;
    }
  };
  module.exports = SwipeableListView;
},296,[242,127,130,297,293],"SwipeableListView");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ListViewDataSource = require(_dependencyMap[0], 'ListViewDataSource');

  var SwipeableListViewDataSource = function () {
    function SwipeableListViewDataSource(params) {
      var _this = this;

      babelHelpers.classCallCheck(this, SwipeableListViewDataSource);
      this._dataSource = new ListViewDataSource({
        getRowData: params.getRowData,
        getSectionHeaderData: params.getSectionHeaderData,
        rowHasChanged: function rowHasChanged(row1, row2) {
          return row1.id !== _this._previousOpenRowID && row2.id === _this._openRowID || row1.id === _this._previousOpenRowID && row2.id !== _this._openRowID || params.rowHasChanged(row1, row2);
        },
        sectionHeaderHasChanged: params.sectionHeaderHasChanged
      });
    }

    babelHelpers.createClass(SwipeableListViewDataSource, [{
      key: "cloneWithRowsAndSections",
      value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
        this._dataSource = this._dataSource.cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities);
        this._dataBlob = dataBlob;
        this.rowIdentities = this._dataSource.rowIdentities;
        this.sectionIdentities = this._dataSource.sectionIdentities;
        return this;
      }
    }, {
      key: "getDataSource",
      value: function getDataSource() {
        return this._dataSource;
      }
    }, {
      key: "getOpenRowID",
      value: function getOpenRowID() {
        return this._openRowID;
      }
    }, {
      key: "getFirstRowID",
      value: function getFirstRowID() {
        if (this.rowIdentities) {
          return this.rowIdentities[0] && this.rowIdentities[0][0];
        }

        return Object.keys(this._dataBlob)[0];
      }
    }, {
      key: "getLastRowID",
      value: function getLastRowID() {
        if (this.rowIdentities && this.rowIdentities.length) {
          var lastSection = this.rowIdentities[this.rowIdentities.length - 1];

          if (lastSection && lastSection.length) {
            return lastSection[lastSection.length - 1];
          }
        }

        return Object.keys(this._dataBlob)[this._dataBlob.length - 1];
      }
    }, {
      key: "setOpenRowID",
      value: function setOpenRowID(rowID) {
        this._previousOpenRowID = this._openRowID;
        this._openRowID = rowID;
        this._dataSource = this._dataSource.cloneWithRowsAndSections(this._dataBlob, this.sectionIdentities, this.rowIdentities);
        return this;
      }
    }]);
    return SwipeableListViewDataSource;
  }();

  module.exports = SwipeableListViewDataSource;
},297,[243],"SwipeableListViewDataSource");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/TabBarIOS/TabBarIOS.android.js";

  var React = require(_dependencyMap[0], 'React');

  var StyleSheet = require(_dependencyMap[1], 'StyleSheet');

  var TabBarItemIOS = require(_dependencyMap[2], 'TabBarItemIOS');

  var View = require(_dependencyMap[3], 'View');

  var DummyTabBarIOS = function (_React$Component) {
    babelHelpers.inherits(DummyTabBarIOS, _React$Component);

    function DummyTabBarIOS() {
      babelHelpers.classCallCheck(this, DummyTabBarIOS);
      return babelHelpers.possibleConstructorReturn(this, (DummyTabBarIOS.__proto__ || Object.getPrototypeOf(DummyTabBarIOS)).apply(this, arguments));
    }

    babelHelpers.createClass(DummyTabBarIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: [this.props.style, styles.tabGroup],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 25
            }
          },
          this.props.children
        );
      }
    }]);
    return DummyTabBarIOS;
  }(React.Component);

  DummyTabBarIOS.Item = TabBarItemIOS;
  var styles = StyleSheet.create({
    tabGroup: {
      flex: 1
    }
  });
  module.exports = DummyTabBarIOS;
},298,[130,168,299,170],"TabBarIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/TabBarIOS/TabBarItemIOS.android.js";

  var React = require(_dependencyMap[0], 'React');

  var View = require(_dependencyMap[1], 'View');

  var StyleSheet = require(_dependencyMap[2], 'StyleSheet');

  var DummyTab = function (_React$Component) {
    babelHelpers.inherits(DummyTab, _React$Component);

    function DummyTab() {
      babelHelpers.classCallCheck(this, DummyTab);
      return babelHelpers.possibleConstructorReturn(this, (DummyTab.__proto__ || Object.getPrototypeOf(DummyTab)).apply(this, arguments));
    }

    babelHelpers.createClass(DummyTab, [{
      key: "render",
      value: function render() {
        if (!this.props.selected) {
          return React.createElement(View, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 21
            }
          });
        }

        return React.createElement(
          View,
          {
            style: [this.props.style, styles.tab],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 24
            }
          },
          this.props.children
        );
      }
    }]);
    return DummyTab;
  }(React.Component);

  var styles = StyleSheet.create({
    tab: {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      borderColor: 'red',
      borderWidth: 1
    }
  });
  module.exports = DummyTab;
},299,[130,170,168],"TabBarItemIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/TextInput/TextInput.js";

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var DocumentSelectionState = require(_dependencyMap[1], 'DocumentSelectionState');

  var EventEmitter = require(_dependencyMap[2], 'EventEmitter');

  var NativeMethodsMixin = require(_dependencyMap[3], 'NativeMethodsMixin');

  var Platform = require(_dependencyMap[4], 'Platform');

  var React = require(_dependencyMap[5], 'React');

  var createReactClass = require(_dependencyMap[6], 'create-react-class');

  var PropTypes = require(_dependencyMap[7], 'prop-types');

  var ReactNative = require(_dependencyMap[8], 'ReactNative');

  var StyleSheet = require(_dependencyMap[9], 'StyleSheet');

  var Text = require(_dependencyMap[10], 'Text');

  var TextInputState = require(_dependencyMap[11], 'TextInputState');

  var TimerMixin = require(_dependencyMap[12], 'react-timer-mixin');

  var TouchableWithoutFeedback = require(_dependencyMap[13], 'TouchableWithoutFeedback');

  var UIManager = require(_dependencyMap[14], 'UIManager');

  var ViewPropTypes = require(_dependencyMap[15], 'ViewPropTypes');

  var emptyFunction = require(_dependencyMap[16], 'fbjs/lib/emptyFunction');

  var invariant = require(_dependencyMap[17], 'fbjs/lib/invariant');

  var requireNativeComponent = require(_dependencyMap[18], 'requireNativeComponent');

  var warning = require(_dependencyMap[19], 'fbjs/lib/warning');

  var onlyMultiline = {
    onTextInput: true,
    children: true
  };

  if (Platform.OS === 'android') {
    var AndroidTextInput = requireNativeComponent('AndroidTextInput', null);
  } else if (Platform.OS === 'ios') {
    var RCTMultilineTextInputView = requireNativeComponent('RCTMultilineTextInputView', null);
    var RCTSinglelineTextInputView = requireNativeComponent('RCTSinglelineTextInputView', null);
  }

  var DataDetectorTypes = ['phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'];
  var TextInput = createReactClass({
    displayName: 'TextInput',
    statics: {
      State: TextInputState
    },
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      autoCapitalize: PropTypes.oneOf(['none', 'sentences', 'words', 'characters']),
      autoCorrect: PropTypes.bool,
      spellCheck: PropTypes.bool,
      autoFocus: PropTypes.bool,
      allowFontScaling: PropTypes.bool,
      editable: PropTypes.bool,
      keyboardType: PropTypes.oneOf(['default', 'email-address', 'numeric', 'phone-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'number-pad', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search', 'visible-password']),
      keyboardAppearance: PropTypes.oneOf(['default', 'light', 'dark']),
      returnKeyType: PropTypes.oneOf(['done', 'go', 'next', 'search', 'send', 'none', 'previous', 'default', 'emergency-call', 'google', 'join', 'route', 'yahoo']),
      returnKeyLabel: PropTypes.string,
      maxLength: PropTypes.number,
      numberOfLines: PropTypes.number,
      disableFullscreenUI: PropTypes.bool,
      enablesReturnKeyAutomatically: PropTypes.bool,
      multiline: PropTypes.bool,
      textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
      onBlur: PropTypes.func,
      onFocus: PropTypes.func,
      onChange: PropTypes.func,
      onChangeText: PropTypes.func,
      onContentSizeChange: PropTypes.func,
      onEndEditing: PropTypes.func,
      onSelectionChange: PropTypes.func,
      onSubmitEditing: PropTypes.func,
      onKeyPress: PropTypes.func,
      onLayout: PropTypes.func,
      onScroll: PropTypes.func,
      placeholder: PropTypes.string,
      placeholderTextColor: ColorPropType,
      secureTextEntry: PropTypes.bool,
      selectionColor: ColorPropType,
      selectionState: PropTypes.instanceOf(DocumentSelectionState),
      selection: PropTypes.shape({
        start: PropTypes.number.isRequired,
        end: PropTypes.number
      }),
      value: PropTypes.string,
      defaultValue: PropTypes.string,
      clearButtonMode: PropTypes.oneOf(['never', 'while-editing', 'unless-editing', 'always']),
      clearTextOnFocus: PropTypes.bool,
      selectTextOnFocus: PropTypes.bool,
      blurOnSubmit: PropTypes.bool,
      style: Text.propTypes.style,
      underlineColorAndroid: ColorPropType,
      inlineImageLeft: PropTypes.string,
      inlineImagePadding: PropTypes.number,
      dataDetectorTypes: PropTypes.oneOfType([PropTypes.oneOf(DataDetectorTypes), PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))]),
      caretHidden: PropTypes.bool
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        allowFontScaling: true
      };
    },
    mixins: [NativeMethodsMixin, TimerMixin],
    isFocused: function isFocused() {
      return TextInputState.currentlyFocusedField() === ReactNative.findNodeHandle(this._inputRef);
    },
    contextTypes: {
      onFocusRequested: PropTypes.func,
      focusEmitter: PropTypes.instanceOf(EventEmitter)
    },
    _inputRef: undefined,
    _focusSubscription: undefined,
    _lastNativeText: undefined,
    _lastNativeSelection: undefined,
    componentDidMount: function componentDidMount() {
      var _this = this;

      this._lastNativeText = this.props.value;

      if (!this.context.focusEmitter) {
        if (this.props.autoFocus) {
          this.requestAnimationFrame(this.focus);
        }

        return;
      }

      this._focusSubscription = this.context.focusEmitter.addListener('focus', function (el) {
        if (_this === el) {
          _this.requestAnimationFrame(_this.focus);
        } else if (_this.isFocused()) {
          _this.blur();
        }
      });

      if (this.props.autoFocus) {
        this.context.onFocusRequested(this);
      }
    },
    componentWillUnmount: function componentWillUnmount() {
      this._focusSubscription && this._focusSubscription.remove();

      if (this.isFocused()) {
        this.blur();
      }
    },
    getChildContext: function getChildContext() {
      return {
        isInAParentText: true
      };
    },
    childContextTypes: {
      isInAParentText: PropTypes.bool
    },
    clear: function clear() {
      this.setNativeProps({
        text: ''
      });
    },
    render: function render() {
      if (Platform.OS === 'ios') {
        return this._renderIOS();
      } else if (Platform.OS === 'android') {
        return this._renderAndroid();
      }
    },
    _getText: function _getText() {
      return typeof this.props.value === 'string' ? this.props.value : typeof this.props.defaultValue === 'string' ? this.props.defaultValue : '';
    },
    _setNativeRef: function _setNativeRef(ref) {
      this._inputRef = ref;
    },
    _renderIOS: function _renderIOS() {
      var textContainer;
      var props = babelHelpers.extends({}, this.props);
      props.style = [this.props.style];

      if (props.selection && props.selection.end == null) {
        props.selection = {
          start: props.selection.start,
          end: props.selection.start
        };
      }

      if (!props.multiline) {
        if (__DEV__) {
          for (var propKey in onlyMultiline) {
            if (props[propKey]) {
              var error = new Error('TextInput prop `' + propKey + '` is only supported with multiline.');
              warning(false, '%s', error.stack);
            }
          }
        }

        textContainer = React.createElement(RCTSinglelineTextInputView, babelHelpers.extends({
          ref: this._setNativeRef
        }, props, {
          onFocus: this._onFocus,
          onBlur: this._onBlur,
          onChange: this._onChange,
          onSelectionChange: this._onSelectionChange,
          onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
          text: this._getText(),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 709
          }
        }));
      } else {
        var children = props.children;
        var childCount = 0;
        React.Children.forEach(children, function () {
          return ++childCount;
        });
        invariant(!(props.value && childCount), 'Cannot specify both value and children.');

        if (childCount >= 1) {
          children = React.createElement(
            Text,
            {
              style: props.style,
              allowFontScaling: props.allowFontScaling,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 728
              }
            },
            children
          );
        }

        if (props.inputView) {
          children = [children, props.inputView];
        }

        props.style.unshift(styles.multilineInput);
        textContainer = React.createElement(RCTMultilineTextInputView, babelHelpers.extends({
          ref: this._setNativeRef
        }, props, {
          children: children,
          onFocus: this._onFocus,
          onBlur: this._onBlur,
          onChange: this._onChange,
          onContentSizeChange: this.props.onContentSizeChange,
          onSelectionChange: this._onSelectionChange,
          onTextInput: this._onTextInput,
          onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
          text: this._getText(),
          dataDetectorTypes: this.props.dataDetectorTypes,
          onScroll: this._onScroll,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 735
          }
        }));
      }

      return React.createElement(
        TouchableWithoutFeedback,
        {
          onLayout: props.onLayout,
          onPress: this._onPress,
          rejectResponderTermination: true,
          accessible: props.accessible,
          accessibilityLabel: props.accessibilityLabel,
          accessibilityTraits: props.accessibilityTraits,
          nativeID: this.props.nativeID,
          testID: props.testID,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 753
          }
        },
        textContainer
      );
    },
    _renderAndroid: function _renderAndroid() {
      var props = babelHelpers.extends({}, this.props);
      props.style = [this.props.style];
      props.autoCapitalize = UIManager.AndroidTextInput.Constants.AutoCapitalizationType[props.autoCapitalize || 'sentences'];
      var children = this.props.children;
      var childCount = 0;
      React.Children.forEach(children, function () {
        return ++childCount;
      });
      invariant(!(this.props.value && childCount), 'Cannot specify both value and children.');

      if (childCount > 1) {
        children = React.createElement(
          Text,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 785
            }
          },
          children
        );
      }

      if (props.selection && props.selection.end == null) {
        props.selection = {
          start: props.selection.start,
          end: props.selection.start
        };
      }

      var textContainer = React.createElement(AndroidTextInput, babelHelpers.extends({
        ref: this._setNativeRef
      }, props, {
        mostRecentEventCount: 0,
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onSelectionChange: this._onSelectionChange,
        onTextInput: this._onTextInput,
        text: this._getText(),
        children: children,
        disableFullscreenUI: this.props.disableFullscreenUI,
        textBreakStrategy: this.props.textBreakStrategy,
        onScroll: this._onScroll,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 793
        }
      }));
      return React.createElement(
        TouchableWithoutFeedback,
        {
          onLayout: this._onLayout,
          onPress: this._onPress,
          accessible: this.props.accessible,
          accessibilityLabel: this.props.accessibilityLabel,
          accessibilityComponentType: this.props.accessibilityComponentType,
          nativeID: this.props.nativeID,
          testID: this.props.testID,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 810
          }
        },
        textContainer
      );
    },
    _onFocus: function _onFocus(event) {
      if (this.props.onFocus) {
        this.props.onFocus(event);
      }

      if (this.props.selectionState) {
        this.props.selectionState.focus();
      }
    },
    _onPress: function _onPress(event) {
      if (this.props.editable || this.props.editable === undefined) {
        this.focus();
      }
    },
    _onChange: function _onChange(event) {
      if (this._inputRef) {
        this._inputRef.setNativeProps({
          mostRecentEventCount: event.nativeEvent.eventCount
        });
      }

      var text = event.nativeEvent.text;
      this.props.onChange && this.props.onChange(event);
      this.props.onChangeText && this.props.onChangeText(text);

      if (!this._inputRef) {
        return;
      }

      this._lastNativeText = text;
      this.forceUpdate();
    },
    _onSelectionChange: function _onSelectionChange(event) {
      this.props.onSelectionChange && this.props.onSelectionChange(event);

      if (!this._inputRef) {
        return;
      }

      this._lastNativeSelection = event.nativeEvent.selection;

      if (this.props.selection || this.props.selectionState) {
        this.forceUpdate();
      }
    },
    componentDidUpdate: function componentDidUpdate() {
      var nativeProps = {};

      if (this._lastNativeText !== this.props.value && typeof this.props.value === 'string') {
        nativeProps.text = this.props.value;
      }

      var selection = this.props.selection;

      if (this._lastNativeSelection && selection && (this._lastNativeSelection.start !== selection.start || this._lastNativeSelection.end !== selection.end)) {
        nativeProps.selection = this.props.selection;
      }

      if (Object.keys(nativeProps).length > 0 && this._inputRef) {
        this._inputRef.setNativeProps(nativeProps);
      }

      if (this.props.selectionState && selection) {
        this.props.selectionState.update(selection.start, selection.end);
      }
    },
    _onBlur: function _onBlur(event) {
      this.blur();

      if (this.props.onBlur) {
        this.props.onBlur(event);
      }

      if (this.props.selectionState) {
        this.props.selectionState.blur();
      }
    },
    _onTextInput: function _onTextInput(event) {
      this.props.onTextInput && this.props.onTextInput(event);
    },
    _onScroll: function _onScroll(event) {
      this.props.onScroll && this.props.onScroll(event);
    }
  });
  var styles = StyleSheet.create({
    multilineInput: {
      paddingTop: 5
    }
  });
  module.exports = TextInput;
},300,[123,301,67,125,52,130,172,127,21,168,181,115,191,190,107,131,57,13,145,56],"TextInput");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var mixInEventEmitter = require(_dependencyMap[0], 'mixInEventEmitter');

  var DocumentSelectionState = function () {
    function DocumentSelectionState(anchor, focus) {
      babelHelpers.classCallCheck(this, DocumentSelectionState);
      this._anchorOffset = anchor;
      this._focusOffset = focus;
      this._hasFocus = false;
    }

    babelHelpers.createClass(DocumentSelectionState, [{
      key: "update",
      value: function update(anchor, focus) {
        if (this._anchorOffset !== anchor || this._focusOffset !== focus) {
          this._anchorOffset = anchor;
          this._focusOffset = focus;
          this.emit('update');
        }
      }
    }, {
      key: "constrainLength",
      value: function constrainLength(maxLength) {
        this.update(Math.min(this._anchorOffset, maxLength), Math.min(this._focusOffset, maxLength));
      }
    }, {
      key: "focus",
      value: function focus() {
        if (!this._hasFocus) {
          this._hasFocus = true;
          this.emit('focus');
        }
      }
    }, {
      key: "blur",
      value: function blur() {
        if (this._hasFocus) {
          this._hasFocus = false;
          this.emit('blur');
        }
      }
    }, {
      key: "hasFocus",
      value: function hasFocus() {
        return this._hasFocus;
      }
    }, {
      key: "isCollapsed",
      value: function isCollapsed() {
        return this._anchorOffset === this._focusOffset;
      }
    }, {
      key: "isBackward",
      value: function isBackward() {
        return this._anchorOffset > this._focusOffset;
      }
    }, {
      key: "getAnchorOffset",
      value: function getAnchorOffset() {
        return this._hasFocus ? this._anchorOffset : null;
      }
    }, {
      key: "getFocusOffset",
      value: function getFocusOffset() {
        return this._hasFocus ? this._focusOffset : null;
      }
    }, {
      key: "getStartOffset",
      value: function getStartOffset() {
        return this._hasFocus ? Math.min(this._anchorOffset, this._focusOffset) : null;
      }
    }, {
      key: "getEndOffset",
      value: function getEndOffset() {
        return this._hasFocus ? Math.max(this._anchorOffset, this._focusOffset) : null;
      }
    }, {
      key: "overlaps",
      value: function overlaps(start, end) {
        return this.hasFocus() && this.getStartOffset() <= end && start <= this.getEndOffset();
      }
    }]);
    return DocumentSelectionState;
  }();

  mixInEventEmitter(DocumentSelectionState, {
    'blur': true,
    'focus': true,
    'update': true
  });
  module.exports = DocumentSelectionState;
},301,[302],"DocumentSelectionState");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EventEmitter = require(_dependencyMap[0], 'EventEmitter');

  var EventEmitterWithHolding = require(_dependencyMap[1], 'EventEmitterWithHolding');

  var EventHolder = require(_dependencyMap[2], 'EventHolder');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var keyOf = require(_dependencyMap[4], 'fbjs/lib/keyOf');

  var TYPES_KEY = keyOf({
    __types: true
  });

  function mixInEventEmitter(cls, types) {
    invariant(types, 'Must supply set of valid event types');
    var target = cls.prototype || cls;
    invariant(!target.__eventEmitter, 'An active emitter is already mixed in');
    var ctor = cls.constructor;

    if (ctor) {
      invariant(ctor === Object || ctor === Function, 'Mix EventEmitter into a class, not an instance');
    }

    if (target.hasOwnProperty(TYPES_KEY)) {
      babelHelpers.extends(target.__types, types);
    } else if (target.__types) {
      target.__types = babelHelpers.extends({}, target.__types, types);
    } else {
      target.__types = types;
    }

    babelHelpers.extends(target, EventEmitterMixin);
  }

  var EventEmitterMixin = {
    emit: function emit(eventType, a, b, c, d, e, _) {
      return this.__getEventEmitter().emit(eventType, a, b, c, d, e, _);
    },
    emitAndHold: function emitAndHold(eventType, a, b, c, d, e, _) {
      return this.__getEventEmitter().emitAndHold(eventType, a, b, c, d, e, _);
    },
    addListener: function addListener(eventType, listener, context) {
      return this.__getEventEmitter().addListener(eventType, listener, context);
    },
    once: function once(eventType, listener, context) {
      return this.__getEventEmitter().once(eventType, listener, context);
    },
    addRetroactiveListener: function addRetroactiveListener(eventType, listener, context) {
      return this.__getEventEmitter().addRetroactiveListener(eventType, listener, context);
    },
    addListenerMap: function addListenerMap(listenerMap, context) {
      return this.__getEventEmitter().addListenerMap(listenerMap, context);
    },
    addRetroactiveListenerMap: function addRetroactiveListenerMap(listenerMap, context) {
      return this.__getEventEmitter().addListenerMap(listenerMap, context);
    },
    removeAllListeners: function removeAllListeners() {
      this.__getEventEmitter().removeAllListeners();
    },
    removeCurrentListener: function removeCurrentListener() {
      this.__getEventEmitter().removeCurrentListener();
    },
    releaseHeldEventType: function releaseHeldEventType(eventType) {
      this.__getEventEmitter().releaseHeldEventType(eventType);
    },
    __getEventEmitter: function __getEventEmitter() {
      if (!this.__eventEmitter) {
        var emitter = new EventEmitter();

        if (__DEV__) {
          var EventValidator = require(_dependencyMap[5], 'EventValidator');

          emitter = EventValidator.addValidation(emitter, this.__types);
        }

        var holder = new EventHolder();
        this.__eventEmitter = new EventEmitterWithHolding(emitter, holder);
      }

      return this.__eventEmitter;
    }
  };
  module.exports = mixInEventEmitter;
},302,[67,303,304,13,305,306],"mixInEventEmitter");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EventEmitterWithHolding = function () {
    function EventEmitterWithHolding(emitter, holder) {
      babelHelpers.classCallCheck(this, EventEmitterWithHolding);
      this._emitter = emitter;
      this._eventHolder = holder;
      this._currentEventToken = null;
      this._emittingHeldEvents = false;
    }

    babelHelpers.createClass(EventEmitterWithHolding, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        return this._emitter.addListener(eventType, listener, context);
      }
    }, {
      key: "once",
      value: function once(eventType, listener, context) {
        return this._emitter.once(eventType, listener, context);
      }
    }, {
      key: "addRetroactiveListener",
      value: function addRetroactiveListener(eventType, listener, context) {
        var subscription = this._emitter.addListener(eventType, listener, context);

        this._emittingHeldEvents = true;

        this._eventHolder.emitToListener(eventType, listener, context);

        this._emittingHeldEvents = false;
        return subscription;
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this._emitter.removeAllListeners(eventType);
      }
    }, {
      key: "removeCurrentListener",
      value: function removeCurrentListener() {
        this._emitter.removeCurrentListener();
      }
    }, {
      key: "listeners",
      value: function listeners(eventType) {
        return this._emitter.listeners(eventType);
      }
    }, {
      key: "emit",
      value: function emit(eventType) {
        var _emitter;

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        (_emitter = this._emitter).emit.apply(_emitter, [eventType].concat(babelHelpers.toConsumableArray(args)));
      }
    }, {
      key: "emitAndHold",
      value: function emitAndHold(eventType) {
        var _eventHolder, _emitter2;

        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        this._currentEventToken = (_eventHolder = this._eventHolder).holdEvent.apply(_eventHolder, [eventType].concat(babelHelpers.toConsumableArray(args)));

        (_emitter2 = this._emitter).emit.apply(_emitter2, [eventType].concat(babelHelpers.toConsumableArray(args)));

        this._currentEventToken = null;
      }
    }, {
      key: "releaseCurrentEvent",
      value: function releaseCurrentEvent() {
        if (this._currentEventToken) {
          this._eventHolder.releaseEvent(this._currentEventToken);
        } else if (this._emittingHeldEvents) {
          this._eventHolder.releaseCurrentEvent();
        }
      }
    }, {
      key: "releaseHeldEventType",
      value: function releaseHeldEventType(eventType) {
        this._eventHolder.releaseEventType(eventType);
      }
    }]);
    return EventEmitterWithHolding;
  }();

  module.exports = EventEmitterWithHolding;
},303,[],"EventEmitterWithHolding");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var EventHolder = function () {
    function EventHolder() {
      babelHelpers.classCallCheck(this, EventHolder);
      this._heldEvents = {};
      this._currentEventKey = null;
    }

    babelHelpers.createClass(EventHolder, [{
      key: "holdEvent",
      value: function holdEvent(eventType) {
        this._heldEvents[eventType] = this._heldEvents[eventType] || [];
        var eventsOfType = this._heldEvents[eventType];
        var key = {
          eventType: eventType,
          index: eventsOfType.length
        };

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        eventsOfType.push(args);
        return key;
      }
    }, {
      key: "emitToListener",
      value: function emitToListener(eventType, listener, context) {
        var _this = this;

        var eventsOfType = this._heldEvents[eventType];

        if (!eventsOfType) {
          return;
        }

        var origEventKey = this._currentEventKey;
        eventsOfType.forEach(function (eventHeld, index) {
          if (!eventHeld) {
            return;
          }

          _this._currentEventKey = {
            eventType: eventType,
            index: index
          };
          listener.apply(context, eventHeld);
        });
        this._currentEventKey = origEventKey;
      }
    }, {
      key: "releaseCurrentEvent",
      value: function releaseCurrentEvent() {
        invariant(this._currentEventKey !== null, 'Not in an emitting cycle; there is no current event');
        this._currentEventKey && this.releaseEvent(this._currentEventKey);
      }
    }, {
      key: "releaseEvent",
      value: function releaseEvent(token) {
        delete this._heldEvents[token.eventType][token.index];
      }
    }, {
      key: "releaseEventType",
      value: function releaseEventType(type) {
        this._heldEvents[type] = [];
      }
    }]);
    return EventHolder;
  }();

  module.exports = EventHolder;
},304,[13],"EventHolder");
__d(function (global, require, module, exports, _dependencyMap) {
  "use strict";

  var keyOf = function keyOf(oneKeyObj) {
    var key;

    for (key in oneKeyObj) {
      if (!oneKeyObj.hasOwnProperty(key)) {
        continue;
      }

      return key;
    }

    return null;
  };

  module.exports = keyOf;
},305,[],"fbjs/lib/keyOf.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EventValidator = {
    addValidation: function addValidation(emitter, types) {
      var eventTypes = Object.keys(types);
      var emitterWithValidation = Object.create(emitter);
      babelHelpers.extends(emitterWithValidation, {
        emit: function emit(type, a, b, c, d, e, _) {
          assertAllowsEventType(type, eventTypes);
          return emitter.emit.call(this, type, a, b, c, d, e, _);
        }
      });
      return emitterWithValidation;
    }
  };

  function assertAllowsEventType(type, allowedTypes) {
    if (allowedTypes.indexOf(type) === -1) {
      throw new TypeError(errorMessageFor(type, allowedTypes));
    }
  }

  function errorMessageFor(type, allowedTypes) {
    var message = 'Unknown event type "' + type + '". ';

    if (__DEV__) {
      message += recommendationFor(type, allowedTypes);
    }

    message += 'Known event types: ' + allowedTypes.join(', ') + '.';
    return message;
  }

  if (__DEV__) {
    var recommendationFor = function recommendationFor(type, allowedTypes) {
      var closestTypeRecommendation = closestTypeFor(type, allowedTypes);

      if (isCloseEnough(closestTypeRecommendation, type)) {
        return 'Did you mean "' + closestTypeRecommendation.type + '"? ';
      } else {
        return '';
      }
    };

    var closestTypeFor = function closestTypeFor(type, allowedTypes) {
      var typeRecommendations = allowedTypes.map(typeRecommendationFor.bind(this, type));
      return typeRecommendations.sort(recommendationSort)[0];
    };

    var typeRecommendationFor = function typeRecommendationFor(type, recomendedType) {
      return {
        type: recomendedType,
        distance: damerauLevenshteinDistance(type, recomendedType)
      };
    };

    var recommendationSort = function recommendationSort(recommendationA, recommendationB) {
      if (recommendationA.distance < recommendationB.distance) {
        return -1;
      } else if (recommendationA.distance > recommendationB.distance) {
        return 1;
      } else {
        return 0;
      }
    };

    var isCloseEnough = function isCloseEnough(closestType, actualType) {
      return closestType.distance / actualType.length < 0.334;
    };

    var damerauLevenshteinDistance = function damerauLevenshteinDistance(a, b) {
      var i = void 0,
          j = void 0;
      var d = [];

      for (i = 0; i <= a.length; i++) {
        d[i] = [i];
      }

      for (j = 1; j <= b.length; j++) {
        d[0][j] = j;
      }

      for (i = 1; i <= a.length; i++) {
        for (j = 1; j <= b.length; j++) {
          var cost = a.charAt(i - 1) === b.charAt(j - 1) ? 0 : 1;
          d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);

          if (i > 1 && j > 1 && a.charAt(i - 1) === b.charAt(j - 2) && a.charAt(i - 2) === b.charAt(j - 1)) {
            d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);
          }
        }
      }

      return d[a.length][b.length];
    };
  }

  module.exports = EventValidator;
},306,[],"EventValidator");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/ToolbarAndroid/ToolbarAndroid.android.js";

  var Image = require(_dependencyMap[0], 'Image');

  var NativeMethodsMixin = require(_dependencyMap[1], 'NativeMethodsMixin');

  var React = require(_dependencyMap[2], 'React');

  var PropTypes = require(_dependencyMap[3], 'prop-types');

  var ReactNativeViewAttributes = require(_dependencyMap[4], 'ReactNativeViewAttributes');

  var UIManager = require(_dependencyMap[5], 'UIManager');

  var ViewPropTypes = require(_dependencyMap[6], 'ViewPropTypes');

  var ColorPropType = require(_dependencyMap[7], 'ColorPropType');

  var createReactClass = require(_dependencyMap[8], 'create-react-class');

  var requireNativeComponent = require(_dependencyMap[9], 'requireNativeComponent');

  var resolveAssetSource = require(_dependencyMap[10], 'resolveAssetSource');

  var optionalImageSource = PropTypes.oneOfType([Image.propTypes.source, PropTypes.oneOf([])]);
  var ToolbarAndroid = createReactClass({
    displayName: 'ToolbarAndroid',
    mixins: [NativeMethodsMixin],
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      actions: PropTypes.arrayOf(PropTypes.shape({
        title: PropTypes.string.isRequired,
        icon: optionalImageSource,
        show: PropTypes.oneOf(['always', 'ifRoom', 'never']),
        showWithText: PropTypes.bool
      })),
      logo: optionalImageSource,
      navIcon: optionalImageSource,
      onActionSelected: PropTypes.func,
      onIconClicked: PropTypes.func,
      overflowIcon: optionalImageSource,
      subtitle: PropTypes.string,
      subtitleColor: ColorPropType,
      title: PropTypes.string,
      titleColor: ColorPropType,
      contentInsetStart: PropTypes.number,
      contentInsetEnd: PropTypes.number,
      rtl: PropTypes.bool,
      testID: PropTypes.string
    }),
    render: function render() {
      var nativeProps = babelHelpers.extends({}, this.props);

      if (this.props.logo) {
        nativeProps.logo = resolveAssetSource(this.props.logo);
      }

      if (this.props.navIcon) {
        nativeProps.navIcon = resolveAssetSource(this.props.navIcon);
      }

      if (this.props.overflowIcon) {
        nativeProps.overflowIcon = resolveAssetSource(this.props.overflowIcon);
      }

      if (this.props.actions) {
        var nativeActions = [];

        for (var i = 0; i < this.props.actions.length; i++) {
          var action = babelHelpers.extends({}, this.props.actions[i]);

          if (action.icon) {
            action.icon = resolveAssetSource(action.icon);
          }

          if (action.show) {
            action.show = UIManager.ToolbarAndroid.Constants.ShowAsAction[action.show];
          }

          nativeActions.push(action);
        }

        nativeProps.nativeActions = nativeActions;
      }

      return React.createElement(NativeToolbar, babelHelpers.extends({
        onSelect: this._onSelect
      }, nativeProps, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 196
        }
      }));
    },
    _onSelect: function _onSelect(event) {
      var position = event.nativeEvent.position;

      if (position === -1) {
        this.props.onIconClicked && this.props.onIconClicked();
      } else {
        this.props.onActionSelected && this.props.onActionSelected(position);
      }
    }
  });
  var NativeToolbar = requireNativeComponent('ToolbarAndroid', ToolbarAndroid, {
    nativeOnly: {
      nativeActions: true
    }
  });
  module.exports = ToolbarAndroid;
},307,[222,125,130,127,171,107,131,123,172,145,160],"ToolbarAndroid");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/ViewPager/ViewPagerAndroid.android.js";

  var React = require(_dependencyMap[0], 'React');

  var PropTypes = require(_dependencyMap[1], 'prop-types');

  var ReactNative = require(_dependencyMap[2], 'ReactNative');

  var UIManager = require(_dependencyMap[3], 'UIManager');

  var ViewPropTypes = require(_dependencyMap[4], 'ViewPropTypes');

  var dismissKeyboard = require(_dependencyMap[5], 'dismissKeyboard');

  var requireNativeComponent = require(_dependencyMap[6], 'requireNativeComponent');

  var VIEWPAGER_REF = 'viewPager';

  var ViewPagerAndroid = function (_React$Component) {
    babelHelpers.inherits(ViewPagerAndroid, _React$Component);

    function ViewPagerAndroid() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, ViewPagerAndroid);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ViewPagerAndroid.__proto__ || Object.getPrototypeOf(ViewPagerAndroid)).call.apply(_ref, [this].concat(args))), _this), _this.getInnerViewNode = function () {
        return _this.refs[VIEWPAGER_REF].getInnerViewNode();
      }, _this._childrenWithOverridenStyle = function () {
        return React.Children.map(_this.props.children, function (child) {
          if (!child) {
            return null;
          }

          var newProps = babelHelpers.extends({}, child.props, {
            style: [child.props.style, {
              position: 'absolute',
              left: 0,
              top: 0,
              right: 0,
              bottom: 0,
              width: undefined,
              height: undefined
            }],
            collapsable: false
          });

          if (child.type && child.type.displayName && child.type.displayName !== 'RCTView' && child.type.displayName !== 'View') {
            console.warn('Each ViewPager child must be a <View>. Was ' + child.type.displayName);
          }

          return React.createElement(child.type, newProps);
        });
      }, _this._onPageScroll = function (e) {
        if (_this.props.onPageScroll) {
          _this.props.onPageScroll(e);
        }

        if (_this.props.keyboardDismissMode === 'on-drag') {
          dismissKeyboard();
        }
      }, _this._onPageScrollStateChanged = function (e) {
        if (_this.props.onPageScrollStateChanged) {
          _this.props.onPageScrollStateChanged(e.nativeEvent.pageScrollState);
        }
      }, _this._onPageSelected = function (e) {
        if (_this.props.onPageSelected) {
          _this.props.onPageSelected(e);
        }
      }, _this.setPage = function (selectedPage) {
        UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_this), UIManager.AndroidViewPager.Commands.setPage, [selectedPage]);
      }, _this.setPageWithoutAnimation = function (selectedPage) {
        UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_this), UIManager.AndroidViewPager.Commands.setPageWithoutAnimation, [selectedPage]);
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(ViewPagerAndroid, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.props.initialPage != null) {
          this.setPageWithoutAnimation(this.props.initialPage);
        }
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(NativeAndroidViewPager, babelHelpers.extends({}, this.props, {
          ref: VIEWPAGER_REF,
          style: this.props.style,
          onPageScroll: this._onPageScroll,
          onPageScrollStateChanged: this._onPageScrollStateChanged,
          onPageSelected: this._onPageSelected,
          children: this._childrenWithOverridenStyle(),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 238
          }
        }));
      }
    }]);
    return ViewPagerAndroid;
  }(React.Component);

  ViewPagerAndroid.propTypes = babelHelpers.extends({}, ViewPropTypes, {
    initialPage: PropTypes.number,
    onPageScroll: PropTypes.func,
    onPageScrollStateChanged: PropTypes.func,
    onPageSelected: PropTypes.func,
    pageMargin: PropTypes.number,
    keyboardDismissMode: PropTypes.oneOf(['none', 'on-drag']),
    scrollEnabled: PropTypes.bool,
    peekEnabled: PropTypes.bool
  });
  var NativeAndroidViewPager = requireNativeComponent('AndroidViewPager', ViewPagerAndroid);
  module.exports = ViewPagerAndroid;
},308,[130,127,21,107,131,230,145],"ViewPagerAndroid");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/Components/WebView/WebView.android.js";

  var EdgeInsetsPropType = require(_dependencyMap[0], 'EdgeInsetsPropType');

  var ActivityIndicator = require(_dependencyMap[1], 'ActivityIndicator');

  var React = require(_dependencyMap[2], 'React');

  var PropTypes = require(_dependencyMap[3], 'prop-types');

  var ReactNative = require(_dependencyMap[4], 'ReactNative');

  var StyleSheet = require(_dependencyMap[5], 'StyleSheet');

  var UIManager = require(_dependencyMap[6], 'UIManager');

  var View = require(_dependencyMap[7], 'View');

  var ViewPropTypes = require(_dependencyMap[8], 'ViewPropTypes');

  var deprecatedPropType = require(_dependencyMap[9], 'deprecatedPropType');

  var keyMirror = require(_dependencyMap[10], 'fbjs/lib/keyMirror');

  var requireNativeComponent = require(_dependencyMap[11], 'requireNativeComponent');

  var resolveAssetSource = require(_dependencyMap[12], 'resolveAssetSource');

  var RCT_WEBVIEW_REF = 'webview';
  var WebViewState = keyMirror({
    IDLE: null,
    LOADING: null,
    ERROR: null
  });

  var defaultRenderLoading = function defaultRenderLoading() {
    return React.createElement(
      View,
      {
        style: styles.loadingView,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 37
        }
      },
      React.createElement(ActivityIndicator, {
        style: styles.loadingProgressBar,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 38
        }
      })
    );
  };

  var WebView = function (_React$Component) {
    babelHelpers.inherits(WebView, _React$Component);

    function WebView() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, WebView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = WebView.__proto__ || Object.getPrototypeOf(WebView)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        viewState: WebViewState.IDLE,
        lastErrorEvent: null,
        startInLoadingState: true
      }, _this.goForward = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.goForward, null);
      }, _this.goBack = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.goBack, null);
      }, _this.reload = function () {
        _this.setState({
          viewState: WebViewState.LOADING
        });

        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.reload, null);
      }, _this.stopLoading = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.stopLoading, null);
      }, _this.postMessage = function (data) {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.postMessage, [String(data)]);
      }, _this.injectJavaScript = function (data) {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.injectJavaScript, [data]);
      }, _this.updateNavigationState = function (event) {
        if (_this.props.onNavigationStateChange) {
          _this.props.onNavigationStateChange(event.nativeEvent);
        }
      }, _this.getWebViewHandle = function () {
        return ReactNative.findNodeHandle(_this.refs[RCT_WEBVIEW_REF]);
      }, _this.onLoadingStart = function (event) {
        var onLoadStart = _this.props.onLoadStart;
        onLoadStart && onLoadStart(event);

        _this.updateNavigationState(event);
      }, _this.onLoadingError = function (event) {
        event.persist();
        var _this$props = _this.props,
            onError = _this$props.onError,
            onLoadEnd = _this$props.onLoadEnd;
        onError && onError(event);
        onLoadEnd && onLoadEnd(event);
        console.warn('Encountered an error loading page', event.nativeEvent);

        _this.setState({
          lastErrorEvent: event.nativeEvent,
          viewState: WebViewState.ERROR
        });
      }, _this.onLoadingFinish = function (event) {
        var _this$props2 = _this.props,
            onLoad = _this$props2.onLoad,
            onLoadEnd = _this$props2.onLoadEnd;
        onLoad && onLoad(event);
        onLoadEnd && onLoadEnd(event);

        _this.setState({
          viewState: WebViewState.IDLE
        });

        _this.updateNavigationState(event);
      }, _this.onMessage = function (event) {
        var onMessage = _this.props.onMessage;
        onMessage && onMessage(event);
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(WebView, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        if (this.props.startInLoadingState) {
          this.setState({
            viewState: WebViewState.LOADING
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var otherView = null;

        if (this.state.viewState === WebViewState.LOADING) {
          otherView = (this.props.renderLoading || defaultRenderLoading)();
        } else if (this.state.viewState === WebViewState.ERROR) {
          var errorEvent = this.state.lastErrorEvent;
          otherView = this.props.renderError && this.props.renderError(errorEvent.domain, errorEvent.code, errorEvent.description);
        } else if (this.state.viewState !== WebViewState.IDLE) {
          console.error('RCTWebView invalid state encountered: ' + this.state.loading);
        }

        var webViewStyles = [styles.container, this.props.style];

        if (this.state.viewState === WebViewState.LOADING || this.state.viewState === WebViewState.ERROR) {
          webViewStyles.push(styles.hidden);
        }

        var source = this.props.source || {};

        if (this.props.html) {
          source.html = this.props.html;
        } else if (this.props.url) {
          source.uri = this.props.url;
        }

        if (source.method === 'POST' && source.headers) {
          console.warn('WebView: `source.headers` is not supported when using POST.');
        } else if (source.method === 'GET' && source.body) {
          console.warn('WebView: `source.body` is not supported when using GET.');
        }

        var nativeConfig = this.props.nativeConfig || {};
        var NativeWebView = nativeConfig.component || RCTWebView;
        var webView = React.createElement(NativeWebView, babelHelpers.extends({
          ref: RCT_WEBVIEW_REF,
          key: "webViewKey",
          style: webViewStyles,
          source: resolveAssetSource(source),
          scalesPageToFit: this.props.scalesPageToFit,
          injectedJavaScript: this.props.injectedJavaScript,
          userAgent: this.props.userAgent,
          javaScriptEnabled: this.props.javaScriptEnabled,
          thirdPartyCookiesEnabled: this.props.thirdPartyCookiesEnabled,
          domStorageEnabled: this.props.domStorageEnabled,
          messagingEnabled: typeof this.props.onMessage === 'function',
          onMessage: this.onMessage,
          contentInset: this.props.contentInset,
          automaticallyAdjustContentInsets: this.props.automaticallyAdjustContentInsets,
          onContentSizeChange: this.props.onContentSizeChange,
          onLoadingStart: this.onLoadingStart,
          onLoadingFinish: this.onLoadingFinish,
          onLoadingError: this.onLoadingError,
          testID: this.props.testID,
          mediaPlaybackRequiresUserAction: this.props.mediaPlaybackRequiresUserAction,
          allowUniversalAccessFromFileURLs: this.props.allowUniversalAccessFromFileURLs,
          mixedContentMode: this.props.mixedContentMode,
          saveFormDataDisabled: this.props.saveFormDataDisabled,
          urlPrefixesForDefaultIntent: this.props.urlPrefixesForDefaultIntent
        }, nativeConfig.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 296
          }
        }));
        return React.createElement(
          View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 325
            }
          },
          webView,
          otherView
        );
      }
    }], [{
      key: "extraNativeComponentConfig",
      get: function get() {
        return {
          nativeOnly: {
            messagingEnabled: PropTypes.bool
          }
        };
      }
    }]);
    return WebView;
  }(React.Component);

  WebView.propTypes = babelHelpers.extends({}, ViewPropTypes, {
    renderError: PropTypes.func,
    renderLoading: PropTypes.func,
    onLoad: PropTypes.func,
    onLoadEnd: PropTypes.func,
    onLoadStart: PropTypes.func,
    onError: PropTypes.func,
    automaticallyAdjustContentInsets: PropTypes.bool,
    contentInset: EdgeInsetsPropType,
    onNavigationStateChange: PropTypes.func,
    onMessage: PropTypes.func,
    onContentSizeChange: PropTypes.func,
    startInLoadingState: PropTypes.bool,
    style: ViewPropTypes.style,
    html: deprecatedPropType(PropTypes.string, 'Use the `source` prop instead.'),
    url: deprecatedPropType(PropTypes.string, 'Use the `source` prop instead.'),
    source: PropTypes.oneOfType([PropTypes.shape({
      uri: PropTypes.string,
      method: PropTypes.oneOf(['GET', 'POST']),
      headers: PropTypes.object,
      body: PropTypes.string
    }), PropTypes.shape({
      html: PropTypes.string,
      baseUrl: PropTypes.string
    }), PropTypes.number]),
    javaScriptEnabled: PropTypes.bool,
    thirdPartyCookiesEnabled: PropTypes.bool,
    domStorageEnabled: PropTypes.bool,
    injectedJavaScript: PropTypes.string,
    scalesPageToFit: PropTypes.bool,
    userAgent: PropTypes.string,
    testID: PropTypes.string,
    mediaPlaybackRequiresUserAction: PropTypes.bool,
    allowUniversalAccessFromFileURLs: PropTypes.bool,
    injectJavaScript: PropTypes.func,
    mixedContentMode: PropTypes.oneOf(['never', 'always', 'compatibility']),
    saveFormDataDisabled: PropTypes.bool,
    nativeConfig: PropTypes.shape({
      component: PropTypes.any,
      props: PropTypes.object,
      viewManager: PropTypes.object
    }),
    urlPrefixesForDefaultIntent: PropTypes.arrayOf(PropTypes.string)
  });
  WebView.defaultProps = {
    javaScriptEnabled: true,
    thirdPartyCookiesEnabled: true,
    scalesPageToFit: true,
    saveFormDataDisabled: false
  };
  var RCTWebView = requireNativeComponent('RCTWebView', WebView, WebView.extraNativeComponentConfig);
  var styles = StyleSheet.create({
    container: {
      flex: 1
    },
    hidden: {
      height: 0,
      flex: 0
    },
    loadingView: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center'
    },
    loadingProgressBar: {
      height: 20
    }
  });
  module.exports = WebView;
},309,[132,122,130,127,21,168,107,170,131,143,150,145,160],"WebView");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var RCTActionSheetManager = require(_dependencyMap[0], 'NativeModules').ActionSheetManager;

  var invariant = require(_dependencyMap[1], 'fbjs/lib/invariant');

  var processColor = require(_dependencyMap[2], 'processColor');

  var ActionSheetIOS = {
    showActionSheetWithOptions: function showActionSheetWithOptions(options, callback) {
      invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
      invariant(typeof callback === 'function', 'Must provide a valid callback');
      RCTActionSheetManager.showActionSheetWithOptions(babelHelpers.extends({}, options, {
        tintColor: processColor(options.tintColor)
      }), callback);
    },
    showShareActionSheetWithOptions: function showShareActionSheetWithOptions(options, failureCallback, successCallback) {
      invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
      invariant(typeof failureCallback === 'function', 'Must provide a valid failureCallback');
      invariant(typeof successCallback === 'function', 'Must provide a valid successCallback');
      RCTActionSheetManager.showShareActionSheetWithOptions(babelHelpers.extends({}, options, {
        tintColor: processColor(options.tintColor)
      }), failureCallback, successCallback);
    }
  };
  module.exports = ActionSheetIOS;
},310,[15,13,152],"ActionSheetIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = require(_dependencyMap[0], 'BatchedBridge');

  var BugReporting = require(_dependencyMap[1], 'BugReporting');

  var NativeModules = require(_dependencyMap[2], 'NativeModules');

  var ReactNative = require(_dependencyMap[3], 'ReactNative');

  var SceneTracker = require(_dependencyMap[4], 'SceneTracker');

  var infoLog = require(_dependencyMap[5], 'infoLog');

  var invariant = require(_dependencyMap[6], 'fbjs/lib/invariant');

  var renderApplication = require(_dependencyMap[7], 'renderApplication');

  var runnables = {};
  var runCount = 1;
  var sections = {};
  var tasks = new Map();

  var componentProviderInstrumentationHook = function componentProviderInstrumentationHook(component) {
    return component();
  };

  var wrapperComponentProvider = void 0;
  var AppRegistry = {
    setWrapperComponentProvider: function setWrapperComponentProvider(provider) {
      wrapperComponentProvider = provider;
    },
    registerConfig: function registerConfig(config) {
      config.forEach(function (appConfig) {
        if (appConfig.run) {
          AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);
        } else {
          invariant(appConfig.component != null, 'AppRegistry.registerConfig(...): Every config is expected to set ' + 'either `run` or `component`, but `%s` has neither.', appConfig.appKey);
          AppRegistry.registerComponent(appConfig.appKey, appConfig.component, appConfig.section);
        }
      });
    },
    registerComponent: function registerComponent(appKey, componentProvider, section) {
      runnables[appKey] = {
        componentProvider: componentProvider,
        run: function run(appParameters) {
          return renderApplication(componentProviderInstrumentationHook(componentProvider), appParameters.initialProps, appParameters.rootTag, wrapperComponentProvider && wrapperComponentProvider(appParameters));
        }
      };

      if (section) {
        sections[appKey] = runnables[appKey];
      }

      return appKey;
    },
    registerRunnable: function registerRunnable(appKey, run) {
      runnables[appKey] = {
        run: run
      };
      return appKey;
    },
    registerSection: function registerSection(appKey, component) {
      AppRegistry.registerComponent(appKey, component, true);
    },
    getAppKeys: function getAppKeys() {
      return Object.keys(runnables);
    },
    getSectionKeys: function getSectionKeys() {
      return Object.keys(sections);
    },
    getSections: function getSections() {
      return babelHelpers.extends({}, sections);
    },
    getRunnable: function getRunnable(appKey) {
      return runnables[appKey];
    },
    getRegistry: function getRegistry() {
      return {
        sections: AppRegistry.getSectionKeys(),
        runnables: babelHelpers.extends({}, runnables)
      };
    },
    setComponentProviderInstrumentationHook: function setComponentProviderInstrumentationHook(hook) {
      componentProviderInstrumentationHook = hook;
    },
    runApplication: function runApplication(appKey, appParameters) {
      var msg = 'Running application "' + appKey + '" with appParams: ' + JSON.stringify(appParameters) + '. ' + '__DEV__ === ' + String(__DEV__) + ', development-level warning are ' + (__DEV__ ? 'ON' : 'OFF') + ', performance optimizations are ' + (__DEV__ ? 'OFF' : 'ON');
      infoLog(msg);
      BugReporting.addSource('AppRegistry.runApplication' + runCount++, function () {
        return msg;
      });
      invariant(runnables[appKey] && runnables[appKey].run, 'Application ' + appKey + ' has not been registered.\n\n' + "Hint: This error often happens when you're running the packager " + '(local dev server) from a wrong folder. For example you have ' + 'multiple apps and the packager is still running for the app you ' + 'were working on before.\nIf this is the case, simply kill the old ' + 'packager instance (e.g. close the packager terminal window) ' + 'and start the packager in the correct app folder (e.g. cd into app ' + "folder and run 'npm start').\n\n" + 'This error can also happen due to a require() error during ' + 'initialization or failure to call AppRegistry.registerComponent.\n\n');
      SceneTracker.setActiveScene({
        name: appKey
      });
      runnables[appKey].run(appParameters);
    },
    unmountApplicationComponentAtRootTag: function unmountApplicationComponentAtRootTag(rootTag) {
      ReactNative.unmountComponentAtNodeAndRemoveContainer(rootTag);
    },
    registerHeadlessTask: function registerHeadlessTask(taskKey, task) {
      if (tasks.has(taskKey)) {
        console.warn("registerHeadlessTask called multiple times for same key '" + taskKey + "'");
      }

      tasks.set(taskKey, task);
    },
    startHeadlessTask: function startHeadlessTask(taskId, taskKey, data) {
      var taskProvider = tasks.get(taskKey);

      if (!taskProvider) {
        throw new Error("No task registered for key " + taskKey);
      }

      taskProvider()(data).then(function () {
        return NativeModules.HeadlessJsTaskSupport.notifyTaskFinished(taskId);
      }).catch(function (reason) {
        console.error(reason);
        NativeModules.HeadlessJsTaskSupport.notifyTaskFinished(taskId);
      });
    }
  };
  BatchedBridge.registerCallableModule('AppRegistry', AppRegistry);
  module.exports = AppRegistry;
},311,[16,312,15,21,314,94,13,315],"AppRegistry");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var RCTDeviceEventEmitter = require(_dependencyMap[0], 'RCTDeviceEventEmitter');

  var Map = require(_dependencyMap[1], 'Map');

  var infoLog = require(_dependencyMap[2], 'infoLog');

  function defaultExtras() {
    BugReporting.addFileSource('react_hierarchy.txt', function () {
      return require(_dependencyMap[3], 'dumpReactTree')();
    });
  }

  var BugReporting = function () {
    function BugReporting() {
      babelHelpers.classCallCheck(this, BugReporting);
    }

    babelHelpers.createClass(BugReporting, null, [{
      key: "_maybeInit",
      value: function _maybeInit() {
        if (!BugReporting._subscription) {
          BugReporting._subscription = RCTDeviceEventEmitter.addListener('collectBugExtraData', BugReporting.collectExtraData, null);
          defaultExtras();
        }

        if (!BugReporting._redboxSubscription) {
          BugReporting._redboxSubscription = RCTDeviceEventEmitter.addListener('collectRedBoxExtraData', BugReporting.collectExtraData, null);
        }
      }
    }, {
      key: "addSource",
      value: function addSource(key, callback) {
        return this._addSource(key, callback, BugReporting._extraSources);
      }
    }, {
      key: "addFileSource",
      value: function addFileSource(key, callback) {
        return this._addSource(key, callback, BugReporting._fileSources);
      }
    }, {
      key: "_addSource",
      value: function _addSource(key, callback, source) {
        BugReporting._maybeInit();

        if (source.has(key)) {
          console.warn("BugReporting.add* called multiple times for same key '" + key + "'");
        }

        source.set(key, callback);
        return {
          remove: function remove() {
            source.delete(key);
          }
        };
      }
    }, {
      key: "collectExtraData",
      value: function collectExtraData() {
        var extraData = {};

        for (var _iterator = BugReporting._extraSources, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref3;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref3 = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref3 = _i.value;
          }

          var _ref = _ref3;

          var _ref2 = babelHelpers.slicedToArray(_ref, 2);

          var _key = _ref2[0];
          var callback = _ref2[1];
          extraData[_key] = callback();
        }

        var fileData = {};

        for (var _iterator2 = BugReporting._fileSources, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref6;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref6 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref6 = _i2.value;
          }

          var _ref4 = _ref6;

          var _ref5 = babelHelpers.slicedToArray(_ref4, 2);

          var _key2 = _ref5[0];
          var _callback = _ref5[1];
          fileData[_key2] = _callback();
        }

        infoLog('BugReporting extraData:', extraData);

        var BugReportingNativeModule = require(_dependencyMap[4], 'NativeModules').BugReporting;

        BugReportingNativeModule && BugReportingNativeModule.setExtraData && BugReportingNativeModule.setExtraData(extraData, fileData);

        var RedBoxNativeModule = require(_dependencyMap[4], 'NativeModules').RedBox;

        RedBoxNativeModule && RedBoxNativeModule.setExtraData && RedBoxNativeModule.setExtraData(extraData, 'From BugReporting.js');
        return {
          extras: extraData,
          files: fileData
        };
      }
    }]);
    return BugReporting;
  }();

  BugReporting._extraSources = new Map();
  BugReporting._fileSources = new Map();
  BugReporting._subscription = null;
  BugReporting._redboxSubscription = null;
  module.exports = BugReporting;
},312,[70,26,94,313,15],"BugReporting");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function dumpReactTree() {
    try {
      return getReactTree();
    } catch (e) {
      return 'Failed to dump react tree: ' + e;
    }
  }

  function getReactTree() {
    return 'React tree dumps have been temporarily disabled while React is ' + 'upgraded to Fiber.';
  }

  module.exports = dumpReactTree;
},313,[],"dumpReactTree");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _listeners = [];
  var _activeScene = {
    name: 'default'
  };
  var SceneTracker = {
    setActiveScene: function setActiveScene(scene) {
      _activeScene = scene;

      _listeners.forEach(function (listener) {
        return listener(_activeScene);
      });
    },
    getActiveScene: function getActiveScene() {
      return _activeScene;
    },
    addActiveSceneChangedListener: function addActiveSceneChangedListener(callback) {
      _listeners.push(callback);

      return {
        remove: function remove() {
          _listeners = _listeners.filter(function (listener) {
            return callback !== listener;
          });
        }
      };
    }
  };
  module.exports = SceneTracker;
},314,[],"SceneTracker");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native/Libraries/ReactNative/renderApplication.js";

  var AppContainer = require(_dependencyMap[0], 'AppContainer');

  var React = require(_dependencyMap[1], 'React');

  var ReactNative = require(_dependencyMap[2], 'ReactNative');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  require(_dependencyMap[4], 'BackHandler');

  function renderApplication(RootComponent, initialProps, rootTag, WrapperComponent) {
    invariant(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);
    var renderable = React.createElement(
      AppContainer,
      {
        rootTag: rootTag,
        WrapperComponent: WrapperComponent,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 34
        }
      },
      React.createElement(RootComponent, babelHelpers.extends({}, initialProps, {
        rootTag: rootTag,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 35
        }
      }))
    );

    if (RootComponent.prototype != null && RootComponent.prototype.unstable_isAsyncReactComponent === true) {
      var AppContainerAsyncWrapper = function (_React$unstable_Async) {
        babelHelpers.inherits(AppContainerAsyncWrapper, _React$unstable_Async);

        function AppContainerAsyncWrapper() {
          babelHelpers.classCallCheck(this, AppContainerAsyncWrapper);
          return babelHelpers.possibleConstructorReturn(this, (AppContainerAsyncWrapper.__proto__ || Object.getPrototypeOf(AppContainerAsyncWrapper)).apply(this, arguments));
        }

        babelHelpers.createClass(AppContainerAsyncWrapper, [{
          key: "render",
          value: function render() {
            return this.props.children;
          }
        }]);
        return AppContainerAsyncWrapper;
      }(React.unstable_AsyncComponent);

      renderable = React.createElement(
        AppContainerAsyncWrapper,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 54
          }
        },
        renderable
      );
    }

    ReactNative.render(renderable, rootTag);
  }

  module.exports = renderApplication;
},315,[261,130,21,13,316],"renderApplication");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var DeviceEventManager = require(_dependencyMap[0], 'NativeModules').DeviceEventManager;

  var RCTDeviceEventEmitter = require(_dependencyMap[1], 'RCTDeviceEventEmitter');

  var DEVICE_BACK_EVENT = 'hardwareBackPress';

  var _backPressSubscriptions = new Set();

  RCTDeviceEventEmitter.addListener(DEVICE_BACK_EVENT, function () {
    var invokeDefault = true;
    var subscriptions = Array.from(_backPressSubscriptions.values()).reverse();

    for (var i = 0; i < subscriptions.length; ++i) {
      if (subscriptions[i]()) {
        invokeDefault = false;
        break;
      }
    }

    if (invokeDefault) {
      BackHandler.exitApp();
    }
  });
  var BackHandler = {
    exitApp: function exitApp() {
      DeviceEventManager.invokeDefaultBackPressHandler();
    },
    addEventListener: function addEventListener(eventName, handler) {
      _backPressSubscriptions.add(handler);

      return {
        remove: function remove() {
          return BackHandler.removeEventListener(eventName, handler);
        }
      };
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      _backPressSubscriptions.delete(handler);
    }
  };
  module.exports = BackHandler;
},316,[15,70],"BackHandler");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = require(_dependencyMap[0], 'NativeModules');

  var RCTAsyncStorage = NativeModules.AsyncRocksDBStorage || NativeModules.AsyncSQLiteDBStorage || NativeModules.AsyncLocalStorage;
  var AsyncStorage = {
    _getRequests: [],
    _getKeys: [],
    _immediate: null,
    getItem: function getItem(key, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiGet([key], function (errors, result) {
          var value = result && result[0] && result[0][1] ? result[0][1] : null;
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0], value);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(value);
          }
        });
      });
    },
    setItem: function setItem(key, value, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiSet([[key, value]], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    removeItem: function removeItem(key, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiRemove([key], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    mergeItem: function mergeItem(key, value, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiMerge([[key, value]], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    clear: function clear(callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.clear(function (error) {
          callback && callback(convertError(error));

          if (error && convertError(error)) {
            reject(convertError(error));
          } else {
            resolve(null);
          }
        });
      });
    },
    getAllKeys: function getAllKeys(callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.getAllKeys(function (error, keys) {
          callback && callback(convertError(error), keys);

          if (error) {
            reject(convertError(error));
          } else {
            resolve(keys);
          }
        });
      });
    },
    flushGetRequests: function flushGetRequests() {
      var getRequests = this._getRequests;
      var getKeys = this._getKeys;
      this._getRequests = [];
      this._getKeys = [];
      RCTAsyncStorage.multiGet(getKeys, function (errors, result) {
        var map = {};
        result && result.forEach(function (_ref) {
          var _ref2 = babelHelpers.slicedToArray(_ref, 2),
              key = _ref2[0],
              value = _ref2[1];

          map[key] = value;
          return value;
        });
        var reqLength = getRequests.length;

        for (var i = 0; i < reqLength; i++) {
          var request = getRequests[i];
          var requestKeys = request.keys;
          var requestResult = requestKeys.map(function (key) {
            return [key, map[key]];
          });
          request.callback && request.callback(null, requestResult);
          request.resolve && request.resolve(requestResult);
        }
      });
    },
    multiGet: function multiGet(keys, callback) {
      var _this = this;

      if (!this._immediate) {
        this._immediate = setImmediate(function () {
          _this._immediate = null;

          _this.flushGetRequests();
        });
      }

      var getRequest = {
        keys: keys,
        callback: callback,
        keyIndex: this._getKeys.length,
        resolve: null,
        reject: null
      };
      var promiseResult = new Promise(function (resolve, reject) {
        getRequest.resolve = resolve;
        getRequest.reject = reject;
      });

      this._getRequests.push(getRequest);

      keys.forEach(function (key) {
        if (_this._getKeys.indexOf(key) === -1) {
          _this._getKeys.push(key);
        }
      });
      return promiseResult;
    },
    multiSet: function multiSet(keyValuePairs, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiSet(keyValuePairs, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    },
    multiRemove: function multiRemove(keys, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiRemove(keys, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    },
    multiMerge: function multiMerge(keyValuePairs, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiMerge(keyValuePairs, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    }
  };

  if (!RCTAsyncStorage.multiMerge) {
    delete AsyncStorage.mergeItem;
    delete AsyncStorage.multiMerge;
  }

  function convertErrors(errs) {
    if (!errs) {
      return null;
    }

    return (Array.isArray(errs) ? errs : [errs]).map(function (e) {
      return convertError(e);
    });
  }

  function convertError(error) {
    if (!error) {
      return null;
    }

    var out = new Error(error.message);
    out.key = error.key;
    return out;
  }

  module.exports = AsyncStorage;
},317,[15],"AsyncStorage");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var BackHandler = require(_dependencyMap[0], 'BackHandler');

  var warning = require(_dependencyMap[1], 'fbjs/lib/warning');

  var BackAndroid = {
    exitApp: function exitApp() {
      warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
      BackHandler.exitApp();
    },
    addEventListener: function addEventListener(eventName, handler) {
      warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
      return BackHandler.addEventListener(eventName, handler);
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
      BackHandler.removeEventListener(eventName, handler);
    }
  };
  module.exports = BackAndroid;
},318,[316,56],"BackAndroid");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = require(_dependencyMap[0], 'prop-types');

  var checkPropTypes = PropTypes.checkPropTypes;

  var RCTCameraRollManager = require(_dependencyMap[1], 'NativeModules').CameraRollManager;

  var createStrictShapeTypeChecker = require(_dependencyMap[2], 'createStrictShapeTypeChecker');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var GROUP_TYPES_OPTIONS = {
    Album: 'Album',
    All: 'All',
    Event: 'Event',
    Faces: 'Faces',
    Library: 'Library',
    PhotoStream: 'PhotoStream',
    SavedPhotos: 'SavedPhotos'
  };
  var ASSET_TYPE_OPTIONS = {
    All: 'All',
    Videos: 'Videos',
    Photos: 'Photos'
  };
  var getPhotosParamChecker = createStrictShapeTypeChecker({
    first: PropTypes.number.isRequired,
    after: PropTypes.string,
    groupTypes: PropTypes.oneOf(Object.keys(GROUP_TYPES_OPTIONS)),
    groupName: PropTypes.string,
    assetType: PropTypes.oneOf(Object.keys(ASSET_TYPE_OPTIONS)),
    mimeTypes: PropTypes.arrayOf(PropTypes.string)
  });
  var getPhotosReturnChecker = createStrictShapeTypeChecker({
    edges: PropTypes.arrayOf(createStrictShapeTypeChecker({
      node: createStrictShapeTypeChecker({
        type: PropTypes.string.isRequired,
        group_name: PropTypes.string.isRequired,
        image: createStrictShapeTypeChecker({
          uri: PropTypes.string.isRequired,
          height: PropTypes.number.isRequired,
          width: PropTypes.number.isRequired,
          isStored: PropTypes.bool,
          playableDuration: PropTypes.number.isRequired
        }).isRequired,
        timestamp: PropTypes.number.isRequired,
        location: createStrictShapeTypeChecker({
          latitude: PropTypes.number,
          longitude: PropTypes.number,
          altitude: PropTypes.number,
          heading: PropTypes.number,
          speed: PropTypes.number
        })
      }).isRequired
    })).isRequired,
    page_info: createStrictShapeTypeChecker({
      has_next_page: PropTypes.bool.isRequired,
      start_cursor: PropTypes.string,
      end_cursor: PropTypes.string
    }).isRequired
  });

  var CameraRoll = function () {
    function CameraRoll() {
      babelHelpers.classCallCheck(this, CameraRoll);
    }

    babelHelpers.createClass(CameraRoll, null, [{
      key: "saveImageWithTag",
      value: function saveImageWithTag(tag) {
        console.warn('`CameraRoll.saveImageWithTag()` is deprecated. Use `CameraRoll.saveToCameraRoll()` instead.');
        return this.saveToCameraRoll(tag, 'photo');
      }
    }, {
      key: "deletePhotos",
      value: function deletePhotos(photos) {
        return RCTCameraRollManager.deletePhotos(photos);
      }
    }, {
      key: "saveToCameraRoll",
      value: function saveToCameraRoll(tag, type) {
        invariant(typeof tag === 'string', 'CameraRoll.saveToCameraRoll must be a valid string.');
        invariant(type === 'photo' || type === 'video' || type === undefined, "The second argument to saveToCameraRoll must be 'photo' or 'video'. You passed " + (type || 'unknown'));
        var mediaType = 'photo';

        if (type) {
          mediaType = type;
        } else if (['mov', 'mp4'].indexOf(tag.split('.').slice(-1)[0]) >= 0) {
          mediaType = 'video';
        }

        return RCTCameraRollManager.saveToCameraRoll(tag, mediaType);
      }
    }, {
      key: "getPhotos",
      value: function getPhotos(params) {
        if (__DEV__) {
          checkPropTypes({
            params: getPhotosParamChecker
          }, {
            params: params
          }, 'params', 'CameraRoll.getPhotos');
        }

        if (arguments.length > 1) {
          console.warn('CameraRoll.getPhotos(tag, success, error) is deprecated.  Use the returned Promise instead');
          var successCallback = arguments[1];

          if (__DEV__) {
            var callback = arguments[1];

            successCallback = function successCallback(response) {
              checkPropTypes({
                response: getPhotosReturnChecker
              }, {
                response: response
              }, 'response', 'CameraRoll.getPhotos callback');
              callback(response);
            };
          }

          var errorCallback = arguments[2] || function () {};

          RCTCameraRollManager.getPhotos(params).then(successCallback, errorCallback);
        }

        return RCTCameraRollManager.getPhotos(params);
      }
    }]);
    return CameraRoll;
  }();

  CameraRoll.GroupTypesOptions = GROUP_TYPES_OPTIONS;
  CameraRoll.AssetTypeOptions = ASSET_TYPE_OPTIONS;
  module.exports = CameraRoll;
},319,[127,15,133,13],"CameraRoll");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Clipboard = require(_dependencyMap[0], 'NativeModules').Clipboard;

  module.exports = {
    getString: function getString() {
      return Clipboard.getString();
    },
    setString: function setString(content) {
      Clipboard.setString(content);
    }
  };
},320,[15],"Clipboard");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var DatePickerModule = require(_dependencyMap[0], 'NativeModules').DatePickerAndroid;

  function _toMillis(options, key) {
    var dateVal = options[key];

    if (typeof dateVal === 'object' && typeof dateVal.getMonth === 'function') {
      options[key] = dateVal.getTime();
    }
  }

  var DatePickerAndroid = function () {
    function DatePickerAndroid() {
      babelHelpers.classCallCheck(this, DatePickerAndroid);
    }

    babelHelpers.createClass(DatePickerAndroid, null, [{
      key: "open",
      value: function open(options) {
        var optionsMs;
        return regeneratorRuntime.async(function open$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                optionsMs = options;

                if (optionsMs) {
                  _toMillis(options, 'date');

                  _toMillis(options, 'minDate');

                  _toMillis(options, 'maxDate');
                }

                return _context.abrupt("return", DatePickerModule.open(options));

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "dateSetAction",
      get: function get() {
        return 'dateSetAction';
      }
    }, {
      key: "dismissedAction",
      get: function get() {
        return 'dismissedAction';
      }
    }]);
    return DatePickerAndroid;
  }();

  module.exports = DatePickerAndroid;
},321,[15],"DatePickerAndroid");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var RCTImagePicker = require(_dependencyMap[0], 'NativeModules').ImagePickerIOS;

  var ImagePickerIOS = {
    canRecordVideos: function canRecordVideos(callback) {
      return RCTImagePicker.canRecordVideos(callback);
    },
    canUseCamera: function canUseCamera(callback) {
      return RCTImagePicker.canUseCamera(callback);
    },
    openCameraDialog: function openCameraDialog(config, successCallback, cancelCallback) {
      config = babelHelpers.extends({
        videoMode: false
      }, config);
      return RCTImagePicker.openCameraDialog(config, successCallback, cancelCallback);
    },
    openSelectDialog: function openSelectDialog(config, successCallback, cancelCallback) {
      config = babelHelpers.extends({
        showImages: true,
        showVideos: false
      }, config);
      return RCTImagePicker.openSelectDialog(config, successCallback, cancelCallback);
    }
  };
  module.exports = ImagePickerIOS;
},322,[15],"ImagePickerIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var NativeEventEmitter = require(_dependencyMap[0], 'NativeEventEmitter');

  var NativeModules = require(_dependencyMap[1], 'NativeModules');

  var Platform = require(_dependencyMap[2], 'Platform');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var LinkingManager = Platform.OS === 'android' ? NativeModules.IntentAndroid : NativeModules.LinkingManager;

  var Linking = function (_NativeEventEmitter) {
    babelHelpers.inherits(Linking, _NativeEventEmitter);

    function Linking() {
      babelHelpers.classCallCheck(this, Linking);
      return babelHelpers.possibleConstructorReturn(this, (Linking.__proto__ || Object.getPrototypeOf(Linking)).call(this, LinkingManager));
    }

    babelHelpers.createClass(Linking, [{
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        this.addListener(type, handler);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        this.removeListener(type, handler);
      }
    }, {
      key: "openURL",
      value: function openURL(url) {
        this._validateURL(url);

        return LinkingManager.openURL(url);
      }
    }, {
      key: "canOpenURL",
      value: function canOpenURL(url) {
        this._validateURL(url);

        return LinkingManager.canOpenURL(url);
      }
    }, {
      key: "getInitialURL",
      value: function getInitialURL() {
        return LinkingManager.getInitialURL();
      }
    }, {
      key: "_validateURL",
      value: function _validateURL(url) {
        invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);
        invariant(url, 'Invalid URL: cannot be empty');
      }
    }]);
    return Linking;
  }(NativeEventEmitter);

  module.exports = new Linking();
},323,[69,15,52,13],"Linking");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Map = require(_dependencyMap[0], 'Map');

  var NativeEventEmitter = require(_dependencyMap[1], 'NativeEventEmitter');

  var NativeModules = require(_dependencyMap[2], 'NativeModules');

  var Platform = require(_dependencyMap[3], 'Platform');

  var RCTNetInfo = NativeModules.NetInfo;
  var NetInfoEventEmitter = new NativeEventEmitter(RCTNetInfo);
  var DEVICE_CONNECTIVITY_EVENT = 'networkStatusDidChange';

  var _subscriptions = new Map();

  var _isConnectedDeprecated = void 0;

  if (Platform.OS === 'ios') {
    _isConnectedDeprecated = function _isConnectedDeprecated(reachability) {
      return reachability !== 'none' && reachability !== 'unknown';
    };
  } else if (Platform.OS === 'android') {
    _isConnectedDeprecated = function _isConnectedDeprecated(connectionType) {
      return connectionType !== 'NONE' && connectionType !== 'UNKNOWN';
    };
  }

  function _isConnected(connection) {
    return connection.type !== 'none' && connection.type !== 'unknown';
  }

  var _isConnectedSubscriptions = new Map();

  var NetInfo = {
    addEventListener: function addEventListener(eventName, handler) {
      var listener = void 0;

      if (eventName === 'connectionChange') {
        listener = NetInfoEventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, function (appStateData) {
          handler({
            type: appStateData.connectionType,
            effectiveType: appStateData.effectiveConnectionType
          });
        });
      } else if (eventName === 'change') {
        console.warn('NetInfo\'s "change" event is deprecated. Listen to the "connectionChange" event instead.');
        listener = NetInfoEventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, function (appStateData) {
          handler(appStateData.network_info);
        });
      } else {
        console.warn('Trying to subscribe to unknown event: "' + eventName + '"');
        return {
          remove: function remove() {}
        };
      }

      _subscriptions.set(handler, listener);

      return {
        remove: function remove() {
          return NetInfo.removeEventListener(eventName, handler);
        }
      };
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      var listener = _subscriptions.get(handler);

      if (!listener) {
        return;
      }

      listener.remove();

      _subscriptions.delete(handler);
    },
    fetch: function fetch() {
      console.warn('NetInfo.fetch() is deprecated. Use NetInfo.getConnectionInfo() instead.');
      return RCTNetInfo.getCurrentConnectivity().then(function (resp) {
        return resp.network_info;
      });
    },
    getConnectionInfo: function getConnectionInfo() {
      return RCTNetInfo.getCurrentConnectivity().then(function (resp) {
        return {
          type: resp.connectionType,
          effectiveType: resp.effectiveConnectionType
        };
      });
    },
    isConnected: {
      addEventListener: function addEventListener(eventName, handler) {
        var listener = function listener(connection) {
          if (eventName === 'change') {
            handler(_isConnectedDeprecated(connection));
          } else if (eventName === 'connectionChange') {
            handler(_isConnected(connection));
          }
        };

        _isConnectedSubscriptions.set(handler, listener);

        NetInfo.addEventListener(eventName, listener);
        return {
          remove: function remove() {
            return NetInfo.isConnected.removeEventListener(eventName, handler);
          }
        };
      },
      removeEventListener: function removeEventListener(eventName, handler) {
        var listener = _isConnectedSubscriptions.get(handler);

        NetInfo.removeEventListener(eventName, listener);

        _isConnectedSubscriptions.delete(handler);
      },
      fetch: function fetch() {
        return NetInfo.getConnectionInfo().then(_isConnected);
      }
    },
    isConnectionExpensive: function isConnectionExpensive() {
      return Platform.OS === 'android' ? RCTNetInfo.isConnectionMetered() : Promise.reject(new Error('Currently not supported on iOS'));
    }
  };
  module.exports = NetInfo;
},324,[26,69,15,52],"NetInfo");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var NativeEventEmitter = require(_dependencyMap[0], 'NativeEventEmitter');

  var RCTPushNotificationManager = require(_dependencyMap[1], 'NativeModules').PushNotificationManager;

  var invariant = require(_dependencyMap[2], 'fbjs/lib/invariant');

  var PushNotificationEmitter = new NativeEventEmitter(RCTPushNotificationManager);

  var _notifHandlers = new Map();

  var DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';
  var NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';
  var NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';
  var DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';

  var PushNotificationIOS = function () {
    babelHelpers.createClass(PushNotificationIOS, null, [{
      key: "presentLocalNotification",
      value: function presentLocalNotification(details) {
        RCTPushNotificationManager.presentLocalNotification(details);
      }
    }, {
      key: "scheduleLocalNotification",
      value: function scheduleLocalNotification(details) {
        RCTPushNotificationManager.scheduleLocalNotification(details);
      }
    }, {
      key: "cancelAllLocalNotifications",
      value: function cancelAllLocalNotifications() {
        RCTPushNotificationManager.cancelAllLocalNotifications();
      }
    }, {
      key: "removeAllDeliveredNotifications",
      value: function removeAllDeliveredNotifications() {
        RCTPushNotificationManager.removeAllDeliveredNotifications();
      }
    }, {
      key: "getDeliveredNotifications",
      value: function getDeliveredNotifications(callback) {
        RCTPushNotificationManager.getDeliveredNotifications(callback);
      }
    }, {
      key: "removeDeliveredNotifications",
      value: function removeDeliveredNotifications(identifiers) {
        RCTPushNotificationManager.removeDeliveredNotifications(identifiers);
      }
    }, {
      key: "setApplicationIconBadgeNumber",
      value: function setApplicationIconBadgeNumber(number) {
        RCTPushNotificationManager.setApplicationIconBadgeNumber(number);
      }
    }, {
      key: "getApplicationIconBadgeNumber",
      value: function getApplicationIconBadgeNumber(callback) {
        RCTPushNotificationManager.getApplicationIconBadgeNumber(callback);
      }
    }, {
      key: "cancelLocalNotifications",
      value: function cancelLocalNotifications(userInfo) {
        RCTPushNotificationManager.cancelLocalNotifications(userInfo);
      }
    }, {
      key: "getScheduledLocalNotifications",
      value: function getScheduledLocalNotifications(callback) {
        RCTPushNotificationManager.getScheduledLocalNotifications(callback);
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
        var listener;

        if (type === 'notification') {
          listener = PushNotificationEmitter.addListener(DEVICE_NOTIF_EVENT, function (notifData) {
            handler(new PushNotificationIOS(notifData));
          });
        } else if (type === 'localNotification') {
          listener = PushNotificationEmitter.addListener(DEVICE_LOCAL_NOTIF_EVENT, function (notifData) {
            handler(new PushNotificationIOS(notifData));
          });
        } else if (type === 'register') {
          listener = PushNotificationEmitter.addListener(NOTIF_REGISTER_EVENT, function (registrationInfo) {
            handler(registrationInfo.deviceToken);
          });
        } else if (type === 'registrationError') {
          listener = PushNotificationEmitter.addListener(NOTIF_REGISTRATION_ERROR_EVENT, function (errorInfo) {
            handler(errorInfo);
          });
        }

        _notifHandlers.set(type, listener);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');

        var listener = _notifHandlers.get(type);

        if (!listener) {
          return;
        }

        listener.remove();

        _notifHandlers.delete(type);
      }
    }, {
      key: "requestPermissions",
      value: function requestPermissions(permissions) {
        var requestedPermissions = {};

        if (permissions) {
          requestedPermissions = {
            alert: !!permissions.alert,
            badge: !!permissions.badge,
            sound: !!permissions.sound
          };
        } else {
          requestedPermissions = {
            alert: true,
            badge: true,
            sound: true
          };
        }

        return RCTPushNotificationManager.requestPermissions(requestedPermissions);
      }
    }, {
      key: "abandonPermissions",
      value: function abandonPermissions() {
        RCTPushNotificationManager.abandonPermissions();
      }
    }, {
      key: "checkPermissions",
      value: function checkPermissions(callback) {
        invariant(typeof callback === 'function', 'Must provide a valid callback');
        RCTPushNotificationManager.checkPermissions(callback);
      }
    }, {
      key: "getInitialNotification",
      value: function getInitialNotification() {
        return RCTPushNotificationManager.getInitialNotification().then(function (notification) {
          return notification && new PushNotificationIOS(notification);
        });
      }
    }]);

    function PushNotificationIOS(nativeNotif) {
      var _this = this;

      babelHelpers.classCallCheck(this, PushNotificationIOS);
      this._data = {};
      this._remoteNotificationCompleteCallbackCalled = false;
      this._isRemote = nativeNotif.remote;

      if (this._isRemote) {
        this._notificationId = nativeNotif.notificationId;
      }

      if (nativeNotif.remote) {
        Object.keys(nativeNotif).forEach(function (notifKey) {
          var notifVal = nativeNotif[notifKey];

          if (notifKey === 'aps') {
            _this._alert = notifVal.alert;
            _this._sound = notifVal.sound;
            _this._badgeCount = notifVal.badge;
            _this._category = notifVal.category;
            _this._contentAvailable = notifVal['content-available'];
          } else {
            _this._data[notifKey] = notifVal;
          }
        });
      } else {
        this._badgeCount = nativeNotif.applicationIconBadgeNumber;
        this._sound = nativeNotif.soundName;
        this._alert = nativeNotif.alertBody;
        this._data = nativeNotif.userInfo;
        this._category = nativeNotif.category;
      }
    }

    babelHelpers.createClass(PushNotificationIOS, [{
      key: "finish",
      value: function finish(fetchResult) {
        if (!this._isRemote || !this._notificationId || this._remoteNotificationCompleteCallbackCalled) {
          return;
        }

        this._remoteNotificationCompleteCallbackCalled = true;
        RCTPushNotificationManager.onFinishRemoteNotification(this._notificationId, fetchResult);
      }
    }, {
      key: "getMessage",
      value: function getMessage() {
        return this._alert;
      }
    }, {
      key: "getSound",
      value: function getSound() {
        return this._sound;
      }
    }, {
      key: "getCategory",
      value: function getCategory() {
        return this._category;
      }
    }, {
      key: "getAlert",
      value: function getAlert() {
        return this._alert;
      }
    }, {
      key: "getContentAvailable",
      value: function getContentAvailable() {
        return this._contentAvailable;
      }
    }, {
      key: "getBadgeCount",
      value: function getBadgeCount() {
        return this._badgeCount;
      }
    }, {
      key: "getData",
      value: function getData() {
        return this._data;
      }
    }]);
    return PushNotificationIOS;
  }();

  PushNotificationIOS.FetchResult = {
    NewData: 'UIBackgroundFetchResultNewData',
    NoData: 'UIBackgroundFetchResultNoData',
    ResultFailed: 'UIBackgroundFetchResultFailed'
  };
  module.exports = PushNotificationIOS;
},325,[69,15,13],"PushNotificationIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Settings = {
    get: function get(key) {
      console.warn('Settings is not yet supported on Android');
      return null;
    },
    set: function set(settings) {
      console.warn('Settings is not yet supported on Android');
    },
    watchKeys: function watchKeys(keys, callback) {
      console.warn('Settings is not yet supported on Android');
      return -1;
    },
    clearWatch: function clearWatch(watchId) {
      console.warn('Settings is not yet supported on Android');
    }
  };
  module.exports = Settings;
},326,[],"Settings");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = require(_dependencyMap[0], 'Platform');

  var invariant = require(_dependencyMap[1], 'fbjs/lib/invariant');

  var processColor = require(_dependencyMap[2], 'processColor');

  var _require = require(_dependencyMap[3], 'NativeModules'),
      ActionSheetManager = _require.ActionSheetManager,
      ShareModule = _require.ShareModule;

  var Share = function () {
    function Share() {
      babelHelpers.classCallCheck(this, Share);
    }

    babelHelpers.createClass(Share, null, [{
      key: "share",
      value: function share(content) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        invariant(typeof content === 'object' && content !== null, 'Content to share must be a valid object');
        invariant(typeof content.url === 'string' || typeof content.message === 'string', 'At least one of URL and message is required');
        invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');

        if (Platform.OS === 'android') {
          invariant(!content.title || typeof content.title === 'string', 'Invalid title: title should be a string.');
          return ShareModule.share(content, options.dialogTitle);
        } else if (Platform.OS === 'ios') {
          return new Promise(function (resolve, reject) {
            ActionSheetManager.showShareActionSheetWithOptions(babelHelpers.extends({}, content, options, {
              tintColor: processColor(options.tintColor)
            }), function (error) {
              return reject(error);
            }, function (success, activityType) {
              if (success) {
                resolve({
                  'action': 'sharedAction',
                  'activityType': activityType
                });
              } else {
                resolve({
                  'action': 'dismissedAction'
                });
              }
            });
          });
        } else {
          return Promise.reject(new Error('Unsupported platform'));
        }
      }
    }, {
      key: "sharedAction",
      get: function get() {
        return 'sharedAction';
      }
    }, {
      key: "dismissedAction",
      get: function get() {
        return 'dismissedAction';
      }
    }]);
    return Share;
  }();

  module.exports = Share;
},327,[52,13,152,15],"Share");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var NativeEventEmitter = require(_dependencyMap[0], 'NativeEventEmitter');

  module.exports = new NativeEventEmitter('StatusBarManager');
},328,[69],"StatusBarIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var TimePickerModule = require(_dependencyMap[0], 'NativeModules').TimePickerAndroid;

  var TimePickerAndroid = function () {
    function TimePickerAndroid() {
      babelHelpers.classCallCheck(this, TimePickerAndroid);
    }

    babelHelpers.createClass(TimePickerAndroid, null, [{
      key: "open",
      value: function open(options) {
        return regeneratorRuntime.async(function open$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", TimePickerModule.open(options));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "timeSetAction",
      get: function get() {
        return 'timeSetAction';
      }
    }, {
      key: "dismissedAction",
      get: function get() {
        return 'dismissedAction';
      }
    }]);
    return TimePickerAndroid;
  }();

  module.exports = TimePickerAndroid;
},329,[15],"TimePickerAndroid");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var RCTVibration = require(_dependencyMap[0], 'NativeModules').Vibration;

  var Platform = require(_dependencyMap[1], 'Platform');

  var _vibrating = false;
  var _id = 0;

  function vibrateByPattern(pattern) {
    var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (_vibrating) {
      return;
    }

    _vibrating = true;

    if (pattern[0] === 0) {
      RCTVibration.vibrate();
      pattern = pattern.slice(1);
    }

    if (pattern.length === 0) {
      _vibrating = false;
      return;
    }

    setTimeout(function () {
      return vibrateScheduler(++_id, pattern, repeat, 1);
    }, pattern[0]);
  }

  function vibrateScheduler(id, pattern, repeat, nextIndex) {
    if (!_vibrating || id !== _id) {
      return;
    }

    RCTVibration.vibrate();

    if (nextIndex >= pattern.length) {
      if (repeat) {
        nextIndex = 0;
      } else {
        _vibrating = false;
        return;
      }
    }

    setTimeout(function () {
      return vibrateScheduler(id, pattern, repeat, nextIndex + 1);
    }, pattern[nextIndex]);
  }

  var Vibration = {
    vibrate: function vibrate() {
      var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 400;
      var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (Platform.OS === 'android') {
        if (typeof pattern === 'number') {
          RCTVibration.vibrate(pattern);
        } else if (Array.isArray(pattern)) {
          RCTVibration.vibrateByPattern(pattern, repeat ? 0 : -1);
        } else {
          throw new Error('Vibration pattern should be a number or array');
        }
      } else {
        if (_vibrating) {
          return;
        }

        if (typeof pattern === 'number') {
          RCTVibration.vibrate();
        } else if (Array.isArray(pattern)) {
          vibrateByPattern(pattern, repeat);
        } else {
          throw new Error('Vibration pattern should be a number or array');
        }
      }
    },
    cancel: function cancel() {
      if (Platform.OS === 'ios') {
        _vibrating = false;
      } else {
        RCTVibration.cancel();
      }
    }
  };
  module.exports = Vibration;
},330,[15,52],"Vibration");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var warning = require(_dependencyMap[0], 'fbjs/lib/warning');

  var VibrationIOS = {
    vibrate: function vibrate() {
      warning('VibrationIOS is not supported on this platform!');
    }
  };
  module.exports = VibrationIOS;
},331,[56],"VibrationIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.takeSnapshot;
},332,[21],"takeSnapshot");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/App.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNavigation = require(_dependencyMap[1], "react-navigation");

  var _reactNativeSqliteStorage = require(_dependencyMap[2], "react-native-sqlite-storage");

  var _reactNativeSqliteStorage2 = babelHelpers.interopRequireDefault(_reactNativeSqliteStorage);

  var _Home = require(_dependencyMap[3], "./screens/Home/");

  var _Home2 = babelHelpers.interopRequireDefault(_Home);

  var _ListPhones = require(_dependencyMap[4], "./screens/ListPhones");

  var _ListPhones2 = babelHelpers.interopRequireDefault(_ListPhones);

  var _RegisterCustomer = require(_dependencyMap[5], "./screens/RegisterCustomer/");

  var _RegisterCustomer2 = babelHelpers.interopRequireDefault(_RegisterCustomer);

  var _RegisterPhones = require(_dependencyMap[6], "./screens/RegisterPhones");

  var _RegisterPhones2 = babelHelpers.interopRequireDefault(_RegisterPhones);

  var _UpdateCustomer = require(_dependencyMap[7], "./screens/UpdateCustomer");

  var _UpdateCustomer2 = babelHelpers.interopRequireDefault(_UpdateCustomer);

  var _UpdatePhone = require(_dependencyMap[8], "./screens/UpdatePhone");

  var _UpdatePhone2 = babelHelpers.interopRequireDefault(_UpdatePhone);

  var Navigator = (0, _reactNavigation.StackNavigator)({
    Home: {
      screen: _Home2.default
    },
    ListPhones: {
      screen: _ListPhones2.default
    },
    RegisterCustomer: {
      screen: _RegisterCustomer2.default
    },
    RegisterPhones: {
      screen: _RegisterPhones2.default
    },
    UpdateCustomer: {
      screen: _UpdateCustomer2.default
    },
    UpdatePhone: {
      screen: _UpdatePhone2.default
    }
  }, {
    headerMode: 'none',
    initialRouteName: 'Home'
  });

  var App = function (_Component) {
    babelHelpers.inherits(App, _Component);

    function App(props) {
      babelHelpers.classCallCheck(this, App);

      var _this = babelHelpers.possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));

      var db = _reactNativeSqliteStorage2.default.openDatabase('syncapp', '1.0', 'SyncApp Database', 200000, _this.openCB, _this.errorCB);

      db.executeSql('CREATE TABLE IF NOT EXISTS "customer"( "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, "name" VARCHAR(45) NOT NULL, "code" VARCHAR(45), CONSTRAINT "code_UNIQUE" UNIQUE("code") );');
      db.executeSql('CREATE TABLE IF NOT EXISTS "phone"( "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, "customer_id" INTEGER NOT NULL, "number" VARCHAR(45) NOT NULL, CONSTRAINT "uk_phone_custimer_id_number" UNIQUE("customer_id", "number"), CONSTRAINT "fk_phone_customer_id" FOREIGN KEY("customer_id") REFERENCES "customer"("id") ON DELETE RESTRICT ON UPDATE RESTRICT );');
      db.executeSql('CREATE INDEX IF NOT EXISTS "phone.fk_phone_customer_id_idx" ON "phone" ("customer_id");');
      db.executeSql('CREATE TABLE IF NOT EXISTS "device"( "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, "guid" VARCHAR(48) NOT NULL, "offset" INTEGER DEFAULT NULL,-- Last server offset that was synced "synced" INTEGER DEFAULT NULL,-- Last timestamp that device was synced CONSTRAINT "guid_UNIQUE" UNIQUE("guid"));');
      db.executeSql('CREATE TABLE IF NOT EXISTS "logger"( "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, "device_id" INTEGER NOT NULL, "table" VARCHAR(45) NOT NULL,-- Table that row was modified "row" INTEGER NOT NULL,-- Row id modified "event" TEXT NOT NULL CHECK("event" IN("insert", "update", "delete")),-- That happens to row "date" INTEGER NOT NULL,-- Date and time unix timestamp of occurrency CONSTRAINT "fk_logger_device_id" FOREIGN KEY("device_id") REFERENCES "device"("id") ON DELETE RESTRICT ON UPDATE RESTRICT);');
      db.executeSql('CREATE INDEX IF NOT EXISTS "logger.fk_logger_device_id_idx" ON "logger" ("device_id");');
      db.executeSql('CREATE INDEX IF NOT EXISTS "logger.table_row" ON "logger" ("table","row" DESC);');
      db.executeSql('CREATE TABLE IF NOT EXISTS "mapper"( "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, "device_id" INTEGER NOT NULL, "table" VARCHAR(45) NOT NULL,-- Table of new row "from" INTEGER NOT NULL,-- Row id from origem device "to" INTEGER NOT NULL,-- Local row id CONSTRAINT "fk_mapper_device_id" FOREIGN KEY("device_id") REFERENCES "device"("id") ON DELETE RESTRICT ON UPDATE RESTRICT);');
      db.executeSql('CREATE INDEX IF NOT EXISTS "mapper.device_id_table_from" ON "mapper" ("device_id","table","from" DESC);');
      db.executeSql('CREATE INDEX IF NOT EXISTS "mapper.fk_mapper_device_id_idx" ON "mapper" ("device_id");');
      db.executeSql('CREATE TABLE IF NOT EXISTS "system"( "id" TEXT PRIMARY KEY NOT NULL CHECK("id" IN("1")) DEFAULT "1", "device_id" INTEGER NOT NULL, "db_version" VARCHAR(45) NOT NULL, CONSTRAINT "fk_system_device_id" FOREIGN KEY("device_id") REFERENCES "device"("id") ON DELETE RESTRICT ON UPDATE RESTRICT);');
      db.executeSql('CREATE INDEX IF NOT EXISTS "system.fk_system_device_id_idx" ON "system" ("device_id");');
      return _this;
    }

    babelHelpers.createClass(App, [{
      key: "successCB",
      value: function successCB() {
        console.log("SQL executed fine");
      }
    }, {
      key: "errorCB",
      value: function errorCB(err) {
        console.log("SQLite3 Error: " + err);
      }
    }, {
      key: "openCB",
      value: function openCB() {
        console.log("Database OPENED");
      }
    }, {
      key: "render",
      value: function render() {
        return _react2.default.createElement(Navigator, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 89
          }
        });
      }
    }]);
    return App;
  }(_react.Component);

  exports.default = App;
},333,[108,334,400,402,672,738,739,740,741],"syncapp-mobile/App.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    get createNavigationContainer() {
      return require(_dependencyMap[0], './createNavigationContainer').default;
    },

    get StateUtils() {
      return require(_dependencyMap[1], './StateUtils').default;
    },

    get addNavigationHelpers() {
      return require(_dependencyMap[2], './addNavigationHelpers').default;
    },

    get NavigationActions() {
      return require(_dependencyMap[3], './NavigationActions').default;
    },

    get createNavigator() {
      return require(_dependencyMap[4], './navigators/createNavigator').default;
    },

    get StackNavigator() {
      return require(_dependencyMap[5], './navigators/StackNavigator').default;
    },

    get TabNavigator() {
      return require(_dependencyMap[6], './navigators/TabNavigator').default;
    },

    get DrawerNavigator() {
      return require(_dependencyMap[7], './navigators/DrawerNavigator').default;
    },

    get StackRouter() {
      return require(_dependencyMap[8], './routers/StackRouter').default;
    },

    get TabRouter() {
      return require(_dependencyMap[9], './routers/TabRouter').default;
    },

    get Transitioner() {
      return require(_dependencyMap[10], './views/Transitioner').default;
    },

    get CardStackTransitioner() {
      return require(_dependencyMap[11], './views/CardStack/CardStackTransitioner').default;
    },

    get CardStack() {
      return require(_dependencyMap[12], './views/CardStack/CardStack').default;
    },

    get Card() {
      return require(_dependencyMap[13], './views/CardStack/Card').default;
    },

    get SafeAreaView() {
      return require(_dependencyMap[14], './views/SafeAreaView').default;
    },

    get Header() {
      return require(_dependencyMap[15], './views/Header/Header').default;
    },

    get HeaderTitle() {
      return require(_dependencyMap[16], './views/Header/HeaderTitle').default;
    },

    get HeaderBackButton() {
      return require(_dependencyMap[17], './views/Header/HeaderBackButton').default;
    },

    get DrawerView() {
      return require(_dependencyMap[18], './views/Drawer/DrawerView').default;
    },

    get DrawerItems() {
      return require(_dependencyMap[19], './views/Drawer/DrawerNavigatorItems').default;
    },

    get TabView() {
      return require(_dependencyMap[20], './views/TabView/TabView').default;
    },

    get TabBarTop() {
      return require(_dependencyMap[21], './views/TabView/TabBarTop').default;
    },

    get TabBarBottom() {
      return require(_dependencyMap[22], './views/TabView/TabBarBottom').default;
    },

    get withNavigation() {
      return require(_dependencyMap[23], './views/withNavigation').default;
    }

  };
},334,[335,340,338,337,341,342,376,393,367,377,364,343,344,346,356,349,350,351,395,398,378,390,392,399],"react-navigation/src/react-navigation.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/createNavigationContainer.js";
  exports.default = createNavigationContainer;

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _PlatformHelpers = require(_dependencyMap[1], "./PlatformHelpers");

  var _NavigationActions = require(_dependencyMap[2], "./NavigationActions");

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  var _addNavigationHelpers = require(_dependencyMap[3], "./addNavigationHelpers");

  var _addNavigationHelpers2 = babelHelpers.interopRequireDefault(_addNavigationHelpers);

  var _invariant = require(_dependencyMap[4], "./utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  function createNavigationContainer(Component) {
    var NavigationContainer = function (_React$Component) {
      babelHelpers.inherits(NavigationContainer, _React$Component);

      function NavigationContainer(props) {
        babelHelpers.classCallCheck(this, NavigationContainer);

        var _this = babelHelpers.possibleConstructorReturn(this, (NavigationContainer.__proto__ || Object.getPrototypeOf(NavigationContainer)).call(this, props));

        _this.subs = null;
        _this._actionEventSubscribers = new Set();

        _this._handleOpenURL = function (_ref) {
          var url = _ref.url;

          var parsedUrl = _this._urlToPathAndParams(url);

          if (parsedUrl) {
            var path = parsedUrl.path,
                params = parsedUrl.params;
            var action = Component.router.getActionForPathAndParams(path, params);

            if (action) {
              _this.dispatch(action);
            }
          }
        };

        _this.dispatch = function (inputAction) {
          var action = _NavigationActions2.default.mapDeprecatedActionAndWarn(inputAction);

          if (!_this._isStateful()) {
            return false;
          }

          _this._nav = _this._nav || _this.state.nav;
          var oldNav = _this._nav;
          (0, _invariant2.default)(oldNav, 'should be set in constructor if stateful');
          var nav = Component.router.getStateForAction(action, oldNav);

          var dispatchActionEvents = function dispatchActionEvents() {
            _this._actionEventSubscribers.forEach(function (subscriber) {
              return subscriber({
                type: 'action',
                action: action,
                state: nav,
                lastState: oldNav
              });
            });
          };

          if (nav && nav !== oldNav) {
            _this._nav = nav;

            _this.setState({
              nav: nav
            }, function () {
              _this._onNavigationStateChange(oldNav, nav, action);

              dispatchActionEvents();
            });

            return true;
          } else {
            dispatchActionEvents();
          }

          return false;
        };

        _this._validateProps(props);

        _this.state = {
          nav: _this._isStateful() ? Component.router.getStateForAction(_NavigationActions2.default.init()) : null
        };
        return _this;
      }

      babelHelpers.createClass(NavigationContainer, [{
        key: "_isStateful",
        value: function _isStateful() {
          return !this.props.navigation;
        }
      }, {
        key: "_validateProps",
        value: function _validateProps(props) {
          if (this._isStateful()) {
            return;
          }

          var navigation = props.navigation,
              screenProps = props.screenProps,
              containerProps = babelHelpers.objectWithoutProperties(props, ["navigation", "screenProps"]);
          var keys = Object.keys(containerProps);

          if (keys.length !== 0) {
            throw new Error('This navigator has both navigation and container props, so it is ' + ("unclear if it should own its own state. Remove props: \"" + keys.join(', ') + "\" ") + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');
          }
        }
      }, {
        key: "_urlToPathAndParams",
        value: function _urlToPathAndParams(url) {
          var params = {};
          var delimiter = this.props.uriPrefix || '://';
          var path = url.split(delimiter)[1];

          if (typeof path === 'undefined') {
            path = url;
          } else if (path === '') {
            path = '/';
          }

          return {
            path: path,
            params: params
          };
        }
      }, {
        key: "_onNavigationStateChange",
        value: function _onNavigationStateChange(prevNav, nav, action) {
          if (typeof this.props.onNavigationStateChange === 'undefined' && this._isStateful() && !!process.env.REACT_NAV_LOGGING) {
            if (console.group) {
              console.group('Navigation Dispatch: ');
              console.log('Action: ', action);
              console.log('New State: ', nav);
              console.log('Last State: ', prevNav);
              console.groupEnd();
            } else {
              console.log('Navigation Dispatch: ', {
                action: action,
                newState: nav,
                lastState: prevNav
              });
            }

            return;
          }

          if (typeof this.props.onNavigationStateChange === 'function') {
            this.props.onNavigationStateChange(prevNav, nav, action);
          }
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
          this._validateProps(nextProps);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          if (this._nav === this.state.nav) {
            this._nav = null;
          }
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;

          if (!this._isStateful()) {
            return;
          }

          this.subs = _PlatformHelpers.BackHandler.addEventListener('hardwareBackPress', function () {
            return _this2.dispatch(_NavigationActions2.default.back());
          });

          _PlatformHelpers.Linking.addEventListener('url', this._handleOpenURL);

          _PlatformHelpers.Linking.getInitialURL().then(function (url) {
            return url && _this2._handleOpenURL({
              url: url
            });
          });
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          _PlatformHelpers.Linking.removeEventListener('url', this._handleOpenURL);

          this.subs && this.subs.remove();
        }
      }, {
        key: "render",
        value: function render() {
          var _this3 = this;

          var navigation = this.props.navigation;

          if (this._isStateful()) {
            var nav = this.state.nav;
            (0, _invariant2.default)(nav, 'should be set in constructor if stateful');

            if (!this._navigation || this._navigation.state !== nav) {
              this._navigation = (0, _addNavigationHelpers2.default)({
                dispatch: this.dispatch,
                state: nav,
                addListener: function addListener(eventName, handler) {
                  if (eventName !== 'action') {
                    return {
                      remove: function remove() {}
                    };
                  }

                  _this3._actionEventSubscribers.add(handler);

                  return {
                    remove: function remove() {
                      _this3._actionEventSubscribers.delete(handler);
                    }
                  };
                }
              });
            }

            navigation = this._navigation;
          }

          (0, _invariant2.default)(navigation, 'failed to get navigation');
          return _react2.default.createElement(Component, babelHelpers.extends({}, this.props, {
            navigation: navigation,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 205
            }
          }));
        }
      }]);
      return NavigationContainer;
    }(_react2.default.Component);

    NavigationContainer.router = Component.router;
    NavigationContainer.navigationOptions = null;
    return NavigationContainer;
  }
},335,[108,336,337,338,339],"react-navigation/src/createNavigationContainer.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Linking = exports.BackHandler = undefined;

  var _reactNative = require(_dependencyMap[0], "react-native");

  var BackHandler = _reactNative.BackHandler || _reactNative.BackAndroid;
  exports.BackHandler = BackHandler;
  exports.Linking = _reactNative.Linking;
},336,[12],"react-navigation/src/PlatformHelpers.native.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var BACK = 'Navigation/BACK';
  var INIT = 'Navigation/INIT';
  var NAVIGATE = 'Navigation/NAVIGATE';
  var POP = 'Navigation/POP';
  var POP_TO_TOP = 'Navigation/POP_TO_TOP';
  var PUSH = 'Navigation/PUSH';
  var RESET = 'Navigation/RESET';
  var SET_PARAMS = 'Navigation/SET_PARAMS';
  var URI = 'Navigation/URI';
  var COMPLETE_TRANSITION = 'Navigation/COMPLETE_TRANSITION';

  var createAction = function createAction(type, fn) {
    fn.toString = function () {
      return type;
    };

    return fn;
  };

  var back = createAction(BACK, function () {
    var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return {
      type: BACK,
      key: payload.key,
      immediate: payload.immediate
    };
  });
  var init = createAction(INIT, function () {
    var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var action = {
      type: INIT
    };

    if (payload.params) {
      action.params = payload.params;
    }

    return action;
  });
  var navigate = createAction(NAVIGATE, function (payload) {
    var action = {
      type: NAVIGATE,
      routeName: payload.routeName
    };

    if (payload.params) {
      action.params = payload.params;
    }

    if (payload.action) {
      action.action = payload.action;
    }

    if (payload.key) {
      action.key = payload.key;
    }

    return action;
  });
  var pop = createAction(POP, function (payload) {
    return {
      type: POP,
      n: payload && payload.n,
      immediate: payload && payload.immediate
    };
  });
  var popToTop = createAction(POP_TO_TOP, function (payload) {
    return {
      type: POP_TO_TOP,
      immediate: payload && payload.immediate
    };
  });
  var push = createAction(PUSH, function (payload) {
    var action = {
      type: PUSH,
      routeName: payload.routeName
    };

    if (payload.params) {
      action.params = payload.params;
    }

    if (payload.action) {
      action.action = payload.action;
    }

    return action;
  });
  var reset = createAction(RESET, function (payload) {
    return {
      type: RESET,
      index: payload.index,
      key: payload.key,
      actions: payload.actions
    };
  });
  var setParams = createAction(SET_PARAMS, function (payload) {
    return {
      type: SET_PARAMS,
      key: payload.key,
      params: payload.params
    };
  });
  var uri = createAction(URI, function (payload) {
    return {
      type: URI,
      uri: payload.uri
    };
  });
  var completeTransition = createAction(COMPLETE_TRANSITION, function (payload) {
    return {
      type: COMPLETE_TRANSITION,
      key: payload && payload.key
    };
  });

  var mapDeprecatedNavigateAction = function mapDeprecatedNavigateAction(action) {
    if (action.type === 'Navigate') {
      var payload = {
        routeName: action.routeName,
        params: action.params
      };

      if (action.action) {
        payload.action = mapDeprecatedNavigateAction(action.action);
      }

      return navigate(payload);
    }

    return action;
  };

  var mapDeprecatedAction = function mapDeprecatedAction(action) {
    if (action.type === 'Back') {
      return back(action);
    } else if (action.type === 'Init') {
      return init(action);
    } else if (action.type === 'Navigate') {
      return mapDeprecatedNavigateAction(action);
    } else if (action.type === 'Reset') {
      return reset({
        index: action.index,
        key: action.key,
        actions: action.actions.map(mapDeprecatedNavigateAction)
      });
    } else if (action.type === 'SetParams') {
      return setParams(action);
    }

    return action;
  };

  var mapDeprecatedActionAndWarn = function mapDeprecatedActionAndWarn(action) {
    var newAction = mapDeprecatedAction(action);

    if (newAction !== action) {
      var oldType = action.type;
      var newType = newAction.type;
      console.warn(["The action type '" + oldType + "' has been renamed to '" + newType + "'.", "'" + oldType + "' will continue to work while in beta but will be removed", 'in the first major release. Moving forward, you should use the', 'action constants and action creators exported by this library in', "the 'actions' object.", 'See https://github.com/react-community/react-navigation/pull/120 for', 'more details.'].join(' '));
    }

    return newAction;
  };

  exports.default = {
    BACK: BACK,
    INIT: INIT,
    NAVIGATE: NAVIGATE,
    POP: POP,
    POP_TO_TOP: POP_TO_TOP,
    PUSH: PUSH,
    RESET: RESET,
    SET_PARAMS: SET_PARAMS,
    URI: URI,
    COMPLETE_TRANSITION: COMPLETE_TRANSITION,
    back: back,
    init: init,
    navigate: navigate,
    pop: pop,
    popToTop: popToTop,
    push: push,
    reset: reset,
    setParams: setParams,
    uri: uri,
    completeTransition: completeTransition,
    mapDeprecatedActionAndWarn: mapDeprecatedActionAndWarn
  };
},337,[],"react-navigation/src/NavigationActions.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function (navigation) {
    return babelHelpers.extends({}, navigation, {
      goBack: function goBack(key) {
        var actualizedKey = key;

        if (key === undefined && navigation.state.key) {
          (0, _invariant2.default)(typeof navigation.state.key === 'string', 'key should be a string');
          actualizedKey = navigation.state.key;
        }

        return navigation.dispatch(_NavigationActions2.default.back({
          key: actualizedKey
        }));
      },
      navigate: function navigate(navigateTo, params, action) {
        if (typeof navigateTo === 'string') {
          return navigation.dispatch(_NavigationActions2.default.navigate({
            routeName: navigateTo,
            params: params,
            action: action
          }));
        }

        (0, _invariant2.default)(typeof navigateTo === 'object', 'Must navigateTo an object or a string');
        (0, _invariant2.default)(params == null, 'Params must not be provided to .navigate() when specifying an object');
        (0, _invariant2.default)(action == null, 'Child action must not be provided to .navigate() when specifying an object');
        return navigation.dispatch(_NavigationActions2.default.navigate(navigateTo));
      },
      pop: function pop(n, params) {
        return navigation.dispatch(_NavigationActions2.default.pop({
          n: n,
          immediate: params && params.immediate
        }));
      },
      popToTop: function popToTop(params) {
        return navigation.dispatch(_NavigationActions2.default.popToTop({
          immediate: params && params.immediate
        }));
      },
      setParams: function setParams(params) {
        (0, _invariant2.default)(navigation.state.key && typeof navigation.state.key === 'string', 'setParams cannot be called by root navigator');
        var key = navigation.state.key;
        return navigation.dispatch(_NavigationActions2.default.setParams({
          params: params,
          key: key
        }));
      },
      push: function push(routeName, params, action) {
        return navigation.dispatch(_NavigationActions2.default.push({
          routeName: routeName,
          params: params,
          action: action
        }));
      }
    });
  };

  var _NavigationActions = require(_dependencyMap[0], "./NavigationActions");

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  var _invariant = require(_dependencyMap[1], "./utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);
},338,[337,339],"react-navigation/src/addNavigationHelpers.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var validateFormat = function validateFormat(format) {};

  if (__DEV__) {
    validateFormat = function validateFormat(format) {
      if (format === undefined) {
        throw new Error('invariant requires an error message argument');
      }
    };
  }

  function invariant(condition, format, a, b, c, d, e, f) {
    validateFormat(format);

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  }

  module.exports = invariant;
},339,[],"react-navigation/src/utils/invariant.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _invariant = require(_dependencyMap[0], "./utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var StateUtils = {
    get: function get(state, key) {
      return state.routes.find(function (route) {
        return route.key === key;
      }) || null;
    },
    indexOf: function indexOf(state, key) {
      return state.routes.map(function (route) {
        return route.key;
      }).indexOf(key);
    },
    has: function has(state, key) {
      return !!state.routes.some(function (route) {
        return route.key === key;
      });
    },
    push: function push(state, route) {
      (0, _invariant2.default)(StateUtils.indexOf(state, route.key) === -1, 'should not push route with duplicated key %s', route.key);
      var routes = state.routes.slice();
      routes.push(route);
      return babelHelpers.extends({}, state, {
        index: routes.length - 1,
        routes: routes
      });
    },
    pop: function pop(state) {
      if (state.index <= 0) {
        return state;
      }

      var routes = state.routes.slice(0, -1);
      return babelHelpers.extends({}, state, {
        index: routes.length - 1,
        routes: routes
      });
    },
    jumpToIndex: function jumpToIndex(state, index) {
      if (index === state.index) {
        return state;
      }

      (0, _invariant2.default)(!!state.routes[index], 'invalid index %s to jump to', index);
      return babelHelpers.extends({}, state, {
        index: index
      });
    },
    jumpTo: function jumpTo(state, key) {
      var index = StateUtils.indexOf(state, key);
      return StateUtils.jumpToIndex(state, index);
    },
    back: function back(state) {
      var index = state.index - 1;
      var route = state.routes[index];
      return route ? StateUtils.jumpToIndex(state, index) : state;
    },
    forward: function forward(state) {
      var index = state.index + 1;
      var route = state.routes[index];
      return route ? StateUtils.jumpToIndex(state, index) : state;
    },
    replaceAt: function replaceAt(state, key, route) {
      var index = StateUtils.indexOf(state, key);
      return StateUtils.replaceAtIndex(state, index, route);
    },
    replaceAtIndex: function replaceAtIndex(state, index, route) {
      (0, _invariant2.default)(!!state.routes[index], 'invalid index %s for replacing route %s', index, route.key);

      if (state.routes[index] === route) {
        return state;
      }

      var routes = state.routes.slice();
      routes[index] = route;
      return babelHelpers.extends({}, state, {
        index: index,
        routes: routes
      });
    },
    reset: function reset(state, routes, index) {
      (0, _invariant2.default)(routes.length && Array.isArray(routes), 'invalid routes to replace');
      var nextIndex = index === undefined ? routes.length - 1 : index;

      if (state.routes.length === routes.length && state.index === nextIndex) {
        var compare = function compare(route, ii) {
          return routes[ii] === route;
        };

        if (state.routes.every(compare)) {
          return state;
        }
      }

      (0, _invariant2.default)(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);
      return babelHelpers.extends({}, state, {
        index: nextIndex,
        routes: routes
      });
    }
  };
  exports.default = StateUtils;
},340,[339],"react-navigation/src/StateUtils.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/navigators/createNavigator.js";
  exports.default = createNavigator;

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  function createNavigator(router, routeConfigs, navigatorConfig) {
    return function (NavigationView) {
      var Navigator = function (_React$Component) {
        babelHelpers.inherits(Navigator, _React$Component);

        function Navigator() {
          babelHelpers.classCallCheck(this, Navigator);
          return babelHelpers.possibleConstructorReturn(this, (Navigator.__proto__ || Object.getPrototypeOf(Navigator)).apply(this, arguments));
        }

        babelHelpers.createClass(Navigator, [{
          key: "render",
          value: function render() {
            return _react2.default.createElement(NavigationView, babelHelpers.extends({}, this.props, {
              router: router,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 13
              }
            }));
          }
        }]);
        return Navigator;
      }(_react2.default.Component);

      Navigator.router = router;
      Navigator.navigationOptions = null;
      return Navigator;
    };
  }
},341,[108],"react-navigation/src/navigators/createNavigator.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/navigators/StackNavigator.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _createNavigationContainer = require(_dependencyMap[1], "../createNavigationContainer");

  var _createNavigationContainer2 = babelHelpers.interopRequireDefault(_createNavigationContainer);

  var _createNavigator = require(_dependencyMap[2], "./createNavigator");

  var _createNavigator2 = babelHelpers.interopRequireDefault(_createNavigator);

  var _CardStackTransitioner = require(_dependencyMap[3], "../views/CardStack/CardStackTransitioner");

  var _CardStackTransitioner2 = babelHelpers.interopRequireDefault(_CardStackTransitioner);

  var _StackRouter = require(_dependencyMap[4], "../routers/StackRouter");

  var _StackRouter2 = babelHelpers.interopRequireDefault(_StackRouter);

  var _NavigationActions = require(_dependencyMap[5], "../NavigationActions");

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  exports.default = function (routeConfigMap) {
    var stackConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var initialRouteName = stackConfig.initialRouteName,
        initialRouteParams = stackConfig.initialRouteParams,
        paths = stackConfig.paths,
        headerMode = stackConfig.headerMode,
        mode = stackConfig.mode,
        cardStyle = stackConfig.cardStyle,
        transitionConfig = stackConfig.transitionConfig,
        onTransitionStart = stackConfig.onTransitionStart,
        _onTransitionEnd = stackConfig.onTransitionEnd,
        navigationOptions = stackConfig.navigationOptions;
    var stackRouterConfig = {
      initialRouteName: initialRouteName,
      initialRouteParams: initialRouteParams,
      paths: paths,
      navigationOptions: navigationOptions
    };
    var router = (0, _StackRouter2.default)(routeConfigMap, stackRouterConfig);
    var navigator = (0, _createNavigator2.default)(router, routeConfigMap, stackConfig)(function (props) {
      return _react2.default.createElement(_CardStackTransitioner2.default, babelHelpers.extends({}, props, {
        headerMode: headerMode,
        mode: mode,
        cardStyle: cardStyle,
        transitionConfig: transitionConfig,
        onTransitionStart: onTransitionStart,
        onTransitionEnd: function onTransitionEnd(lastTransition, transition) {
          var _props$navigation = props.navigation,
              state = _props$navigation.state,
              dispatch = _props$navigation.dispatch;
          dispatch(_NavigationActions2.default.completeTransition({
            key: state.key
          }));
          _onTransitionEnd && _onTransitionEnd();
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 38
        }
      }));
    });
    return (0, _createNavigationContainer2.default)(navigator);
  };
},342,[108,335,341,343,367,337],"react-navigation/src/navigators/StackNavigator.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/views/CardStack/CardStackTransitioner.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _CardStack = require(_dependencyMap[2], "./CardStack");

  var _CardStack2 = babelHelpers.interopRequireDefault(_CardStack);

  var _CardStackStyleInterpolator = require(_dependencyMap[3], "./CardStackStyleInterpolator");

  var _CardStackStyleInterpolator2 = babelHelpers.interopRequireDefault(_CardStackStyleInterpolator);

  var _Transitioner = require(_dependencyMap[4], "../Transitioner");

  var _Transitioner2 = babelHelpers.interopRequireDefault(_Transitioner);

  var _TransitionConfigs = require(_dependencyMap[5], "./TransitionConfigs");

  var _TransitionConfigs2 = babelHelpers.interopRequireDefault(_TransitionConfigs);

  var NativeAnimatedModule = _reactNative.NativeModules && _reactNative.NativeModules.NativeAnimatedModule;

  var CardStackTransitioner = function (_React$Component) {
    babelHelpers.inherits(CardStackTransitioner, _React$Component);

    function CardStackTransitioner() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, CardStackTransitioner);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = CardStackTransitioner.__proto__ || Object.getPrototypeOf(CardStackTransitioner)).call.apply(_ref, [this].concat(args))), _this), _this._configureTransition = function (transitionProps, prevTransitionProps) {
        var isModal = _this.props.mode === 'modal';
        var transitionSpec = babelHelpers.extends({}, _TransitionConfigs2.default.getTransitionConfig(_this.props.transitionConfig, transitionProps, prevTransitionProps, isModal).transitionSpec);

        if (!!NativeAnimatedModule && _CardStackStyleInterpolator2.default.canUseNativeDriver()) {
          transitionSpec.useNativeDriver = true;
        }

        return transitionSpec;
      }, _this._render = function (props) {
        var _this$props = _this.props,
            screenProps = _this$props.screenProps,
            headerMode = _this$props.headerMode,
            mode = _this$props.mode,
            router = _this$props.router,
            cardStyle = _this$props.cardStyle,
            transitionConfig = _this$props.transitionConfig;
        return _react2.default.createElement(_CardStack2.default, babelHelpers.extends({
          screenProps: screenProps,
          headerMode: headerMode,
          mode: mode,
          router: router,
          cardStyle: cardStyle,
          transitionConfig: transitionConfig
        }, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 66
          }
        }));
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(CardStackTransitioner, [{
      key: "render",
      value: function render() {
        return _react2.default.createElement(_Transitioner2.default, {
          configureTransition: this._configureTransition,
          navigation: this.props.navigation,
          render: this._render,
          onTransitionStart: this.props.onTransitionStart,
          onTransitionEnd: this.props.onTransitionEnd,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 19
          }
        });
      }
    }]);
    return CardStackTransitioner;
  }(_react2.default.Component);

  CardStackTransitioner.defaultProps = {
    mode: 'card'
  };
  exports.default = CardStackTransitioner;
},343,[108,12,344,362,364,361],"react-navigation/src/views/CardStack/CardStackTransitioner.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/views/CardStack/CardStack.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _clamp = require(_dependencyMap[1], "clamp");

  var _clamp2 = babelHelpers.interopRequireDefault(_clamp);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _Card = require(_dependencyMap[3], "./Card");

  var _Card2 = babelHelpers.interopRequireDefault(_Card);

  var _Header = require(_dependencyMap[4], "../Header/Header");

  var _Header2 = babelHelpers.interopRequireDefault(_Header);

  var _NavigationActions = require(_dependencyMap[5], "../../NavigationActions");

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  var _addNavigationHelpers = require(_dependencyMap[6], "../../addNavigationHelpers");

  var _addNavigationHelpers2 = babelHelpers.interopRequireDefault(_addNavigationHelpers);

  var _getChildEventSubscriber = require(_dependencyMap[7], "../../getChildEventSubscriber");

  var _getChildEventSubscriber2 = babelHelpers.interopRequireDefault(_getChildEventSubscriber);

  var _SceneView = require(_dependencyMap[8], "../SceneView");

  var _SceneView2 = babelHelpers.interopRequireDefault(_SceneView);

  var _TransitionConfigs = require(_dependencyMap[9], "./TransitionConfigs");

  var _TransitionConfigs2 = babelHelpers.interopRequireDefault(_TransitionConfigs);

  var emptyFunction = function emptyFunction() {};

  var EaseInOut = _reactNative.Easing.inOut(_reactNative.Easing.ease);

  var ANIMATION_DURATION = 500;
  var POSITION_THRESHOLD = 1 / 2;
  var RESPOND_THRESHOLD = 20;
  var GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 25;
  var GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;

  var animatedSubscribeValue = function animatedSubscribeValue(animatedValue) {
    if (!animatedValue.__isNative) {
      return;
    }

    if (Object.keys(animatedValue._listeners).length === 0) {
      animatedValue.addListener(emptyFunction);
    }
  };

  var CardStack = function (_React$Component) {
    babelHelpers.inherits(CardStack, _React$Component);

    function CardStack() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, CardStack);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = CardStack.__proto__ || Object.getPrototypeOf(CardStack)).call.apply(_ref, [this].concat(args))), _this), _this._gestureStartValue = 0, _this._isResponding = false, _this._immediateIndex = null, _this._screenDetails = {}, _this._getScreenDetails = function (scene) {
        var _this$props = _this.props,
            screenProps = _this$props.screenProps,
            navigation = _this$props.navigation,
            router = _this$props.router;
        var screenDetails = _this._screenDetails[scene.key];

        if (!screenDetails || screenDetails.state !== scene.route) {
          var screenNavigation = (0, _addNavigationHelpers2.default)({
            dispatch: navigation.dispatch,
            state: scene.route,
            addListener: (0, _getChildEventSubscriber2.default)(navigation.addListener, scene.route.key)
          });
          screenDetails = {
            state: scene.route,
            navigation: screenNavigation,
            options: router.getScreenOptions(screenNavigation, screenProps)
          };
          _this._screenDetails[scene.key] = screenDetails;
        }

        return screenDetails;
      }, _this._getTransitionConfig = function () {
        var isModal = _this.props.mode === 'modal';
        return _TransitionConfigs2.default.getTransitionConfig(_this.props.transitionConfig, {}, {}, isModal);
      }, _this._renderCard = function (scene) {
        var _this$_getTransitionC = _this._getTransitionConfig(),
            screenInterpolator = _this$_getTransitionC.screenInterpolator;

        var style = screenInterpolator && screenInterpolator(babelHelpers.extends({}, _this.props, {
          scene: scene
        }));

        var SceneComponent = _this.props.router.getComponentForRouteName(scene.route.routeName);

        return _react2.default.createElement(
          _Card2.default,
          babelHelpers.extends({}, _this.props, {
            key: "card_" + scene.key,
            style: [style, _this.props.cardStyle],
            scene: scene,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 409
            }
          }),
          _this._renderInnerScene(SceneComponent, scene)
        );
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(CardStack, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(props) {
        var _this2 = this;

        if (props.screenProps !== this.props.screenProps) {
          this._screenDetails = {};
        }

        props.scenes.forEach(function (newScene) {
          if (_this2._screenDetails[newScene.key] && _this2._screenDetails[newScene.key].state !== newScene.route) {
            _this2._screenDetails[newScene.key] = null;
          }
        });
      }
    }, {
      key: "_renderHeader",
      value: function _renderHeader(scene, headerMode) {
        var header = this._getScreenDetails(scene).options.header;

        if (typeof header !== 'undefined' && typeof header !== 'function') {
          return header;
        }

        var renderHeader = header || function (props) {
          return _react2.default.createElement(_Header2.default, babelHelpers.extends({}, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 127
            }
          }));
        };

        var _getTransitionConfig = this._getTransitionConfig(),
            headerLeftInterpolator = _getTransitionConfig.headerLeftInterpolator,
            headerTitleInterpolator = _getTransitionConfig.headerTitleInterpolator,
            headerRightInterpolator = _getTransitionConfig.headerRightInterpolator;

        var _props = this.props,
            mode = _props.mode,
            passProps = babelHelpers.objectWithoutProperties(_props, ["mode"]);
        return renderHeader(babelHelpers.extends({}, passProps, {
          scene: scene,
          mode: headerMode,
          getScreenDetails: this._getScreenDetails,
          leftInterpolator: headerLeftInterpolator,
          titleInterpolator: headerTitleInterpolator,
          rightInterpolator: headerRightInterpolator
        }));
      }
    }, {
      key: "_animatedSubscribe",
      value: function _animatedSubscribe(props) {
        animatedSubscribeValue(props.layout.width);
        animatedSubscribeValue(props.layout.height);
        animatedSubscribeValue(props.position);
      }
    }, {
      key: "_reset",
      value: function _reset(resetToIndex, duration) {
        _reactNative.Animated.timing(this.props.position, {
          toValue: resetToIndex,
          duration: duration,
          easing: EaseInOut,
          useNativeDriver: this.props.position.__isNative
        }).start();
      }
    }, {
      key: "_goBack",
      value: function _goBack(backFromIndex, duration) {
        var _this3 = this;

        var _props2 = this.props,
            navigation = _props2.navigation,
            position = _props2.position,
            scenes = _props2.scenes;
        var toValue = Math.max(backFromIndex - 1, 0);
        this._immediateIndex = toValue;

        _reactNative.Animated.timing(position, {
          toValue: toValue,
          duration: duration,
          easing: EaseInOut,
          useNativeDriver: position.__isNative
        }).start(function () {
          _this3._immediateIndex = null;
          var backFromScene = scenes.find(function (s) {
            return s.index === toValue + 1;
          });

          if (!_this3._isResponding && backFromScene) {
            navigation.dispatch(_NavigationActions2.default.back({
              key: backFromScene.route.key,
              immediate: true
            }));
          }
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this4 = this;

        var floatingHeader = null;

        var headerMode = this._getHeaderMode();

        if (headerMode === 'float') {
          floatingHeader = this._renderHeader(this.props.scene, headerMode);
        }

        var _props3 = this.props,
            navigation = _props3.navigation,
            position = _props3.position,
            layout = _props3.layout,
            scene = _props3.scene,
            scenes = _props3.scenes,
            mode = _props3.mode;
        var index = navigation.state.index;
        var isVertical = mode === 'modal';

        var _getScreenDetails = this._getScreenDetails(scene),
            options = _getScreenDetails.options;

        var gestureDirectionInverted = options.gestureDirection === 'inverted';

        var responder = _reactNative.PanResponder.create({
          onPanResponderTerminate: function onPanResponderTerminate() {
            _this4._isResponding = false;

            _this4._reset(index, 0);
          },
          onPanResponderGrant: function onPanResponderGrant() {
            position.stopAnimation(function (value) {
              _this4._isResponding = true;
              _this4._gestureStartValue = value;
            });
          },
          onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(event, gesture) {
            if (index !== scene.index) {
              return false;
            }

            var immediateIndex = _this4._immediateIndex == null ? index : _this4._immediateIndex;
            var currentDragDistance = gesture[isVertical ? 'dy' : 'dx'];
            var currentDragPosition = event.nativeEvent[isVertical ? 'pageY' : 'pageX'];
            var axisLength = isVertical ? layout.height.__getValue() : layout.width.__getValue();
            var axisHasBeenMeasured = !!axisLength;
            var screenEdgeDistance = gestureDirectionInverted ? axisLength - (currentDragPosition - currentDragDistance) : currentDragPosition - currentDragDistance;

            var _getScreenDetails$opt = _this4._getScreenDetails(scene).options.gestureResponseDistance,
                userGestureResponseDistance = _getScreenDetails$opt === undefined ? {} : _getScreenDetails$opt;

            var gestureResponseDistance = isVertical ? userGestureResponseDistance.vertical || GESTURE_RESPONSE_DISTANCE_VERTICAL : userGestureResponseDistance.horizontal || GESTURE_RESPONSE_DISTANCE_HORIZONTAL;

            if (screenEdgeDistance > gestureResponseDistance) {
              return false;
            }

            var hasDraggedEnough = Math.abs(currentDragDistance) > RESPOND_THRESHOLD;
            var isOnFirstCard = immediateIndex === 0;
            var shouldSetResponder = hasDraggedEnough && axisHasBeenMeasured && !isOnFirstCard;
            return shouldSetResponder;
          },
          onPanResponderMove: function onPanResponderMove(event, gesture) {
            var startValue = _this4._gestureStartValue;
            var axis = isVertical ? 'dy' : 'dx';
            var axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();
            var currentValue = (_reactNative.I18nManager.isRTL && axis === 'dx') !== gestureDirectionInverted ? startValue + gesture[axis] / axisDistance : startValue - gesture[axis] / axisDistance;
            var value = (0, _clamp2.default)(index - 1, currentValue, index);
            position.setValue(value);
          },
          onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
            return false;
          },
          onPanResponderRelease: function onPanResponderRelease(event, gesture) {
            if (!_this4._isResponding) {
              return;
            }

            _this4._isResponding = false;
            var immediateIndex = _this4._immediateIndex == null ? index : _this4._immediateIndex;
            var axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();
            var movementDirection = gestureDirectionInverted ? -1 : 1;
            var movedDistance = movementDirection * gesture[isVertical ? 'dy' : 'dx'];
            var gestureVelocity = movementDirection * gesture[isVertical ? 'vy' : 'vx'];
            var defaultVelocity = axisDistance / ANIMATION_DURATION;
            var velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);
            var resetDuration = gestureDirectionInverted ? (axisDistance - movedDistance) / velocity : movedDistance / velocity;
            var goBackDuration = gestureDirectionInverted ? movedDistance / velocity : (axisDistance - movedDistance) / velocity;
            position.stopAnimation(function (value) {
              if (gestureVelocity < -0.5) {
                _this4._reset(immediateIndex, resetDuration);

                return;
              }

              if (gestureVelocity > 0.5) {
                _this4._goBack(immediateIndex, goBackDuration);

                return;
              }

              if (value <= index - POSITION_THRESHOLD) {
                _this4._goBack(immediateIndex, goBackDuration);
              } else {
                _this4._reset(immediateIndex, resetDuration);
              }
            });
          }
        });

        var gesturesEnabled = typeof options.gesturesEnabled === 'boolean' ? options.gesturesEnabled : _reactNative.Platform.OS === 'ios';
        var handlers = gesturesEnabled ? responder.panHandlers : {};
        var containerStyle = [styles.container, this._getTransitionConfig().containerStyle];
        return _react2.default.createElement(
          _reactNative.View,
          babelHelpers.extends({}, handlers, {
            style: containerStyle,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 342
            }
          }),
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.scenes,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 343
              }
            },
            scenes.map(function (s) {
              return _this4._renderCard(s);
            })
          ),
          floatingHeader
        );
      }
    }, {
      key: "_getHeaderMode",
      value: function _getHeaderMode() {
        if (this.props.headerMode) {
          return this.props.headerMode;
        }

        if (_reactNative.Platform.OS === 'android' || this.props.mode === 'modal') {
          return 'screen';
        }

        return 'float';
      }
    }, {
      key: "_renderInnerScene",
      value: function _renderInnerScene(SceneComponent, scene) {
        var _getScreenDetails2 = this._getScreenDetails(scene),
            navigation = _getScreenDetails2.navigation;

        var screenProps = this.props.screenProps;

        var headerMode = this._getHeaderMode();

        if (headerMode === 'screen') {
          return _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.container,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 367
              }
            },
            _react2.default.createElement(
              _reactNative.View,
              {
                style: {
                  flex: 1
                },
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 368
                }
              },
              _react2.default.createElement(_SceneView2.default, {
                screenProps: screenProps,
                navigation: navigation,
                component: SceneComponent,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 369
                }
              })
            ),
            this._renderHeader(scene, headerMode)
          );
        }

        return _react2.default.createElement(_SceneView2.default, {
          screenProps: this.props.screenProps,
          navigation: navigation,
          component: SceneComponent,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 380
          }
        });
      }
    }]);
    return CardStack;
  }(_react2.default.Component);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      flexDirection: 'column-reverse'
    },
    scenes: {
      flex: 1
    }
  });

  exports.default = CardStack;
},344,[108,345,12,346,349,337,338,359,360,361],"react-navigation/src/views/CardStack/CardStack.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = clamp;

  function clamp(value, min, max) {
    return min < max ? value < min ? min : value > max ? max : value : value < max ? max : value > min ? min : value;
  }
},345,[],"clamp/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/views/CardStack/Card.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _PointerEventsContainer = require(_dependencyMap[2], "./PointerEventsContainer");

  var _PointerEventsContainer2 = babelHelpers.interopRequireDefault(_PointerEventsContainer);

  var Card = function (_React$Component) {
    babelHelpers.inherits(Card, _React$Component);

    function Card() {
      babelHelpers.classCallCheck(this, Card);
      return babelHelpers.possibleConstructorReturn(this, (Card.__proto__ || Object.getPrototypeOf(Card)).apply(this, arguments));
    }

    babelHelpers.createClass(Card, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            children = _props.children,
            pointerEvents = _props.pointerEvents,
            style = _props.style;
        return _react2.default.createElement(
          _reactNative.Animated.View,
          {
            pointerEvents: pointerEvents,
            ref: this.props.onComponentRef,
            style: [styles.main, style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 12
            }
          },
          children
        );
      }
    }]);
    return Card;
  }(_react2.default.Component);

  var styles = _reactNative.StyleSheet.create({
    main: {
      backgroundColor: '#E9E9EF',
      bottom: 0,
      left: 0,
      position: 'absolute',
      right: 0,
      shadowColor: 'black',
      shadowOffset: {
        width: 0,
        height: 0
      },
      shadowOpacity: 0.2,
      shadowRadius: 5,
      top: 0
    }
  });

  Card = (0, _PointerEventsContainer2.default)(Card);
  exports.default = Card;
},346,[108,12,347],"react-navigation/src/views/CardStack/Card.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/views/CardStack/PointerEventsContainer.js";
  exports.default = create;

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _invariant = require(_dependencyMap[1], "../../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _AnimatedValueSubscription = require(_dependencyMap[2], "../AnimatedValueSubscription");

  var _AnimatedValueSubscription2 = babelHelpers.interopRequireDefault(_AnimatedValueSubscription);

  var MIN_POSITION_OFFSET = 0.01;

  function create(Component) {
    var Container = function (_React$Component) {
      babelHelpers.inherits(Container, _React$Component);

      function Container(props, context) {
        babelHelpers.classCallCheck(this, Container);

        var _this = babelHelpers.possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).call(this, props, context));

        _this._pointerEvents = _this._computePointerEvents();
        return _this;
      }

      babelHelpers.createClass(Container, [{
        key: "componentWillMount",
        value: function componentWillMount() {
          this._onPositionChange = this._onPositionChange.bind(this);
          this._onComponentRef = this._onComponentRef.bind(this);
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          this._bindPosition(this.props);
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._positionListener && this._positionListener.remove();
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
          this._bindPosition(nextProps);
        }
      }, {
        key: "render",
        value: function render() {
          this._pointerEvents = this._computePointerEvents();
          return _react2.default.createElement(Component, babelHelpers.extends({}, this.props, {
            pointerEvents: this._pointerEvents,
            onComponentRef: this._onComponentRef,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 39
            }
          }));
        }
      }, {
        key: "_onComponentRef",
        value: function _onComponentRef(component) {
          this._component = component;

          if (component) {
            (0, _invariant2.default)(typeof component.setNativeProps === 'function', 'component must implement method `setNativeProps`');
          }
        }
      }, {
        key: "_bindPosition",
        value: function _bindPosition(props) {
          this._positionListener && this._positionListener.remove();
          this._positionListener = new _AnimatedValueSubscription2.default(props.position, this._onPositionChange);
        }
      }, {
        key: "_onPositionChange",
        value: function _onPositionChange() {
          if (this._component) {
            var pointerEvents = this._computePointerEvents();

            if (this._pointerEvents !== pointerEvents) {
              this._pointerEvents = pointerEvents;

              this._component.setNativeProps({
                pointerEvents: pointerEvents
              });
            }
          }
        }
      }, {
        key: "_computePointerEvents",
        value: function _computePointerEvents() {
          var _props = this.props,
              navigation = _props.navigation,
              position = _props.position,
              scene = _props.scene;

          if (scene.isStale || navigation.state.index !== scene.index) {
            return scene.index > navigation.state.index ? 'box-only' : 'none';
          }

          var offset = position.__getAnimatedValue() - navigation.state.index;

          if (Math.abs(offset) > MIN_POSITION_OFFSET) {
            return 'box-only';
          }

          return 'auto';
        }
      }]);
      return Container;
    }(_react2.default.Component);

    return Container;
  }
},347,[108,339,348],"react-navigation/src/views/CardStack/PointerEventsContainer.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var AnimatedValueSubscription = function () {
    function AnimatedValueSubscription(value, callback) {
      babelHelpers.classCallCheck(this, AnimatedValueSubscription);
      this._value = value;
      this._token = value.addListener(callback);
    }

    babelHelpers.createClass(AnimatedValueSubscription, [{
      key: "remove",
      value: function remove() {
        this._value.removeListener(this._token);
      }
    }]);
    return AnimatedValueSubscription;
  }();

  exports.default = AnimatedValueSubscription;
},348,[12],"react-navigation/src/views/AnimatedValueSubscription.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/views/Header/Header.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _HeaderTitle = require(_dependencyMap[2], "./HeaderTitle");

  var _HeaderTitle2 = babelHelpers.interopRequireDefault(_HeaderTitle);

  var _HeaderBackButton = require(_dependencyMap[3], "./HeaderBackButton");

  var _HeaderBackButton2 = babelHelpers.interopRequireDefault(_HeaderBackButton);

  var _HeaderStyleInterpolator = require(_dependencyMap[4], "./HeaderStyleInterpolator");

  var _HeaderStyleInterpolator2 = babelHelpers.interopRequireDefault(_HeaderStyleInterpolator);

  var _SafeAreaView = require(_dependencyMap[5], "../SafeAreaView");

  var _SafeAreaView2 = babelHelpers.interopRequireDefault(_SafeAreaView);

  var _withOrientation = require(_dependencyMap[6], "../withOrientation");

  var _withOrientation2 = babelHelpers.interopRequireDefault(_withOrientation);

  var APPBAR_HEIGHT = _reactNative.Platform.OS === 'ios' ? 44 : 56;
  var STATUSBAR_HEIGHT = _reactNative.Platform.OS === 'ios' ? 20 : 0;
  var TITLE_OFFSET = _reactNative.Platform.OS === 'ios' ? 70 : 56;

  var Header = function (_React$PureComponent) {
    babelHelpers.inherits(Header, _React$PureComponent);

    function Header() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, Header);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = Header.__proto__ || Object.getPrototypeOf(Header)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        widths: {}
      }, _this._navigateBack = function () {
        requestAnimationFrame(function () {
          _this.props.navigation.goBack(_this.props.scene.route.key);
        });
      }, _this._renderTitleComponent = function (props) {
        var details = _this.props.getScreenDetails(props.scene);

        var headerTitle = details.options.headerTitle;

        if (_react2.default.isValidElement(headerTitle)) {
          return headerTitle;
        }

        var titleString = _this._getHeaderTitleString(props.scene);

        var titleStyle = details.options.headerTitleStyle;
        var color = details.options.headerTintColor;
        var allowFontScaling = details.options.headerTitleAllowFontScaling;
        var onLayoutIOS = _reactNative.Platform.OS === 'ios' ? function (e) {
          _this.setState({
            widths: babelHelpers.extends({}, _this.state.widths, babelHelpers.defineProperty({}, props.scene.key, e.nativeEvent.layout.width))
          });
        } : undefined;
        var RenderedHeaderTitle = headerTitle && typeof headerTitle !== 'string' ? headerTitle : _HeaderTitle2.default;
        return _react2.default.createElement(
          RenderedHeaderTitle,
          {
            onLayout: onLayoutIOS,
            allowFontScaling: allowFontScaling == null ? true : allowFontScaling,
            style: [color ? {
              color: color
            } : null, titleStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 110
            }
          },
          titleString
        );
      }, _this._renderLeftComponent = function (props) {
        var _this$props$getScreen = _this.props.getScreenDetails(props.scene),
            options = _this$props$getScreen.options;

        if (_react2.default.isValidElement(options.headerLeft) || options.headerLeft === null) {
          return options.headerLeft;
        }

        if (props.scene.index === 0) {
          return null;
        }

        var backButtonTitle = _this._getBackButtonTitleString(props.scene);

        var truncatedBackButtonTitle = _this._getTruncatedBackButtonTitle(props.scene);

        var width = _this.state.widths[props.scene.key] ? (_this.props.layout.initWidth - _this.state.widths[props.scene.key]) / 2 : undefined;
        var RenderedLeftComponent = options.headerLeft || _HeaderBackButton2.default;
        return _react2.default.createElement(RenderedLeftComponent, {
          onPress: _this._navigateBack,
          pressColorAndroid: options.headerPressColorAndroid,
          tintColor: options.headerTintColor,
          buttonImage: options.headerBackImage,
          title: backButtonTitle,
          truncatedTitle: truncatedBackButtonTitle,
          titleStyle: options.headerBackTitleStyle,
          width: width,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 140
          }
        });
      }, _this._renderRightComponent = function (props) {
        var details = _this.props.getScreenDetails(props.scene);

        var headerRight = details.options.headerRight;
        return headerRight || null;
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(Header, [{
      key: "_getHeaderTitleString",
      value: function _getHeaderTitleString(scene) {
        var sceneOptions = this.props.getScreenDetails(scene).options;

        if (typeof sceneOptions.headerTitle === 'string') {
          return sceneOptions.headerTitle;
        }

        return sceneOptions.title;
      }
    }, {
      key: "_getLastScene",
      value: function _getLastScene(scene) {
        return this.props.scenes.find(function (s) {
          return s.index === scene.index - 1;
        });
      }
    }, {
      key: "_getBackButtonTitleString",
      value: function _getBackButtonTitleString(scene) {
        var lastScene = this._getLastScene(scene);

        if (!lastScene) {
          return null;
        }

        var headerBackTitle = this.props.getScreenDetails(lastScene).options.headerBackTitle;

        if (headerBackTitle || headerBackTitle === null) {
          return headerBackTitle;
        }

        return this._getHeaderTitleString(lastScene);
      }
    }, {
      key: "_getTruncatedBackButtonTitle",
      value: function _getTruncatedBackButtonTitle(scene) {
        var lastScene = this._getLastScene(scene);

        if (!lastScene) {
          return null;
        }

        return this.props.getScreenDetails(lastScene).options.headerTruncatedBackTitle;
      }
    }, {
      key: "_renderLeft",
      value: function _renderLeft(props) {
        return this._renderSubView(props, 'left', this._renderLeftComponent, this.props.leftInterpolator);
      }
    }, {
      key: "_renderTitle",
      value: function _renderTitle(props, options) {
        var style = {};

        if (_reactNative.Platform.OS === 'android') {
          if (!options.hasLeftComponent) {
            style.left = 0;
          }

          if (!options.hasRightComponent) {
            style.right = 0;
          }
        } else if (_reactNative.Platform.OS === 'ios' && !options.hasLeftComponent && !options.hasRightComponent) {
          style.left = 0;
          style.right = 0;
        }

        return this._renderSubView(babelHelpers.extends({}, props, {
          style: style
        }), 'title', this._renderTitleComponent, this.props.titleInterpolator);
      }
    }, {
      key: "_renderRight",
      value: function _renderRight(props) {
        return this._renderSubView(props, 'right', this._renderRightComponent, this.props.rightInterpolator);
      }
    }, {
      key: "_renderSubView",
      value: function _renderSubView(props, name, renderer, styleInterpolator) {
        var scene = props.scene;
        var index = scene.index,
            isStale = scene.isStale,
            key = scene.key;
        var offset = this.props.navigation.state.index - index;

        if (Math.abs(offset) > 2) {
          return null;
        }

        var subView = renderer(props);

        if (subView == null) {
          return null;
        }

        var pointerEvents = offset !== 0 || isStale ? 'none' : 'box-none';
        return _react2.default.createElement(
          _reactNative.Animated.View,
          {
            pointerEvents: pointerEvents,
            key: name + "_" + key,
            style: [styles.item, styles[name], props.style, styleInterpolator(babelHelpers.extends({}, this.props, props))],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 225
            }
          },
          subView
        );
      }
    }, {
      key: "_renderHeader",
      value: function _renderHeader(props) {
        var left = this._renderLeft(props);

        var right = this._renderRight(props);

        var title = this._renderTitle(props, {
          hasLeftComponent: !!left,
          hasRightComponent: !!right
        });

        return _react2.default.createElement(
          _reactNative.View,
          {
            style: [_reactNative.StyleSheet.absoluteFill, styles.header],
            key: "scene_" + props.scene.key,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 253
            }
          },
          title,
          left,
          right
        );
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var appBar = void 0;

        if (this.props.mode === 'float') {
          var scenesProps = this.props.scenes.map(function (scene) {
            return {
              position: _this2.props.position,
              progress: _this2.props.progress,
              scene: scene
            };
          });
          appBar = scenesProps.map(this._renderHeader, this);
        } else {
          appBar = this._renderHeader({
            position: new _reactNative.Animated.Value(this.props.scene.index),
            progress: new _reactNative.Animated.Value(0),
            scene: this.props.scene
          });
        }

        var _props = this.props,
            scenes = _props.scenes,
            scene = _props.scene,
            position = _props.position,
            screenProps = _props.screenProps,
            progress = _props.progress,
            isLandscape = _props.isLandscape,
            rest = babelHelpers.objectWithoutProperties(_props, ["scenes", "scene", "position", "screenProps", "progress", "isLandscape"]);

        var _props$getScreenDetai = this.props.getScreenDetails(scene),
            options = _props$getScreenDetai.options;

        var headerStyle = options.headerStyle;
        var appBarHeight = _reactNative.Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;
        var containerStyles = [styles.container, {
          height: appBarHeight
        }, headerStyle];
        return _react2.default.createElement(
          _reactNative.Animated.View,
          babelHelpers.extends({}, rest, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 305
            }
          }),
          _react2.default.createElement(
            _SafeAreaView2.default,
            {
              style: containerStyles,
              forceInset: {
                top: 'always',
                bottom: 'never'
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 306
              }
            },
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.appBar,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 310
                }
              },
              appBar
            )
          )
        );
      }
    }], [{
      key: "HEIGHT",
      get: function get() {
        console.warn('Header.HEIGHT is deprecated and will be removed before react-navigation comes out of beta.');
        return APPBAR_HEIGHT + STATUSBAR_HEIGHT;
      }
    }]);
    return Header;
  }(_react2.default.PureComponent);

  Header.defaultProps = {
    leftInterpolator: _HeaderStyleInterpolator2.default.forLeft,
    titleInterpolator: _HeaderStyleInterpolator2.default.forCenter,
    rightInterpolator: _HeaderStyleInterpolator2.default.forRight
  };
  var platformContainerStyles = void 0;

  if (_reactNative.Platform.OS === 'ios') {
    platformContainerStyles = {
      borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,
      borderBottomColor: 'rgba(0, 0, 0, .3)'
    };
  } else {
    platformContainerStyles = {
      shadowColor: 'black',
      shadowOpacity: 0.1,
      shadowRadius: _reactNative.StyleSheet.hairlineWidth,
      shadowOffset: {
        height: _reactNative.StyleSheet.hairlineWidth
      },
      elevation: 4
    };
  }

  var styles = _reactNative.StyleSheet.create({
    container: babelHelpers.extends({
      backgroundColor: _reactNative.Platform.OS === 'ios' ? '#F7F7F7' : '#FFF'
    }, platformContainerStyles),
    appBar: {
      flex: 1
    },
    header: {
      flexDirection: 'row'
    },
    item: {
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: 'transparent'
    },
    title: {
      bottom: 0,
      left: TITLE_OFFSET,
      right: TITLE_OFFSET,
      top: 0,
      position: 'absolute',
      alignItems: _reactNative.Platform.OS === 'ios' ? 'center' : 'flex-start'
    },
    left: {
      left: 0,
      bottom: 0,
      top: 0,
      position: 'absolute'
    },
    right: {
      right: 0,
      bottom: 0,
      top: 0,
      position: 'absolute'
    }
  });

  exports.default = (0, _withOrientation2.default)(Header);
},349,[108,12,350,351,354,356,357],"react-navigation/src/views/Header/Header.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/views/Header/HeaderTitle.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var AnimatedText = _reactNative.Animated.Text;

  var HeaderTitle = function HeaderTitle(_ref) {
    var style = _ref.style,
        rest = babelHelpers.objectWithoutProperties(_ref, ["style"]);
    return _react2.default.createElement(AnimatedText, babelHelpers.extends({
      numberOfLines: 1
    }, rest, {
      style: [styles.title, style],
      accessibilityTraits: "header",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 7
      }
    }));
  };

  var styles = _reactNative.StyleSheet.create({
    title: {
      fontSize: _reactNative.Platform.OS === 'ios' ? 17 : 20,
      fontWeight: _reactNative.Platform.OS === 'ios' ? '600' : '500',
      color: 'rgba(0, 0, 0, .9)',
      textAlign: _reactNative.Platform.OS === 'ios' ? 'center' : 'left',
      marginHorizontal: 16
    }
  });

  exports.default = HeaderTitle;
},350,[108,12],"react-navigation/src/views/Header/HeaderTitle.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/views/Header/HeaderBackButton.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _TouchableItem = require(_dependencyMap[2], "../TouchableItem");

  var _TouchableItem2 = babelHelpers.interopRequireDefault(_TouchableItem);

  var HeaderBackButton = function (_React$PureComponent) {
    babelHelpers.inherits(HeaderBackButton, _React$PureComponent);

    function HeaderBackButton() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, HeaderBackButton);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = HeaderBackButton.__proto__ || Object.getPrototypeOf(HeaderBackButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this._onTextLayout = function (e) {
        if (_this.state.initialTextWidth) {
          return;
        }

        _this.setState({
          initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width
        });
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(HeaderBackButton, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            buttonImage = _props.buttonImage,
            onPress = _props.onPress,
            pressColorAndroid = _props.pressColorAndroid,
            width = _props.width,
            title = _props.title,
            titleStyle = _props.titleStyle,
            tintColor = _props.tintColor,
            truncatedTitle = _props.truncatedTitle;
        var renderTruncated = this.state.initialTextWidth && width ? this.state.initialTextWidth > width : false;
        var backButtonTitle = renderTruncated ? truncatedTitle : title;
        return _react2.default.createElement(
          _TouchableItem2.default,
          {
            accessibilityComponentType: "button",
            accessibilityLabel: backButtonTitle,
            accessibilityTraits: "button",
            testID: "header-back",
            delayPressIn: 0,
            onPress: onPress,
            pressColor: pressColorAndroid,
            style: styles.container,
            borderless: true,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 55
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.container,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 66
              }
            },
            _react2.default.createElement(_reactNative.Image, {
              style: [styles.icon, !!title && styles.iconWithTitle, !!tintColor && {
                tintColor: tintColor
              }],
              source: buttonImage,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 67
              }
            }),
            _reactNative.Platform.OS === 'ios' && typeof backButtonTitle === 'string' && _react2.default.createElement(
              _reactNative.Text,
              {
                onLayout: this._onTextLayout,
                style: [styles.title, !!tintColor && {
                  color: tintColor
                }, titleStyle],
                numberOfLines: 1,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 77
                }
              },
              backButtonTitle
            )
          )
        );
      }
    }]);
    return HeaderBackButton;
  }(_react2.default.PureComponent);

  HeaderBackButton.defaultProps = {
    pressColorAndroid: 'rgba(0, 0, 0, .32)',
    tintColor: _reactNative.Platform.select({
      ios: '#037aff'
    }),
    truncatedTitle: 'Back',
    buttonImage: require(_dependencyMap[3], '../assets/back-icon.png')
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      alignItems: 'center',
      flexDirection: 'row',
      backgroundColor: 'transparent'
    },
    title: {
      fontSize: 17,
      paddingRight: 10
    },
    icon: _reactNative.Platform.OS === 'ios' ? {
      height: 21,
      width: 13,
      marginLeft: 10,
      marginRight: 22,
      marginVertical: 12,
      resizeMode: 'contain',
      transform: [{
        scaleX: _reactNative.I18nManager.isRTL ? -1 : 1
      }]
    } : {
      height: 24,
      width: 24,
      margin: 16,
      resizeMode: 'contain',
      transform: [{
        scaleX: _reactNative.I18nManager.isRTL ? -1 : 1
      }]
    },
    iconWithTitle: _reactNative.Platform.OS === 'ios' ? {
      marginRight: 5
    } : {}
  });

  exports.default = HeaderBackButton;
},351,[108,12,352,353],"react-navigation/src/views/Header/HeaderBackButton.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/views/TouchableItem.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var ANDROID_VERSION_LOLLIPOP = 21;

  var TouchableItem = function (_React$Component) {
    babelHelpers.inherits(TouchableItem, _React$Component);

    function TouchableItem() {
      babelHelpers.classCallCheck(this, TouchableItem);
      return babelHelpers.possibleConstructorReturn(this, (TouchableItem.__proto__ || Object.getPrototypeOf(TouchableItem)).apply(this, arguments));
    }

    babelHelpers.createClass(TouchableItem, [{
      key: "render",
      value: function render() {
        if (_reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= ANDROID_VERSION_LOLLIPOP) {
          var _props = this.props,
              style = _props.style,
              rest = babelHelpers.objectWithoutProperties(_props, ["style"]);
          return _react2.default.createElement(
            _reactNative.TouchableNativeFeedback,
            babelHelpers.extends({}, rest, {
              style: null,
              background: _reactNative.TouchableNativeFeedback.Ripple(this.props.pressColor, this.props.borderless),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 41
              }
            }),
            _react2.default.createElement(
              _reactNative.View,
              {
                style: style,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 49
                }
              },
              _react2.default.Children.only(this.props.children)
            )
          );
        }

        return _react2.default.createElement(
          _reactNative.TouchableOpacity,
          babelHelpers.extends({}, this.props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 55
            }
          }),
          this.props.children
        );
      }
    }]);
    return TouchableItem;
  }(_react2.default.Component);

  TouchableItem.defaultProps = {
    borderless: false,
    pressColor: 'rgba(0, 0, 0, .32)'
  };
  exports.default = TouchableItem;
},352,[108,12],"react-navigation/src/views/TouchableItem.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-navigation/src/views/assets",
    "width": 24,
    "height": 24,
    "scales": [1, 1.5, 2, 3, 4],
    "hash": "a364dc7a784101f7c8f6791c7b4514ce",
    "name": "back-icon",
    "type": "png"
  });
},353,[161],"node_modules/react-navigation/src/views/assets/back-icon.png");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _getSceneIndicesForInterpolationInputRange = require(_dependencyMap[1], "../../utils/getSceneIndicesForInterpolationInputRange");

  var _getSceneIndicesForInterpolationInputRange2 = babelHelpers.interopRequireDefault(_getSceneIndicesForInterpolationInputRange);

  function forLeft(props) {
    var position = props.position,
        scene = props.scene,
        scenes = props.scenes;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    return {
      opacity: position.interpolate({
        inputRange: [first, first + Math.abs(index - first) / 2, index, last - Math.abs(last - index) / 2, last],
        outputRange: [0, 0, 1, 0, 0]
      })
    };
  }

  function forCenter(props) {
    var position = props.position,
        scene = props.scene;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var inputRange = [first, index, last];
    return {
      opacity: position.interpolate({
        inputRange: inputRange,
        outputRange: [0, 1, 0]
      }),
      transform: [{
        translateX: position.interpolate({
          inputRange: inputRange,
          outputRange: _reactNative.I18nManager.isRTL ? [-200, 0, 200] : [200, 0, -200]
        })
      }]
    };
  }

  function forRight(props) {
    var position = props.position,
        scene = props.scene;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    return {
      opacity: position.interpolate({
        inputRange: [first, index, last],
        outputRange: [0, 1, 0]
      })
    };
  }

  exports.default = {
    forLeft: forLeft,
    forCenter: forCenter,
    forRight: forRight
  };
},354,[12,355],"react-navigation/src/views/Header/HeaderStyleInterpolator.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function getSceneIndicesForInterpolationInputRange(props) {
    var scene = props.scene,
        scenes = props.scenes;
    var index = scene.index;
    var lastSceneIndexInScenes = scenes.length - 1;
    var isBack = !scenes[lastSceneIndexInScenes].isActive;

    if (isBack) {
      var currentSceneIndexInScenes = scenes.findIndex(function (item) {
        return item === scene;
      });
      var targetSceneIndexInScenes = scenes.findIndex(function (item) {
        return item.isActive;
      });
      var targetSceneIndex = scenes[targetSceneIndexInScenes].index;
      var lastSceneIndex = scenes[lastSceneIndexInScenes].index;

      if (index !== targetSceneIndex && currentSceneIndexInScenes === lastSceneIndexInScenes) {
        return {
          first: Math.min(targetSceneIndex, index - 1),
          last: index + 1
        };
      } else if (index === targetSceneIndex && currentSceneIndexInScenes === targetSceneIndexInScenes) {
        return {
          first: index - 1,
          last: Math.max(lastSceneIndex, index + 1)
        };
      } else if (index === targetSceneIndex || currentSceneIndexInScenes > targetSceneIndexInScenes) {
        return null;
      } else {
        return {
          first: index - 1,
          last: index + 1
        };
      }
    } else {
      return {
        first: index - 1,
        last: index + 1
      };
    }
  }

  exports.default = getSceneIndicesForInterpolationInputRange;
},355,[],"react-navigation/src/utils/getSceneIndicesForInterpolationInputRange.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/views/SafeAreaView.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _withOrientation = require(_dependencyMap[2], "./withOrientation");

  var _withOrientation2 = babelHelpers.interopRequireDefault(_withOrientation);

  var X_WIDTH = 375;
  var X_HEIGHT = 812;
  var PAD_WIDTH = 768;
  var PAD_HEIGHT = 1024;

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      D_HEIGHT = _Dimensions$get.height,
      D_WIDTH = _Dimensions$get.width;

  var _NativeModules$Platfo = _reactNative.NativeModules.PlatformConstants,
      PlatformConstants = _NativeModules$Platfo === undefined ? {} : _NativeModules$Platfo;

  var _ref = PlatformConstants.reactNativeVersion || {},
      _ref$minor = _ref.minor,
      minor = _ref$minor === undefined ? 0 : _ref$minor;

  var isIPhoneX = function () {
    if (_reactNative.Platform.OS === 'web') return false;

    if (minor >= 50) {
      return _reactNative.DeviceInfo.isIPhoneX_deprecated;
    }

    return _reactNative.Platform.OS === 'ios' && (D_HEIGHT === X_HEIGHT && D_WIDTH === X_WIDTH || D_HEIGHT === X_WIDTH && D_WIDTH === X_HEIGHT);
  }();

  var isIPad = function () {
    if (_reactNative.Platform.OS !== 'ios' || isIPhoneX) return false;

    if (D_HEIGHT > D_WIDTH && D_WIDTH < PAD_WIDTH) {
      return false;
    }

    if (D_WIDTH > D_HEIGHT && D_HEIGHT < PAD_WIDTH) {
      return false;
    }

    return true;
  }();

  var _customStatusBarHeight = null;

  var statusBarHeight = function statusBarHeight(isLandscape) {
    if (_customStatusBarHeight !== null) {
      return _customStatusBarHeight;
    }

    if (_reactNative.Platform.OS === 'android') {
      if (global.Expo) {
        return global.Expo.Constants.statusBarHeight;
      } else {
        return 0;
      }
    }

    if (isIPhoneX) {
      return isLandscape ? 0 : 44;
    }

    if (isIPad) {
      return 20;
    }

    return isLandscape ? 0 : 20;
  };

  var doubleFromPercentString = function doubleFromPercentString(percent) {
    if (!percent.includes('%')) {
      return 0;
    }

    var dbl = parseFloat(percent) / 100;
    if (isNaN(dbl)) return 0;
    return dbl;
  };

  var SafeView = function (_Component) {
    babelHelpers.inherits(SafeView, _Component);

    function SafeView() {
      var _ref2;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, SafeView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref2 = SafeView.__proto__ || Object.getPrototypeOf(SafeView)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {
        touchesTop: true,
        touchesBottom: true,
        touchesLeft: true,
        touchesRight: true,
        orientation: null,
        viewWidth: 0,
        viewHeight: 0
      }, _this._onLayout = function () {
        if (!_this.view) return;
        var isLandscape = _this.props.isLandscape;
        var orientation = _this.state.orientation;
        var newOrientation = isLandscape ? 'landscape' : 'portrait';

        if (orientation && orientation === newOrientation) {
          return;
        }

        var WIDTH = isLandscape ? X_HEIGHT : X_WIDTH;
        var HEIGHT = isLandscape ? X_WIDTH : X_HEIGHT;

        _this.view._component.measureInWindow(function (winX, winY, winWidth, winHeight) {
          var realY = winY;
          var realX = winX;

          if (realY >= HEIGHT) {
            realY = realY % HEIGHT;
          } else if (realY < 0) {
            realY = realY % HEIGHT + HEIGHT;
          }

          if (realX >= WIDTH) {
            realX = realX % WIDTH;
          } else if (realX < 0) {
            realX = realX % WIDTH + WIDTH;
          }

          var touchesTop = realY === 0;
          var touchesBottom = realY + winHeight >= HEIGHT;
          var touchesLeft = realX === 0;
          var touchesRight = realX + winWidth >= WIDTH;

          _this.setState({
            touchesTop: touchesTop,
            touchesBottom: touchesBottom,
            touchesLeft: touchesLeft,
            touchesRight: touchesRight,
            orientation: newOrientation,
            viewWidth: winWidth,
            viewHeight: winHeight
          });
        });
      }, _this._getSafeAreaStyle = function () {
        var _this$state = _this.state,
            touchesTop = _this$state.touchesTop,
            touchesBottom = _this$state.touchesBottom,
            touchesLeft = _this$state.touchesLeft,
            touchesRight = _this$state.touchesRight;
        var _this$props = _this.props,
            forceInset = _this$props.forceInset,
            isLandscape = _this$props.isLandscape;

        var _this$_getViewStyles = _this._getViewStyles(),
            paddingTop = _this$_getViewStyles.paddingTop,
            paddingBottom = _this$_getViewStyles.paddingBottom,
            paddingLeft = _this$_getViewStyles.paddingLeft,
            paddingRight = _this$_getViewStyles.paddingRight,
            viewStyle = _this$_getViewStyles.viewStyle;

        var style = babelHelpers.extends({}, viewStyle, {
          paddingTop: touchesTop ? _this._getInset('top') : 0,
          paddingBottom: touchesBottom ? _this._getInset('bottom') : 0,
          paddingLeft: touchesLeft ? _this._getInset('left') : 0,
          paddingRight: touchesRight ? _this._getInset('right') : 0
        });

        if (forceInset) {
          Object.keys(forceInset).forEach(function (key) {
            var inset = forceInset[key];

            if (inset === 'always') {
              inset = _this._getInset(key);
            }

            if (inset === 'never') {
              inset = 0;
            }

            switch (key) {
              case 'horizontal':
                {
                  style.paddingLeft = inset;
                  style.paddingRight = inset;
                  break;
                }

              case 'vertical':
                {
                  style.paddingTop = inset;
                  style.paddingBottom = inset;
                  break;
                }

              case 'left':
              case 'right':
              case 'top':
              case 'bottom':
                {
                  var padding = "padding" + key[0].toUpperCase() + key.slice(1);
                  style[padding] = inset;
                  break;
                }
            }
          });
        }

        if (style.height && typeof style.height === 'number') {
          style.height += style.paddingTop + style.paddingBottom;
        }

        if (style.width && typeof style.width === 'number') {
          style.width += style.paddingLeft + style.paddingRight;
        }

        style.paddingTop = Math.max(style.paddingTop, paddingTop);
        style.paddingBottom = Math.max(style.paddingBottom, paddingBottom);
        style.paddingLeft = Math.max(style.paddingLeft, paddingLeft);
        style.paddingRight = Math.max(style.paddingRight, paddingRight);
        return style;
      }, _this._getViewStyles = function () {
        var viewWidth = _this.state.viewWidth;

        var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(_this.props.style || {}),
            _StyleSheet$flatten$p = _StyleSheet$flatten.padding,
            padding = _StyleSheet$flatten$p === undefined ? 0 : _StyleSheet$flatten$p,
            _StyleSheet$flatten$p2 = _StyleSheet$flatten.paddingVertical,
            paddingVertical = _StyleSheet$flatten$p2 === undefined ? padding : _StyleSheet$flatten$p2,
            _StyleSheet$flatten$p3 = _StyleSheet$flatten.paddingHorizontal,
            paddingHorizontal = _StyleSheet$flatten$p3 === undefined ? padding : _StyleSheet$flatten$p3,
            _StyleSheet$flatten$p4 = _StyleSheet$flatten.paddingTop,
            paddingTop = _StyleSheet$flatten$p4 === undefined ? paddingVertical : _StyleSheet$flatten$p4,
            _StyleSheet$flatten$p5 = _StyleSheet$flatten.paddingBottom,
            paddingBottom = _StyleSheet$flatten$p5 === undefined ? paddingVertical : _StyleSheet$flatten$p5,
            _StyleSheet$flatten$p6 = _StyleSheet$flatten.paddingLeft,
            paddingLeft = _StyleSheet$flatten$p6 === undefined ? paddingHorizontal : _StyleSheet$flatten$p6,
            _StyleSheet$flatten$p7 = _StyleSheet$flatten.paddingRight,
            paddingRight = _StyleSheet$flatten$p7 === undefined ? paddingHorizontal : _StyleSheet$flatten$p7,
            viewStyle = babelHelpers.objectWithoutProperties(_StyleSheet$flatten, ["padding", "paddingVertical", "paddingHorizontal", "paddingTop", "paddingBottom", "paddingLeft", "paddingRight"]);

        if (typeof paddingTop !== 'number') {
          paddingTop = doubleFromPercentString(paddingTop) * viewWidth;
        }

        if (typeof paddingBottom !== 'number') {
          paddingBottom = doubleFromPercentString(paddingBottom) * viewWidth;
        }

        if (typeof paddingLeft !== 'number') {
          paddingLeft = doubleFromPercentString(paddingLeft) * viewWidth;
        }

        if (typeof paddingRight !== 'number') {
          paddingRight = doubleFromPercentString(paddingRight) * viewWidth;
        }

        return {
          paddingTop: paddingTop,
          paddingBottom: paddingBottom,
          paddingLeft: paddingLeft,
          paddingRight: paddingRight,
          viewStyle: viewStyle
        };
      }, _this._getInset = function (key) {
        var isLandscape = _this.props.isLandscape;

        switch (key) {
          case 'horizontal':
          case 'right':
          case 'left':
            {
              return isLandscape ? isIPhoneX ? 44 : 0 : 0;
            }

          case 'vertical':
          case 'top':
            {
              return statusBarHeight(isLandscape);
            }

          case 'bottom':
            {
              return isIPhoneX ? isLandscape ? 24 : 34 : 0;
            }
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(SafeView, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        _reactNative.InteractionManager.runAfterInteractions(function () {
          _this2._onLayout();
        });
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps() {
        this._onLayout();
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var _props = this.props,
            _props$forceInset = _props.forceInset,
            forceInset = _props$forceInset === undefined ? false : _props$forceInset,
            isLandscape = _props.isLandscape,
            children = _props.children,
            style = _props.style;

        var safeAreaStyle = this._getSafeAreaStyle();

        return _react2.default.createElement(
          _reactNative.Animated.View,
          {
            ref: function ref(c) {
              return _this3.view = c;
            },
            onLayout: this._onLayout,
            style: safeAreaStyle,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 128
            }
          },
          this.props.children
        );
      }
    }]);
    return SafeView;
  }(_react.Component);

  SafeView.setStatusBarHeight = function (height) {
    _customStatusBarHeight = height;
  };

  exports.default = (0, _withOrientation2.default)(SafeView);
},356,[108,12,357],"react-navigation/src/views/SafeAreaView.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isOrientationLandscape = undefined;
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/views/withOrientation.js";

  exports.default = function (WrappedComponent) {
    var withOrientation = function (_React$Component) {
      babelHelpers.inherits(withOrientation, _React$Component);

      function withOrientation() {
        babelHelpers.classCallCheck(this, withOrientation);

        var _this = babelHelpers.possibleConstructorReturn(this, (withOrientation.__proto__ || Object.getPrototypeOf(withOrientation)).call(this));

        _initialiseProps.call(_this);

        var isLandscape = isOrientationLandscape(_reactNative.Dimensions.get('window'));
        _this.state = {
          isLandscape: isLandscape
        };
        return _this;
      }

      babelHelpers.createClass(withOrientation, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          _reactNative.Dimensions.addEventListener('change', this.handleOrientationChange);
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          _reactNative.Dimensions.removeEventListener('change', this.handleOrientationChange);
        }
      }, {
        key: "render",
        value: function render() {
          return _react2.default.createElement(WrappedComponent, babelHelpers.extends({}, this.props, this.state, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 30
            }
          }));
        }
      }]);
      return withOrientation;
    }(_react2.default.Component);

    var _initialiseProps = function _initialiseProps() {
      var _this2 = this;

      this.handleOrientationChange = function (_ref2) {
        var window = _ref2.window;
        var isLandscape = isOrientationLandscape(window);

        _this2.setState({
          isLandscape: isLandscape
        });
      };
    };

    return (0, _hoistNonReactStatics2.default)(withOrientation, WrappedComponent);
  };

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _hoistNonReactStatics = require(_dependencyMap[2], "hoist-non-react-statics");

  var _hoistNonReactStatics2 = babelHelpers.interopRequireDefault(_hoistNonReactStatics);

  var isOrientationLandscape = exports.isOrientationLandscape = function isOrientationLandscape(_ref) {
    var width = _ref.width,
        height = _ref.height;
    return width > height;
  };
},357,[108,12,358],"react-navigation/src/views/withOrientation.js");
__d(function (global, require, module, exports, _dependencyMap) {
    'use strict';

    var REACT_STATICS = {
        childContextTypes: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        mixins: true,
        propTypes: true,
        type: true
    };
    var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
    };
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = getPrototypeOf && getPrototypeOf(Object);

    module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== 'string') {
            if (objectPrototype) {
                var inheritedComponent = getPrototypeOf(sourceComponent);

                if (inheritedComponent && inheritedComponent !== objectPrototype) {
                    hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
                }
            }

            var keys = getOwnPropertyNames(sourceComponent);

            if (getOwnPropertySymbols) {
                keys = keys.concat(getOwnPropertySymbols(sourceComponent));
            }

            for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];

                if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
                    var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

                    try {
                        defineProperty(targetComponent, key, descriptor);
                    } catch (e) {}
                }
            }

            return targetComponent;
        }

        return targetComponent;
    };
},358,[],"hoist-non-react-statics/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getChildEventSubscriber;

  function getChildEventSubscriber(addListener, key) {
    var actionSubscribers = new Set();
    var willFocusSubscribers = new Set();
    var didFocusSubscribers = new Set();
    var willBlurSubscribers = new Set();
    var didBlurSubscribers = new Set();

    var getChildSubscribers = function getChildSubscribers(evtName) {
      switch (evtName) {
        case 'action':
          return actionSubscribers;

        case 'willFocus':
          return willFocusSubscribers;

        case 'didFocus':
          return didFocusSubscribers;

        case 'willBlur':
          return willBlurSubscribers;

        case 'didBlur':
          return didBlurSubscribers;

        default:
          return null;
      }
    };

    var emit = function emit(type, payload) {
      var payloadWithType = babelHelpers.extends({}, payload, {
        type: type
      });
      var subscribers = getChildSubscribers(type);
      subscribers && subscribers.forEach(function (subs) {
        subs(payloadWithType);
      });
    };

    var lastEmittedEvent = 'didBlur';

    var cleanup = function cleanup() {
      upstreamSubscribers.forEach(function (subs) {
        return subs && subs.remove();
      });
    };

    var upstreamEvents = ['willFocus', 'didFocus', 'willBlur', 'didBlur', 'action'];
    var upstreamSubscribers = upstreamEvents.map(function (eventName) {
      return addListener(eventName, function (payload) {
        var state = payload.state,
            lastState = payload.lastState,
            action = payload.action;
        var lastRoutes = lastState && lastState.routes;
        var routes = state && state.routes;
        var lastFocusKey = lastState && lastState.routes && lastState.routes[lastState.index].key;
        var focusKey = routes && routes[state.index].key;
        var isChildFocused = focusKey === key;
        var lastRoute = lastRoutes && lastRoutes.find(function (route) {
          return route.key === key;
        });
        var newRoute = routes && routes.find(function (route) {
          return route.key === key;
        });
        var childPayload = {
          context: key + ":" + action.type + "_" + (payload.context || 'Root'),
          state: newRoute,
          lastState: lastRoute,
          action: action,
          type: eventName
        };
        var isTransitioning = !!state && state.isTransitioning;
        var previouslyLastEmittedEvent = lastEmittedEvent;

        if (lastEmittedEvent === 'didBlur') {
          if (eventName === 'willFocus' && isChildFocused) {
            emit(lastEmittedEvent = 'willFocus', childPayload);
          } else if (eventName === 'action' && isChildFocused) {
            emit(lastEmittedEvent = 'willFocus', childPayload);
          }
        }

        if (lastEmittedEvent === 'willFocus') {
          if (eventName === 'didFocus' && isChildFocused && !isTransitioning) {
            emit(lastEmittedEvent = 'didFocus', childPayload);
          } else if (eventName === 'action' && isChildFocused && !isTransitioning) {
            emit(lastEmittedEvent = 'didFocus', childPayload);
          }
        }

        if (lastEmittedEvent === 'didFocus') {
          if (!isChildFocused) {
            emit(lastEmittedEvent = 'willBlur', childPayload);
          } else if (eventName === 'willBlur') {
            emit(lastEmittedEvent = 'willBlur', childPayload);
          } else if (eventName === 'action' && previouslyLastEmittedEvent === 'didFocus') {
            emit('action', childPayload);
          }
        }

        if (lastEmittedEvent === 'willBlur') {
          if (eventName === 'action' && !isChildFocused && !isTransitioning) {
            emit(lastEmittedEvent = 'didBlur', childPayload);
          } else if (eventName === 'didBlur') {
            emit(lastEmittedEvent = 'didBlur', childPayload);
          }
        }
      });
    });
    return function (eventName, eventHandler) {
      var subscribers = getChildSubscribers(eventName);

      if (!subscribers) {
        throw new Error("Invalid event name \"" + eventName + "\"");
      }

      subscribers.add(eventHandler);

      var remove = function remove() {
        subscribers.delete(eventHandler);
      };

      return {
        remove: remove
      };
    };
  }
},359,[],"react-navigation/src/getChildEventSubscriber.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/views/SceneView.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var SceneView = function (_React$PureComponent) {
    babelHelpers.inherits(SceneView, _React$PureComponent);

    function SceneView() {
      babelHelpers.classCallCheck(this, SceneView);
      return babelHelpers.possibleConstructorReturn(this, (SceneView.__proto__ || Object.getPrototypeOf(SceneView)).apply(this, arguments));
    }

    babelHelpers.createClass(SceneView, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          navigation: this.props.navigation
        };
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            screenProps = _props.screenProps,
            navigation = _props.navigation,
            Component = _props.component;
        return _react2.default.createElement(Component, {
          screenProps: screenProps,
          navigation: navigation,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 17
          }
        });
      }
    }]);
    return SceneView;
  }(_react2.default.PureComponent);

  SceneView.childContextTypes = {
    navigation: _propTypes2.default.object.isRequired
  };
  exports.default = SceneView;
},360,[108,127],"react-navigation/src/views/SceneView.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _CardStackStyleInterpolator = require(_dependencyMap[1], "./CardStackStyleInterpolator");

  var _CardStackStyleInterpolator2 = babelHelpers.interopRequireDefault(_CardStackStyleInterpolator);

  var _ReactNativeFeatures = require(_dependencyMap[2], "../../utils/ReactNativeFeatures");

  var ReactNativeFeatures = babelHelpers.interopRequireWildcard(_ReactNativeFeatures);
  var IOSTransitionSpec = void 0;

  if (ReactNativeFeatures.supportsImprovedSpringAnimation()) {
    IOSTransitionSpec = {
      timing: _reactNative.Animated.spring,
      stiffness: 1000,
      damping: 500,
      mass: 3
    };
  } else {
    IOSTransitionSpec = {
      duration: 500,
      easing: _reactNative.Easing.bezier(0.2833, 0.99, 0.31833, 0.99),
      timing: _reactNative.Animated.timing
    };
  }

  var SlideFromRightIOS = {
    transitionSpec: IOSTransitionSpec,
    screenInterpolator: _CardStackStyleInterpolator2.default.forHorizontal,
    containerStyle: {
      backgroundColor: '#000'
    }
  };
  var ModalSlideFromBottomIOS = {
    transitionSpec: IOSTransitionSpec,
    screenInterpolator: _CardStackStyleInterpolator2.default.forVertical,
    containerStyle: {
      backgroundColor: '#000'
    }
  };
  var FadeInFromBottomAndroid = {
    transitionSpec: {
      duration: 350,
      easing: _reactNative.Easing.out(_reactNative.Easing.poly(5)),
      timing: _reactNative.Animated.timing
    },
    screenInterpolator: _CardStackStyleInterpolator2.default.forFadeFromBottomAndroid
  };
  var FadeOutToBottomAndroid = {
    transitionSpec: {
      duration: 230,
      easing: _reactNative.Easing.in(_reactNative.Easing.poly(4)),
      timing: _reactNative.Animated.timing
    },
    screenInterpolator: _CardStackStyleInterpolator2.default.forFadeFromBottomAndroid
  };

  function defaultTransitionConfig(transitionProps, prevTransitionProps, isModal) {
    if (_reactNative.Platform.OS === 'android') {
      if (prevTransitionProps && transitionProps.index < prevTransitionProps.index) {
        return FadeOutToBottomAndroid;
      }

      return FadeInFromBottomAndroid;
    }

    if (isModal) {
      return ModalSlideFromBottomIOS;
    }

    return SlideFromRightIOS;
  }

  function getTransitionConfig(transitionConfigurer, transitionProps, prevTransitionProps, isModal) {
    var defaultConfig = defaultTransitionConfig(transitionProps, prevTransitionProps, isModal);

    if (transitionConfigurer) {
      return babelHelpers.extends({}, defaultConfig, transitionConfigurer(transitionProps, prevTransitionProps, isModal));
    }

    return defaultConfig;
  }

  exports.default = {
    defaultTransitionConfig: defaultTransitionConfig,
    getTransitionConfig: getTransitionConfig
  };
},361,[12,362,363],"react-navigation/src/views/CardStack/TransitionConfigs.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _getSceneIndicesForInterpolationInputRange = require(_dependencyMap[1], "../../utils/getSceneIndicesForInterpolationInputRange");

  var _getSceneIndicesForInterpolationInputRange2 = babelHelpers.interopRequireDefault(_getSceneIndicesForInterpolationInputRange);

  function forInitial(props) {
    var navigation = props.navigation,
        scene = props.scene;
    var focused = navigation.state.index === scene.index;
    var opacity = focused ? 1 : 0;
    var translate = focused ? 0 : 1000000;
    return {
      opacity: opacity,
      transform: [{
        translateX: translate
      }, {
        translateY: translate
      }]
    };
  }

  function forHorizontal(props) {
    var layout = props.layout,
        position = props.position,
        scene = props.scene;

    if (!layout.isMeasured) {
      return forInitial(props);
    }

    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var opacity = position.interpolate({
      inputRange: [first, first + 0.01, index, last - 0.01, last],
      outputRange: [0, 1, 1, 0.85, 0]
    });
    var width = layout.initWidth;
    var translateX = position.interpolate({
      inputRange: [first, index, last],
      outputRange: _reactNative.I18nManager.isRTL ? [-width, 0, width * 0.3] : [width, 0, width * -0.3]
    });
    var translateY = 0;
    return {
      opacity: opacity,
      transform: [{
        translateX: translateX
      }, {
        translateY: translateY
      }]
    };
  }

  function forVertical(props) {
    var layout = props.layout,
        position = props.position,
        scene = props.scene;

    if (!layout.isMeasured) {
      return forInitial(props);
    }

    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var opacity = position.interpolate({
      inputRange: [first, first + 0.01, index, last - 0.01, last],
      outputRange: [0, 1, 1, 0.85, 0]
    });
    var height = layout.initHeight;
    var translateY = position.interpolate({
      inputRange: [first, index, last],
      outputRange: [height, 0, 0]
    });
    var translateX = 0;
    return {
      opacity: opacity,
      transform: [{
        translateX: translateX
      }, {
        translateY: translateY
      }]
    };
  }

  function forFadeFromBottomAndroid(props) {
    var layout = props.layout,
        position = props.position,
        scene = props.scene;

    if (!layout.isMeasured) {
      return forInitial(props);
    }

    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var inputRange = [first, index, last - 0.01, last];
    var opacity = position.interpolate({
      inputRange: inputRange,
      outputRange: [0, 1, 1, 0]
    });
    var translateY = position.interpolate({
      inputRange: inputRange,
      outputRange: [50, 0, 0, 0]
    });
    var translateX = 0;
    return {
      opacity: opacity,
      transform: [{
        translateX: translateX
      }, {
        translateY: translateY
      }]
    };
  }

  function forFade(props) {
    var layout = props.layout,
        position = props.position,
        scene = props.scene;

    if (!layout.isMeasured) {
      return forInitial(props);
    }

    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var opacity = position.interpolate({
      inputRange: [first, index, last],
      outputRange: [0, 1, 1]
    });
    return {
      opacity: opacity
    };
  }

  function canUseNativeDriver() {
    return true;
  }

  exports.default = {
    forHorizontal: forHorizontal,
    forVertical: forVertical,
    forFadeFromBottomAndroid: forFadeFromBottomAndroid,
    forFade: forFade,
    canUseNativeDriver: canUseNativeDriver
  };
},362,[12,355],"react-navigation/src/views/CardStack/CardStackStyleInterpolator.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.supportsImprovedSpringAnimation = undefined;

  var _reactNative = require(_dependencyMap[0], "react-native");

  var PlatformConstants = _reactNative.NativeModules.PlatformConstants;

  var supportsImprovedSpringAnimation = exports.supportsImprovedSpringAnimation = function supportsImprovedSpringAnimation() {
    if (PlatformConstants && PlatformConstants.reactNativeVersion) {
      var _PlatformConstants$re = PlatformConstants.reactNativeVersion,
          major = _PlatformConstants$re.major,
          minor = _PlatformConstants$re.minor;
      return minor >= 50 || major === 0 && minor === 0;
    }

    return false;
  };
},363,[12],"react-navigation/src/utils/ReactNativeFeatures.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/views/Transitioner.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _invariant = require(_dependencyMap[2], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _ScenesReducer = require(_dependencyMap[3], "./ScenesReducer");

  var _ScenesReducer2 = babelHelpers.interopRequireDefault(_ScenesReducer);

  var DefaultTransitionSpec = {
    duration: 250,
    easing: _reactNative.Easing.inOut(_reactNative.Easing.ease),
    timing: _reactNative.Animated.timing
  };

  var Transitioner = function (_React$Component) {
    babelHelpers.inherits(Transitioner, _React$Component);

    function Transitioner(props, context) {
      babelHelpers.classCallCheck(this, Transitioner);

      var _this = babelHelpers.possibleConstructorReturn(this, (Transitioner.__proto__ || Object.getPrototypeOf(Transitioner)).call(this, props, context));

      var layout = {
        height: new _reactNative.Animated.Value(0),
        initHeight: 0,
        initWidth: 0,
        isMeasured: false,
        width: new _reactNative.Animated.Value(0)
      };
      _this.state = {
        layout: layout,
        position: new _reactNative.Animated.Value(_this.props.navigation.state.index),
        progress: new _reactNative.Animated.Value(1),
        scenes: (0, _ScenesReducer2.default)([], _this.props.navigation.state)
      };
      _this._prevTransitionProps = null;
      _this._transitionProps = buildTransitionProps(props, _this.state);
      _this._isMounted = false;
      _this._isTransitionRunning = false;
      _this._queuedTransition = null;
      return _this;
    }

    babelHelpers.createClass(Transitioner, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this._onLayout = this._onLayout.bind(this);
        this._onTransitionEnd = this._onTransitionEnd.bind(this);
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this._isMounted = true;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._isMounted = false;
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        var nextScenes = (0, _ScenesReducer2.default)(this.state.scenes, nextProps.navigation.state, this.props.navigation.state);

        if (nextScenes === this.state.scenes) {
          return;
        }

        var indexHasChanged = nextProps.navigation.state.index !== this.props.navigation.state.index;

        if (this._isTransitionRunning) {
          this._queuedTransition = {
            nextProps: nextProps,
            nextScenes: nextScenes,
            indexHasChanged: indexHasChanged
          };
          return;
        }

        this._startTransition(nextProps, nextScenes, indexHasChanged);
      }
    }, {
      key: "_startTransition",
      value: function _startTransition(nextProps, nextScenes, indexHasChanged) {
        var _this2 = this;

        var nextState = babelHelpers.extends({}, this.state, {
          scenes: nextScenes
        });
        var position = nextState.position,
            progress = nextState.progress;
        progress.setValue(0);
        this._prevTransitionProps = this._transitionProps;
        this._transitionProps = buildTransitionProps(nextProps, nextState);
        var transitionUserSpec = nextProps.configureTransition ? nextProps.configureTransition(this._transitionProps, this._prevTransitionProps) : null;
        var transitionSpec = babelHelpers.extends({}, DefaultTransitionSpec, transitionUserSpec);
        var timing = transitionSpec.timing;
        delete transitionSpec.timing;
        var toValue = nextProps.navigation.state.index;
        var positionHasChanged = position.__getValue() !== toValue;
        var animations = indexHasChanged && positionHasChanged ? [timing(progress, babelHelpers.extends({}, transitionSpec, {
          toValue: 1
        })), timing(position, babelHelpers.extends({}, transitionSpec, {
          toValue: nextProps.navigation.state.index
        }))] : [];
        this._isTransitionRunning = true;
        this.setState(nextState, function _callee() {
          var result;
          return regeneratorRuntime.async(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!nextProps.onTransitionStart) {
                    _context.next = 5;
                    break;
                  }

                  result = nextProps.onTransitionStart(_this2._transitionProps, _this2._prevTransitionProps);

                  if (!(result instanceof Promise)) {
                    _context.next = 5;
                    break;
                  }

                  _context.next = 5;
                  return regeneratorRuntime.awrap(result);

                case 5:
                  _reactNative.Animated.parallel(animations).start(_this2._onTransitionEnd);

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, null, _this2);
        });
      }
    }, {
      key: "render",
      value: function render() {
        return _react2.default.createElement(
          _reactNative.View,
          {
            onLayout: this._onLayout,
            style: [styles.main],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 142
            }
          },
          this.props.render(this._transitionProps, this._prevTransitionProps)
        );
      }
    }, {
      key: "_onLayout",
      value: function _onLayout(event) {
        var _event$nativeEvent$la = event.nativeEvent.layout,
            height = _event$nativeEvent$la.height,
            width = _event$nativeEvent$la.width;

        if (this.state.layout.initWidth === width && this.state.layout.initHeight === height) {
          return;
        }

        var layout = babelHelpers.extends({}, this.state.layout, {
          initHeight: height,
          initWidth: width,
          isMeasured: true
        });
        layout.height.setValue(height);
        layout.width.setValue(width);
        var nextState = babelHelpers.extends({}, this.state, {
          layout: layout
        });
        this._transitionProps = buildTransitionProps(this.props, nextState);
        this.setState(nextState);
      }
    }, {
      key: "_onTransitionEnd",
      value: function _onTransitionEnd() {
        var _this3 = this;

        if (!this._isMounted) {
          return;
        }

        var prevTransitionProps = this._prevTransitionProps;
        this._prevTransitionProps = null;
        var nextState = babelHelpers.extends({}, this.state, {
          scenes: this.state.scenes.filter(isSceneNotStale)
        });
        this._transitionProps = buildTransitionProps(this.props, nextState);
        this.setState(nextState, function _callee2() {
          var result;
          return regeneratorRuntime.async(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!_this3.props.onTransitionEnd) {
                    _context2.next = 5;
                    break;
                  }

                  result = _this3.props.onTransitionEnd(_this3._transitionProps, prevTransitionProps);

                  if (!(result instanceof Promise)) {
                    _context2.next = 5;
                    break;
                  }

                  _context2.next = 5;
                  return regeneratorRuntime.awrap(result);

                case 5:
                  if (_this3._queuedTransition) {
                    _this3._startTransition(_this3._queuedTransition.nextProps, _this3._queuedTransition.nextScenes, _this3._queuedTransition.indexHasChanged);

                    _this3._queuedTransition = null;
                  } else {
                    _this3._isTransitionRunning = false;
                  }

                case 6:
                case "end":
                  return _context2.stop();
              }
            }
          }, null, _this3);
        });
      }
    }]);
    return Transitioner;
  }(_react2.default.Component);

  function buildTransitionProps(props, state) {
    var navigation = props.navigation;
    var layout = state.layout,
        position = state.position,
        progress = state.progress,
        scenes = state.scenes;
    var scene = scenes.find(isSceneActive);
    (0, _invariant2.default)(scene, 'Could not find active scene');
    return {
      layout: layout,
      navigation: navigation,
      position: position,
      progress: progress,
      scenes: scenes,
      scene: scene,
      index: scene.index
    };
  }

  function isSceneNotStale(scene) {
    return !scene.isStale;
  }

  function isSceneActive(scene) {
    return scene.isActive;
  }

  var styles = _reactNative.StyleSheet.create({
    main: {
      flex: 1
    }
  });

  exports.default = Transitioner;
},364,[108,12,339,365],"react-navigation/src/views/Transitioner.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = ScenesReducer;

  var _invariant = require(_dependencyMap[0], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _shallowEqual = require(_dependencyMap[1], "../utils/shallowEqual");

  var _shallowEqual2 = babelHelpers.interopRequireDefault(_shallowEqual);

  var SCENE_KEY_PREFIX = 'scene_';

  function compareKey(one, two) {
    var delta = one.length - two.length;

    if (delta > 0) {
      return 1;
    }

    if (delta < 0) {
      return -1;
    }

    return one > two ? 1 : -1;
  }

  function compareScenes(one, two) {
    if (one.index > two.index) {
      return 1;
    }

    if (one.index < two.index) {
      return -1;
    }

    return compareKey(one.key, two.key);
  }

  function areScenesShallowEqual(one, two) {
    return one.key === two.key && one.index === two.index && one.isStale === two.isStale && one.isActive === two.isActive && areRoutesShallowEqual(one.route, two.route);
  }

  function areRoutesShallowEqual(one, two) {
    if (!one || !two) {
      return one === two;
    }

    if (one.key !== two.key) {
      return false;
    }

    return (0, _shallowEqual2.default)(one, two);
  }

  function ScenesReducer(scenes, nextState, prevState) {
    if (prevState === nextState) {
      return scenes;
    }

    var prevScenes = new Map();
    var freshScenes = new Map();
    var staleScenes = new Map();
    scenes.forEach(function (scene) {
      var key = scene.key;

      if (scene.isStale) {
        staleScenes.set(key, scene);
      }

      prevScenes.set(key, scene);
    });
    var nextKeys = new Set();
    nextState.routes.forEach(function (route, index) {
      var key = SCENE_KEY_PREFIX + route.key;
      var scene = {
        index: index,
        isActive: false,
        isStale: false,
        key: key,
        route: route
      };
      (0, _invariant2.default)(!nextKeys.has(key), "navigation.state.routes[" + index + "].key \"" + key + "\" conflicts with " + 'another route!');
      nextKeys.add(key);

      if (staleScenes.has(key)) {
        staleScenes.delete(key);
      }

      freshScenes.set(key, scene);
    });

    if (prevState) {
      prevState.routes.forEach(function (route, index) {
        var key = SCENE_KEY_PREFIX + route.key;

        if (freshScenes.has(key)) {
          return;
        }

        staleScenes.set(key, {
          index: index,
          isActive: false,
          isStale: true,
          key: key,
          route: route
        });
      });
    }

    var nextScenes = [];

    var mergeScene = function mergeScene(nextScene) {
      var key = nextScene.key;
      var prevScene = prevScenes.has(key) ? prevScenes.get(key) : null;

      if (prevScene && areScenesShallowEqual(prevScene, nextScene)) {
        nextScenes.push(prevScene);
      } else {
        nextScenes.push(nextScene);
      }
    };

    staleScenes.forEach(mergeScene);
    freshScenes.forEach(mergeScene);
    nextScenes.sort(compareScenes);
    var activeScenesCount = 0;
    nextScenes.forEach(function (scene, ii) {
      var isActive = !scene.isStale && scene.index === nextState.index;

      if (isActive !== scene.isActive) {
        nextScenes[ii] = babelHelpers.extends({}, scene, {
          isActive: isActive
        });
      }

      if (isActive) {
        activeScenesCount++;
      }
    });
    (0, _invariant2.default)(activeScenesCount === 1, 'there should always be only one scene active, not %s.', activeScenesCount);

    if (nextScenes.length !== scenes.length) {
      return nextScenes;
    }

    if (nextScenes.some(function (scene, index) {
      return !areScenesShallowEqual(scenes[index], scene);
    })) {
      return nextScenes;
    }

    return scenes;
  }
},365,[339,366],"react-navigation/src/views/ScenesReducer.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function is(x, y) {
    if (x === y) {
      return x !== 0 || y !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }

  function shallowEqual(objA, objB) {
    if (is(objA, objB)) {
      return true;
    }

    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
      return false;
    }

    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);

    if (keysA.length !== keysB.length) {
      return false;
    }

    for (var i = 0; i < keysA.length; i++) {
      if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
        return false;
      }
    }

    return true;
  }

  module.exports = shallowEqual;
},366,[],"react-navigation/src/utils/shallowEqual.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _pathToRegexp = require(_dependencyMap[0], "path-to-regexp");

  var _pathToRegexp2 = babelHelpers.interopRequireDefault(_pathToRegexp);

  var _NavigationActions = require(_dependencyMap[1], "../NavigationActions");

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  var _createConfigGetter = require(_dependencyMap[2], "./createConfigGetter");

  var _createConfigGetter2 = babelHelpers.interopRequireDefault(_createConfigGetter);

  var _getScreenForRouteName = require(_dependencyMap[3], "./getScreenForRouteName");

  var _getScreenForRouteName2 = babelHelpers.interopRequireDefault(_getScreenForRouteName);

  var _StateUtils = require(_dependencyMap[4], "../StateUtils");

  var _StateUtils2 = babelHelpers.interopRequireDefault(_StateUtils);

  var _validateRouteConfigMap = require(_dependencyMap[5], "./validateRouteConfigMap");

  var _validateRouteConfigMap2 = babelHelpers.interopRequireDefault(_validateRouteConfigMap);

  var _getScreenConfigDeprecated = require(_dependencyMap[6], "./getScreenConfigDeprecated");

  var _getScreenConfigDeprecated2 = babelHelpers.interopRequireDefault(_getScreenConfigDeprecated);

  var _invariant = require(_dependencyMap[7], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _KeyGenerator = require(_dependencyMap[8], "./KeyGenerator");

  function isEmpty(obj) {
    if (!obj) return true;

    for (var key in obj) {
      return false;
    }

    return true;
  }

  function behavesLikePushAction(action) {
    return action.type === _NavigationActions2.default.NAVIGATE || action.type === _NavigationActions2.default.PUSH;
  }

  exports.default = function (routeConfigs) {
    var stackConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _validateRouteConfigMap2.default)(routeConfigs);
    var childRouters = {};
    var routeNames = Object.keys(routeConfigs);
    routeNames.forEach(function (routeName) {
      var screen = (0, _getScreenForRouteName2.default)(routeConfigs, routeName);

      if (screen && screen.router) {
        childRouters[routeName] = screen.router;
      } else {
        childRouters[routeName] = null;
      }
    });
    var initialRouteParams = stackConfig.initialRouteParams;
    var initialRouteName = stackConfig.initialRouteName || routeNames[0];
    var initialChildRouter = childRouters[initialRouteName];
    var pathsByRouteNames = babelHelpers.extends({}, stackConfig.paths) || {};
    var paths = [];
    routeNames.forEach(function (routeName) {
      var pathPattern = pathsByRouteNames[routeName] || routeConfigs[routeName].path;
      var matchExact = !!pathPattern && !childRouters[routeName];

      if (pathPattern === undefined) {
        pathPattern = routeName;
      }

      var keys = [];
      var re = void 0,
          toPath = void 0,
          priority = void 0;

      if (typeof pathPattern === 'string') {
        re = (0, _pathToRegexp2.default)(pathPattern, keys);
        toPath = _pathToRegexp2.default.compile(pathPattern);
        priority = 0;
      } else {
        re = (0, _pathToRegexp2.default)('*', keys);

        toPath = function toPath() {
          return '';
        };

        matchExact = true;
        priority = -1;
      }

      if (!matchExact) {
        var wildcardRe = (0, _pathToRegexp2.default)(pathPattern + "/*", keys);
        re = new RegExp("(?:" + re.source + ")|(?:" + wildcardRe.source + ")");
      }

      pathsByRouteNames[routeName] = {
        re: re,
        keys: keys,
        toPath: toPath,
        priority: priority
      };
    });
    paths = Object.entries(pathsByRouteNames);
    paths.sort(function (a, b) {
      return b[1].priority - a[1].priority;
    });
    return {
      getComponentForState: function getComponentForState(state) {
        var activeChildRoute = state.routes[state.index];
        var routeName = activeChildRoute.routeName;

        if (childRouters[routeName]) {
          return childRouters[routeName].getComponentForState(activeChildRoute);
        }

        return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
      },
      getComponentForRouteName: function getComponentForRouteName(routeName) {
        return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
      },
      getStateForAction: function getStateForAction(action, state) {
        if (!state) {
          var route = {};

          if (behavesLikePushAction(action) && childRouters[action.routeName] !== undefined) {
            return {
              key: 'StackRouterRoot',
              isTransitioning: false,
              index: 0,
              routes: [{
                routeName: action.routeName,
                params: action.params,
                key: "Init-" + (0, _KeyGenerator.generateKey)()
              }]
            };
          }

          if (initialChildRouter) {
            route = initialChildRouter.getStateForAction(_NavigationActions2.default.navigate({
              routeName: initialRouteName,
              params: initialRouteParams
            }));
          }

          var params = (route.params || action.params || initialRouteParams) && babelHelpers.extends({}, route.params || {}, action.params || {}, initialRouteParams || {});
          route = babelHelpers.extends({}, route, {
            routeName: initialRouteName,
            key: "Init-" + (0, _KeyGenerator.generateKey)()
          }, params ? {
            params: params
          } : {});
          state = {
            key: 'StackRouterRoot',
            isTransitioning: false,
            index: 0,
            routes: [route]
          };
        }

        if (action.type !== _NavigationActions2.default.RESET || action.key !== null) {
          var keyIndex = action.key ? _StateUtils2.default.indexOf(state, action.key) : -1;
          var childIndex = keyIndex >= 0 ? keyIndex : state.index;
          var childRoute = state.routes[childIndex];
          (0, _invariant2.default)(childRoute, "StateUtils erroneously thought index " + childIndex + " exists");
          var childRouter = childRouters[childRoute.routeName];

          if (childRouter) {
            var _route = childRouter.getStateForAction(action, childRoute);

            if (_route === null) {
              return state;
            }

            if (_route && _route !== childRoute) {
              return _StateUtils2.default.replaceAt(state, childRoute.key, _route);
            }
          }
        }

        if (action.type === _NavigationActions2.default.POP_TO_TOP) {
          if (state.index !== 0) {
            return {
              isTransitioning: action.immediate !== true,
              index: 0,
              routes: [state.routes[0]]
            };
          }

          return state;
        }

        if (behavesLikePushAction(action) && childRouters[action.routeName] !== undefined) {
          var _childRouter = childRouters[action.routeName];

          var _route2 = void 0;

          (0, _invariant2.default)(action.type !== _NavigationActions2.default.PUSH || action.key == null, 'StackRouter does not support key on the push action');

          if (action.key) {
            var lastRouteIndex = state.routes.findIndex(function (r) {
              return r.key === action.key;
            });

            if (lastRouteIndex !== -1) {
              if (state.index === lastRouteIndex && !action.params) {
                return state;
              }

              var routes = [].concat(babelHelpers.toConsumableArray(state.routes));

              if (action.params) {
                var _route3 = state.routes.find(function (r) {
                  return r.key === action.key;
                });

                routes[lastRouteIndex] = babelHelpers.extends({}, _route3, {
                  params: babelHelpers.extends({}, _route3.params, action.params)
                });
              }

              return babelHelpers.extends({}, state, {
                isTransitioning: state.index !== lastRouteIndex ? action.immediate !== true : undefined,
                index: lastRouteIndex,
                routes: routes
              });
            }
          }

          var key = action.key || (0, _KeyGenerator.generateKey)();

          if (_childRouter) {
            var childAction = action.action || _NavigationActions2.default.init({
              params: action.params
            });

            _route2 = babelHelpers.extends({
              params: action.params
            }, _childRouter.getStateForAction(childAction), {
              key: key,
              routeName: action.routeName
            });
          } else {
            _route2 = {
              params: action.params,
              key: key,
              routeName: action.routeName
            };
          }

          return babelHelpers.extends({}, _StateUtils2.default.push(state, _route2), {
            isTransitioning: action.immediate !== true
          });
        }

        if (action.type === _NavigationActions2.default.COMPLETE_TRANSITION && (action.key == null || action.key === state.key) && state.isTransitioning) {
          return babelHelpers.extends({}, state, {
            isTransitioning: false
          });
        }

        if (behavesLikePushAction(action)) {
          var childRouterNames = Object.keys(childRouters);

          for (var i = 0; i < childRouterNames.length; i++) {
            var childRouterName = childRouterNames[i];
            var _childRouter2 = childRouters[childRouterName];

            if (_childRouter2) {
              var initChildRoute = _childRouter2.getStateForAction(_NavigationActions2.default.init());

              var navigatedChildRoute = _childRouter2.getStateForAction(action, initChildRoute);

              var routeToPush = null;

              if (navigatedChildRoute === null) {
                routeToPush = initChildRoute;
              } else if (navigatedChildRoute !== initChildRoute) {
                routeToPush = navigatedChildRoute;
              }

              if (routeToPush) {
                return _StateUtils2.default.push(state, babelHelpers.extends({}, routeToPush, {
                  key: (0, _KeyGenerator.generateKey)(),
                  routeName: childRouterName
                }));
              }
            }
          }
        }

        if (action.type === _NavigationActions2.default.SET_PARAMS) {
          var _key = action.key;
          var lastRoute = state.routes.find(function (route) {
            return route.key === _key;
          });

          if (lastRoute) {
            var _params = babelHelpers.extends({}, lastRoute.params, action.params);

            var _routes = [].concat(babelHelpers.toConsumableArray(state.routes));

            _routes[state.routes.indexOf(lastRoute)] = babelHelpers.extends({}, lastRoute, {
              params: _params
            });
            return babelHelpers.extends({}, state, {
              routes: _routes
            });
          }
        }

        if (action.type === _NavigationActions2.default.RESET) {
          if (action.key != null && action.key != state.key) {
            return state;
          }

          var resetAction = action;
          return babelHelpers.extends({}, state, {
            routes: resetAction.actions.map(function (childAction) {
              var router = childRouters[childAction.routeName];

              if (router) {
                return babelHelpers.extends({}, childAction, router.getStateForAction(childAction), {
                  routeName: childAction.routeName,
                  key: (0, _KeyGenerator.generateKey)()
                });
              }

              var route = babelHelpers.extends({}, childAction, {
                key: (0, _KeyGenerator.generateKey)()
              });
              delete route.type;
              return route;
            }),
            index: action.index
          });
        }

        if (action.type === _NavigationActions2.default.BACK || action.type === _NavigationActions2.default.POP) {
          var _key2 = action.key,
              n = action.n,
              immediate = action.immediate;
          var backRouteIndex = state.index;

          if (action.type === _NavigationActions2.default.POP && n != null) {
            backRouteIndex = Math.max(1, state.index - n + 1);
          } else if (_key2) {
            var backRoute = state.routes.find(function (route) {
              return route.key === _key2;
            });
            backRouteIndex = state.routes.indexOf(backRoute);
          }

          if (backRouteIndex > 0) {
            return babelHelpers.extends({}, state, {
              routes: state.routes.slice(0, backRouteIndex),
              index: backRouteIndex - 1,
              isTransitioning: immediate !== true
            });
          }
        }

        return state;
      },
      getPathAndParamsForState: function getPathAndParamsForState(state) {
        var route = state.routes[state.index];
        var routeName = route.routeName;
        var screen = (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
        var subPath = pathsByRouteNames[routeName].toPath(route.params);
        var path = subPath;
        var params = route.params;

        if (screen && screen.router) {
          var stateRoute = route;
          var child = screen.router.getPathAndParamsForState(stateRoute);
          path = subPath ? subPath + "/" + child.path : child.path;
          params = child.params ? babelHelpers.extends({}, params, child.params) : params;
        }

        return {
          path: path,
          params: params
        };
      },
      getActionForPathAndParams: function getActionForPathAndParams(pathToResolve, inputParams) {
        if (!pathToResolve) {
          return _NavigationActions2.default.navigate({
            routeName: initialRouteName
          });
        }

        var _pathToResolve$split = pathToResolve.split('?'),
            _pathToResolve$split2 = babelHelpers.slicedToArray(_pathToResolve$split, 2),
            pathNameToResolve = _pathToResolve$split2[0],
            queryString = _pathToResolve$split2[1];

        var matchedRouteName = void 0;
        var pathMatch = void 0;
        var pathMatchKeys = void 0;

        for (var _iterator = paths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref3;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref3 = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref3 = _i.value;
          }

          var _ref = _ref3;

          var _ref2 = babelHelpers.slicedToArray(_ref, 2);

          var routeName = _ref2[0];
          var path = _ref2[1];
          var re = path.re,
              keys = path.keys;
          pathMatch = re.exec(pathNameToResolve);

          if (pathMatch && pathMatch.length) {
            pathMatchKeys = keys;
            matchedRouteName = routeName;
            break;
          }
        }

        if (!matchedRouteName) {
          if (!pathToResolve) {
            return _NavigationActions2.default.navigate({
              routeName: initialRouteName
            });
          }

          return null;
        }

        var nestedAction = void 0;
        var nestedQueryString = queryString ? '?' + queryString : '';

        if (childRouters[matchedRouteName]) {
          nestedAction = childRouters[matchedRouteName].getActionForPathAndParams(pathMatch.slice(pathMatchKeys.length).join('/') + nestedQueryString);

          if (!nestedAction) {
            return null;
          }
        }

        var queryParams = !isEmpty(inputParams) ? inputParams : (queryString || '').split('&').reduce(function (result, item) {
          if (item !== '') {
            var nextResult = result || {};

            var _item$split = item.split('='),
                _item$split2 = babelHelpers.slicedToArray(_item$split, 2),
                key = _item$split2[0],
                value = _item$split2[1];

            nextResult[key] = value;
            return nextResult;
          }

          return result;
        }, null);
        var params = pathMatch.slice(1).reduce(function (result, matchResult, i) {
          var key = pathMatchKeys[i];

          if (key.asterisk || !key) {
            return result;
          }

          var nextResult = result || {};
          var paramName = key.name;
          nextResult[paramName] = matchResult;
          return nextResult;
        }, queryParams);
        return _NavigationActions2.default.navigate(babelHelpers.extends({
          routeName: matchedRouteName
        }, params ? {
          params: params
        } : {}, nestedAction ? {
          action: nestedAction
        } : {}));
      },
      getScreenOptions: (0, _createConfigGetter2.default)(routeConfigs, stackConfig.navigationOptions),
      getScreenConfig: _getScreenConfigDeprecated2.default
    };
  };
},367,[368,337,370,371,340,373,374,339,375],"react-navigation/src/routers/StackRouter.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isarray = require(_dependencyMap[0], 'isarray');

  module.exports = pathToRegexp;
  module.exports.parse = parse;
  module.exports.compile = compile;
  module.exports.tokensToFunction = tokensToFunction;
  module.exports.tokensToRegExp = tokensToRegExp;
  var PATH_REGEXP = new RegExp(['(\\\\.)', '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'].join('|'), 'g');

  function parse(str, options) {
    var tokens = [];
    var key = 0;
    var index = 0;
    var path = '';
    var defaultDelimiter = options && options.delimiter || '/';
    var res;

    while ((res = PATH_REGEXP.exec(str)) != null) {
      var m = res[0];
      var escaped = res[1];
      var offset = res.index;
      path += str.slice(index, offset);
      index = offset + m.length;

      if (escaped) {
        path += escaped[1];
        continue;
      }

      var next = str[index];
      var prefix = res[2];
      var name = res[3];
      var capture = res[4];
      var group = res[5];
      var modifier = res[6];
      var asterisk = res[7];

      if (path) {
        tokens.push(path);
        path = '';
      }

      var partial = prefix != null && next != null && next !== prefix;
      var repeat = modifier === '+' || modifier === '*';
      var optional = modifier === '?' || modifier === '*';
      var delimiter = res[2] || defaultDelimiter;
      var pattern = capture || group;
      tokens.push({
        name: name || key++,
        prefix: prefix || '',
        delimiter: delimiter,
        optional: optional,
        repeat: repeat,
        partial: partial,
        asterisk: !!asterisk,
        pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'
      });
    }

    if (index < str.length) {
      path += str.substr(index);
    }

    if (path) {
      tokens.push(path);
    }

    return tokens;
  }

  function compile(str, options) {
    return tokensToFunction(parse(str, options));
  }

  function encodeURIComponentPretty(str) {
    return encodeURI(str).replace(/[\/?#]/g, function (c) {
      return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    });
  }

  function encodeAsterisk(str) {
    return encodeURI(str).replace(/[?#]/g, function (c) {
      return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    });
  }

  function tokensToFunction(tokens) {
    var matches = new Array(tokens.length);

    for (var i = 0; i < tokens.length; i++) {
      if (typeof tokens[i] === 'object') {
        matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
      }
    }

    return function (obj, opts) {
      var path = '';
      var data = obj || {};
      var options = opts || {};
      var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

      for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];

        if (typeof token === 'string') {
          path += token;
          continue;
        }

        var value = data[token.name];
        var segment;

        if (value == null) {
          if (token.optional) {
            if (token.partial) {
              path += token.prefix;
            }

            continue;
          } else {
            throw new TypeError('Expected "' + token.name + '" to be defined');
          }
        }

        if (isarray(value)) {
          if (!token.repeat) {
            throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
          }

          if (value.length === 0) {
            if (token.optional) {
              continue;
            } else {
              throw new TypeError('Expected "' + token.name + '" to not be empty');
            }
          }

          for (var j = 0; j < value.length; j++) {
            segment = encode(value[j]);

            if (!matches[i].test(segment)) {
              throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
            }

            path += (j === 0 ? token.prefix : token.delimiter) + segment;
          }

          continue;
        }

        segment = token.asterisk ? encodeAsterisk(value) : encode(value);

        if (!matches[i].test(segment)) {
          throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
        }

        path += token.prefix + segment;
      }

      return path;
    };
  }

  function escapeString(str) {
    return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
  }

  function escapeGroup(group) {
    return group.replace(/([=!:$\/()])/g, '\\$1');
  }

  function attachKeys(re, keys) {
    re.keys = keys;
    return re;
  }

  function flags(options) {
    return options.sensitive ? '' : 'i';
  }

  function regexpToRegexp(path, keys) {
    var groups = path.source.match(/\((?!\?)/g);

    if (groups) {
      for (var i = 0; i < groups.length; i++) {
        keys.push({
          name: i,
          prefix: null,
          delimiter: null,
          optional: false,
          repeat: false,
          partial: false,
          asterisk: false,
          pattern: null
        });
      }
    }

    return attachKeys(path, keys);
  }

  function arrayToRegexp(path, keys, options) {
    var parts = [];

    for (var i = 0; i < path.length; i++) {
      parts.push(pathToRegexp(path[i], keys, options).source);
    }

    var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));
    return attachKeys(regexp, keys);
  }

  function stringToRegexp(path, keys, options) {
    return tokensToRegExp(parse(path, options), keys, options);
  }

  function tokensToRegExp(tokens, keys, options) {
    if (!isarray(keys)) {
      options = keys || options;
      keys = [];
    }

    options = options || {};
    var strict = options.strict;
    var end = options.end !== false;
    var route = '';

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        route += escapeString(token);
      } else {
        var prefix = escapeString(token.prefix);
        var capture = '(?:' + token.pattern + ')';
        keys.push(token);

        if (token.repeat) {
          capture += '(?:' + prefix + capture + ')*';
        }

        if (token.optional) {
          if (!token.partial) {
            capture = '(?:' + prefix + '(' + capture + '))?';
          } else {
            capture = prefix + '(' + capture + ')?';
          }
        } else {
          capture = prefix + '(' + capture + ')';
        }

        route += capture;
      }
    }

    var delimiter = escapeString(options.delimiter || '/');
    var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

    if (!strict) {
      route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
    }

    if (end) {
      route += '$';
    } else {
      route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
    }

    return attachKeys(new RegExp('^' + route, flags(options)), keys);
  }

  function pathToRegexp(path, keys, options) {
    if (!isarray(keys)) {
      options = keys || options;
      keys = [];
    }

    options = options || {};

    if (path instanceof RegExp) {
      return regexpToRegexp(path, keys);
    }

    if (isarray(path)) {
      return arrayToRegexp(path, keys, options);
    }

    return stringToRegexp(path, keys, options);
  }
},368,[369],"path-to-regexp/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = Array.isArray || function (arr) {
    return Object.prototype.toString.call(arr) == '[object Array]';
  };
},369,[],"isarray/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _invariant = require(_dependencyMap[0], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _getScreenForRouteName = require(_dependencyMap[1], "./getScreenForRouteName");

  var _getScreenForRouteName2 = babelHelpers.interopRequireDefault(_getScreenForRouteName);

  var _addNavigationHelpers = require(_dependencyMap[2], "../addNavigationHelpers");

  var _addNavigationHelpers2 = babelHelpers.interopRequireDefault(_addNavigationHelpers);

  var _validateScreenOptions = require(_dependencyMap[3], "./validateScreenOptions");

  var _validateScreenOptions2 = babelHelpers.interopRequireDefault(_validateScreenOptions);

  var _getChildEventSubscriber = require(_dependencyMap[4], "../getChildEventSubscriber");

  var _getChildEventSubscriber2 = babelHelpers.interopRequireDefault(_getChildEventSubscriber);

  function applyConfig(configurer, navigationOptions, configProps) {
    if (typeof configurer === 'function') {
      return babelHelpers.extends({}, navigationOptions, configurer(babelHelpers.extends({}, configProps, {
        navigationOptions: navigationOptions
      })));
    }

    if (typeof configurer === 'object') {
      return babelHelpers.extends({}, navigationOptions, configurer);
    }

    return navigationOptions;
  }

  exports.default = function (routeConfigs, navigatorScreenConfig) {
    return function (navigation, screenProps) {
      var state = navigation.state,
          dispatch = navigation.dispatch;
      var route = state;
      (0, _invariant2.default)(route.routeName && typeof route.routeName === 'string', 'Cannot get config because the route does not have a routeName.');
      var Component = (0, _getScreenForRouteName2.default)(routeConfigs, route.routeName);
      var outputConfig = {};
      var router = Component.router;

      if (router) {
        var routes = route.routes,
            index = route.index;

        if (!route || !routes || index == null) {
          throw new Error("Expect nav state to have routes and index, " + JSON.stringify(route));
        }

        var childRoute = routes[index];
        var childNavigation = (0, _addNavigationHelpers2.default)({
          state: childRoute,
          dispatch: dispatch,
          addListener: (0, _getChildEventSubscriber2.default)(navigation.addListener, childRoute.key)
        });
        outputConfig = router.getScreenOptions(childNavigation, screenProps);
      }

      var routeConfig = routeConfigs[route.routeName];
      var routeScreenConfig = routeConfig.navigationOptions;
      var componentScreenConfig = Component.navigationOptions;
      var configOptions = {
        navigation: navigation,
        screenProps: screenProps || {}
      };
      outputConfig = applyConfig(navigatorScreenConfig, outputConfig, configOptions);
      outputConfig = applyConfig(componentScreenConfig, outputConfig, configOptions);
      outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);
      (0, _validateScreenOptions2.default)(outputConfig, route);
      return outputConfig;
    };
  };
},370,[339,371,338,372,359],"react-navigation/src/routers/createConfigGetter.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getScreenForRouteName;

  var _invariant = require(_dependencyMap[0], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  function getScreenForRouteName(routeConfigs, routeName) {
    var routeConfig = routeConfigs[routeName];

    if (!routeConfig) {
      throw new Error("There is no route defined for key " + routeName + ".\n" + ("Must be one of: " + Object.keys(routeConfigs).map(function (a) {
        return "'" + a + "'";
      }).join(',')));
    }

    if (routeConfig.screen) {
      return routeConfig.screen;
    }

    if (typeof routeConfig.getScreen === 'function') {
      var screen = routeConfig.getScreen();
      (0, _invariant2.default)(typeof screen === 'function', "The getScreen defined for route '" + routeName + " didn't return a valid " + 'screen or navigator.\n\n' + 'Please pass it like this:\n' + (routeName + ": {\n  getScreen: () => require('./MyScreen').default\n}"));
      return screen;
    }

    throw new Error("Route " + routeName + " must define a screen or a getScreen.");
  }
},371,[339],"react-navigation/src/routers/getScreenForRouteName.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var deprecatedKeys = ['tabBar'];

  exports.default = function (screenOptions, route) {
    var keys = Object.keys(screenOptions);
    var deprecatedKey = keys.find(function (key) {
      return deprecatedKeys.includes(key);
    });

    if (typeof screenOptions.title === 'function') {
      throw new Error(["`title` cannot be defined as a function in navigation options for `" + route.routeName + "` screen. \n", 'Try replacing the following:', '{', '    title: ({ state }) => state...', '}', '', 'with:', '({ navigation }) => ({', '    title: navigation.state...', '})'].join('\n'));
    }

    if (deprecatedKey && typeof screenOptions[deprecatedKey] === 'function') {
      throw new Error(["`" + deprecatedKey + "` cannot be defined as a function in navigation options for `" + route.routeName + "` screen. \n", 'Try replacing the following:', '{', "    " + deprecatedKey + ": ({ state }) => ({", '         key: state...', '    })', '}', '', 'with:', '({ navigation }) => ({', "    " + deprecatedKey + "Key: navigation.state...", '})'].join('\n'));
    }

    if (deprecatedKey && typeof screenOptions[deprecatedKey] === 'object') {
      throw new Error(["Invalid key `" + deprecatedKey + "` defined in navigation options for `" + route.routeName + "` screen.", '\n', 'Try replacing the following navigation options:', '{', "    " + deprecatedKey + ": {"].concat(babelHelpers.toConsumableArray(Object.keys(screenOptions[deprecatedKey]).map(function (key) {
        return "        " + key + ": ...,";
      })), ['    },', '}', '\n', 'with:', '{'], babelHelpers.toConsumableArray(Object.keys(screenOptions[deprecatedKey]).map(function (key) {
        return "    " + (deprecatedKey + key[0].toUpperCase() + key.slice(1)) + ": ...,";
      })), ['}']).join('\n'));
    }
  };
},372,[],"react-navigation/src/routers/validateScreenOptions.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _invariant = require(_dependencyMap[0], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  function validateRouteConfigMap(routeConfigs) {
    var routeNames = Object.keys(routeConfigs);
    (0, _invariant2.default)(routeNames.length > 0, 'Please specify at least one route when configuring a navigator.');
    routeNames.forEach(function (routeName) {
      var routeConfig = routeConfigs[routeName];

      if (!routeConfig.screen && !routeConfig.getScreen) {
        throw new Error("Route '" + routeName + "' should declare a screen. " + 'For example:\n\n' + "import MyScreen from './MyScreen';\n" + '...\n' + (routeName + ": {\n") + '  screen: MyScreen,\n' + '}');
      } else if (routeConfig.screen && routeConfig.getScreen) {
        throw new Error("Route '" + routeName + "' should declare a screen or " + 'a getScreen, not both.');
      }

      if (routeConfig.screen && typeof routeConfig.screen !== 'function' && typeof routeConfig.screen !== 'string') {
        throw new Error("The component for route '" + routeName + "' must be a " + 'React component. For example:\n\n' + "import MyScreen from './MyScreen';\n" + '...\n' + (routeName + ": {\n") + '  screen: MyScreen,\n' + '}\n\n' + 'You can also use a navigator:\n\n' + "import MyNavigator from './MyNavigator';\n" + '...\n' + (routeName + ": {\n") + '  screen: MyNavigator,\n' + '}');
      }
    });
  }

  exports.default = validateRouteConfigMap;
},373,[339],"react-navigation/src/routers/validateRouteConfigMap.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _invariant = require(_dependencyMap[0], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  exports.default = function () {
    return (0, _invariant2.default)(false, '`getScreenConfig` has been replaced with `getScreenOptions`');
  };
},374,[339],"react-navigation/src/routers/getScreenConfigDeprecated.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports._TESTING_ONLY_normalize_keys = _TESTING_ONLY_normalize_keys;
  exports.generateKey = generateKey;
  var uniqueBaseId = "id-" + Date.now();
  var uuidCount = 0;

  function _TESTING_ONLY_normalize_keys() {
    uniqueBaseId = 'id';
    uuidCount = 0;
  }

  function generateKey() {
    return uniqueBaseId + "-" + uuidCount++;
  }
},375,[],"react-navigation/src/routers/KeyGenerator.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/navigators/TabNavigator.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _createNavigator = require(_dependencyMap[2], "./createNavigator");

  var _createNavigator2 = babelHelpers.interopRequireDefault(_createNavigator);

  var _createNavigationContainer = require(_dependencyMap[3], "../createNavigationContainer");

  var _createNavigationContainer2 = babelHelpers.interopRequireDefault(_createNavigationContainer);

  var _TabRouter = require(_dependencyMap[4], "../routers/TabRouter");

  var _TabRouter2 = babelHelpers.interopRequireDefault(_TabRouter);

  var _TabView = require(_dependencyMap[5], "../views/TabView/TabView");

  var _TabView2 = babelHelpers.interopRequireDefault(_TabView);

  var _TabBarTop = require(_dependencyMap[6], "../views/TabView/TabBarTop");

  var _TabBarTop2 = babelHelpers.interopRequireDefault(_TabBarTop);

  var _TabBarBottom = require(_dependencyMap[7], "../views/TabView/TabBarBottom");

  var _TabBarBottom2 = babelHelpers.interopRequireDefault(_TabBarBottom);

  var TabNavigator = function TabNavigator(routeConfigs) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var mergedConfig = babelHelpers.extends({}, TabNavigator.Presets.Default, config);
    var tabBarComponent = mergedConfig.tabBarComponent,
        tabBarPosition = mergedConfig.tabBarPosition,
        tabBarOptions = mergedConfig.tabBarOptions,
        swipeEnabled = mergedConfig.swipeEnabled,
        animationEnabled = mergedConfig.animationEnabled,
        configureTransition = mergedConfig.configureTransition,
        initialLayout = mergedConfig.initialLayout,
        tabsConfig = babelHelpers.objectWithoutProperties(mergedConfig, ["tabBarComponent", "tabBarPosition", "tabBarOptions", "swipeEnabled", "animationEnabled", "configureTransition", "initialLayout"]);
    var router = (0, _TabRouter2.default)(routeConfigs, tabsConfig);
    var navigator = (0, _createNavigator2.default)(router, routeConfigs, config)(function (props) {
      return _react2.default.createElement(_TabView2.default, babelHelpers.extends({}, props, {
        tabBarComponent: tabBarComponent,
        tabBarPosition: tabBarPosition,
        tabBarOptions: tabBarOptions,
        swipeEnabled: swipeEnabled,
        animationEnabled: animationEnabled,
        configureTransition: configureTransition,
        initialLayout: initialLayout,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 32
        }
      }));
    });
    return (0, _createNavigationContainer2.default)(navigator);
  };

  var Presets = {
    iOSBottomTabs: {
      tabBarComponent: _TabBarBottom2.default,
      tabBarPosition: 'bottom',
      swipeEnabled: false,
      animationEnabled: false,
      initialLayout: undefined
    },
    AndroidTopTabs: {
      tabBarComponent: _TabBarTop2.default,
      tabBarPosition: 'top',
      swipeEnabled: true,
      animationEnabled: true,
      initialLayout: undefined
    }
  };
  TabNavigator.Presets = {
    iOSBottomTabs: Presets.iOSBottomTabs,
    AndroidTopTabs: Presets.AndroidTopTabs,
    Default: _reactNative.Platform.OS === 'ios' ? Presets.iOSBottomTabs : Presets.AndroidTopTabs
  };
  exports.default = TabNavigator;
},376,[108,12,341,335,377,378,390,392],"react-navigation/src/navigators/TabNavigator.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _invariant = require(_dependencyMap[0], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _getScreenForRouteName = require(_dependencyMap[1], "./getScreenForRouteName");

  var _getScreenForRouteName2 = babelHelpers.interopRequireDefault(_getScreenForRouteName);

  var _createConfigGetter = require(_dependencyMap[2], "./createConfigGetter");

  var _createConfigGetter2 = babelHelpers.interopRequireDefault(_createConfigGetter);

  var _NavigationActions = require(_dependencyMap[3], "../NavigationActions");

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  var _validateRouteConfigMap = require(_dependencyMap[4], "./validateRouteConfigMap");

  var _validateRouteConfigMap2 = babelHelpers.interopRequireDefault(_validateRouteConfigMap);

  var _getScreenConfigDeprecated = require(_dependencyMap[5], "./getScreenConfigDeprecated");

  var _getScreenConfigDeprecated2 = babelHelpers.interopRequireDefault(_getScreenConfigDeprecated);

  exports.default = function (routeConfigs) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _validateRouteConfigMap2.default)(routeConfigs);
    var order = config.order || Object.keys(routeConfigs);
    var paths = config.paths || {};
    var initialRouteParams = config.initialRouteParams;
    var initialRouteName = config.initialRouteName || order[0];
    var initialRouteIndex = order.indexOf(initialRouteName);
    var backBehavior = config.backBehavior || 'initialRoute';
    var shouldBackNavigateToInitialRoute = backBehavior === 'initialRoute';
    var tabRouters = {};
    order.forEach(function (routeName) {
      var routeConfig = routeConfigs[routeName];
      paths[routeName] = typeof routeConfig.path === 'string' ? routeConfig.path : routeName;
      tabRouters[routeName] = null;

      if (routeConfig.screen && routeConfig.screen.router) {
        tabRouters[routeName] = routeConfig.screen.router;
      }
    });

    if (initialRouteIndex === -1) {
      throw new Error("Invalid initialRouteName '" + initialRouteName + "' for TabRouter. " + ("Should be one of " + order.map(function (n) {
        return "\"" + n + "\"";
      }).join(', ')));
    }

    return {
      getStateForAction: function getStateForAction(action, inputState) {
        var state = inputState;

        if (!state) {
          var _routes = order.map(function (routeName) {
            var params = routeName === initialRouteName ? initialRouteParams : undefined;
            var tabRouter = tabRouters[routeName];

            if (tabRouter) {
              var childAction = _NavigationActions2.default.init();

              return babelHelpers.extends({}, tabRouter.getStateForAction(childAction), {
                key: routeName,
                routeName: routeName,
                params: params
              });
            }

            return {
              key: routeName,
              routeName: routeName,
              params: params
            };
          });

          state = {
            routes: _routes,
            index: initialRouteIndex,
            isTransitioning: false
          };
        }

        if (action.type === _NavigationActions2.default.INIT) {
          var params = action.params;

          if (params) {
            state.routes = state.routes.map(function (route) {
              return babelHelpers.extends({}, route, {
                params: babelHelpers.extends({}, route.params, params, route.routeName === initialRouteName ? initialRouteParams : null)
              });
            });
          }
        }

        var activeTabLastState = state.routes[state.index];
        var activeTabRouter = tabRouters[order[state.index]];

        if (activeTabRouter) {
          var activeTabState = activeTabRouter.getStateForAction(action, activeTabLastState);

          if (!activeTabState && inputState) {
            return null;
          }

          if (activeTabState && activeTabState !== activeTabLastState) {
            var _routes2 = [].concat(babelHelpers.toConsumableArray(state.routes));

            _routes2[state.index] = activeTabState;
            return babelHelpers.extends({}, state, {
              routes: _routes2
            });
          }
        }

        var activeTabIndex = state.index;
        var isBackEligible = action.key == null || action.key === activeTabLastState.key;

        if (action.type === _NavigationActions2.default.BACK) {
          if (isBackEligible && shouldBackNavigateToInitialRoute) {
            activeTabIndex = initialRouteIndex;
          } else {
            return state;
          }
        }

        var didNavigate = false;

        if (action.type === _NavigationActions2.default.NAVIGATE) {
          var navigateAction = action;
          didNavigate = !!order.find(function (tabId, i) {
            if (tabId === navigateAction.routeName) {
              activeTabIndex = i;
              return true;
            }

            return false;
          });

          if (didNavigate) {
            var childState = state.routes[activeTabIndex];
            var newChildState = void 0;
            var tabRouter = tabRouters[action.routeName];

            if (action.action) {
              newChildState = tabRouter ? tabRouter.getStateForAction(action.action, childState) : null;
            } else if (!tabRouter && action.params) {
              newChildState = babelHelpers.extends({}, childState, {
                params: babelHelpers.extends({}, childState.params || {}, action.params)
              });
            }

            if (newChildState && newChildState !== childState) {
              var _routes3 = [].concat(babelHelpers.toConsumableArray(state.routes));

              _routes3[activeTabIndex] = newChildState;
              return babelHelpers.extends({}, state, {
                routes: _routes3,
                index: activeTabIndex
              });
            }
          }
        }

        if (action.type === _NavigationActions2.default.SET_PARAMS) {
          var key = action.key;
          var lastRoute = state.routes.find(function (route) {
            return route.key === key;
          });

          if (lastRoute) {
            var _params = babelHelpers.extends({}, lastRoute.params, action.params);

            var _routes4 = [].concat(babelHelpers.toConsumableArray(state.routes));

            _routes4[state.routes.indexOf(lastRoute)] = babelHelpers.extends({}, lastRoute, {
              params: _params
            });
            return babelHelpers.extends({}, state, {
              routes: _routes4
            });
          }
        }

        if (activeTabIndex !== state.index) {
          return babelHelpers.extends({}, state, {
            index: activeTabIndex
          });
        } else if (didNavigate && !inputState) {
          return state;
        } else if (didNavigate) {
          return null;
        }

        var index = state.index;
        var routes = state.routes;
        order.find(function (tabId, i) {
          var tabRouter = tabRouters[tabId];

          if (i === index) {
            return false;
          }

          var tabState = routes[i];

          if (tabRouter) {
            tabState = tabRouter.getStateForAction(action, tabState);
          }

          if (!tabState) {
            index = i;
            return true;
          }

          if (tabState !== routes[i]) {
            routes = [].concat(babelHelpers.toConsumableArray(routes));
            routes[i] = tabState;
            index = i;
            return true;
          }

          return false;
        });
        index = action.type === _NavigationActions2.default.SET_PARAMS ? state.index : index;

        if (index !== state.index || routes !== state.routes) {
          return babelHelpers.extends({}, state, {
            index: index,
            routes: routes
          });
        }

        return state;
      },
      getComponentForState: function getComponentForState(state) {
        var routeName = order[state.index];
        (0, _invariant2.default)(routeName, "There is no route defined for index " + state.index + ". Check that\n        that you passed in a navigation state with a valid tab/screen index.");
        var childRouter = tabRouters[routeName];

        if (childRouter) {
          return childRouter.getComponentForState(state.routes[state.index]);
        }

        return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
      },
      getComponentForRouteName: function getComponentForRouteName(routeName) {
        return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
      },
      getPathAndParamsForState: function getPathAndParamsForState(state) {
        var route = state.routes[state.index];
        var routeName = order[state.index];
        var subPath = paths[routeName];
        var screen = (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
        var path = subPath;
        var params = route.params;

        if (screen && screen.router) {
          var stateRoute = route;
          var child = screen.router.getPathAndParamsForState(stateRoute);
          path = subPath ? subPath + "/" + child.path : child.path;
          params = child.params ? babelHelpers.extends({}, params, child.params) : params;
        }

        return {
          path: path,
          params: params
        };
      },
      getActionForPathAndParams: function getActionForPathAndParams(path, params) {
        return order.map(function (tabId) {
          var parts = path.split('/');
          var pathToTest = paths[tabId];

          if (parts[0] === pathToTest) {
            var tabRouter = tabRouters[tabId];

            var action = _NavigationActions2.default.navigate({
              routeName: tabId
            });

            if (tabRouter && tabRouter.getActionForPathAndParams) {
              action.action = tabRouter.getActionForPathAndParams(parts.slice(1).join('/'), params);
            } else if (params) {
              action.params = params;
            }

            return action;
          }

          return null;
        }).find(function (action) {
          return !!action;
        }) || order.map(function (tabId) {
          var tabRouter = tabRouters[tabId];
          return tabRouter && tabRouter.getActionForPathAndParams(path, params);
        }).find(function (action) {
          return !!action;
        }) || null;
      },
      getScreenOptions: (0, _createConfigGetter2.default)(routeConfigs, config.navigationOptions),
      getScreenConfig: _getScreenConfigDeprecated2.default
    };
  };
},377,[339,371,370,337,373,374],"react-navigation/src/routers/TabRouter.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/views/TabView/TabView.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _reactNativeTabView = require(_dependencyMap[2], "react-native-tab-view");

  var _SceneView = require(_dependencyMap[3], "../SceneView");

  var _SceneView2 = babelHelpers.interopRequireDefault(_SceneView);

  var _withCachedChildNavigation = require(_dependencyMap[4], "../../withCachedChildNavigation");

  var _withCachedChildNavigation2 = babelHelpers.interopRequireDefault(_withCachedChildNavigation);

  var _SafeAreaView = require(_dependencyMap[5], "../SafeAreaView");

  var _SafeAreaView2 = babelHelpers.interopRequireDefault(_SafeAreaView);

  var TabView = function (_React$PureComponent) {
    babelHelpers.inherits(TabView, _React$PureComponent);

    function TabView() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, TabView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabView.__proto__ || Object.getPrototypeOf(TabView)).call.apply(_ref, [this].concat(args))), _this), _this._handlePageChanged = function (index) {
        var navigation = _this.props.navigation;
        navigation.navigate(navigation.state.routes[index].routeName);
      }, _this._renderScene = function (_ref2) {
        var route = _ref2.route;
        var screenProps = _this.props.screenProps;
        var childNavigation = _this.props.childNavigationProps[route.key];

        var TabComponent = _this.props.router.getComponentForRouteName(route.routeName);

        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.page,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 29
            }
          },
          _react2.default.createElement(_SceneView2.default, {
            screenProps: screenProps,
            component: TabComponent,
            navigation: childNavigation,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 30
            }
          })
        );
      }, _this._getLabel = function (_ref3) {
        var route = _ref3.route,
            tintColor = _ref3.tintColor,
            focused = _ref3.focused;

        var options = _this.props.router.getScreenOptions(_this.props.childNavigationProps[route.key], _this.props.screenProps || {});

        if (options.tabBarLabel) {
          return typeof options.tabBarLabel === 'function' ? options.tabBarLabel({
            tintColor: tintColor,
            focused: focused
          }) : options.tabBarLabel;
        }

        if (typeof options.title === 'string') {
          return options.title;
        }

        return route.routeName;
      }, _this._getOnPress = function (previousScene, _ref4) {
        var route = _ref4.route;

        var options = _this.props.router.getScreenOptions(_this.props.childNavigationProps[route.key], _this.props.screenProps || {});

        return options.tabBarOnPress;
      }, _this._getTestIDProps = function (_ref5) {
        var route = _ref5.route,
            focused = _ref5.focused;

        var options = _this.props.router.getScreenOptions(_this.props.childNavigationProps[route.key], _this.props.screenProps || {});

        return typeof options.tabBarTestIDProps === 'function' ? options.tabBarTestIDProps({
          focused: focused
        }) : options.tabBarTestIDProps;
      }, _this._renderIcon = function (_ref6) {
        var focused = _ref6.focused,
            route = _ref6.route,
            tintColor = _ref6.tintColor;

        var options = _this.props.router.getScreenOptions(_this.props.childNavigationProps[route.key], _this.props.screenProps || {});

        if (options.tabBarIcon) {
          return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({
            tintColor: tintColor,
            focused: focused
          }) : options.tabBarIcon;
        }

        return null;
      }, _this._renderTabBar = function (props) {
        var _this$props = _this.props,
            tabBarOptions = _this$props.tabBarOptions,
            TabBarComponent = _this$props.tabBarComponent,
            animationEnabled = _this$props.animationEnabled;

        if (typeof TabBarComponent === 'undefined') {
          return null;
        }

        return _react2.default.createElement(TabBarComponent, babelHelpers.extends({}, props, tabBarOptions, {
          tabBarPosition: _this.props.tabBarPosition,
          screenProps: _this.props.screenProps,
          navigation: _this.props.navigation,
          getLabel: _this._getLabel,
          getTestIDProps: _this._getTestIDProps,
          getOnPress: _this._getOnPress,
          renderIcon: _this._renderIcon,
          animationEnabled: animationEnabled,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 102
          }
        }));
      }, _this._renderPager = function (props) {
        return _react2.default.createElement(_reactNativeTabView.TabViewPagerPan, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 117
          }
        }));
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(TabView, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            router = _props.router,
            tabBarComponent = _props.tabBarComponent,
            tabBarPosition = _props.tabBarPosition,
            animationEnabled = _props.animationEnabled,
            configureTransition = _props.configureTransition,
            initialLayout = _props.initialLayout,
            screenProps = _props.screenProps;
        var renderHeader = void 0;
        var renderFooter = void 0;
        var renderPager = void 0;
        var state = this.props.navigation.state;
        var options = router.getScreenOptions(this.props.childNavigationProps[state.routes[state.index].key], screenProps || {});
        var tabBarVisible = options.tabBarVisible == null ? true : options.tabBarVisible;
        var swipeEnabled = options.swipeEnabled == null ? this.props.swipeEnabled : options.swipeEnabled;

        if (tabBarComponent !== undefined && tabBarVisible) {
          if (tabBarPosition === 'bottom') {
            renderFooter = this._renderTabBar;
          } else {
            renderHeader = this._renderTabBar;
          }
        }

        if (animationEnabled === false && swipeEnabled === false || typeof configureTransition === 'function') {
          renderPager = this._renderPager;
        }

        var props = {
          initialLayout: initialLayout,
          animationEnabled: animationEnabled,
          configureTransition: configureTransition,
          swipeEnabled: swipeEnabled,
          renderPager: renderPager,
          renderHeader: renderHeader,
          renderFooter: renderFooter,
          renderScene: this._renderScene,
          onIndexChange: this._handlePageChanged,
          navigationState: this.props.navigation.state,
          screenProps: this.props.screenProps,
          style: styles.container
        };
        return _react2.default.createElement(_reactNativeTabView.TabViewAnimated, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 178
          }
        }));
      }
    }]);
    return TabView;
  }(_react2.default.PureComponent);

  TabView.defaultProps = {
    initialLayout: _reactNative.Platform.select({
      android: {
        width: 1,
        height: 0
      }
    })
  };
  exports.default = (0, _withCachedChildNavigation2.default)(TabView);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    },
    page: {
      flex: 1,
      overflow: 'hidden'
    }
  });
},378,[108,12,379,360,389,356],"react-navigation/src/views/TabView/TabView.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    get TabViewAnimated() {
      return require(_dependencyMap[0], './TabViewAnimated').default;
    },

    get TabViewPagerPan() {
      return require(_dependencyMap[1], './TabViewPagerPan').default;
    },

    get TabViewPagerScroll() {
      return require(_dependencyMap[2], './TabViewPagerScroll').default;
    },

    get TabViewPagerAndroid() {
      return require(_dependencyMap[3], './TabViewPagerAndroid').default;
    },

    get TabViewPagerExperimental() {
      return require(_dependencyMap[4], './TabViewPagerExperimental').default;
    },

    get TabBar() {
      return require(_dependencyMap[5], './TabBar').default;
    },

    get SceneMap() {
      return require(_dependencyMap[6], './SceneMap').default;
    }

  };
},379,[380,384,383,382,385,386,388],"react-native-tab-view/src/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-tab-view/src/TabViewAnimated.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _TabViewPropTypes = require(_dependencyMap[3], "./TabViewPropTypes");

  var TabViewPager = void 0;

  switch (_reactNative.Platform.OS) {
    case 'android':
      TabViewPager = require(_dependencyMap[4], './TabViewPagerAndroid').default;
      break;

    case 'ios':
      TabViewPager = require(_dependencyMap[5], './TabViewPagerScroll').default;
      break;

    default:
      TabViewPager = require(_dependencyMap[6], './TabViewPagerPan').default;
      break;
  }

  var TabViewAnimated = function (_React$Component) {
    babelHelpers.inherits(TabViewAnimated, _React$Component);

    function TabViewAnimated(props) {
      babelHelpers.classCallCheck(this, TabViewAnimated);

      var _this = babelHelpers.possibleConstructorReturn(this, (TabViewAnimated.__proto__ || Object.getPrototypeOf(TabViewAnimated)).call(this, props));

      _initialiseProps.call(_this);

      var navigationState = _this.props.navigationState;
      var layout = babelHelpers.extends({}, _this.props.initialLayout, {
        measured: false
      });
      var panX = new _reactNative.Animated.Value(0);
      var offsetX = new _reactNative.Animated.Value(-navigationState.index * layout.width);
      var layoutXY = new _reactNative.Animated.ValueXY({
        x: layout.width || 0.001,
        y: layout.height || 0.001
      });

      var position = _reactNative.Animated.multiply(_reactNative.Animated.divide(_reactNative.Animated.add(panX, offsetX), layoutXY.x), -1);

      _this.state = {
        loaded: [navigationState.index],
        layout: layout,
        layoutXY: layoutXY,
        panX: panX,
        offsetX: offsetX,
        position: position
      };
      return _this;
    }

    babelHelpers.createClass(TabViewAnimated, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._mounted = true;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._mounted = false;
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            navigationState = _props.navigationState,
            onIndexChange = _props.onIndexChange,
            initialLayout = _props.initialLayout,
            renderScene = _props.renderScene,
            renderPager = _props.renderPager,
            renderHeader = _props.renderHeader,
            renderFooter = _props.renderFooter,
            rest = babelHelpers.objectWithoutProperties(_props, ["navigationState", "onIndexChange", "initialLayout", "renderScene", "renderPager", "renderHeader", "renderFooter"]);

        var props = this._buildSceneRendererProps();

        return React.createElement(
          _reactNative.View,
          {
            onLayout: this._handleLayout,
            loaded: this.state.loaded,
            style: [styles.container, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 194
            }
          },
          renderHeader && renderHeader(props),
          renderPager(babelHelpers.extends({}, props, rest, {
            panX: this.state.panX,
            offsetX: this.state.offsetX,
            children: navigationState.routes.map(function (route, index) {
              var scene = _this2._renderScene(babelHelpers.extends({}, props, {
                route: route,
                index: index,
                focused: index === navigationState.index
              }));

              if (scene) {
                return React.cloneElement(scene, {
                  key: route.key
                });
              }

              return scene;
            })
          })),
          renderFooter && renderFooter(props)
        );
      }
    }]);
    return TabViewAnimated;
  }(React.Component);

  TabViewAnimated.propTypes = {
    navigationState: _TabViewPropTypes.NavigationStatePropType.isRequired,
    onIndexChange: _propTypes2.default.func.isRequired,
    initialLayout: _propTypes2.default.shape({
      height: _propTypes2.default.number.isRequired,
      width: _propTypes2.default.number.isRequired
    }),
    canJumpToTab: _propTypes2.default.func.isRequired,
    renderPager: _propTypes2.default.func.isRequired,
    renderScene: _propTypes2.default.func.isRequired,
    renderHeader: _propTypes2.default.func,
    renderFooter: _propTypes2.default.func
  };
  TabViewAnimated.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    },
    renderPager: function renderPager(props) {
      return React.createElement(TabViewPager, babelHelpers.extends({}, props, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 71
        }
      }));
    },
    initialLayout: {
      height: 0,
      width: 0
    },
    useNativeDriver: false
  };

  var _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this._mounted = false;

    this._renderScene = function (props) {
      return _this3.props.renderScene(props);
    };

    this._handleLayout = function (e) {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
          height = _e$nativeEvent$layout.height,
          width = _e$nativeEvent$layout.width;

      if (_this3.state.layout.width === width && _this3.state.layout.height === height) {
        return;
      }

      _this3.state.offsetX.setValue(-_this3.props.navigationState.index * width);

      _this3.state.layoutXY.setValue({
        x: width || 0.001,
        y: height || 0.001
      });

      _this3.setState({
        layout: {
          measured: true,
          height: height,
          width: width
        }
      });
    };

    this._buildSceneRendererProps = function () {
      return {
        panX: _this3.state.panX,
        offsetX: _this3.state.offsetX,
        position: _this3.state.position,
        layout: _this3.state.layout,
        navigationState: _this3.props.navigationState,
        jumpToIndex: _this3._jumpToIndex,
        useNativeDriver: _this3.props.useNativeDriver === true
      };
    };

    this._jumpToIndex = function (index) {
      if (!_this3._mounted) {
        return;
      }

      var _props2 = _this3.props,
          canJumpToTab = _props2.canJumpToTab,
          navigationState = _props2.navigationState;

      if (!canJumpToTab(navigationState.routes[index])) {
        return;
      }

      if (index !== navigationState.index) {
        _this3.props.onIndexChange(index);
      }
    };
  };

  exports.default = TabViewAnimated;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      overflow: 'hidden'
    }
  });
},380,[108,127,12,381,382,383,384],"react-native-tab-view/src/TabViewAnimated.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PagerRendererPropType = exports.SceneRendererPropType = exports.NavigationStatePropType = exports.NavigationRoutePropType = undefined;

  var _propTypes = require(_dependencyMap[0], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var NavigationRoutePropType = exports.NavigationRoutePropType = _propTypes2.default.shape({
    title: _propTypes2.default.string,
    key: _propTypes2.default.string.isRequired
  });

  var NavigationStatePropType = exports.NavigationStatePropType = _propTypes2.default.shape({
    routes: _propTypes2.default.arrayOf(NavigationRoutePropType).isRequired,
    index: _propTypes2.default.number.isRequired
  });

  var SceneRendererPropType = exports.SceneRendererPropType = {
    panX: _propTypes2.default.object.isRequired,
    offsetX: _propTypes2.default.object.isRequired,
    layout: _propTypes2.default.shape({
      measured: _propTypes2.default.bool.isRequired,
      height: _propTypes2.default.number.isRequired,
      width: _propTypes2.default.number.isRequired
    }).isRequired,
    navigationState: NavigationStatePropType.isRequired,
    position: _propTypes2.default.object.isRequired,
    jumpToIndex: _propTypes2.default.func.isRequired,
    useNativeDriver: _propTypes2.default.bool
  };
  var PagerRendererPropType = exports.PagerRendererPropType = {
    layout: _propTypes2.default.shape({
      measured: _propTypes2.default.bool.isRequired,
      height: _propTypes2.default.number.isRequired,
      width: _propTypes2.default.number.isRequired
    }).isRequired,
    navigationState: NavigationStatePropType.isRequired,
    panX: _propTypes2.default.instanceOf(_reactNative.Animated.Value).isRequired,
    offsetX: _propTypes2.default.instanceOf(_reactNative.Animated.Value).isRequired,
    canJumpToTab: _propTypes2.default.func.isRequired,
    jumpToIndex: _propTypes2.default.func.isRequired,
    animationEnabled: _propTypes2.default.bool,
    swipeEnabled: _propTypes2.default.bool,
    useNativeDriver: _propTypes2.default.bool,
    children: _propTypes2.default.node.isRequired
  };
},381,[127,12],"react-native-tab-view/src/TabViewPropTypes.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-tab-view/src/TabViewPagerAndroid.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _TabViewPropTypes = require(_dependencyMap[2], "./TabViewPropTypes");

  var TabViewPagerAndroid = function (_React$Component) {
    babelHelpers.inherits(TabViewPagerAndroid, _React$Component);

    function TabViewPagerAndroid(props) {
      babelHelpers.classCallCheck(this, TabViewPagerAndroid);

      var _this = babelHelpers.possibleConstructorReturn(this, (TabViewPagerAndroid.__proto__ || Object.getPrototypeOf(TabViewPagerAndroid)).call(this, props));

      _this._isIdle = true;
      _this._currentIndex = 0;

      _this._getPageIndex = function (index) {
        return _reactNative.I18nManager.isRTL ? _this.props.navigationState.routes.length - (index + 1) : index;
      };

      _this._setPage = function (index) {
        var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var pager = _this._viewPager;

        if (pager) {
          var page = _this._getPageIndex(index);

          if (_this.props.animationEnabled === false || animated === false) {
            pager.setPageWithoutAnimation(page);
          } else {
            pager.setPage(page);
          }
        }
      };

      _this._handlePageChange = function (index) {
        if (_this._isIdle && _this._currentIndex !== index) {
          _this._setPage(index);

          _this._currentIndex = index;
        }
      };

      _this._handlePageScroll = function (e) {
        _this.props.offsetX.setValue(e.nativeEvent.position * _this.props.layout.width * (_reactNative.I18nManager.isRTL ? 1 : -1));

        _this.props.panX.setValue(e.nativeEvent.offset * _this.props.layout.width * (_reactNative.I18nManager.isRTL ? 1 : -1));
      };

      _this._handlePageScrollStateChanged = function (e) {
        _this._isIdle = e === 'idle';
        var nextIndex = _this._currentIndex;

        if (_this.props.canJumpToTab(_this.props.navigationState.routes[nextIndex])) {
          _this.props.jumpToIndex(nextIndex);
        } else {
          _this._setPage(_this.props.navigationState.index);

          _this._currentIndex = _this.props.navigationState.index;
        }
      };

      _this._handlePageSelected = function (e) {
        var index = _this._getPageIndex(e.nativeEvent.position);

        _this._currentIndex = index;
      };

      _this._setRef = function (el) {
        return _this._viewPager = el;
      };

      _this._currentIndex = _this.props.navigationState.index;
      return _this;
    }

    babelHelpers.createClass(TabViewPagerAndroid, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this.props.layout !== prevProps.layout || this.props.navigationState.routes.length !== prevProps.navigationState.routes.length || this.props.navigationState.index !== prevProps.navigationState.index) {
          this._handlePageChange(this.props.navigationState.index);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            children = _props.children,
            navigationState = _props.navigationState,
            swipeEnabled = _props.swipeEnabled;
        var content = React.Children.map(children, function (child, i) {
          return React.createElement(
            _reactNative.View,
            {
              key: navigationState.routes[i].key,
              testID: navigationState.routes[i].testID,
              style: styles.page,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 111
              }
            },
            child
          );
        });

        if (_reactNative.I18nManager.isRTL) {
          content.reverse();
        }

        var initialPage = this._getPageIndex(navigationState.index);

        return React.createElement(
          _reactNative.ViewPagerAndroid,
          {
            key: navigationState.routes.length,
            keyboardDismissMode: "on-drag",
            initialPage: initialPage,
            scrollEnabled: swipeEnabled !== false,
            onPageScroll: this._handlePageScroll,
            onPageScrollStateChanged: this._handlePageScrollStateChanged,
            onPageSelected: this._handlePageSelected,
            style: styles.container,
            ref: this._setRef,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 127
            }
          },
          content
        );
      }
    }]);
    return TabViewPagerAndroid;
  }(React.Component);

  TabViewPagerAndroid.propTypes = _TabViewPropTypes.PagerRendererPropType;
  TabViewPagerAndroid.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    }
  };
  exports.default = TabViewPagerAndroid;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexGrow: 1
    },
    page: {
      overflow: 'hidden'
    }
  });
},382,[108,12,381],"react-native-tab-view/src/TabViewPagerAndroid.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-tab-view/src/TabViewPagerScroll.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _TabViewPropTypes = require(_dependencyMap[2], "./TabViewPropTypes");

  var TabViewPagerScroll = function (_React$Component) {
    babelHelpers.inherits(TabViewPagerScroll, _React$Component);

    function TabViewPagerScroll(props) {
      babelHelpers.classCallCheck(this, TabViewPagerScroll);

      var _this = babelHelpers.possibleConstructorReturn(this, (TabViewPagerScroll.__proto__ || Object.getPrototypeOf(TabViewPagerScroll)).call(this, props));

      _initialiseProps.call(_this);

      var _this$props = _this.props,
          navigationState = _this$props.navigationState,
          layout = _this$props.layout;
      _this.state = {
        initialOffset: {
          x: navigationState.index * layout.width,
          y: 0
        }
      };
      return _this;
    }

    babelHelpers.createClass(TabViewPagerScroll, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._setInitialPage();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.layout.width !== this.props.layout.width || prevProps.navigationState !== this.props.navigationState) {
          this._scrollTo(this.props.navigationState.index * this.props.layout.width, prevProps.layout.width === this.props.layout.width);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            children = _props.children,
            layout = _props.layout,
            navigationState = _props.navigationState;
        return React.createElement(
          _reactNative.ScrollView,
          {
            horizontal: true,
            pagingEnabled: true,
            directionalLockEnabled: true,
            keyboardDismissMode: "on-drag",
            keyboardShouldPersistTaps: "always",
            overScrollMode: "never",
            scrollEnabled: this.props.swipeEnabled,
            automaticallyAdjustContentInsets: false,
            bounces: false,
            alwaysBounceHorizontal: false,
            scrollsToTop: false,
            showsHorizontalScrollIndicator: false,
            scrollEventThrottle: 1,
            onScroll: this._handleScroll,
            onMomentumScrollEnd: this._handleMomentumScrollEnd,
            contentOffset: this.state.initialOffset,
            style: styles.container,
            contentContainerStyle: layout.width ? null : styles.container,
            ref: function ref(el) {
              return _this2._scrollView = el;
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 128
            }
          },
          React.Children.map(children, function (child, i) {
            return React.createElement(
              _reactNative.View,
              {
                key: navigationState.routes[i].key,
                testID: navigationState.routes[i].testID,
                style: layout.width ? {
                  width: layout.width,
                  overflow: 'hidden'
                } : i === navigationState.index ? styles.page : null,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 150
                }
              },
              i === navigationState.index || layout.width ? child : null
            );
          })
        );
      }
    }]);
    return TabViewPagerScroll;
  }(React.Component);

  TabViewPagerScroll.propTypes = _TabViewPropTypes.PagerRendererPropType;
  TabViewPagerScroll.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    }
  };

  var _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this._isIdle = true;
    this._isInitial = true;

    this._setInitialPage = function () {
      if (_this3.props.layout.width) {
        _this3._isInitial = true;

        _this3._scrollTo(_this3.props.navigationState.index * _this3.props.layout.width, false);
      }

      setTimeout(function () {
        _this3._isInitial = false;
      }, 50);
    };

    this._scrollTo = function (x, animated) {
      if (_this3._isIdle && _this3._scrollView) {
        _this3._scrollView.scrollTo({
          x: x,
          animated: animated && _this3.props.animationEnabled !== false
        });
      }
    };

    this._handleMomentumScrollEnd = function (e) {
      var nextIndex = Math.round(e.nativeEvent.contentOffset.x / _this3.props.layout.width);

      if (_this3.props.canJumpToTab(_this3.props.navigationState.routes[nextIndex])) {
        _this3.props.jumpToIndex(nextIndex);
      } else {
        global.requestAnimationFrame(function () {
          _this3._scrollTo(_this3.props.navigationState.index * _this3.props.layout.width);
        });
      }
    };

    this._handleScroll = function (e) {
      if (_this3._isInitial) {
        return;
      }

      var _props2 = _this3.props,
          navigationState = _props2.navigationState,
          layout = _props2.layout;
      var offset = navigationState.index * layout.width;

      _this3.props.offsetX.setValue(-offset);

      _this3.props.panX.setValue(offset - e.nativeEvent.contentOffset.x);

      global.cancelAnimationFrame(_this3._idleCallback);
      _this3._isIdle = false;
      _this3._idleCallback = global.requestAnimationFrame(function () {
        _this3._isIdle = true;
      });
    };
  };

  exports.default = TabViewPagerScroll;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    },
    page: {
      flex: 1,
      overflow: 'hidden'
    }
  });
},383,[108,12,381],"react-native-tab-view/src/TabViewPagerScroll.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-tab-view/src/TabViewPagerPan.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _TabViewPropTypes = require(_dependencyMap[3], "./TabViewPropTypes");

  var DEAD_ZONE = 12;
  var DefaultTransitionSpec = {
    timing: _reactNative.Animated.spring,
    tension: 300,
    friction: 35
  };

  var TabViewPagerPan = function (_React$Component) {
    babelHelpers.inherits(TabViewPagerPan, _React$Component);

    function TabViewPagerPan() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, TabViewPagerPan);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabViewPagerPan.__proto__ || Object.getPrototypeOf(TabViewPagerPan)).call.apply(_ref, [this].concat(args))), _this), _this._isMovingHorizontally = function (evt, gestureState) {
        return Math.abs(gestureState.dx) > Math.abs(gestureState.dy * 2) && Math.abs(gestureState.vx) > Math.abs(gestureState.vy * 2);
      }, _this._canMoveScreen = function (evt, gestureState) {
        if (_this.props.swipeEnabled === false) {
          return false;
        }

        var _this$props$navigatio = _this.props.navigationState,
            routes = _this$props$navigatio.routes,
            index = _this$props$navigatio.index;
        return _this._isMovingHorizontally(evt, gestureState) && (gestureState.dx >= DEAD_ZONE && index >= 0 || gestureState.dx <= -DEAD_ZONE && index <= routes.length - 1);
      }, _this._startGesture = function (evt, gestureState) {
        if (typeof _this.props.onSwipeStart === 'function') {
          _this.props.onSwipeStart(evt, gestureState);
        }

        _this.props.panX.stopAnimation();
      }, _this._respondToGesture = function (evt, gestureState) {
        var _this$props$navigatio2 = _this.props.navigationState,
            routes = _this$props$navigatio2.routes,
            index = _this$props$navigatio2.index;

        if (gestureState.dx > 0 && index <= 0 || gestureState.dx < 0 && index >= routes.length - 1) {
          return;
        }

        _this.props.panX.setValue(gestureState.dx);
      }, _this._finishGesture = function (evt, gestureState) {
        var _this$props = _this.props,
            navigationState = _this$props.navigationState,
            layout = _this$props.layout,
            _this$props$swipeDist = _this$props.swipeDistanceThreshold,
            swipeDistanceThreshold = _this$props$swipeDist === undefined ? layout.width / 1.75 : _this$props$swipeDist;
        var _this$props$swipeVelo = _this.props.swipeVelocityThreshold,
            swipeVelocityThreshold = _this$props$swipeVelo === undefined ? 0.15 : _this$props$swipeVelo;

        if (_reactNative.Platform.OS === 'android') {
          swipeVelocityThreshold /= 1000000;
        }

        var currentIndex = typeof _this._pendingIndex === 'number' ? _this._pendingIndex : navigationState.index;
        var nextIndex = currentIndex;

        if (Math.abs(gestureState.dx) > Math.abs(gestureState.dy) && Math.abs(gestureState.vx) > Math.abs(gestureState.vy) && (Math.abs(gestureState.dx) > swipeDistanceThreshold || Math.abs(gestureState.vx) > swipeVelocityThreshold)) {
          nextIndex = Math.round(Math.min(Math.max(0, currentIndex - gestureState.dx / Math.abs(gestureState.dx)), navigationState.routes.length - 1));
        }

        if (!isFinite(nextIndex) || !_this.props.canJumpToTab(_this.props.navigationState.routes[nextIndex])) {
          nextIndex = currentIndex;
        }

        _this._transitionTo(nextIndex);
      }, _this._transitionTo = function (index) {
        var offset = -index * _this.props.layout.width;

        if (_this.props.animationEnabled === false) {
          _this.props.panX.setValue(0);

          _this.props.offsetX.setValue(offset);

          return;
        }

        var timing = DefaultTransitionSpec.timing,
            transitionConfig = babelHelpers.objectWithoutProperties(DefaultTransitionSpec, ["timing"]);

        _reactNative.Animated.parallel([timing(_this.props.panX, babelHelpers.extends({}, transitionConfig, {
          toValue: 0
        })), timing(_this.props.offsetX, babelHelpers.extends({}, transitionConfig, {
          toValue: offset
        }))]).start(function (_ref2) {
          var finished = _ref2.finished;

          if (finished) {
            _this.props.jumpToIndex(index);

            _this._pendingIndex = null;
          }
        });

        _this._pendingIndex = index;
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(TabViewPagerPan, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this._panResponder = _reactNative.PanResponder.create({
          onMoveShouldSetPanResponder: this._canMoveScreen,
          onMoveShouldSetPanResponderCapture: this._canMoveScreen,
          onPanResponderGrant: this._startGesture,
          onPanResponderMove: this._respondToGesture,
          onPanResponderTerminate: this._finishGesture,
          onPanResponderRelease: this._finishGesture,
          onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
            return true;
          }
        });
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.navigationState.index !== this.props.navigationState.index) {
          this._transitionTo(this.props.navigationState.index);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            panX = _props.panX,
            offsetX = _props.offsetX,
            navigationState = _props.navigationState,
            layout = _props.layout,
            children = _props.children;
        var width = layout.width;
        var routes = navigationState.routes;
        var maxTranslate = width * (routes.length - 1);

        var translateX = _reactNative.Animated.add(panX, offsetX).interpolate({
          inputRange: [-maxTranslate, 0],
          outputRange: [-maxTranslate, 0],
          extrapolate: 'clamp'
        });

        return React.createElement(
          _reactNative.Animated.View,
          babelHelpers.extends({
            style: [styles.sheet, width ? {
              width: routes.length * width,
              transform: [{
                translateX: translateX
              }]
            } : null]
          }, this._panResponder.panHandlers, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 238
            }
          }),
          React.Children.map(children, function (child, i) {
            return React.createElement(
              _reactNative.View,
              {
                key: navigationState.routes[i].key,
                testID: navigationState.routes[i].testID,
                style: width ? {
                  width: width
                } : i === navigationState.index ? _reactNative.StyleSheet.absoluteFill : null,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 251
                }
              },
              i === navigationState.index || width ? child : null
            );
          })
        );
      }
    }]);
    return TabViewPagerPan;
  }(React.Component);

  TabViewPagerPan.propTypes = babelHelpers.extends({}, _TabViewPropTypes.PagerRendererPropType, {
    configureTransition: _propTypes2.default.func.isRequired,
    swipeDistanceThreshold: _propTypes2.default.number,
    swipeVelocityThreshold: _propTypes2.default.number,
    onSwipeStart: _propTypes2.default.func,
    onSwipeEnd: _propTypes2.default.func
  });
  TabViewPagerPan.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    },
    configureTransition: function configureTransition() {
      return DefaultTransitionSpec;
    },
    initialLayout: {
      height: 0,
      width: 0
    }
  };
  exports.default = TabViewPagerPan;

  var styles = _reactNative.StyleSheet.create({
    sheet: {
      flex: 1,
      flexDirection: 'row',
      alignItems: 'stretch'
    }
  });
},384,[108,127,12,381],"react-native-tab-view/src/TabViewPagerPan.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-tab-view/src/TabViewPagerExperimental.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _TabViewPropTypes = require(_dependencyMap[3], "./TabViewPropTypes");

  var DefaultTransitionSpec = {
    timing: _reactNative.Animated.spring,
    tension: 75,
    friction: 25
  };

  var TabViewPagerExperimental = function (_React$Component) {
    babelHelpers.inherits(TabViewPagerExperimental, _React$Component);

    function TabViewPagerExperimental() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, TabViewPagerExperimental);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabViewPagerExperimental.__proto__ || Object.getPrototypeOf(TabViewPagerExperimental)).call.apply(_ref, [this].concat(args))), _this), _this._handleHandlerStateChange = function (event) {
        var GestureHandler = _this.props.GestureHandler;

        if (event.nativeEvent.state === GestureHandler.State.END) {
          var _this$props = _this.props,
              navigationState = _this$props.navigationState,
              layout = _this$props.layout,
              _this$props$swipeDist = _this$props.swipeDistanceThreshold,
              _swipeDistanceThreshold = _this$props$swipeDist === undefined ? layout.width / 1.75 : _this$props$swipeDist,
              _this$props$swipeVelo = _this$props.swipeVelocityThreshold,
              _swipeVelocityThreshold = _this$props$swipeVelo === undefined ? 150 : _this$props$swipeVelo;

          var _event$nativeEvent = event.nativeEvent,
              translationX = _event$nativeEvent.translationX,
              translationY = _event$nativeEvent.translationY,
              velocityX = _event$nativeEvent.velocityX,
              velocityY = _event$nativeEvent.velocityY;
          var currentIndex = typeof _this._pendingIndex === 'number' ? _this._pendingIndex : navigationState.index;
          var nextIndex = currentIndex;

          if (Math.abs(translationX) > Math.abs(translationY) && Math.abs(velocityX) > Math.abs(velocityY) && (Math.abs(translationX) > _swipeDistanceThreshold || Math.abs(velocityX) > _swipeVelocityThreshold)) {
            nextIndex = Math.round(Math.min(Math.max(0, currentIndex - translationX / Math.abs(translationX)), navigationState.routes.length - 1));
          }

          if (!isFinite(nextIndex) || !_this.props.canJumpToTab(_this.props.navigationState.routes[nextIndex])) {
            nextIndex = currentIndex;
          }

          _this._transitionTo(nextIndex, velocityX);
        }
      }, _this._transitionTo = function (index, velocity) {
        var offset = -index * _this.props.layout.width;

        if (_this.props.animationEnabled === false) {
          _this.props.panX.setValue(0);

          _this.props.offsetX.setValue(offset);

          return;
        }

        var timing = DefaultTransitionSpec.timing,
            transitionConfig = babelHelpers.objectWithoutProperties(DefaultTransitionSpec, ["timing"]);
        var useNativeDriver = _this.props.useNativeDriver;

        _reactNative.Animated.parallel([timing(_this.props.panX, babelHelpers.extends({}, transitionConfig, {
          toValue: 0,
          velocity: velocity,
          useNativeDriver: useNativeDriver
        })), timing(_this.props.offsetX, babelHelpers.extends({}, transitionConfig, {
          toValue: offset,
          velocity: velocity,
          useNativeDriver: useNativeDriver
        }))]).start(function (_ref2) {
          var finished = _ref2.finished;

          if (finished) {
            _this.props.jumpToIndex(index);

            _this._pendingIndex = null;
          }
        });

        _this._pendingIndex = index;
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(TabViewPagerExperimental, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.navigationState.index !== this.props.navigationState.index) {
          this._transitionTo(this.props.navigationState.index);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            GestureHandler = _props.GestureHandler,
            panX = _props.panX,
            offsetX = _props.offsetX,
            layout = _props.layout,
            navigationState = _props.navigationState,
            swipeEnabled = _props.swipeEnabled,
            children = _props.children;
        var width = layout.width;
        var routes = navigationState.routes;
        var maxTranslate = width * (routes.length - 1);

        var translateX = _reactNative.Animated.add(panX, offsetX).interpolate({
          inputRange: [-maxTranslate, 0],
          outputRange: [-maxTranslate, 0],
          extrapolate: 'clamp'
        });

        return React.createElement(
          GestureHandler.PanGestureHandler,
          {
            enabled: layout.width !== 0 && swipeEnabled !== false,
            minDeltaX: 10,
            onGestureEvent: _reactNative.Animated.event([{
              nativeEvent: {
                translationX: this.props.panX
              }
            }], {
              useNativeDriver: this.props.useNativeDriver
            }),
            onHandlerStateChange: this._handleHandlerStateChange,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 150
            }
          },
          React.createElement(
            _reactNative.Animated.View,
            {
              style: [styles.sheet, width ? {
                width: routes.length * width,
                transform: [{
                  translateX: translateX
                }]
              } : null],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 159
              }
            },
            React.Children.map(children, function (child, i) {
              return React.createElement(
                _reactNative.View,
                {
                  key: navigationState.routes[i].key,
                  testID: navigationState.routes[i].testID,
                  style: width ? {
                    width: width
                  } : i === navigationState.index ? _reactNative.StyleSheet.absoluteFill : null,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 168
                  }
                },
                i === navigationState.index || width ? child : null
              );
            })
          )
        );
      }
    }]);
    return TabViewPagerExperimental;
  }(React.Component);

  TabViewPagerExperimental.propTypes = babelHelpers.extends({}, _TabViewPropTypes.PagerRendererPropType, {
    swipeDistanceThreshold: _propTypes2.default.number,
    swipeVelocityThreshold: _propTypes2.default.number,
    GestureHandler: _propTypes2.default.object
  });
  TabViewPagerExperimental.defaultProps = {
    GestureHandler: global.__expo && global.__expo.DangerZone ? global.__expo.DangerZone.GestureHandler : undefined,
    canJumpToTab: function canJumpToTab() {
      return true;
    }
  };
  exports.default = TabViewPagerExperimental;

  var styles = _reactNative.StyleSheet.create({
    sheet: {
      flex: 1,
      flexDirection: 'row',
      alignItems: 'stretch'
    }
  });
},385,[108,127,12,381],"react-native-tab-view/src/TabViewPagerExperimental.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-tab-view/src/TabBar.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _TouchableItem = require(_dependencyMap[3], "./TouchableItem");

  var _TouchableItem2 = babelHelpers.interopRequireDefault(_TouchableItem);

  var _TabViewPropTypes = require(_dependencyMap[4], "./TabViewPropTypes");

  var TabBar = function (_React$Component) {
    babelHelpers.inherits(TabBar, _React$Component);

    function TabBar(props) {
      babelHelpers.classCallCheck(this, TabBar);

      var _this = babelHelpers.possibleConstructorReturn(this, (TabBar.__proto__ || Object.getPrototypeOf(TabBar)).call(this, props));

      _initialiseProps.call(_this);

      var initialVisibility = 1;

      if (_this.props.scrollEnabled) {
        var tabWidth = _this._getTabWidth(_this.props);

        if (!tabWidth) {
          initialVisibility = 0;
        }
      }

      var initialOffset = _this.props.scrollEnabled && _this.props.layout.width ? {
        x: _this._getScrollAmount(_this.props, _this.props.navigationState.index),
        y: 0
      } : undefined;
      _this.state = {
        visibility: new _reactNative.Animated.Value(initialVisibility),
        scrollAmount: new _reactNative.Animated.Value(0),
        initialOffset: initialOffset
      };
      return _this;
    }

    babelHelpers.createClass(TabBar, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._adjustScroll(this.props.navigationState.index);

        this.props.scrollEnabled && this._startTrackingPosition();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var prevTabWidth = this._getTabWidth(prevProps);

        var currentTabWidth = this._getTabWidth(this.props);

        if (prevTabWidth !== currentTabWidth && currentTabWidth) {
          this.state.visibility.setValue(1);
        }

        if ((prevProps.navigationState !== this.props.navigationState || prevProps.layout !== this.props.layout || prevTabWidth !== currentTabWidth) && this.props.navigationState.index !== this._pendingIndex) {
          this._resetScroll(this.props.navigationState.index, Boolean(prevProps.layout.width));

          this._pendingIndex = null;
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._stopTrackingPosition();
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            position = _props.position,
            navigationState = _props.navigationState,
            scrollEnabled = _props.scrollEnabled;
        var routes = navigationState.routes,
            index = navigationState.index;

        var tabWidth = this._getTabWidth(this.props);

        var tabBarWidth = tabWidth * routes.length;
        var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
          return i;
        })));

        var translateX = _reactNative.Animated.multiply(this.state.scrollAmount, -1);

        return React.createElement(
          _reactNative.Animated.View,
          {
            style: [styles.tabBar, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 343
            }
          },
          React.createElement(
            _reactNative.Animated.View,
            {
              pointerEvents: "none",
              style: [styles.indicatorContainer, scrollEnabled ? {
                width: tabBarWidth,
                transform: [{
                  translateX: translateX
                }]
              } : null],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 344
              }
            },
            this._renderIndicator(babelHelpers.extends({}, this.props, {
              width: tabWidth
            }))
          ),
          React.createElement(
            _reactNative.View,
            {
              style: styles.scroll,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 358
              }
            },
            React.createElement(
              _reactNative.Animated.ScrollView,
              {
                horizontal: true,
                keyboardShouldPersistTaps: "handled",
                scrollEnabled: scrollEnabled,
                bounces: false,
                alwaysBounceHorizontal: false,
                scrollsToTop: false,
                showsHorizontalScrollIndicator: false,
                automaticallyAdjustContentInsets: false,
                overScrollMode: "never",
                contentContainerStyle: [styles.tabContent, scrollEnabled ? null : styles.container],
                scrollEventThrottle: 1,
                onScroll: _reactNative.Animated.event([{
                  nativeEvent: {
                    contentOffset: {
                      x: this.state.scrollAmount
                    }
                  }
                }], {
                  useNativeDriver: true,
                  listener: this._handleScroll
                }),
                onScrollBeginDrag: this._handleBeginDrag,
                onScrollEndDrag: this._handleEndDrag,
                onMomentumScrollBegin: this._handleMomentumScrollBegin,
                onMomentumScrollEnd: this._handleMomentumScrollEnd,
                contentOffset: this.state.initialOffset,
                ref: this._setRef,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 359
                }
              },
              routes.map(function (route, i) {
                var focused = index === i;
                var outputRange = inputRange.map(function (inputIndex) {
                  return inputIndex === i ? 1 : 0.7;
                });

                var opacity = _reactNative.Animated.multiply(_this2.state.visibility, position.interpolate({
                  inputRange: inputRange,
                  outputRange: outputRange
                }));

                var scene = {
                  route: route,
                  focused: focused,
                  index: i
                };

                var label = _this2._renderLabel(scene);

                var icon = _this2.props.renderIcon ? _this2.props.renderIcon(scene) : null;
                var badge = _this2.props.renderBadge ? _this2.props.renderBadge(scene) : null;
                var tabStyle = {};
                tabStyle.opacity = opacity;

                if (icon) {
                  if (label) {
                    tabStyle.paddingTop = 8;
                  } else {
                    tabStyle.padding = 12;
                  }
                }

                var passedTabStyle = _reactNative.StyleSheet.flatten(_this2.props.tabStyle);

                var isWidthSet = passedTabStyle && typeof passedTabStyle.width !== 'undefined' || scrollEnabled === true;
                var tabContainerStyle = {};

                if (isWidthSet) {
                  tabStyle.width = tabWidth;
                }

                if (passedTabStyle && typeof passedTabStyle.flex === 'number') {
                  tabContainerStyle.flex = passedTabStyle.flex;
                } else if (!isWidthSet) {
                  tabContainerStyle.flex = 1;
                }

                var accessibilityLabel = route.accessibilityLabel || route.title;
                return React.createElement(
                  _TouchableItem2.default,
                  {
                    borderless: true,
                    key: route.key,
                    testID: route.testID,
                    accessible: route.accessible,
                    accessibilityLabel: accessibilityLabel,
                    accessibilityTraits: "button",
                    pressColor: _this2.props.pressColor,
                    pressOpacity: _this2.props.pressOpacity,
                    delayPressIn: 0,
                    onPress: function onPress() {
                      return _this2._handleTabPress(scene);
                    },
                    style: tabContainerStyle,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 449
                    }
                  },
                  React.createElement(
                    _reactNative.View,
                    {
                      pointerEvents: "none",
                      style: styles.container,
                      __source: {
                        fileName: _jsxFileName,
                        lineNumber: 462
                      }
                    },
                    React.createElement(
                      _reactNative.Animated.View,
                      {
                        style: [styles.tabItem, tabStyle, passedTabStyle, styles.container],
                        __source: {
                          fileName: _jsxFileName,
                          lineNumber: 463
                        }
                      },
                      icon,
                      label
                    ),
                    badge ? React.createElement(
                      _reactNative.Animated.View,
                      {
                        style: [styles.badge, {
                          opacity: _this2.state.visibility
                        }],
                        __source: {
                          fileName: _jsxFileName,
                          lineNumber: 475
                        }
                      },
                      badge
                    ) : null
                  )
                );
              })
            )
          )
        );
      }
    }]);
    return TabBar;
  }(React.Component);

  TabBar.propTypes = babelHelpers.extends({}, _TabViewPropTypes.SceneRendererPropType, {
    scrollEnabled: _propTypes2.default.bool,
    pressColor: _TouchableItem2.default.propTypes.pressColor,
    pressOpacity: _TouchableItem2.default.propTypes.pressOpacity,
    getLabelText: _propTypes2.default.func,
    renderIcon: _propTypes2.default.func,
    renderLabel: _propTypes2.default.func,
    renderIndicator: _propTypes2.default.func,
    onTabPress: _propTypes2.default.func,
    labelStyle: _propTypes2.default.any,
    style: _propTypes2.default.any
  });
  TabBar.defaultProps = {
    getLabelText: function getLabelText(_ref) {
      var route = _ref.route;
      return typeof route.title === 'string' ? route.title.toUpperCase() : route.title;
    }
  };

  var _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this._isManualScroll = false;
    this._isMomentumScroll = false;
    this._scrollDelta = 0;

    this._startTrackingPosition = function () {
      _this3._offsetXListener = _this3.props.offsetX.addListener(function (_ref2) {
        var value = _ref2.value;
        _this3._lastOffsetX = value;

        _this3._handlePosition();
      });
      _this3._panXListener = _this3.props.panX.addListener(function (_ref3) {
        var value = _ref3.value;
        _this3._lastPanX = value;

        _this3._handlePosition();
      });
    };

    this._stopTrackingPosition = function () {
      _this3.props.offsetX.removeListener(_this3._offsetXListener);

      _this3.props.panX.removeListener(_this3._panXListener);
    };

    this._handlePosition = function () {
      var _props2 = _this3.props,
          navigationState = _props2.navigationState,
          layout = _props2.layout;
      var panX = typeof _this3._lastPanX === 'number' ? _this3._lastPanX : 0;
      var offsetX = typeof _this3._lastOffsetX === 'number' ? _this3._lastOffsetX : -navigationState.index * layout.width;
      var value = (panX + offsetX) / -(layout.width || 0.001);

      _this3._adjustScroll(value);
    };

    this._renderLabel = function (scene) {
      if (typeof _this3.props.renderLabel !== 'undefined') {
        return _this3.props.renderLabel(scene);
      }

      var label = _this3.props.getLabelText(scene);

      if (typeof label !== 'string') {
        return null;
      }

      return React.createElement(
        _reactNative.Animated.Text,
        {
          style: [styles.tabLabel, _this3.props.labelStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 177
          }
        },
        label
      );
    };

    this._renderIndicator = function (props) {
      if (typeof _this3.props.renderIndicator !== 'undefined') {
        return _this3.props.renderIndicator(props);
      }

      var width = props.width,
          position = props.position,
          navigationState = props.navigationState;

      var translateX = _reactNative.Animated.multiply(_reactNative.Animated.multiply(position.interpolate({
        inputRange: [0, navigationState.routes.length - 1],
        outputRange: [0, navigationState.routes.length - 1],
        extrapolate: 'clamp'
      }), width), _reactNative.I18nManager.isRTL ? -1 : 1);

      return React.createElement(_reactNative.Animated.View, {
        style: [styles.indicator, {
          width: width,
          transform: [{
            translateX: translateX
          }]
        }, _this3.props.indicatorStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 200
        }
      });
    };

    this._getTabWidth = function (props) {
      var layout = props.layout,
          navigationState = props.navigationState,
          tabStyle = props.tabStyle;

      var flattened = _reactNative.StyleSheet.flatten(tabStyle);

      if (flattened) {
        switch (typeof flattened.width) {
          case 'number':
            return flattened.width;

          case 'string':
            if (flattened.width.endsWith('%')) {
              var _width = parseFloat(flattened.width);

              if (Number.isFinite(_width)) {
                return layout.width * (_width / 100);
              }
            }

        }
      }

      if (props.scrollEnabled) {
        return layout.width / 5 * 2;
      }

      return layout.width / navigationState.routes.length;
    };

    this._handleTabPress = function (scene) {
      _this3._pendingIndex = scene.index;

      _this3.props.jumpToIndex(scene.index);

      if (_this3.props.onTabPress) {
        _this3.props.onTabPress(scene);
      }
    };

    this._handleScroll = function (event) {
      if (_this3._isManualScroll) {
        _this3._scrollDelta = _this3._getScrollAmount(_this3.props, _this3.props.navigationState.index) - event.nativeEvent.contentOffset.x;
      }
    };

    this._normalizeScrollValue = function (props, value) {
      var layout = props.layout,
          navigationState = props.navigationState;

      var tabWidth = _this3._getTabWidth(props);

      var tabBarWidth = Math.max(tabWidth * navigationState.routes.length, layout.width);
      var maxDistance = tabBarWidth - layout.width;
      return Math.max(Math.min(value, maxDistance), 0);
    };

    this._getScrollAmount = function (props, i) {
      var layout = props.layout;

      var tabWidth = _this3._getTabWidth(props);

      var centerDistance = tabWidth * (i + 1 / 2);
      var scrollAmount = centerDistance - layout.width / 2;
      return _this3._normalizeScrollValue(props, scrollAmount);
    };

    this._adjustScroll = function (value) {
      if (_this3.props.scrollEnabled) {
        global.cancelAnimationFrame(_this3._scrollResetCallback);
        _this3._scrollView && _this3._scrollView.scrollTo({
          x: _this3._normalizeScrollValue(_this3.props, _this3._getScrollAmount(_this3.props, value) - _this3._scrollDelta),
          animated: false
        });
      }
    };

    this._resetScroll = function (value) {
      var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (_this3.props.scrollEnabled) {
        global.cancelAnimationFrame(_this3._scrollResetCallback);
        _this3._scrollResetCallback = global.requestAnimationFrame(function () {
          _this3._scrollDelta = 0;
          _this3._scrollView && _this3._scrollView.scrollTo({
            x: _this3._getScrollAmount(_this3.props, value),
            animated: animated
          });
        });
      }
    };

    this._handleBeginDrag = function () {
      _this3._isManualScroll = true;
      _this3._isMomentumScroll = false;
    };

    this._handleEndDrag = function () {
      global.requestAnimationFrame(function () {
        if (_this3._isMomentumScroll) {
          return;
        }

        _this3._isManualScroll = false;
      });
    };

    this._handleMomentumScrollBegin = function () {
      _this3._isMomentumScroll = true;
    };

    this._handleMomentumScrollEnd = function () {
      _this3._isMomentumScroll = false;
      _this3._isManualScroll = false;
    };

    this._setRef = function (el) {
      return _this3._scrollView = el && el._component;
    };
  };

  exports.default = TabBar;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    },
    scroll: {
      overflow: _reactNative.Platform.OS === 'web' ? 'auto' : 'scroll'
    },
    tabBar: {
      backgroundColor: '#2196f3',
      elevation: 4,
      shadowColor: 'black',
      shadowOpacity: 0.1,
      shadowRadius: _reactNative.StyleSheet.hairlineWidth,
      shadowOffset: {
        height: _reactNative.StyleSheet.hairlineWidth
      },
      zIndex: _reactNative.Platform.OS === 'android' ? 0 : 1
    },
    tabContent: {
      flexDirection: 'row',
      flexWrap: 'nowrap'
    },
    tabLabel: {
      backgroundColor: 'transparent',
      color: 'white',
      margin: 8
    },
    tabItem: {
      flex: 1,
      padding: 8,
      alignItems: 'center',
      justifyContent: 'center'
    },
    badge: {
      position: 'absolute',
      top: 0,
      right: 0
    },
    indicatorContainer: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    indicator: {
      backgroundColor: '#ffeb3b',
      position: 'absolute',
      left: 0,
      bottom: 0,
      right: 0,
      height: 2
    }
  });
},386,[108,127,12,387,381],"react-native-tab-view/src/TabBar.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-tab-view/src/TouchableItem.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var LOLLIPOP = 21;

  var TouchableItem = function (_React$Component) {
    babelHelpers.inherits(TouchableItem, _React$Component);

    function TouchableItem() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, TouchableItem);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TouchableItem.__proto__ || Object.getPrototypeOf(TouchableItem)).call.apply(_ref, [this].concat(args))), _this), _this._handlePress = function () {
        global.requestAnimationFrame(_this.props.onPress);
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(TouchableItem, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            style = _props.style,
            pressOpacity = _props.pressOpacity,
            pressColor = _props.pressColor,
            borderless = _props.borderless,
            rest = babelHelpers.objectWithoutProperties(_props, ["style", "pressOpacity", "pressColor", "borderless"]);

        if (_reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= LOLLIPOP) {
          return React.createElement(
            _reactNative.TouchableNativeFeedback,
            babelHelpers.extends({}, rest, {
              onPress: this._handlePress,
              background: _reactNative.TouchableNativeFeedback.Ripple(pressColor, borderless),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 48
              }
            }),
            React.createElement(
              _reactNative.View,
              {
                style: style,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 53
                }
              },
              React.Children.only(this.props.children)
            )
          );
        } else {
          return React.createElement(
            _reactNative.TouchableOpacity,
            babelHelpers.extends({}, rest, {
              onPress: this._handlePress,
              style: style,
              activeOpacity: pressOpacity,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 58
              }
            }),
            this.props.children
          );
        }
      }
    }]);
    return TouchableItem;
  }(React.Component);

  TouchableItem.propTypes = {
    onPress: _propTypes2.default.func.isRequired,
    delayPressIn: _propTypes2.default.number,
    borderless: _propTypes2.default.bool,
    pressColor: _propTypes2.default.string,
    pressOpacity: _propTypes2.default.number,
    children: _propTypes2.default.node.isRequired
  };
  TouchableItem.defaultProps = {
    pressColor: 'rgba(255, 255, 255, .4)'
  };
  exports.default = TouchableItem;
},387,[108,127,12],"react-native-tab-view/src/TouchableItem.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-tab-view/src/SceneMap.js";
  exports.default = SceneMap;

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  function SceneMap(scenes) {
    var SceneComponent = function (_React$PureComponent) {
      babelHelpers.inherits(SceneComponent, _React$PureComponent);

      function SceneComponent() {
        babelHelpers.classCallCheck(this, SceneComponent);
        return babelHelpers.possibleConstructorReturn(this, (SceneComponent.__proto__ || Object.getPrototypeOf(SceneComponent)).apply(this, arguments));
      }

      babelHelpers.createClass(SceneComponent, [{
        key: "render",
        value: function render() {
          return React.createElement(scenes[this.props.route.key], this.props);
        }
      }]);
      return SceneComponent;
    }(React.PureComponent);

    return function (_ref) {
      var route = _ref.route;
      return React.createElement(SceneComponent, {
        key: route.key,
        route: route,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 12
        }
      });
    };
  }
},388,[108],"react-native-tab-view/src/SceneMap.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/withCachedChildNavigation.js";
  exports.default = withCachedChildNavigation;

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _addNavigationHelpers = require(_dependencyMap[1], "./addNavigationHelpers");

  var _addNavigationHelpers2 = babelHelpers.interopRequireDefault(_addNavigationHelpers);

  var _getChildEventSubscriber = require(_dependencyMap[2], "./getChildEventSubscriber");

  var _getChildEventSubscriber2 = babelHelpers.interopRequireDefault(_getChildEventSubscriber);

  function withCachedChildNavigation(Comp) {
    var _class, _temp2;

    var displayName = Comp.displayName || Comp.name;
    return _temp2 = _class = function (_React$PureComponent) {
      babelHelpers.inherits(_class, _React$PureComponent);

      function _class() {
        var _ref;

        var _temp, _this, _ret;

        babelHelpers.classCallCheck(this, _class);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = _class.__proto__ || Object.getPrototypeOf(_class)).call.apply(_ref, [this].concat(args))), _this), _this._updateNavigationProps = function (navigation) {
          if (!_this._childNavigationProps) {
            _this._childNavigationProps = {};
          }

          navigation.state.routes.forEach(function (route) {
            var childNavigation = _this._childNavigationProps[route.key];

            if (childNavigation && childNavigation.state === route) {
              return;
            }

            _this._childNavigationProps[route.key] = (0, _addNavigationHelpers2.default)({
              dispatch: navigation.dispatch,
              state: route,
              addListener: (0, _getChildEventSubscriber2.default)(navigation.addListener, route.key)
            });
          });
        }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
      }

      babelHelpers.createClass(_class, [{
        key: "componentWillMount",
        value: function componentWillMount() {
          this._updateNavigationProps(this.props.navigation);
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
          this._updateNavigationProps(nextProps.navigation);
        }
      }, {
        key: "render",
        value: function render() {
          return _react2.default.createElement(Comp, babelHelpers.extends({}, this.props, {
            childNavigationProps: this._childNavigationProps,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 44
            }
          }));
        }
      }]);
      return _class;
    }(_react2.default.PureComponent), _class.displayName = "withCachedChildNavigation(" + displayName + ")", _temp2;
  }
},389,[108,338,359],"react-navigation/src/withCachedChildNavigation.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/views/TabView/TabBarTop.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _reactNativeTabView = require(_dependencyMap[2], "react-native-tab-view");

  var _TabBarIcon = require(_dependencyMap[3], "./TabBarIcon");

  var _TabBarIcon2 = babelHelpers.interopRequireDefault(_TabBarIcon);

  var TabBarTop = function (_React$PureComponent) {
    babelHelpers.inherits(TabBarTop, _React$PureComponent);

    function TabBarTop() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, TabBarTop);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabBarTop.__proto__ || Object.getPrototypeOf(TabBarTop)).call.apply(_ref, [this].concat(args))), _this), _this._renderLabel = function (scene) {
        var _this$props = _this.props,
            position = _this$props.position,
            tabBarPosition = _this$props.tabBarPosition,
            navigation = _this$props.navigation,
            activeTintColor = _this$props.activeTintColor,
            inactiveTintColor = _this$props.inactiveTintColor,
            showLabel = _this$props.showLabel,
            upperCaseLabel = _this$props.upperCaseLabel,
            labelStyle = _this$props.labelStyle,
            allowFontScaling = _this$props.allowFontScaling;

        if (showLabel === false) {
          return null;
        }

        var index = scene.index;
        var routes = navigation.state.routes;
        var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
          return i;
        })));
        var outputRange = inputRange.map(function (inputIndex) {
          return inputIndex === index ? activeTintColor : inactiveTintColor;
        });
        var color = position.interpolate({
          inputRange: inputRange,
          outputRange: outputRange
        });
        var tintColor = scene.focused ? activeTintColor : inactiveTintColor;

        var label = _this.props.getLabel(babelHelpers.extends({}, scene, {
          tintColor: tintColor
        }));

        if (typeof label === 'string') {
          return _react2.default.createElement(
            _reactNative.Animated.Text,
            {
              style: [styles.label, {
                color: color
              }, labelStyle],
              allowFontScaling: allowFontScaling,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 47
              }
            },
            upperCaseLabel ? label.toUpperCase() : label
          );
        }

        if (typeof label === 'function') {
          return label(babelHelpers.extends({}, scene, {
            tintColor: tintColor
          }));
        }

        return label;
      }, _this._renderIcon = function (scene) {
        var _this$props2 = _this.props,
            position = _this$props2.position,
            navigation = _this$props2.navigation,
            activeTintColor = _this$props2.activeTintColor,
            inactiveTintColor = _this$props2.inactiveTintColor,
            renderIcon = _this$props2.renderIcon,
            showIcon = _this$props2.showIcon,
            iconStyle = _this$props2.iconStyle;

        if (showIcon === false) {
          return null;
        }

        return _react2.default.createElement(_TabBarIcon2.default, {
          position: position,
          navigation: navigation,
          activeTintColor: activeTintColor,
          inactiveTintColor: inactiveTintColor,
          renderIcon: renderIcon,
          scene: scene,
          style: [styles.icon, iconStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 76
          }
        });
      }, _this._handleOnPress = function (scene) {
        var _this$props3 = _this.props,
            getOnPress = _this$props3.getOnPress,
            jumpToIndex = _this$props3.jumpToIndex,
            navigation = _this$props3.navigation;
        var previousScene = navigation.state.routes[navigation.state.index];
        var onPress = getOnPress(previousScene, scene);

        if (onPress) {
          onPress({
            previousScene: previousScene,
            scene: scene,
            jumpToIndex: jumpToIndex
          });
        } else {
          jumpToIndex(scene.index);
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(TabBarTop, [{
      key: "render",
      value: function render() {
        var props = this.props;
        return _react2.default.createElement(_reactNativeTabView.TabBar, babelHelpers.extends({}, props, {
          onTabPress: this._handleOnPress,
          jumpToIndex: function jumpToIndex() {},
          renderIcon: this._renderIcon,
          renderLabel: this._renderLabel,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 105
          }
        }));
      }
    }]);
    return TabBarTop;
  }(_react2.default.PureComponent);

  TabBarTop.defaultProps = {
    activeTintColor: '#fff',
    inactiveTintColor: '#fff',
    showIcon: false,
    showLabel: true,
    upperCaseLabel: true,
    allowFontScaling: true
  };
  exports.default = TabBarTop;

  var styles = _reactNative.StyleSheet.create({
    icon: {
      height: 24,
      width: 24
    },
    label: {
      textAlign: 'center',
      fontSize: 13,
      margin: 8,
      backgroundColor: 'transparent'
    }
  });
},390,[108,12,379,391],"react-navigation/src/views/TabView/TabBarTop.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/views/TabView/TabBarIcon.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var TabBarIcon = function (_React$PureComponent) {
    babelHelpers.inherits(TabBarIcon, _React$PureComponent);

    function TabBarIcon() {
      babelHelpers.classCallCheck(this, TabBarIcon);
      return babelHelpers.possibleConstructorReturn(this, (TabBarIcon.__proto__ || Object.getPrototypeOf(TabBarIcon)).apply(this, arguments));
    }

    babelHelpers.createClass(TabBarIcon, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            position = _props.position,
            scene = _props.scene,
            navigation = _props.navigation,
            activeTintColor = _props.activeTintColor,
            inactiveTintColor = _props.inactiveTintColor,
            style = _props.style;
        var route = scene.route,
            index = scene.index;
        var routes = navigation.state.routes;
        var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
          return i;
        })));
        var activeOpacity = position.interpolate({
          inputRange: inputRange,
          outputRange: inputRange.map(function (i) {
            return i === index ? 1 : 0;
          })
        });
        var inactiveOpacity = position.interpolate({
          inputRange: inputRange,
          outputRange: inputRange.map(function (i) {
            return i === index ? 0 : 1;
          })
        });
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: style,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 29
            }
          },
          _react2.default.createElement(
            _reactNative.Animated.View,
            {
              style: [styles.icon, {
                opacity: activeOpacity
              }],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 30
              }
            },
            this.props.renderIcon({
              route: route,
              index: index,
              focused: true,
              tintColor: activeTintColor
            })
          ),
          _react2.default.createElement(
            _reactNative.Animated.View,
            {
              style: [styles.icon, {
                opacity: inactiveOpacity
              }],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 38
              }
            },
            this.props.renderIcon({
              route: route,
              index: index,
              focused: false,
              tintColor: inactiveTintColor
            })
          )
        );
      }
    }]);
    return TabBarIcon;
  }(_react2.default.PureComponent);

  exports.default = TabBarIcon;

  var styles = _reactNative.StyleSheet.create({
    icon: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      alignItems: 'center',
      justifyContent: 'center'
    }
  });
},391,[108,12],"react-navigation/src/views/TabView/TabBarIcon.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/views/TabView/TabBarBottom.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _TabBarIcon = require(_dependencyMap[2], "./TabBarIcon");

  var _TabBarIcon2 = babelHelpers.interopRequireDefault(_TabBarIcon);

  var _SafeAreaView = require(_dependencyMap[3], "../SafeAreaView");

  var _SafeAreaView2 = babelHelpers.interopRequireDefault(_SafeAreaView);

  var _withOrientation = require(_dependencyMap[4], "../withOrientation");

  var _withOrientation2 = babelHelpers.interopRequireDefault(_withOrientation);

  var majorVersion = parseInt(_reactNative.Platform.Version, 10);
  var isIos = _reactNative.Platform.OS === 'ios';
  var useHorizontalTabs = majorVersion >= 11 && isIos;

  var TabBarBottom = function (_React$PureComponent) {
    babelHelpers.inherits(TabBarBottom, _React$PureComponent);

    function TabBarBottom() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, TabBarBottom);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabBarBottom.__proto__ || Object.getPrototypeOf(TabBarBottom)).call.apply(_ref, [this].concat(args))), _this), _this._renderLabel = function (scene) {
        var _this$props = _this.props,
            position = _this$props.position,
            navigation = _this$props.navigation,
            activeTintColor = _this$props.activeTintColor,
            inactiveTintColor = _this$props.inactiveTintColor,
            labelStyle = _this$props.labelStyle,
            showLabel = _this$props.showLabel,
            showIcon = _this$props.showIcon,
            isLandscape = _this$props.isLandscape,
            allowFontScaling = _this$props.allowFontScaling;

        if (showLabel === false) {
          return null;
        }

        var index = scene.index;
        var routes = navigation.state.routes;
        var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
          return i;
        })));
        var outputRange = inputRange.map(function (inputIndex) {
          return inputIndex === index ? activeTintColor : inactiveTintColor;
        });
        var color = position.interpolate({
          inputRange: inputRange,
          outputRange: outputRange
        });
        var tintColor = scene.focused ? activeTintColor : inactiveTintColor;

        var label = _this.props.getLabel(babelHelpers.extends({}, scene, {
          tintColor: tintColor
        }));

        var marginLeft = 0;

        if (isLandscape && showIcon && useHorizontalTabs) {
          marginLeft = LABEL_LEFT_MARGIN;
        }

        var marginTop = 0;

        if (!isLandscape && showIcon && useHorizontalTabs) {
          marginTop = LABEL_TOP_MARGIN;
        }

        if (typeof label === 'string') {
          return _react2.default.createElement(
            _reactNative.Animated.Text,
            {
              style: [styles.label, {
                color: color,
                marginLeft: marginLeft,
                marginTop: marginTop
              }, labelStyle],
              allowFontScaling: allowFontScaling,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 70
              }
            },
            label
          );
        }

        if (typeof label === 'function') {
          return label(babelHelpers.extends({}, scene, {
            tintColor: tintColor
          }));
        }

        return label;
      }, _this._renderIcon = function (scene) {
        var _this$props2 = _this.props,
            position = _this$props2.position,
            navigation = _this$props2.navigation,
            activeTintColor = _this$props2.activeTintColor,
            inactiveTintColor = _this$props2.inactiveTintColor,
            renderIcon = _this$props2.renderIcon,
            showIcon = _this$props2.showIcon,
            showLabel = _this$props2.showLabel;

        if (showIcon === false) {
          return null;
        }

        return _react2.default.createElement(_TabBarIcon2.default, {
          position: position,
          navigation: navigation,
          activeTintColor: activeTintColor,
          inactiveTintColor: inactiveTintColor,
          renderIcon: renderIcon,
          scene: scene,
          style: showLabel && useHorizontalTabs ? {} : styles.icon,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 100
          }
        });
      }, _this._renderTestIDProps = function (scene) {
        var testIDProps = _this.props.getTestIDProps && _this.props.getTestIDProps(scene);

        return testIDProps;
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(TabBarBottom, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            position = _props.position,
            navigation = _props.navigation,
            jumpToIndex = _props.jumpToIndex,
            getOnPress = _props.getOnPress,
            getTestIDProps = _props.getTestIDProps,
            activeBackgroundColor = _props.activeBackgroundColor,
            inactiveBackgroundColor = _props.inactiveBackgroundColor,
            style = _props.style,
            animateStyle = _props.animateStyle,
            tabStyle = _props.tabStyle,
            isLandscape = _props.isLandscape;
        var routes = navigation.state.routes;
        var previousScene = routes[navigation.state.index];
        var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
          return i;
        })));
        var tabBarStyle = [styles.tabBar, isLandscape && useHorizontalTabs ? styles.tabBarLandscape : styles.tabBarPortrait, style];
        return _react2.default.createElement(
          _reactNative.Animated.View,
          {
            style: animateStyle,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 146
            }
          },
          _react2.default.createElement(
            _SafeAreaView2.default,
            {
              style: tabBarStyle,
              forceInset: {
                bottom: 'always',
                top: 'never'
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 147
              }
            },
            routes.map(function (route, index) {
              var focused = index === navigation.state.index;
              var scene = {
                route: route,
                index: index,
                focused: focused
              };

              var _onPress = getOnPress(previousScene, scene);

              var outputRange = inputRange.map(function (inputIndex) {
                return inputIndex === index ? activeBackgroundColor : inactiveBackgroundColor;
              });
              var backgroundColor = position.interpolate({
                inputRange: inputRange,
                outputRange: outputRange
              });
              var justifyContent = _this2.props.showIcon ? 'flex-end' : 'center';
              var extraProps = _this2._renderTestIDProps(scene) || {};
              var testID = extraProps.testID,
                  accessibilityLabel = extraProps.accessibilityLabel;
              return _react2.default.createElement(
                _reactNative.TouchableWithoutFeedback,
                {
                  key: route.key,
                  testID: testID,
                  accessibilityLabel: accessibilityLabel,
                  onPress: function onPress() {
                    return _onPress ? _onPress({
                      previousScene: previousScene,
                      scene: scene,
                      jumpToIndex: jumpToIndex
                    }) : jumpToIndex(index);
                  },
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 171
                  }
                },
                _react2.default.createElement(
                  _reactNative.Animated.View,
                  {
                    style: [styles.tab, isLandscape && useHorizontalTabs && styles.tabLandscape, !isLandscape && useHorizontalTabs && styles.tabPortrait, {
                      backgroundColor: backgroundColor
                    }, tabStyle],
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 181
                    }
                  },
                  _this2._renderIcon(scene),
                  _this2._renderLabel(scene)
                )
              );
            })
          )
        );
      }
    }]);
    return TabBarBottom;
  }(_react2.default.PureComponent);

  TabBarBottom.defaultProps = {
    activeTintColor: '#3478f6',
    activeBackgroundColor: 'transparent',
    inactiveTintColor: '#929292',
    inactiveBackgroundColor: 'transparent',
    showLabel: true,
    showIcon: true,
    allowFontScaling: true
  };
  var LABEL_LEFT_MARGIN = 20;
  var LABEL_TOP_MARGIN = 15;

  var styles = _reactNative.StyleSheet.create({
    tabBar: {
      backgroundColor: '#F7F7F7',
      borderTopWidth: _reactNative.StyleSheet.hairlineWidth,
      borderTopColor: 'rgba(0, 0, 0, .3)',
      flexDirection: 'row'
    },
    tabBarLandscape: {
      height: 29
    },
    tabBarPortrait: {
      height: 49
    },
    tab: {
      flex: 1,
      alignItems: isIos ? 'center' : 'stretch',
      justifyContent: 'flex-end'
    },
    tabPortrait: {
      justifyContent: 'flex-end',
      flexDirection: 'column'
    },
    tabLandscape: {
      justifyContent: 'center',
      flexDirection: 'row'
    },
    icon: {
      flexGrow: 1
    },
    label: {
      textAlign: 'center',
      fontSize: 10,
      marginBottom: 1.5,
      backgroundColor: 'transparent'
    }
  });

  exports.default = (0, _withOrientation2.default)(TabBarBottom);
},392,[108,12,391,356,357],"react-navigation/src/views/TabView/TabBarBottom.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/navigators/DrawerNavigator.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _createNavigator = require(_dependencyMap[2], "./createNavigator");

  var _createNavigator2 = babelHelpers.interopRequireDefault(_createNavigator);

  var _createNavigationContainer = require(_dependencyMap[3], "../createNavigationContainer");

  var _createNavigationContainer2 = babelHelpers.interopRequireDefault(_createNavigationContainer);

  var _TabRouter2 = require(_dependencyMap[4], "../routers/TabRouter");

  var _TabRouter3 = babelHelpers.interopRequireDefault(_TabRouter2);

  var _DrawerScreen = require(_dependencyMap[5], "../views/Drawer/DrawerScreen");

  var _DrawerScreen2 = babelHelpers.interopRequireDefault(_DrawerScreen);

  var _DrawerView = require(_dependencyMap[6], "../views/Drawer/DrawerView");

  var _DrawerView2 = babelHelpers.interopRequireDefault(_DrawerView);

  var _DrawerNavigatorItems = require(_dependencyMap[7], "../views/Drawer/DrawerNavigatorItems");

  var _DrawerNavigatorItems2 = babelHelpers.interopRequireDefault(_DrawerNavigatorItems);

  var _SafeAreaView = require(_dependencyMap[8], "../views/SafeAreaView");

  var _SafeAreaView2 = babelHelpers.interopRequireDefault(_SafeAreaView);

  var defaultContentComponent = function defaultContentComponent(props) {
    return _react2.default.createElement(
      _reactNative.ScrollView,
      {
        alwaysBounceVertical: false,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 17
        }
      },
      _react2.default.createElement(
        _SafeAreaView2.default,
        {
          forceInset: {
            top: 'always',
            horizontal: 'never'
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 18
          }
        },
        _react2.default.createElement(_DrawerNavigatorItems2.default, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 19
          }
        }))
      )
    );
  };

  var DefaultDrawerConfig = {
    drawerWidth: function drawerWidth() {
      var _Dimensions$get = _reactNative.Dimensions.get('window'),
          height = _Dimensions$get.height,
          width = _Dimensions$get.width;

      var smallerAxisSize = Math.min(height, width);
      var isLandscape = width > height;
      var isTablet = smallerAxisSize >= 600;
      var appBarHeight = _reactNative.Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;
      var maxWidth = isTablet ? 320 : 280;
      return Math.min(smallerAxisSize - appBarHeight, maxWidth);
    },
    contentComponent: defaultContentComponent,
    drawerOpenRoute: 'DrawerOpen',
    drawerCloseRoute: 'DrawerClose',
    drawerToggleRoute: 'DrawerToggle',
    drawerPosition: 'left',
    drawerBackgroundColor: 'white',
    useNativeAnimations: true
  };

  var DrawerNavigator = function DrawerNavigator(routeConfigs) {
    var _TabRouter;

    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var mergedConfig = babelHelpers.extends({}, DefaultDrawerConfig, config);
    var containerConfig = mergedConfig.containerConfig,
        drawerWidth = mergedConfig.drawerWidth,
        drawerLockMode = mergedConfig.drawerLockMode,
        contentComponent = mergedConfig.contentComponent,
        contentOptions = mergedConfig.contentOptions,
        drawerPosition = mergedConfig.drawerPosition,
        useNativeAnimations = mergedConfig.useNativeAnimations,
        drawerBackgroundColor = mergedConfig.drawerBackgroundColor,
        drawerOpenRoute = mergedConfig.drawerOpenRoute,
        drawerCloseRoute = mergedConfig.drawerCloseRoute,
        drawerToggleRoute = mergedConfig.drawerToggleRoute,
        tabsConfig = babelHelpers.objectWithoutProperties(mergedConfig, ["containerConfig", "drawerWidth", "drawerLockMode", "contentComponent", "contentOptions", "drawerPosition", "useNativeAnimations", "drawerBackgroundColor", "drawerOpenRoute", "drawerCloseRoute", "drawerToggleRoute"]);
    var contentRouter = (0, _TabRouter3.default)(routeConfigs, tabsConfig);
    var drawerRouter = (0, _TabRouter3.default)((_TabRouter = {}, babelHelpers.defineProperty(_TabRouter, drawerCloseRoute, {
      screen: (0, _createNavigator2.default)(contentRouter, routeConfigs, config)(function (props) {
        return _react2.default.createElement(_DrawerScreen2.default, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 71
          }
        }));
      })
    }), babelHelpers.defineProperty(_TabRouter, drawerOpenRoute, {
      screen: function screen() {
        return null;
      }
    }), babelHelpers.defineProperty(_TabRouter, drawerToggleRoute, {
      screen: function screen() {
        return null;
      }
    }), _TabRouter), {
      initialRouteName: drawerCloseRoute
    });
    var navigator = (0, _createNavigator2.default)(drawerRouter, routeConfigs, config)(function (props) {
      return _react2.default.createElement(_DrawerView2.default, babelHelpers.extends({}, props, {
        drawerBackgroundColor: drawerBackgroundColor,
        drawerLockMode: drawerLockMode,
        useNativeAnimations: useNativeAnimations,
        drawerWidth: drawerWidth,
        contentComponent: contentComponent,
        contentOptions: contentOptions,
        drawerPosition: drawerPosition,
        drawerOpenRoute: drawerOpenRoute,
        drawerCloseRoute: drawerCloseRoute,
        drawerToggleRoute: drawerToggleRoute,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 88
        }
      }));
    });
    return (0, _createNavigationContainer2.default)(navigator);
  };

  exports.default = DrawerNavigator;
},393,[108,12,341,335,377,394,395,398,356],"react-navigation/src/navigators/DrawerNavigator.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/views/Drawer/DrawerScreen.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _SceneView = require(_dependencyMap[1], "../SceneView");

  var _SceneView2 = babelHelpers.interopRequireDefault(_SceneView);

  var _withCachedChildNavigation = require(_dependencyMap[2], "../../withCachedChildNavigation");

  var _withCachedChildNavigation2 = babelHelpers.interopRequireDefault(_withCachedChildNavigation);

  var DrawerScreen = function (_React$PureComponent) {
    babelHelpers.inherits(DrawerScreen, _React$PureComponent);

    function DrawerScreen() {
      babelHelpers.classCallCheck(this, DrawerScreen);
      return babelHelpers.possibleConstructorReturn(this, (DrawerScreen.__proto__ || Object.getPrototypeOf(DrawerScreen)).apply(this, arguments));
    }

    babelHelpers.createClass(DrawerScreen, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            router = _props.router,
            navigation = _props.navigation,
            childNavigationProps = _props.childNavigationProps,
            screenProps = _props.screenProps;
        var _navigation$state = navigation.state,
            routes = _navigation$state.routes,
            index = _navigation$state.index;
        var childNavigation = childNavigationProps[routes[index].key];
        var Content = router.getComponentForRouteName(routes[index].routeName);
        return _react2.default.createElement(_SceneView2.default, {
          screenProps: screenProps,
          component: Content,
          navigation: childNavigation,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 21
          }
        });
      }
    }]);
    return DrawerScreen;
  }(_react2.default.PureComponent);

  exports.default = (0, _withCachedChildNavigation2.default)(DrawerScreen);
},394,[108,360,389],"react-navigation/src/views/Drawer/DrawerScreen.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/views/Drawer/DrawerView.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _reactNativeDrawerLayoutPolyfill = require(_dependencyMap[2], "react-native-drawer-layout-polyfill");

  var _reactNativeDrawerLayoutPolyfill2 = babelHelpers.interopRequireDefault(_reactNativeDrawerLayoutPolyfill);

  var _addNavigationHelpers = require(_dependencyMap[3], "../../addNavigationHelpers");

  var _addNavigationHelpers2 = babelHelpers.interopRequireDefault(_addNavigationHelpers);

  var _DrawerSidebar = require(_dependencyMap[4], "./DrawerSidebar");

  var _DrawerSidebar2 = babelHelpers.interopRequireDefault(_DrawerSidebar);

  var _getChildEventSubscriber = require(_dependencyMap[5], "../../getChildEventSubscriber");

  var _getChildEventSubscriber2 = babelHelpers.interopRequireDefault(_getChildEventSubscriber);

  var DrawerView = function (_React$PureComponent) {
    babelHelpers.inherits(DrawerView, _React$PureComponent);

    function DrawerView() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, DrawerView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = DrawerView.__proto__ || Object.getPrototypeOf(DrawerView)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        drawerWidth: typeof _this.props.drawerWidth === 'function' ? _this.props.drawerWidth() : _this.props.drawerWidth
      }, _this._handleDrawerOpen = function () {
        var _this$props = _this.props,
            navigation = _this$props.navigation,
            drawerOpenRoute = _this$props.drawerOpenRoute;
        var _navigation$state = navigation.state,
            routes = _navigation$state.routes,
            index = _navigation$state.index;

        if (routes[index].routeName !== drawerOpenRoute) {
          _this.props.navigation.navigate(drawerOpenRoute);
        }
      }, _this._handleDrawerClose = function () {
        var _this$props2 = _this.props,
            navigation = _this$props2.navigation,
            drawerCloseRoute = _this$props2.drawerCloseRoute;
        var _navigation$state2 = navigation.state,
            routes = _navigation$state2.routes,
            index = _navigation$state2.index;

        if (routes[index].routeName !== drawerCloseRoute) {
          _this.props.navigation.navigate(drawerCloseRoute);
        }
      }, _this._updateScreenNavigation = function (navigation) {
        var drawerCloseRoute = _this.props.drawerCloseRoute;
        var navigationState = navigation.state.routes.find(function (route) {
          return route.routeName === drawerCloseRoute;
        });

        if (_this._screenNavigationProp && _this._screenNavigationProp.state === navigationState) {
          return;
        }

        _this._screenNavigationProp = (0, _addNavigationHelpers2.default)({
          dispatch: navigation.dispatch,
          state: navigationState,
          addListener: (0, _getChildEventSubscriber2.default)(navigation.addListener, navigationState.key)
        });
      }, _this._updateWidth = function () {
        var drawerWidth = typeof _this.props.drawerWidth === 'function' ? _this.props.drawerWidth() : _this.props.drawerWidth;

        if (_this.state.drawerWidth !== drawerWidth) {
          _this.setState({
            drawerWidth: drawerWidth
          });
        }
      }, _this._getNavigationState = function (navigation) {
        var drawerCloseRoute = _this.props.drawerCloseRoute;
        var navigationState = navigation.state.routes.find(function (route) {
          return route.routeName === drawerCloseRoute;
        });
        return navigationState;
      }, _this._renderNavigationView = function () {
        return _react2.default.createElement(_DrawerSidebar2.default, {
          screenProps: _this.props.screenProps,
          navigation: _this._screenNavigationProp,
          router: _this.props.router,
          contentComponent: _this.props.contentComponent,
          contentOptions: _this.props.contentOptions,
          drawerPosition: _this.props.drawerPosition,
          style: _this.props.style,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 112
          }
        });
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(DrawerView, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this._updateScreenNavigation(this.props.navigation);

        _reactNative.Dimensions.addEventListener('change', this._updateWidth);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _reactNative.Dimensions.removeEventListener('change', this._updateWidth);
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        if (this.props.navigation.state.index !== nextProps.navigation.state.index) {
          var _props = this.props,
              drawerOpenRoute = _props.drawerOpenRoute,
              drawerCloseRoute = _props.drawerCloseRoute,
              drawerToggleRoute = _props.drawerToggleRoute;
          var _nextProps$navigation = nextProps.navigation.state,
              routes = _nextProps$navigation.routes,
              index = _nextProps$navigation.index;

          if (routes[index].routeName === drawerOpenRoute) {
            this._drawer.openDrawer();
          } else if (routes[index].routeName === drawerToggleRoute) {
            if (this.props.navigation.state.index === 0) {
              this.props.navigation.navigate(drawerOpenRoute);
            } else {
              this.props.navigation.navigate(drawerCloseRoute);
            }
          } else {
            this._drawer.closeDrawer();
          }
        }

        this._updateScreenNavigation(nextProps.navigation);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var DrawerScreen = this.props.router.getComponentForRouteName(this.props.drawerCloseRoute);
        var config = this.props.router.getScreenOptions(this._screenNavigationProp, this.props.screenProps);
        return _react2.default.createElement(
          _reactNativeDrawerLayoutPolyfill2.default,
          {
            ref: function ref(c) {
              _this2._drawer = c;
            },
            drawerLockMode: this.props.screenProps && this.props.screenProps.drawerLockMode || config && config.drawerLockMode,
            drawerBackgroundColor: this.props.drawerBackgroundColor,
            drawerWidth: this.state.drawerWidth,
            onDrawerOpen: this._handleDrawerOpen,
            onDrawerClose: this._handleDrawerClose,
            useNativeAnimations: this.props.useNativeAnimations,
            renderNavigationView: this._renderNavigationView,
            drawerPosition: this.props.drawerPosition === 'right' ? _reactNativeDrawerLayoutPolyfill2.default.positions.Right : _reactNativeDrawerLayoutPolyfill2.default.positions.Left,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 134
            }
          },
          _react2.default.createElement(DrawerScreen, {
            screenProps: this.props.screenProps,
            navigation: this._screenNavigationProp,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 154
            }
          })
        );
      }
    }]);
    return DrawerView;
  }(_react2.default.PureComponent);

  exports.default = DrawerView;
},395,[108,12,396,338,397,359],"react-navigation/src/views/Drawer/DrawerView.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], 'react-native');

  exports.default = _reactNative.DrawerLayoutAndroid;
},396,[12],"react-native-drawer-layout-polyfill/dist/index.android.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/views/Drawer/DrawerSidebar.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _withCachedChildNavigation = require(_dependencyMap[2], "../../withCachedChildNavigation");

  var _withCachedChildNavigation2 = babelHelpers.interopRequireDefault(_withCachedChildNavigation);

  var _NavigationActions = require(_dependencyMap[3], "../../NavigationActions");

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  var _invariant = require(_dependencyMap[4], "../../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _SafeAreaView = require(_dependencyMap[5], "../SafeAreaView");

  var _SafeAreaView2 = babelHelpers.interopRequireDefault(_SafeAreaView);

  var DrawerSidebar = function (_React$PureComponent) {
    babelHelpers.inherits(DrawerSidebar, _React$PureComponent);

    function DrawerSidebar() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, DrawerSidebar);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = DrawerSidebar.__proto__ || Object.getPrototypeOf(DrawerSidebar)).call.apply(_ref, [this].concat(args))), _this), _this._getScreenOptions = function (routeKey) {
        var DrawerScreen = _this.props.router.getComponentForRouteName('DrawerClose');

        (0, _invariant2.default)(DrawerScreen.router, 'NavigationComponent with routeName DrawerClose should be a Navigator');
        var childNavigation = _this.props.childNavigationProps[routeKey];
        return DrawerScreen.router.getScreenOptions(childNavigation.state.index !== undefined ? babelHelpers.extends({}, childNavigation, {
          state: babelHelpers.extends({}, childNavigation.state, {
            index: 0
          })
        }) : childNavigation, _this.props.screenProps);
      }, _this._getLabel = function (_ref2) {
        var focused = _ref2.focused,
            tintColor = _ref2.tintColor,
            route = _ref2.route;

        var _this$_getScreenOptio = _this._getScreenOptions(route.key),
            drawerLabel = _this$_getScreenOptio.drawerLabel,
            title = _this$_getScreenOptio.title;

        if (drawerLabel) {
          return typeof drawerLabel === 'function' ? drawerLabel({
            tintColor: tintColor,
            focused: focused
          }) : drawerLabel;
        }

        if (typeof title === 'string') {
          return title;
        }

        return route.routeName;
      }, _this._renderIcon = function (_ref3) {
        var focused = _ref3.focused,
            tintColor = _ref3.tintColor,
            route = _ref3.route;

        var _this$_getScreenOptio2 = _this._getScreenOptions(route.key),
            drawerIcon = _this$_getScreenOptio2.drawerIcon;

        if (drawerIcon) {
          return typeof drawerIcon === 'function' ? drawerIcon({
            tintColor: tintColor,
            focused: focused
          }) : drawerIcon;
        }

        return null;
      }, _this._onItemPress = function (_ref4) {
        var route = _ref4.route,
            focused = _ref4.focused;

        _this.props.navigation.navigate('DrawerClose');

        if (!focused) {
          var subAction = void 0;

          if (route.index !== undefined && route.index !== 0) {
            subAction = _NavigationActions2.default.reset({
              index: 0,
              actions: [_NavigationActions2.default.navigate({
                routeName: route.routes[0].routeName
              })]
            });
          }

          _this.props.navigation.navigate(route.routeName, undefined, subAction);
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(DrawerSidebar, [{
      key: "render",
      value: function render() {
        var ContentComponent = this.props.contentComponent;

        if (!ContentComponent) {
          return null;
        }

        var state = this.props.navigation.state;
        (0, _invariant2.default)(typeof state.index === 'number', 'should be set');
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: [styles.container, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 86
            }
          },
          _react2.default.createElement(ContentComponent, babelHelpers.extends({}, this.props.contentOptions, {
            navigation: this.props.navigation,
            items: state.routes,
            activeItemKey: state.routes[state.index] ? state.routes[state.index].key : null,
            screenProps: this.props.screenProps,
            getLabel: this._getLabel,
            renderIcon: this._renderIcon,
            onItemPress: this._onItemPress,
            router: this.props.router,
            drawerPosition: this.props.drawerPosition,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 87
            }
          }))
        );
      }
    }]);
    return DrawerSidebar;
  }(_react2.default.PureComponent);

  exports.default = (0, _withCachedChildNavigation2.default)(DrawerSidebar);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    }
  });
},397,[108,12,389,337,339,356],"react-navigation/src/views/Drawer/DrawerSidebar.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/views/Drawer/DrawerNavigatorItems.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _SafeAreaView = require(_dependencyMap[2], "../SafeAreaView");

  var _SafeAreaView2 = babelHelpers.interopRequireDefault(_SafeAreaView);

  var _TouchableItem = require(_dependencyMap[3], "../TouchableItem");

  var _TouchableItem2 = babelHelpers.interopRequireDefault(_TouchableItem);

  var DrawerNavigatorItems = function DrawerNavigatorItems(_ref) {
    var _ref$navigation = _ref.navigation,
        state = _ref$navigation.state,
        navigate = _ref$navigation.navigate,
        items = _ref.items,
        activeItemKey = _ref.activeItemKey,
        activeTintColor = _ref.activeTintColor,
        activeBackgroundColor = _ref.activeBackgroundColor,
        inactiveTintColor = _ref.inactiveTintColor,
        inactiveBackgroundColor = _ref.inactiveBackgroundColor,
        getLabel = _ref.getLabel,
        renderIcon = _ref.renderIcon,
        onItemPress = _ref.onItemPress,
        itemsContainerStyle = _ref.itemsContainerStyle,
        itemStyle = _ref.itemStyle,
        labelStyle = _ref.labelStyle,
        iconContainerStyle = _ref.iconContainerStyle,
        drawerPosition = _ref.drawerPosition;
    return _react2.default.createElement(
      _reactNative.View,
      {
        style: [styles.container, itemsContainerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 27
        }
      },
      items.map(function (route, index) {
        var _ref2;

        var focused = activeItemKey === route.key;
        var color = focused ? activeTintColor : inactiveTintColor;
        var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;
        var scene = {
          route: route,
          index: index,
          focused: focused,
          tintColor: color
        };
        var icon = renderIcon(scene);
        var label = getLabel(scene);
        return _react2.default.createElement(
          _TouchableItem2.default,
          {
            key: route.key,
            onPress: function onPress() {
              onItemPress({
                route: route,
                focused: focused
              });
            },
            delayPressIn: 0,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 38
            }
          },
          _react2.default.createElement(
            _SafeAreaView2.default,
            {
              style: {
                backgroundColor: backgroundColor
              },
              forceInset: (_ref2 = {}, babelHelpers.defineProperty(_ref2, drawerPosition, 'always'), babelHelpers.defineProperty(_ref2, drawerPosition === 'left' ? 'right' : 'left', 'never'), babelHelpers.defineProperty(_ref2, "vertical", 'never'), _ref2),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 45
              }
            },
            _react2.default.createElement(
              _reactNative.View,
              {
                style: [styles.item, itemStyle],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 53
                }
              },
              icon ? _react2.default.createElement(
                _reactNative.View,
                {
                  style: [styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 55
                  }
                },
                icon
              ) : null,
              typeof label === 'string' ? _react2.default.createElement(
                _reactNative.Text,
                {
                  style: [styles.label, {
                    color: color
                  }, labelStyle],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 66
                  }
                },
                label
              ) : label
            )
          )
        );
      })
    );
  };

  DrawerNavigatorItems.defaultProps = {
    activeTintColor: '#2196f3',
    activeBackgroundColor: 'rgba(0, 0, 0, .04)',
    inactiveTintColor: 'rgba(0, 0, 0, .87)',
    inactiveBackgroundColor: 'transparent'
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      paddingVertical: 4
    },
    item: {
      flexDirection: 'row',
      alignItems: 'center'
    },
    icon: {
      marginHorizontal: 16,
      width: 24,
      alignItems: 'center'
    },
    inactiveIcon: {
      opacity: 0.62
    },
    label: {
      margin: 16,
      fontWeight: 'bold'
    }
  });

  exports.default = DrawerNavigatorItems;
},398,[108,12,356,352],"react-navigation/src/views/Drawer/DrawerNavigatorItems.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-navigation/src/views/withNavigation.js";
  exports.default = withNavigation;

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _hoistNonReactStatics = require(_dependencyMap[2], "hoist-non-react-statics");

  var _hoistNonReactStatics2 = babelHelpers.interopRequireDefault(_hoistNonReactStatics);

  function withNavigation(Component) {
    var componentWithNavigation = function componentWithNavigation(props, _ref) {
      var navigation = _ref.navigation;
      return _react2.default.createElement(Component, babelHelpers.extends({}, props, {
        navigation: navigation,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 7
        }
      }));
    };

    var displayName = Component.displayName || Component.name;
    componentWithNavigation.displayName = "withNavigation(" + displayName + ")";
    componentWithNavigation.contextTypes = {
      navigation: _propTypes2.default.object.isRequired
    };
    return (0, _hoistNonReactStatics2.default)(componentWithNavigation, Component);
  }
},399,[108,127,358],"react-navigation/src/views/withNavigation.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var plugin = require(_dependencyMap[0], './lib/sqlite.core.js');

  var SQLiteFactory = plugin.SQLiteFactory;
  var config = [[false, "SQLitePlugin", "transaction", false, true, true], [false, "SQLitePlugin", "readTransaction", false, true, true], [false, "SQLitePlugin", "close", false, false, true], [false, "SQLitePlugin", "executeSql", true, false, true], [false, "SQLitePlugin", "sqlBatch", false, false, true], [false, "SQLitePlugin", "attach", true, false, true], [false, "SQLitePlugin", "detach", false, false, true], [false, "SQLitePluginTransaction", "executeSql", true, false, false], [false, "SQLiteFactory", "deleteDatabase", false, false, true], [true, "SQLiteFactory", "openDatabase", false, false, true], [false, "SQLiteFactory", "echoTest", false, false, true]];
  var originalFns = {};
  config.forEach(function (entry) {
    var _entry = babelHelpers.slicedToArray(entry, 3),
        returnValueExpected = _entry[0],
        prototype = _entry[1],
        fn = _entry[2];

    var originalFn = plugin[prototype].prototype[fn];
    originalFns[prototype + "." + fn] = originalFn;
  });

  function enablePromiseRuntime(enable) {
    if (enable) {
      createPromiseRuntime();
    } else {
      createCallbackRuntime();
    }
  }

  function createCallbackRuntime() {
    config.forEach(function (entry) {
      var _entry2 = babelHelpers.slicedToArray(entry, 6),
          returnValueExpected = _entry2[0],
          prototype = _entry2[1],
          fn = _entry2[2],
          argsNeedPadding = _entry2[3],
          reverseCallbacks = _entry2[4],
          rejectOnError = _entry2[5];

      plugin[prototype].prototype[fn] = originalFns[prototype + "." + fn];
    });
    console.log("Callback based runtime ready");
  }

  function createPromiseRuntime() {
    config.forEach(function (entry) {
      var _entry3 = babelHelpers.slicedToArray(entry, 6),
          returnValueExpected = _entry3[0],
          prototype = _entry3[1],
          fn = _entry3[2],
          argsNeedPadding = _entry3[3],
          reverseCallbacks = _entry3[4],
          rejectOnError = _entry3[5];

      var originalFn = plugin[prototype].prototype[fn];

      plugin[prototype].prototype[fn] = function () {
        var _this = this;

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        if (argsNeedPadding && args.length == 1) {
          args.push([]);
        }

        var promise = new Promise(function (resolve, reject) {
          var success = function success() {
            if (!returnValueExpected) {
              for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }

              return resolve(args);
            }
          };

          var error = function error(err) {
            var _console;

            (_console = console).log.apply(_console, ['error: ', fn].concat(babelHelpers.toConsumableArray(args), [arguments]));

            if (rejectOnError) {
              reject(err);
            }

            return false;
          };

          var retValue = originalFn.call.apply(originalFn, [_this].concat(babelHelpers.toConsumableArray(args), [reverseCallbacks ? error : success, reverseCallbacks ? success : error]));

          if (returnValueExpected) {
            return resolve(retValue);
          }
        });
        return promise;
      };
    });
    console.log("Promise based runtime ready");
  }

  SQLiteFactory.prototype.enablePromise = enablePromiseRuntime;
  module.exports = new SQLiteFactory();
},400,[401],"react-native-sqlite-storage/sqlite.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var NativeModules = require(_dependencyMap[0], 'react-native').NativeModules;

  var DB_STATE_INIT, DB_STATE_OPEN, READ_ONLY_REGEX, SQLiteFactory, SQLitePlugin, SQLitePluginTransaction, argsArray, dblocations, newSQLError, nextTick, root, txLocks;
  var plugin = {};
  READ_ONLY_REGEX = /^(\s|;)*(?:alter|create|delete|drop|insert|reindex|replace|update)/i;
  DB_STATE_INIT = "INIT";
  DB_STATE_OPEN = "OPEN";
  txLocks = {};

  newSQLError = function newSQLError(error, code) {
    var sqlError;
    sqlError = error;

    if (!code) {
      code = 0;
    }

    if (!sqlError) {
      sqlError = new Error("a plugin had an error but provided no response");
      sqlError.code = code;
    }

    if (typeof sqlError === "string") {
      sqlError = new Error(error);
      sqlError.code = code;
    }

    if (!sqlError.code && sqlError.message) {
      sqlError.code = code;
    }

    if (!sqlError.code && !sqlError.message) {
      sqlError = new Error("an unknown error was returned: " + JSON.stringify(sqlError));
      sqlError.code = code;
    }

    return sqlError;
  };

  nextTick = window.setImmediate || function (fun) {
    window.setTimeout(fun, 0);
  };

  argsArray = function argsArray(fun) {
    return function () {
      var args, i, len;
      len = arguments.length;

      if (len) {
        args = [];
        i = -1;

        while (++i < len) {
          args[i] = arguments[i];
        }

        return fun.call(this, args);
      } else {
        return fun.call(this, []);
      }
    };
  };

  plugin.exec = function (method, options, success, error) {
    if (plugin.sqlitePlugin.DEBUG) {
      console.log('SQLite.' + method + '(' + JSON.stringify(options) + ')');
    }

    NativeModules["SQLite"][method](options, success, error);
  };

  SQLitePlugin = function SQLitePlugin(openargs, openSuccess, openError) {
    var dbname;

    if (!(openargs && openargs['name'])) {
      throw newSQLError("Cannot create a SQLitePlugin db instance without a db name");
    }

    dbname = openargs.name;

    if (typeof dbname !== 'string') {
      throw newSQLError('sqlite plugin database name must be a string');
    }

    this.openargs = openargs;
    this.dbname = dbname;
    this.openSuccess = openSuccess;
    this.openError = openError;
    this.openSuccess || (this.openSuccess = function () {
      console.log("DB opened: " + dbname);
    });
    this.openError || (this.openError = function (e) {
      console.log(e.message);
    });
    this.open(this.openSuccess, this.openError);
  };

  SQLitePlugin.prototype.databaseFeatures = {
    isSQLitePluginDatabase: true
  };
  SQLitePlugin.prototype.openDBs = {};

  SQLitePlugin.prototype.addTransaction = function (t) {
    if (!txLocks[this.dbname]) {
      txLocks[this.dbname] = {
        queue: [],
        inProgress: false
      };
    }

    txLocks[this.dbname].queue.push(t);

    if (this.dbname in this.openDBs && this.openDBs[this.dbname] !== DB_STATE_INIT) {
      this.startNextTransaction();
    } else {
      if (this.dbname in this.openDBs) {
        console.log('new transaction is waiting for open operation');
      } else {
        console.log('database is closed, new transaction is [stuck] waiting until db is opened again!');
      }
    }
  };

  SQLitePlugin.prototype.transaction = function (fn, error, success) {
    if (!this.openDBs[this.dbname]) {
      error(newSQLError('database not open'));
      return;
    }

    this.addTransaction(new SQLitePluginTransaction(this, fn, error, success, true, false));
  };

  SQLitePlugin.prototype.readTransaction = function (fn, error, success) {
    if (!this.openDBs[this.dbname]) {
      error(newSQLError('database not open'));
      return;
    }

    this.addTransaction(new SQLitePluginTransaction(this, fn, error, success, false, true));
  };

  SQLitePlugin.prototype.startNextTransaction = function () {
    var self;
    self = this;
    nextTick(function (_this) {
      return function () {
        var txLock;

        if (!(_this.dbname in _this.openDBs) || _this.openDBs[_this.dbname] !== DB_STATE_OPEN) {
          console.log('cannot start next transaction: database not open');
          return;
        }

        txLock = txLocks[self.dbname];

        if (!txLock) {
          console.log('cannot start next transaction: database connection is lost');
        } else if (txLock.queue.length > 0 && !txLock.inProgress) {
          txLock.inProgress = true;
          txLock.queue.shift().start();
        }
      };
    }(this));
  };

  SQLitePlugin.prototype.abortAllPendingTransactions = function () {
    var j, len1, ref, tx, txLock;
    txLock = txLocks[this.dbname];

    if (!!txLock && txLock.queue.length > 0) {
      ref = txLock.queue;

      for (j = 0, len1 = ref.length; j < len1; j++) {
        tx = ref[j];
        tx.abortFromQ(newSQLError('Invalid database handle'));
      }

      txLock.queue = [];
      txLock.inProgress = false;
    }
  };

  SQLitePlugin.prototype.sqlBatch = function (sqlStatements, success, error) {
    var batchList, j, len1, myfn, st;

    if (!sqlStatements || sqlStatements.constructor !== Array) {
      throw newSQLError('sqlBatch expects an array');
    }

    batchList = [];

    for (j = 0, len1 = sqlStatements.length; j < len1; j++) {
      st = sqlStatements[j];

      if (st.constructor === Array) {
        if (st.length === 0) {
          throw newSQLError('sqlBatch array element of zero (0) length');
        }

        batchList.push({
          sql: st[0],
          params: st.length === 0 ? [] : st[1]
        });
      } else {
        batchList.push({
          sql: st,
          params: []
        });
      }
    }

    myfn = function myfn(tx) {
      var elem, k, len2, results;
      results = [];

      for (k = 0, len2 = batchList.length; k < len2; k++) {
        elem = batchList[k];
        results.push(tx.addStatement(elem.sql, elem.params, null, null));
      }

      return results;
    };

    var mysuccess = function mysuccess() {
      if (!!success) {
        return success();
      }
    };

    var myerror = function myerror(e) {
      if (!!error) {
        return error(e);
      } else {
        console.log("Error handler not provided: ", e);
      }
    };

    this.addTransaction(new SQLitePluginTransaction(this, myfn, myerror, mysuccess, true, false));
  };

  SQLitePlugin.prototype.open = function (success, error) {
    var openerrorcb, opensuccesscb;

    if (this.dbname in this.openDBs && this.openDBs[this.dbname] === DB_STATE_OPEN) {
      console.log('database already open: ' + this.dbname);
      nextTick(function (_this) {
        return function () {
          success(_this);
        };
      }(this));
    } else {
      console.log('OPEN database: ' + this.dbname);

      opensuccesscb = function (_this) {
        return function () {
          var txLock;

          if (!_this.openDBs[_this.dbname]) {
            console.log('database was closed during open operation');
          }

          if (_this.dbname in _this.openDBs) {
            _this.openDBs[_this.dbname] = DB_STATE_OPEN;
          }

          if (!!success) {
            success(_this);
          }

          txLock = txLocks[_this.dbname];

          if (!!txLock && txLock.queue.length > 0 && !txLock.inProgress) {
            _this.startNextTransaction();
          }
        };
      }(this);

      openerrorcb = function (_this) {
        return function () {
          console.log('OPEN database: ' + _this.dbname + ' failed, aborting any pending transactions');

          if (!!error) {
            error(newSQLError('Could not open database'));
          }

          delete _this.openDBs[_this.dbname];

          _this.abortAllPendingTransactions();
        };
      }(this);

      this.openDBs[this.dbname] = DB_STATE_INIT;
      plugin.exec("open", this.openargs, opensuccesscb, openerrorcb);
    }
  };

  SQLitePlugin.prototype.close = function (success, error) {
    if (this.dbname in this.openDBs) {
      if (txLocks[this.dbname] && txLocks[this.dbname].inProgress) {
        console.log('cannot close: transaction is in progress');
        error(newSQLError('database cannot be closed while a transaction is in progress'));
        return;
      }

      console.log('CLOSE database: ' + this.dbname);
      delete this.openDBs[this.dbname];

      if (txLocks[this.dbname]) {
        console.log('closing db with transaction queue length: ' + txLocks[this.dbname].queue.length);
      } else {
        console.log('closing db with no transaction lock state');
      }

      var mysuccess = function mysuccess(t, r) {
        if (!!success) {
          return success(r);
        }
      };

      var myerror = function myerror(t, e) {
        if (!!error) {
          return error(e);
        } else {
          console.log("Error handler not provided: ", e);
        }
      };

      plugin.exec("close", {
        path: this.dbname
      }, mysuccess, myerror);
    } else {
      var err = 'cannot close: database is not open';
      console.log(err);

      if (error) {
        nextTick(function () {
          return error(err);
        });
      }
    }
  };

  SQLitePlugin.prototype.attach = function (dbNameToAttach, dbAlias, success, error) {
    if (this.dbname in this.openDBs) {
      if (txLocks[this.dbname] && txLocks[this.dbname].inProgress) {
        console.log('cannot attach: transaction is in progress');
        error(newSQLError('database cannot be attached while a transaction is in progress'));
        return;
      }

      console.log('ATTACH database ' + dbNameToAttach + ' to ' + this.dbname + ' with alias ' + dbAlias);

      var mysuccess = function mysuccess(t, r) {
        if (!!success) {
          return success(r);
        }
      };

      var myerror = function myerror(e) {
        if (!!error) {
          return error(e);
        } else {
          console.log("Error handler not provided: ", e);
        }
      };

      plugin.exec("attach", {
        path: this.dbname,
        dbName: dbNameToAttach,
        dbAlias: dbAlias
      }, mysuccess, myerror);
    } else {
      var err = 'cannot attach: database is not open';

      if (error) {
        nextTick(function () {
          return error(err);
        });
      }
    }
  };

  SQLitePlugin.prototype.detach = function (dbAlias, success, error) {
    if (this.dbname in this.openDBs) {
      if (txLocks[this.dbname] && txLocks[this.dbname].inProgress) {
        console.log('cannot attach: transaction is in progress');
        error(newSQLError('database cannot be attached while a transaction is in progress'));
        return;
      }

      console.log('DETACH database ' + dbAlias + ' from ' + this.dbname);

      var mysuccess = function mysuccess(t, r) {
        if (!!success) {
          return success(r);
        }
      };

      var myerror = function myerror(e) {
        console.log('ERR', e);

        if (!!error) {
          return error(e);
        } else {
          console.log("Error handler not provided: ", e);
        }
      };

      this.executeSql('DETACH DATABASE ' + dbAlias, [], mysuccess, myerror);
    } else {
      var err = 'cannot attach: database is not open';
      console.log(err);

      if (error) {
        nextTick(function () {
          return error(err);
        });
      }
    }
  };

  SQLitePlugin.prototype.executeSql = function (statement, params, success, error) {
    var myerror, myfn, mysuccess;

    mysuccess = function mysuccess(t, r) {
      if (!!success) {
        return success(r);
      }
    };

    myerror = function myerror(t, e) {
      if (!!error) {
        return error(e);
      } else {
        console.log("Error handler not provided: ", e);
      }
    };

    myfn = function myfn(tx) {
      tx.addStatement(statement, params, mysuccess, myerror);
    };

    this.addTransaction(new SQLitePluginTransaction(this, myfn, null, null, false, false));
  };

  SQLitePluginTransaction = function SQLitePluginTransaction(db, fn, error, success, txlock, readOnly) {
    if (typeof fn !== "function") {
      var err = newSQLError("transaction expected a function");

      if (!!error) {
        return error(err);
      } else {
        throw err;
      }
    }

    this.db = db;
    this.fn = fn;
    this.error = error;
    this.success = success;
    this.txlock = txlock;
    this.readOnly = readOnly;
    this.executes = [];

    if (txlock) {
      this.addStatement("BEGIN", [], null, function (tx, err) {
        throw newSQLError("unable to begin transaction: " + err.message, err.code);
      });
    } else {
      this.addStatement("SELECT 1", [], null, null);
    }
  };

  SQLitePluginTransaction.prototype.start = function () {
    var err;

    try {
      this.fn(this);
      this.run();
    } catch (_error) {
      err = _error;
      txLocks[this.db.dbname].inProgress = false;
      this.db.startNextTransaction();

      if (this.error) {
        this.error(newSQLError(err));
      }
    }
  };

  SQLitePluginTransaction.prototype.executeSql = function (sql, values, success, error) {
    var that = this;

    if (that.finalized) {
      throw {
        message: 'InvalidStateError: DOM Exception 11: This transaction is already finalized. Transactions are committed' + ' after its success or failure handlers are called. If you are using a Promise to handle callbacks, be aware that' + ' implementations following the A+ standard adhere to run-to-completion semantics and so Promise resolution occurs' + ' on a subsequent tick and therefore after the transaction commits.',
        code: 11
      };
    }

    if (that.readOnly && READ_ONLY_REGEX.test(sql)) {
      that.handleStatementFailure(error, {
        message: 'invalid sql for a read-only transaction'
      });
      return;
    }

    var mysuccess = function mysuccess(t, r) {
      if (!!success) {
        return success(t, r);
      }
    };

    var myerror = function myerror(t, e) {
      if (!!error) {
        return error(e);
      } else {
        console.log("Error handler not provided: ", e);
      }
    };

    that.addStatement(sql, values, mysuccess, myerror);
  };

  SQLitePluginTransaction.prototype.addStatement = function (sql, values, success, error) {
    var j, len1, params, sqlStatement, t, v;
    sqlStatement = typeof sql === 'string' ? sql : sql.toString();
    params = [];

    if (!!values && values.constructor === Array) {
      for (j = 0, len1 = values.length; j < len1; j++) {
        v = values[j];
        t = typeof v;

        if (v === null || v === void 0 || t === 'number' || t === 'string') {
          params.push(v);
        } else if (t === 'boolean') {
          params.push(~~v);
        } else if (t !== 'function') {
          params.push(v.toString());
          console.warn('addStatement - parameter of type <' + t + '> converted to string using toString()');
        } else {
          var errorMsg = 'Unsupported parameter type <' + t + '> found in addStatement()';
          console.error(errorMsg);
          error(newSQLError(errorMsg));
          return;
        }
      }
    }

    this.executes.push({
      success: success,
      error: error,
      sql: sqlStatement,
      params: params
    });
  };

  SQLitePluginTransaction.prototype.handleStatementSuccess = function (handler, response) {
    var payload, rows;

    if (!handler) {
      return;
    }

    rows = response.rows || [];
    payload = {
      rows: {
        item: function item(i) {
          return rows[i];
        },
        raw: function raw() {
          return rows.slice();
        },
        length: rows.length
      },
      rowsAffected: response.rowsAffected || 0,
      insertId: response.insertId || void 0
    };
    handler(this, payload);
  };

  SQLitePluginTransaction.prototype.handleStatementFailure = function (handler, response) {
    if (!handler) {
      throw newSQLError("a statement with no error handler failed: " + response.message, response.code);
    }

    if (handler(this, response) !== false) {
      throw newSQLError("a statement error callback did not return false: " + response.message, response.code);
    }
  };

  SQLitePluginTransaction.prototype.run = function () {
    var batchExecutes, handlerFor, i, callbacks, request, tropts, tx, txFailure, waiting;
    txFailure = null;
    tropts = [];
    batchExecutes = this.executes;
    waiting = batchExecutes.length;
    this.executes = [];
    tx = this;

    handlerFor = function handlerFor(index, didSucceed) {
      return function (response) {
        if (!txFailure) {
          try {
            if (didSucceed) {
              tx.handleStatementSuccess(batchExecutes[index].success, response);
            } else {
              tx.handleStatementFailure(batchExecutes[index].error, newSQLError(response));
            }
          } catch (err) {
            var errorMsg = JSON.stringify(err);
            if (errorMsg === "{}") errorMsg = err.toString();
            console.log("warning - exception while invoking a callback: " + errorMsg);
          }

          if (!didSucceed) {
            txFailure = newSQLError(response);
          }
        }

        if (--waiting === 0) {
          if (txFailure) {
            tx.executes = [];
            tx.abort(txFailure);
          } else if (tx.executes.length > 0) {
            tx.run();
          } else {
            tx.finish();
          }
        }
      };
    };

    i = 0;
    callbacks = [];

    while (i < batchExecutes.length) {
      request = batchExecutes[i];
      callbacks.push({
        success: handlerFor(i, true),
        error: handlerFor(i, false)
      });
      tropts.push({
        qid: 1111,
        sql: request.sql,
        params: request.params
      });
      i++;
    }

    var mysuccess = function mysuccess(result) {
      var j, last, q, r, res, type;

      if (result.length == 0) {
        return;
      }

      last = result.length - 1;

      for (j = 0; j <= last; ++j) {
        r = result[j];
        type = r.type;
        res = r.result;
        q = callbacks[j];

        if (q) {
          if (q[type]) {
            q[type](res);
          }
        }
      }
    };

    var myerror = function myerror(error) {
      console.log("batch execution error: ", error);
    };

    plugin.exec("backgroundExecuteSqlBatch", {
      dbargs: {
        dbname: this.db.dbname
      },
      executes: tropts
    }, mysuccess, myerror);
  };

  SQLitePluginTransaction.prototype.abort = function (txFailure) {
    var failed, succeeded, tx;

    if (this.finalized) {
      return;
    }

    tx = this;

    succeeded = function succeeded(tx) {
      txLocks[tx.db.dbname].inProgress = false;
      tx.db.startNextTransaction();

      if (tx.error) {
        tx.error(txFailure);
      }
    };

    failed = function failed(tx, err) {
      txLocks[tx.db.dbname].inProgress = false;
      tx.db.startNextTransaction();

      if (tx.error) {
        tx.error(newSQLError("error while trying to roll back: " + err.message, err.code));
      }
    };

    this.finalized = true;

    if (this.txlock) {
      this.addStatement("ROLLBACK", [], succeeded, failed);
      this.run();
    } else {
      succeeded(tx);
    }
  };

  SQLitePluginTransaction.prototype.finish = function () {
    var failed, succeeded, tx;

    if (this.finalized) {
      return;
    }

    tx = this;

    succeeded = function succeeded(tx) {
      txLocks[tx.db.dbname].inProgress = false;
      tx.db.startNextTransaction();

      if (tx.success) {
        tx.success();
      }
    };

    failed = function failed(tx, err) {
      txLocks[tx.db.dbname].inProgress = false;
      tx.db.startNextTransaction();

      if (tx.error) {
        tx.error(newSQLError("error while trying to commit: " + err.message, err.code));
      }
    };

    this.finalized = true;

    if (this.txlock) {
      this.addStatement("COMMIT", [], succeeded, failed);
      this.run();
    } else {
      succeeded(tx);
    }
  };

  SQLitePluginTransaction.prototype.abortFromQ = function (sqlerror) {
    if (this.error) {
      this.error(sqlerror);
    }
  };

  dblocations = {
    'default': 'nosync',
    'Documents': 'docs',
    'Library': 'libs'
  };

  SQLiteFactory = function SQLiteFactory() {};

  SQLiteFactory.prototype.DEBUG = function (debug) {
    console.log("Setting debug to:", debug);
    plugin.sqlitePlugin.DEBUG = debug;
  };

  SQLiteFactory.prototype.sqliteFeatures = function () {
    return {
      isSQLitePlugin: true
    };
  };

  SQLiteFactory.prototype.openDatabase = argsArray(function (args) {
    var errorcb, first, okcb, openargs, readOnly;

    if (args.length < 1) {
      return null;
    }

    first = args[0];
    openargs = null;

    okcb = errorcb = function errorcb() {};

    if (first.constructor === String) {
      openargs = {
        name: first,
        dblocation: dblocations['default']
      };

      if (args.length >= 5) {
        okcb = args[4];

        if (args.length > 5) {
          errorcb = args[5];
        }
      }
    } else {
      openargs = first;
      readOnly = !!openargs.readOnly;

      if (!readOnly && (!openargs.location || openargs.location.constructor !== String || !dblocations.hasOwnProperty(openargs.location))) {
        openargs.dblocation = dblocations['default'];
      } else {
        openargs.dblocation = dblocations[openargs.location];
      }

      if (!!openargs.createFromLocation) {
        if (openargs.createFromLocation === 1) {
          openargs.assetFilename = "1";
        } else if (typeof openargs.createFromLocation == 'string') {
          openargs.assetFilename = openargs.createFromLocation;
        }
      }

      if (!!openargs.androidDatabaseImplementation && openargs.androidDatabaseImplementation === 2) {
        openargs.androidOldDatabaseImplementation = 1;
      }

      if (!!openargs.androidLockWorkaround && openargs.androidLockWorkaround === 1) {
        openargs.androidBugWorkaround = 1;
      }

      if (args.length >= 2) {
        okcb = args[1];

        if (args.length > 2) {
          errorcb = args[2];
        }
      }
    }

    return new SQLitePlugin(openargs, okcb, errorcb);
  });

  SQLiteFactory.prototype.echoTest = function (success, error) {
    var inputTestValue = 'test-string';

    var mysuccess = function mysuccess(testValue) {
      if (testValue === inputTestValue) {
        return success();
      } else {
        return error("Mismatch: got: " + testValue + " , expected: " + inputTestValue);
      }
    };

    var myerror = function myerror(e) {
      return error(e);
    };

    plugin.exec("echoStringValue", {
      value: inputTestValue
    }, mysuccess, myerror);
  };

  SQLiteFactory.prototype.deleteDatabase = function (first, success, error) {
    var args = {};

    if (first.constructor === String) {
      args.path = first;
      args.dblocation = dblocations['default'];
    } else {
      if (!(first && first['name'])) {
        throw new Error("Please specify db name via name property");
      }

      args.path = first.name;

      if (!first.location || first.location.constructor !== String || !dblocations.hasOwnProperty(first.location)) {
        args.dblocation = dblocations['default'];
      } else {
        args.dblocation = dblocations[first.location];
      }
    }

    var mysuccess = function mysuccess(r) {
      delete SQLitePlugin.prototype.openDBs[args.path];

      if (!!success) {
        return success(r);
      }
    };

    var myerror = function myerror(e) {
      if (!!error) {
        return error(e);
      } else {
        console.log("deleteDatabase error handler not provided: ", e);
      }
    };

    plugin.exec("delete", args, mysuccess, myerror);
  };

  plugin.sqlitePlugin = {
    SQLiteFactory: SQLiteFactory,
    SQLitePluginTransaction: SQLitePluginTransaction,
    SQLitePlugin: SQLitePlugin
  };
  module.exports = plugin.sqlitePlugin;
},401,[12],"react-native-sqlite-storage/lib/sqlite.core.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/screens/Home.js";

    var _react = require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = require(_dependencyMap[1], "react-native");

    var _nativeBase = require(_dependencyMap[2], "native-base");

    var _reactNativeSqliteStorage = require(_dependencyMap[3], "react-native-sqlite-storage");

    var _reactNativeSqliteStorage2 = babelHelpers.interopRequireDefault(_reactNativeSqliteStorage);

    var _events = require(_dependencyMap[4], "../utils/events");

    var _events2 = babelHelpers.interopRequireDefault(_events);

    var HomeScreen = function (_Component) {
        babelHelpers.inherits(HomeScreen, _Component);

        function HomeScreen(props) {
            babelHelpers.classCallCheck(this, HomeScreen);

            var _this = babelHelpers.possibleConstructorReturn(this, (HomeScreen.__proto__ || Object.getPrototypeOf(HomeScreen)).call(this, props));

            _this.state = {
                customers: []
            };
            return _this;
        }

        babelHelpers.createClass(HomeScreen, [{
            key: "componentDidMount",
            value: function componentDidMount() {
                var _this2 = this;

                this.select();
                this.refreshEventCustomer = _events2.default.subscribe('RefreshCustomer', function () {
                    return _this2.select();
                });
            }
        }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                console.log('Home - componentWillUnmount');
                this.refreshEventCustomer.remove();
            }
        }, {
            key: "delete",
            value: function _delete(element) {
                var db = _reactNativeSqliteStorage2.default.openDatabase('syncapp', '1.0', 'SyncApp Database', 200000, this.openCB, this.errorCB);

                db.executeSql('DELETE FROM customer WHERE id = ?', [element.id]);
                this.select();
            }
        }, {
            key: "select",
            value: function select() {
                var _this3 = this;

                console.log('Home - select');

                var db = _reactNativeSqliteStorage2.default.openDatabase('syncapp', '1.0', 'SyncApp Database', 200000, this.openCB, this.errorCB);

                db.transaction(function (tx) {
                    tx.executeSql('SELECT * FROM customer', [], function (tx, results) {
                        var len = results.rows.length;

                        _this3.setState({
                            customers: []
                        });

                        for (var i = 0; i < len; i++) {
                            var row = results.rows.item(i);

                            var joined = _this3.state.customers.concat(row);

                            _this3.setState({
                                customers: joined
                            });
                        }
                    });
                });
            }
        }, {
            key: "errorCB",
            value: function errorCB(err) {
                console.log("SQLite3 Error: " + err);
            }
        }, {
            key: "openCB",
            value: function openCB() {
                console.log("Database OPENED");
            }
        }, {
            key: "render",
            value: function render() {
                var _this4 = this;

                return _react2.default.createElement(
                    _nativeBase.Container,
                    {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 78
                        }
                    },
                    _react2.default.createElement(
                        _nativeBase.Header,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 79
                            }
                        },
                        _react2.default.createElement(
                            _nativeBase.Body,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 80
                                }
                            },
                            _react2.default.createElement(
                                _nativeBase.Title,
                                {
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 81
                                    }
                                },
                                "Clientes"
                            )
                        ),
                        _react2.default.createElement(
                            _nativeBase.Right,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 83
                                }
                            },
                            _react2.default.createElement(
                                _nativeBase.Button,
                                {
                                    transparent: true,
                                    onPress: function onPress() {
                                        return _this4.props.navigation.navigate('RegisterCustomer');
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 84
                                    }
                                },
                                _react2.default.createElement(_nativeBase.Icon, {
                                    name: "person-add",
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 85
                                    }
                                })
                            )
                        )
                    ),
                    _react2.default.createElement(
                        _nativeBase.Content,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 89
                            }
                        },
                        _react2.default.createElement(_nativeBase.List, {
                            dataArray: this.state.customers,
                            renderRow: function renderRow(item) {
                                return _react2.default.createElement(
                                    _nativeBase.ListItem,
                                    {
                                        onPress: function onPress() {
                                            return _this4.props.navigation.navigate('ListPhones', {
                                                customer: item
                                            });
                                        },
                                        onLongPress: function onLongPress() {
                                            return _reactNative.Alert.alert('Atenção!', 'Escolha uma ação a ser executada:', [{
                                                text: 'Cancelar',
                                                onPress: function onPress() {
                                                    return console.log('Foi negado uma ação!');
                                                }
                                            }, {
                                                text: 'Apagar',
                                                onPress: function onPress() {
                                                    _this4.delete(item);
                                                }
                                            }, {
                                                text: 'Atualizar',
                                                onPress: function onPress() {
                                                    _this4.props.navigation.navigate('UpdateCustomer', {
                                                        customer: item
                                                    });
                                                }
                                            }], {
                                                cancelable: false
                                            });
                                        },
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 92
                                        }
                                    },
                                    _react2.default.createElement(
                                        _nativeBase.Body,
                                        {
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 115
                                            }
                                        },
                                        _react2.default.createElement(
                                            _nativeBase.Text,
                                            {
                                                style: {
                                                    fontSize: 20
                                                },
                                                __source: {
                                                    fileName: _jsxFileName,
                                                    lineNumber: 116
                                                }
                                            },
                                            item.name
                                        ),
                                        _react2.default.createElement(
                                            _nativeBase.Text,
                                            {
                                                style: {
                                                    color: '#666'
                                                },
                                                __source: {
                                                    fileName: _jsxFileName,
                                                    lineNumber: 117
                                                }
                                            },
                                            item.code
                                        )
                                    )
                                );
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 90
                            }
                        })
                    )
                );
            }
        }]);
        return HomeScreen;
    }(_react.Component);

    exports.default = HomeScreen;
},402,[108,12,403,400,671],"syncapp-mobile/screens/Home.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.mapPropsToStyleNames = exports.SwipeRow = exports.Root = exports.Segment = exports.DefaultTabBar = exports.TabContainer = exports.TabHeading = exports.ActionSheet = exports.ScrollableTab = exports.Toast = exports.View = exports.TabContent = exports.Text = exports.Grid = exports.Row = exports.Col = exports.Textarea = exports.Label = exports.Subtitle = exports.Item = exports.DeckSwiper = exports.Separator = exports.ListItem = exports.List = exports.Picker = exports.FooterTab = exports.Tabs = exports.Tab = exports.Footer = exports.Content = exports.Container = exports.Switch = exports.Spinner = exports.H3 = exports.H2 = exports.H1 = exports.CardItem = exports.Card = exports.Thumbnail = exports.Radio = exports.CheckBox = exports.Badge = exports.Body = exports.Right = exports.Left = exports.Fab = exports.Title = exports.Input = exports.InputGroup = exports.Form = exports.Header = exports.Icon = exports.IconNB = exports.Button = exports.Drawer = exports.connectStyle = exports.StyleProvider = exports.variables = exports.getTheme = undefined;

  var _nativeBaseShoutemTheme = require(_dependencyMap[0], "native-base-shoutem-theme");

  var _lodash = require(_dependencyMap[1], "lodash");

  var _reactNativeEasyGrid = require(_dependencyMap[2], "react-native-easy-grid");

  var _init = require(_dependencyMap[3], "./init");

  var _init2 = _interopRequireDefault(_init);

  var _components = require(_dependencyMap[4], "./theme/components");

  var _components2 = _interopRequireDefault(_components);

  var _platform = require(_dependencyMap[5], "./theme/variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  var _Drawer = require(_dependencyMap[6], "./basic/Drawer");

  var _Drawer2 = _interopRequireDefault(_Drawer);

  var _SwipeRow = require(_dependencyMap[7], "./basic/SwipeRow");

  var _Text = require(_dependencyMap[8], "./basic/Text");

  var _View = require(_dependencyMap[9], "./basic/View");

  var _Button = require(_dependencyMap[10], "./basic/Button");

  var _TabHeading = require(_dependencyMap[11], "./basic/TabHeading");

  var _TabContainer = require(_dependencyMap[12], "./basic/TabContainer");

  var _IconNB = require(_dependencyMap[13], "./basic/IconNB");

  var _Icon = require(_dependencyMap[14], "./basic/Icon");

  var _Header = require(_dependencyMap[15], "./basic/Header");

  var _InputGroup = require(_dependencyMap[16], "./basic/InputGroup");

  var _Input = require(_dependencyMap[17], "./basic/Input");

  var _Title = require(_dependencyMap[18], "./basic/Title");

  var _Fab = require(_dependencyMap[19], "./basic/Fab");

  var _Left = require(_dependencyMap[20], "./basic/Left");

  var _Right = require(_dependencyMap[21], "./basic/Right");

  var _Body = require(_dependencyMap[22], "./basic/Body");

  var _Badge = require(_dependencyMap[23], "./basic/Badge");

  var _Checkbox = require(_dependencyMap[24], "./basic/Checkbox");

  var _Radio = require(_dependencyMap[25], "./basic/Radio");

  var _Thumbnail = require(_dependencyMap[26], "./basic/Thumbnail");

  var _Card = require(_dependencyMap[27], "./basic/Card");

  var _CardItem = require(_dependencyMap[28], "./basic/CardItem");

  var _H = require(_dependencyMap[29], "./basic/H1");

  var _H2 = require(_dependencyMap[30], "./basic/H2");

  var _H3 = require(_dependencyMap[31], "./basic/H3");

  var _Spinner = require(_dependencyMap[32], "./basic/Spinner");

  var _Switch = require(_dependencyMap[33], "./basic/Switch");

  var _Container = require(_dependencyMap[34], "./basic/Container");

  var _Root = require(_dependencyMap[35], "./basic/Root");

  var _Content = require(_dependencyMap[36], "./basic/Content");

  var _Footer = require(_dependencyMap[37], "./basic/Footer");

  var _FooterTab = require(_dependencyMap[38], "./basic/FooterTab");

  var _Form = require(_dependencyMap[39], "./basic/Form");

  var _ToastContainer = require(_dependencyMap[40], "./basic/ToastContainer");

  var _Actionsheet = require(_dependencyMap[41], "./basic/Actionsheet");

  var _Picker = require(_dependencyMap[42], "./basic/Picker");

  var _List = require(_dependencyMap[43], "./basic/List");

  var _ListItem = require(_dependencyMap[44], "./basic/ListItem");

  var _Separator = require(_dependencyMap[45], "./basic/Separator");

  var _DeckSwiper = require(_dependencyMap[46], "./basic/DeckSwiper");

  var _Item = require(_dependencyMap[47], "./basic/Item");

  var _Segment = require(_dependencyMap[48], "./basic/Segment");

  var _Label = require(_dependencyMap[49], "./basic/Label");

  var _Textarea = require(_dependencyMap[50], "./basic/Textarea");

  var _Tab = require(_dependencyMap[51], "./basic/Tab");

  var _Tabs = require(_dependencyMap[52], "./basic/Tabs");

  var _Tabs2 = _interopRequireDefault(_Tabs);

  var _DefaultTabBar = require(_dependencyMap[53], "./basic/Tabs/DefaultTabBar");

  var _ScrollableTabBar = require(_dependencyMap[54], "./basic/Tabs/ScrollableTabBar");

  var _Subtitle = require(_dependencyMap[55], "./basic/Subtitle");

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  (0, _init2.default)();
  exports.getTheme = _components2.default;
  exports.variables = _platform2.default;
  exports.StyleProvider = _nativeBaseShoutemTheme.StyleProvider;
  exports.connectStyle = _nativeBaseShoutemTheme.connectStyle;
  exports.Drawer = _Drawer2.default;
  exports.Button = _Button.Button;
  exports.IconNB = _IconNB.IconNB;
  exports.Icon = _Icon.Icon;
  exports.Header = _Header.Header;
  exports.Form = _Form.Form;
  exports.InputGroup = _InputGroup.InputGroup;
  exports.Input = _Input.Input;
  exports.Title = _Title.Title;
  exports.Fab = _Fab.Fab;
  exports.Left = _Left.Left;
  exports.Right = _Right.Right;
  exports.Body = _Body.Body;
  exports.Badge = _Badge.Badge;
  exports.CheckBox = _Checkbox.CheckBox;
  exports.Radio = _Radio.Radio;
  exports.Thumbnail = _Thumbnail.Thumbnail;
  exports.Card = _Card.Card;
  exports.CardItem = _CardItem.CardItem;
  exports.H1 = _H.H1;
  exports.H2 = _H2.H2;
  exports.H3 = _H3.H3;
  exports.Spinner = _Spinner.Spinner;
  exports.Switch = _Switch.Switch;
  exports.Container = _Container.Container;
  exports.Content = _Content.Content;
  exports.Footer = _Footer.Footer;
  exports.Tab = _Tab.Tab;
  exports.Tabs = _Tabs2.default;
  exports.FooterTab = _FooterTab.FooterTab;
  exports.Picker = _Picker.PickerNB;
  exports.List = _List.List;
  exports.ListItem = _ListItem.ListItem;
  exports.Separator = _Separator.Separator;
  exports.DeckSwiper = _DeckSwiper.DeckSwiper;
  exports.Item = _Item.Item;
  exports.Subtitle = _Subtitle.Subtitle;
  exports.Label = _Label.Label;
  exports.Textarea = _Textarea.Textarea;
  exports.Col = _reactNativeEasyGrid.Col;
  exports.Row = _reactNativeEasyGrid.Row;
  exports.Grid = _reactNativeEasyGrid.Grid;
  exports.Text = _Text.Text;
  exports.TabContent = _Content.Content;
  exports.View = _View.ViewNB;
  exports.Toast = _ToastContainer.ToastContainer;
  exports.ScrollableTab = _ScrollableTabBar.ScrollableTab;
  exports.ActionSheet = _Actionsheet.ActionSheetContainer;
  exports.TabHeading = _TabHeading.TabHeading;
  exports.TabContainer = _TabContainer.TabContainer;
  exports.DefaultTabBar = _DefaultTabBar.DefaultTabBar;
  exports.Segment = _Segment.Segment;
  exports.Root = _Root.Root;
  exports.SwipeRow = _SwipeRow.SwipeRow;

  var mapPropsToStyleNames = function mapPropsToStyleNames(styleNames, props) {
    return (0, _lodash.keys)(props);
  };

  exports.mapPropsToStyleNames = mapPropsToStyleNames;
},403,[404,407,418,423,424,426,476,480,481,487,488,490,491,492,619,621,622,623,625,626,483,484,485,627,628,629,630,631,632,633,634,635,636,637,638,644,645,652,653,654,641,643,655,656,486,657,658,659,661,660,662,663,664,667,669,670],"native-base/dist/src/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createSharedStyle = exports.createVariations = exports.ThemeShape = exports.Theme = exports.StyleProvider = exports.INCLUDE = exports.connectStyle = undefined;

  var _connectStyle = require(_dependencyMap[0], "./src/connectStyle");

  var _connectStyle2 = babelHelpers.interopRequireDefault(_connectStyle);

  var _resolveIncludes = require(_dependencyMap[1], "./src/resolveIncludes");

  var _StyleProvider = require(_dependencyMap[2], "./src/StyleProvider");

  var _StyleProvider2 = babelHelpers.interopRequireDefault(_StyleProvider);

  var _Theme = require(_dependencyMap[3], "./src/Theme");

  var _Theme2 = babelHelpers.interopRequireDefault(_Theme);

  var _addons = require(_dependencyMap[4], "./src/addons");

  exports.connectStyle = _connectStyle2.default;
  exports.INCLUDE = _resolveIncludes.INCLUDE;
  exports.StyleProvider = _StyleProvider2.default;
  exports.Theme = _Theme2.default;
  exports.ThemeShape = _Theme.ThemeShape;
  exports.createVariations = _addons.createVariations;
  exports.createSharedStyle = _addons.createSharedStyle;
},404,[405,412,416,411,417],"native-base-shoutem-theme/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/native-base-shoutem-theme/src/connectStyle.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _hoistNonReactStatics = require(_dependencyMap[2], "hoist-non-react-statics");

  var _hoistNonReactStatics2 = babelHelpers.interopRequireDefault(_hoistNonReactStatics);

  var _lodash = require(_dependencyMap[3], "lodash");

  var _ = babelHelpers.interopRequireWildcard(_lodash);

  var _normalizeStyle = require(_dependencyMap[4], "./StyleNormalizer/normalizeStyle");

  var _normalizeStyle2 = babelHelpers.interopRequireDefault(_normalizeStyle);

  var _reactNative = require(_dependencyMap[5], "react-native");

  var _Theme = require(_dependencyMap[6], "./Theme");

  var _Theme2 = babelHelpers.interopRequireDefault(_Theme);

  var _resolveComponentStyle = require(_dependencyMap[7], "./resolveComponentStyle");

  var themeCache = {};

  function throwConnectStyleError(errorMessage, componentDisplayName) {
    throw Error(errorMessage + " - when connecting " + componentDisplayName + " component to style.");
  }

  function getTheme(context) {
    return context.theme || _Theme2.default.getDefaultTheme();
  }

  function isStyleVariant(propertyName) {
    return (/^\./.test(propertyName)
    );
  }

  function isChildStyle(propertyName) {
    return (/(^[^\.].*\.)|^\*$/.test(propertyName)
    );
  }

  function getConcreteStyle(style) {
    return _.pickBy(style, function (value, key) {
      return !isStyleVariant(key) && !isChildStyle(key);
    });
  }

  exports.default = function (componentStyleName) {
    var componentStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var mapPropsToStyleNames = arguments[2];
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    function getComponentDisplayName(WrappedComponent) {
      return WrappedComponent.displayName || WrappedComponent.name || "Component";
    }

    return function wrapWithStyledComponent(WrappedComponent) {
      var componentDisplayName = getComponentDisplayName(WrappedComponent);

      if (!_.isPlainObject(componentStyle)) {
        throwConnectStyleError("Component style must be plain object", componentDisplayName);
      }

      if (!_.isString(componentStyleName)) {
        throwConnectStyleError("Component Style Name must be string", componentDisplayName);
      }

      var StyledComponent = function (_React$Component) {
        babelHelpers.inherits(StyledComponent, _React$Component);

        function StyledComponent(props, context) {
          babelHelpers.classCallCheck(this, StyledComponent);

          var _this = babelHelpers.possibleConstructorReturn(this, (StyledComponent.__proto__ || Object.getPrototypeOf(StyledComponent)).call(this, props, context));

          var styleNames = _this.getStyleNames(props);

          var style = props.style;

          var finalStyle = _this.getFinalStyle(props, context, style, styleNames);

          _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);
          _this.resolveConnectedComponentStyle = _this.resolveConnectedComponentStyle.bind(_this);
          _this.state = {
            style: finalStyle,
            addedProps: _this.resolveAddedProps(),
            styleNames: styleNames
          };
          return _this;
        }

        babelHelpers.createClass(StyledComponent, [{
          key: "getFinalStyle",
          value: function getFinalStyle(props, context, style, styleNames) {
            var resolvedStyle = {};

            if (context.parentPath) {
              resolvedStyle = this.getOrSetStylesInCache(context, props, styleNames, [].concat(babelHelpers.toConsumableArray(context.parentPath), [componentStyleName], babelHelpers.toConsumableArray(styleNames)));
            } else {
              resolvedStyle = this.resolveStyle(context, props, styleNames);
              themeCache[componentStyleName] = resolvedStyle;
            }

            var concreteStyle = getConcreteStyle(_.merge({}, resolvedStyle));

            if (_.isArray(style)) {
              return [concreteStyle].concat(babelHelpers.toConsumableArray(style));
            }

            if (typeof style == "number" || typeof style == "object") {
              return [concreteStyle, style];
            }

            return concreteStyle;
          }
        }, {
          key: "getStyleNames",
          value: function getStyleNames(props) {
            var styleNamesArr = _.map(props, function (value, key) {
              if (typeof value !== "object" && value === true) {
                return "." + key;
              } else {
                return false;
              }
            });

            _.remove(styleNamesArr, function (value, index) {
              return value === false;
            });

            return styleNamesArr;
          }
        }, {
          key: "getParentPath",
          value: function getParentPath() {
            if (!this.context.parentPath) {
              return [componentStyleName];
            } else {
              return [].concat(babelHelpers.toConsumableArray(this.context.parentPath), [componentStyleName], babelHelpers.toConsumableArray(this.getStyleNames(this.props)));
            }
          }
        }, {
          key: "getChildContext",
          value: function getChildContext() {
            return {
              parentPath: this.getParentPath()
            };
          }
        }, {
          key: "componentWillReceiveProps",
          value: function componentWillReceiveProps(nextProps, nextContext) {
            var styleNames = this.getStyleNames(nextProps);
            var style = nextProps.style;

            if (this.shouldRebuildStyle(nextProps, nextContext, styleNames)) {
              var finalStyle = this.getFinalStyle(nextProps, nextContext, style, styleNames);
              this.setState({
                style: finalStyle,
                styleNames: styleNames
              });
            }
          }
        }, {
          key: "setNativeProps",
          value: function setNativeProps(nativeProps) {
            if (this.wrappedInstance.setNativeProps) {
              this.wrappedInstance.setNativeProps(nativeProps);
            }
          }
        }, {
          key: "setWrappedInstance",
          value: function setWrappedInstance(component) {
            if (component && component._root) {
              this._root = component._root;
            } else {
              this._root = component;
            }

            this.wrappedInstance = this._root;
          }
        }, {
          key: "hasStyleNameChanged",
          value: function hasStyleNameChanged(nextProps, styleNames) {
            return mapPropsToStyleNames && this.props !== nextProps && !_.isEqual(this.state.styleNames, styleNames);
          }
        }, {
          key: "shouldRebuildStyle",
          value: function shouldRebuildStyle(nextProps, nextContext, styleNames) {
            return nextProps.style !== this.props.style || nextProps.styleName !== this.props.styleName || nextContext.theme !== this.context.theme || !_.isEqual(nextContext.parentPath, this.context.parentPath) || this.hasStyleNameChanged(nextProps, styleNames);
          }
        }, {
          key: "resolveStyleNames",
          value: function resolveStyleNames(props) {
            var styleName = props.styleName;
            var styleNames = styleName ? styleName.split(/\s/g) : [];

            if (!mapPropsToStyleNames) {
              return styleNames;
            }

            return _.uniq(mapPropsToStyleNames(styleNames, props));
          }
        }, {
          key: "resolveAddedProps",
          value: function resolveAddedProps() {
            var addedProps = {};

            if (options.withRef) {
              addedProps.ref = "wrappedInstance";
            }

            return addedProps;
          }
        }, {
          key: "getOrSetStylesInCache",
          value: function getOrSetStylesInCache(context, props, styleNames, path) {
            if (themeCache && themeCache[path.join(">")]) {
              return themeCache[path.join(">")];
            } else {
              var resolvedStyle = this.resolveStyle(context, props, styleNames);

              if (Object.keys(themeCache).length < 10000) {
                themeCache[path.join(">")] = resolvedStyle;
              }

              return resolvedStyle;
            }
          }
        }, {
          key: "resolveStyle",
          value: function resolveStyle(context, props, styleNames) {
            var parentStyle = {};
            var theme = getTheme(context);
            var themeStyle = theme.createComponentStyle(componentStyleName, componentStyle);

            if (context.parentPath) {
              parentStyle = themeCache[context.parentPath.join(">")];
            } else {
              parentStyle = (0, _resolveComponentStyle.resolveComponentStyle)(componentStyleName, styleNames, themeStyle, parentStyle);
            }

            return (0, _resolveComponentStyle.resolveComponentStyle)(componentStyleName, styleNames, themeStyle, parentStyle);
          }
        }, {
          key: "resolveConnectedComponentStyle",
          value: function resolveConnectedComponentStyle(props) {
            var styleNames = this.resolveStyleNames(props);
            return this.resolveStyle(this.context, props, styleNames).componentStyle;
          }
        }, {
          key: "render",
          value: function render() {
            var _state = this.state,
                addedProps = _state.addedProps,
                style = _state.style;
            return _react2.default.createElement(WrappedComponent, babelHelpers.extends({}, this.props, addedProps, {
              style: style,
              ref: this.setWrappedInstance,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 384
              }
            }));
          }
        }]);
        return StyledComponent;
      }(_react2.default.Component);

      StyledComponent.contextTypes = {
        theme: _Theme.ThemeShape,
        parentPath: _propTypes2.default.array
      };
      StyledComponent.childContextTypes = {
        parentPath: _propTypes2.default.array
      };
      StyledComponent.propTypes = {
        style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
        styleName: _propTypes2.default.string,
        virtual: _propTypes2.default.bool
      };
      StyledComponent.defaultProps = {
        virtual: options.virtual
      };
      StyledComponent.displayName = "Styled(" + componentDisplayName + ")";
      StyledComponent.WrappedComponent = WrappedComponent;
      return (0, _hoistNonReactStatics2.default)(StyledComponent, WrappedComponent);
    };
  };
},405,[108,127,406,407,408,12,411,414],"native-base-shoutem-theme/src/connectStyle.js");
__d(function (global, require, module, exports, _dependencyMap) {
    'use strict';

    var REACT_STATICS = {
        childContextTypes: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        mixins: true,
        propTypes: true,
        type: true
    };
    var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        arguments: true,
        arity: true
    };
    var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === 'function';

    module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
        if (typeof sourceComponent !== 'string') {
            var keys = Object.getOwnPropertyNames(sourceComponent);

            if (isGetOwnPropertySymbolsAvailable) {
                keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
            }

            for (var i = 0; i < keys.length; ++i) {
                if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
                    try {
                        targetComponent[keys[i]] = sourceComponent[keys[i]];
                    } catch (error) {}
                }
            }
        }

        return targetComponent;
    };
},406,[],"hoist-non-react-statics/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  /**
   * @license
   * lodash 4.11.2 (Custom Build) <https://lodash.com/>
   * Build: `lodash -d -o ./foo/lodash.js`
   * Copyright jQuery Foundation and other contributors <https://jquery.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */;
  (function () {
    var undefined;
    var VERSION = '4.11.2';
    var LARGE_ARRAY_SIZE = 200;
    var FUNC_ERROR_TEXT = 'Expected a function';
    var HASH_UNDEFINED = '__lodash_hash_undefined__';
    var PLACEHOLDER = '__lodash_placeholder__';
    var BIND_FLAG = 1,
        BIND_KEY_FLAG = 2,
        CURRY_BOUND_FLAG = 4,
        CURRY_FLAG = 8,
        CURRY_RIGHT_FLAG = 16,
        PARTIAL_FLAG = 32,
        PARTIAL_RIGHT_FLAG = 64,
        ARY_FLAG = 128,
        REARG_FLAG = 256,
        FLIP_FLAG = 512;
    var UNORDERED_COMPARE_FLAG = 1,
        PARTIAL_COMPARE_FLAG = 2;
    var DEFAULT_TRUNC_LENGTH = 30,
        DEFAULT_TRUNC_OMISSION = '...';
    var HOT_COUNT = 150,
        HOT_SPAN = 16;
    var LAZY_FILTER_FLAG = 1,
        LAZY_MAP_FLAG = 2,
        LAZY_WHILE_FLAG = 3;
    var INFINITY = 1 / 0,
        MAX_SAFE_INTEGER = 9007199254740991,
        MAX_INTEGER = 1.7976931348623157e+308,
        NAN = 0 / 0;
    var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]',
        weakMapTag = '[object WeakMap]',
        weakSetTag = '[object WeakSet]';
    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';
    var reEmptyStringLeading = /\b__p \+= '';/g,
        reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
        reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
        reUnescapedHtml = /[&<>"'`]/g,
        reHasEscapedHtml = RegExp(reEscapedHtml.source),
        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    var reEscape = /<%-([\s\S]+?)%>/g,
        reEvaluate = /<%([\s\S]+?)%>/g,
        reInterpolate = /<%=([\s\S]+?)%>/g;
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/,
        rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
        reHasRegExpChar = RegExp(reRegExpChar.source);
    var reTrim = /^\s+|\s+$/g,
        reTrimStart = /^\s+/,
        reTrimEnd = /\s+$/;
    var reBasicWord = /[a-zA-Z0-9]+/g;
    var reEscapeChar = /\\(\\)?/g;
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    var reFlags = /\w*$/;
    var reHasHexPrefix = /^0x/i;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;
    var reNoMatch = /($^)/;
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    var rsAstralRange = "\\ud800-\\udfff",
        rsComboMarksRange = "\\u0300-\\u036f\\ufe20-\\ufe23",
        rsComboSymbolsRange = "\\u20d0-\\u20f0",
        rsDingbatRange = "\\u2700-\\u27bf",
        rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
        rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
        rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
        rsPunctuationRange = "\\u2000-\\u206f",
        rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
        rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
        rsVarRange = "\\ufe0e\\ufe0f",
        rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    var rsApos = "['\u2019]",
        rsAstral = '[' + rsAstralRange + ']',
        rsBreak = '[' + rsBreakRange + ']',
        rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
        rsDigits = '\\d+',
        rsDingbat = '[' + rsDingbatRange + ']',
        rsLower = '[' + rsLowerRange + ']',
        rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
        rsFitz = "\\ud83c[\\udffb-\\udfff]",
        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
        rsNonAstral = '[^' + rsAstralRange + ']',
        rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
        rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
        rsUpper = '[' + rsUpperRange + ']',
        rsZWJ = "\\u200d";
    var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
        rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
        rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
        rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
        reOptMod = rsModifier + '?',
        rsOptVar = '[' + rsVarRange + ']?',
        rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
        rsSeq = rsOptVar + reOptMod + rsOptJoin,
        rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
        rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
    var reApos = RegExp(rsApos, 'g');
    var reComboMark = RegExp(rsCombo, 'g');
    var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
    var reComplexWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')', rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr, rsUpper + '+' + rsOptUpperContr, rsDigits, rsEmoji].join('|'), 'g');
    var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');
    var reHasComplexWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    var contextProps = ['Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array', 'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object', 'Promise', 'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'];
    var templateCounter = -1;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    var deburredLetters = {
      '\xc0': 'A',
      '\xc1': 'A',
      '\xc2': 'A',
      '\xc3': 'A',
      '\xc4': 'A',
      '\xc5': 'A',
      '\xe0': 'a',
      '\xe1': 'a',
      '\xe2': 'a',
      '\xe3': 'a',
      '\xe4': 'a',
      '\xe5': 'a',
      '\xc7': 'C',
      '\xe7': 'c',
      '\xd0': 'D',
      '\xf0': 'd',
      '\xc8': 'E',
      '\xc9': 'E',
      '\xca': 'E',
      '\xcb': 'E',
      '\xe8': 'e',
      '\xe9': 'e',
      '\xea': 'e',
      '\xeb': 'e',
      '\xcC': 'I',
      '\xcd': 'I',
      '\xce': 'I',
      '\xcf': 'I',
      '\xeC': 'i',
      '\xed': 'i',
      '\xee': 'i',
      '\xef': 'i',
      '\xd1': 'N',
      '\xf1': 'n',
      '\xd2': 'O',
      '\xd3': 'O',
      '\xd4': 'O',
      '\xd5': 'O',
      '\xd6': 'O',
      '\xd8': 'O',
      '\xf2': 'o',
      '\xf3': 'o',
      '\xf4': 'o',
      '\xf5': 'o',
      '\xf6': 'o',
      '\xf8': 'o',
      '\xd9': 'U',
      '\xda': 'U',
      '\xdb': 'U',
      '\xdc': 'U',
      '\xf9': 'u',
      '\xfa': 'u',
      '\xfb': 'u',
      '\xfc': 'u',
      '\xdd': 'Y',
      '\xfd': 'y',
      '\xff': 'y',
      '\xc6': 'Ae',
      '\xe6': 'ae',
      '\xde': 'Th',
      '\xfe': 'th',
      '\xdf': 'ss'
    };
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;',
      '`': '&#96;'
    };
    var htmlUnescapes = {
      '&amp;': '&',
      '&lt;': '<',
      '&gt;': '>',
      '&quot;': '"',
      '&#39;': "'",
      '&#96;': '`'
    };
    var objectTypes = {
      'function': true,
      'object': true
    };
    var stringEscapes = {
      '\\': '\\',
      "'": "'",
      '\n': 'n',
      '\r': 'r',
      "\u2028": 'u2028',
      "\u2029": 'u2029'
    };
    var freeParseFloat = parseFloat,
        freeParseInt = parseInt;
    var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType ? exports : undefined;
    var freeModule = objectTypes[typeof module] && module && !module.nodeType ? module : undefined;
    var moduleExports = freeModule && freeModule.exports === freeExports ? freeExports : undefined;
    var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);
    var freeSelf = checkGlobal(objectTypes[typeof self] && self);
    var freeWindow = checkGlobal(objectTypes[typeof window] && window);
    var thisGlobal = checkGlobal(objectTypes[typeof this] && this);
    var root = freeGlobal || freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow || freeSelf || thisGlobal || Function('return this')();

    function addMapEntry(map, pair) {
      map.set(pair[0], pair[1]);
      return map;
    }

    function addSetEntry(set, value) {
      set.add(value);
      return set;
    }

    function apply(func, thisArg, args) {
      var length = args.length;

      switch (length) {
        case 0:
          return func.call(thisArg);

        case 1:
          return func.call(thisArg, args[0]);

        case 2:
          return func.call(thisArg, args[0], args[1]);

        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }

      return func.apply(thisArg, args);
    }

    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
      }

      return accumulator;
    }

    function arrayConcat(array, other) {
      var index = -1,
          length = array.length,
          othIndex = -1,
          othLength = other.length,
          result = Array(length + othLength);

      while (++index < length) {
        result[index] = array[index];
      }

      while (++othIndex < othLength) {
        result[index++] = other[othIndex];
      }

      return result;
    }

    function arrayEach(array, iteratee) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }

      return array;
    }

    function arrayEachRight(array, iteratee) {
      var length = array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }

      return array;
    }

    function arrayEvery(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }

      return true;
    }

    function arrayFilter(array, predicate) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }

      return result;
    }

    function arrayIncludes(array, value) {
      return !!array.length && baseIndexOf(array, value, 0) > -1;
    }

    function arrayIncludesWith(array, value, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }

      return false;
    }

    function arrayMap(array, iteratee) {
      var index = -1,
          length = array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }

      return result;
    }

    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }

      return array;
    }

    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1,
          length = array.length;

      if (initAccum && length) {
        accumulator = array[++index];
      }

      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }

      return accumulator;
    }

    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
      var length = array.length;

      if (initAccum && length) {
        accumulator = array[--length];
      }

      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }

      return accumulator;
    }

    function arraySome(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }

      return false;
    }

    function baseFind(collection, predicate, eachFunc, retKey) {
      var result;
      eachFunc(collection, function (value, key, collection) {
        if (predicate(value, key, collection)) {
          result = retKey ? key : value;
          return false;
        }
      });
      return result;
    }

    function baseFindIndex(array, predicate, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }

      return -1;
    }

    function baseIndexOf(array, value, fromIndex) {
      if (value !== value) {
        return indexOfNaN(array, fromIndex);
      }

      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }

      return -1;
    }

    function baseIndexOfWith(array, value, fromIndex, comparator) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (comparator(array[index], value)) {
          return index;
        }
      }

      return -1;
    }

    function baseMean(array, iteratee) {
      var length = array ? array.length : 0;
      return length ? baseSum(array, iteratee) / length : NAN;
    }

    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function (value, index, collection) {
        accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    function baseSortBy(array, comparer) {
      var length = array.length;
      array.sort(comparer);

      while (length--) {
        array[length] = array[length].value;
      }

      return array;
    }

    function baseSum(array, iteratee) {
      var result,
          index = -1,
          length = array.length;

      while (++index < length) {
        var current = iteratee(array[index]);

        if (current !== undefined) {
          result = result === undefined ? current : result + current;
        }
      }

      return result;
    }

    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }

      return result;
    }

    function baseToPairs(object, props) {
      return arrayMap(props, function (key) {
        return [key, object[key]];
      });
    }

    function baseUnary(func) {
      return function (value) {
        return func(value);
      };
    }

    function baseValues(object, props) {
      return arrayMap(props, function (key) {
        return object[key];
      });
    }

    function charsStartIndex(strSymbols, chrSymbols) {
      var index = -1,
          length = strSymbols.length;

      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

      return index;
    }

    function charsEndIndex(strSymbols, chrSymbols) {
      var index = strSymbols.length;

      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

      return index;
    }

    function checkGlobal(value) {
      return value && value.Object === Object ? value : null;
    }

    function countHolders(array, placeholder) {
      var length = array.length,
          result = 0;

      while (length--) {
        if (array[length] === placeholder) {
          result++;
        }
      }

      return result;
    }

    function deburrLetter(letter) {
      return deburredLetters[letter];
    }

    function escapeHtmlChar(chr) {
      return htmlEscapes[chr];
    }

    function escapeStringChar(chr) {
      return '\\' + stringEscapes[chr];
    }

    function indexOfNaN(array, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 0 : -1);

      while (fromRight ? index-- : ++index < length) {
        var other = array[index];

        if (other !== other) {
          return index;
        }
      }

      return -1;
    }

    function isHostObject(value) {
      var result = false;

      if (value != null && typeof value.toString != 'function') {
        try {
          result = !!(value + '');
        } catch (e) {}
      }

      return result;
    }

    function iteratorToArray(iterator) {
      var data,
          result = [];

      while (!(data = iterator.next()).done) {
        result.push(data.value);
      }

      return result;
    }

    function mapToArray(map) {
      var index = -1,
          result = Array(map.size);
      map.forEach(function (value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    function replaceHolders(array, placeholder) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (value === placeholder || value === PLACEHOLDER) {
          array[index] = PLACEHOLDER;
          result[resIndex++] = index;
        }
      }

      return result;
    }

    function setToArray(set) {
      var index = -1,
          result = Array(set.size);
      set.forEach(function (value) {
        result[++index] = value;
      });
      return result;
    }

    function stringSize(string) {
      if (!(string && reHasComplexSymbol.test(string))) {
        return string.length;
      }

      var result = reComplexSymbol.lastIndex = 0;

      while (reComplexSymbol.test(string)) {
        result++;
      }

      return result;
    }

    function stringToArray(string) {
      return string.match(reComplexSymbol);
    }

    function unescapeHtmlChar(chr) {
      return htmlUnescapes[chr];
    }

    function runInContext(context) {
      context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;
      var Date = context.Date,
          Error = context.Error,
          Math = context.Math,
          RegExp = context.RegExp,
          TypeError = context.TypeError;
      var arrayProto = context.Array.prototype,
          objectProto = context.Object.prototype,
          stringProto = context.String.prototype;
      var funcToString = context.Function.prototype.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var idCounter = 0;
      var objectCtorString = funcToString.call(Object);
      var objectToString = objectProto.toString;
      var oldDash = root._;
      var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
      var Buffer = moduleExports ? context.Buffer : undefined,
          Reflect = context.Reflect,
          Symbol = context.Symbol,
          Uint8Array = context.Uint8Array,
          clearTimeout = context.clearTimeout,
          enumerate = Reflect ? Reflect.enumerate : undefined,
          getOwnPropertySymbols = Object.getOwnPropertySymbols,
          iteratorSymbol = typeof (iteratorSymbol = Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator")) == 'symbol' ? iteratorSymbol : undefined,
          objectCreate = Object.create,
          propertyIsEnumerable = objectProto.propertyIsEnumerable,
          setTimeout = context.setTimeout,
          splice = arrayProto.splice;
      var nativeCeil = Math.ceil,
          nativeFloor = Math.floor,
          nativeGetPrototype = Object.getPrototypeOf,
          nativeIsFinite = context.isFinite,
          nativeJoin = arrayProto.join,
          nativeKeys = Object.keys,
          nativeMax = Math.max,
          nativeMin = Math.min,
          nativeParseInt = context.parseInt,
          nativeRandom = Math.random,
          nativeReplace = stringProto.replace,
          nativeReverse = arrayProto.reverse,
          nativeSplit = stringProto.split;
      var DataView = getNative(context, 'DataView'),
          Map = getNative(context, 'Map'),
          Promise = getNative(context, 'Promise'),
          Set = getNative(context, 'Set'),
          WeakMap = getNative(context, 'WeakMap'),
          nativeCreate = getNative(Object, 'create');
      var metaMap = WeakMap && new WeakMap();
      var nonEnumShadows = !propertyIsEnumerable.call({
        'valueOf': 1
      }, 'valueOf');
      var realNames = {};
      var dataViewCtorString = toSource(DataView),
          mapCtorString = toSource(Map),
          promiseCtorString = toSource(Promise),
          setCtorString = toSource(Set),
          weakMapCtorString = toSource(WeakMap);
      var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
          symbolToString = symbolProto ? symbolProto.toString : undefined;

      function lodash(value) {
        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
          if (value instanceof LodashWrapper) {
            return value;
          }

          if (hasOwnProperty.call(value, '__wrapped__')) {
            return wrapperClone(value);
          }
        }

        return new LodashWrapper(value);
      }

      function baseLodash() {}

      function LodashWrapper(value, chainAll) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__chain__ = !!chainAll;
        this.__index__ = 0;
        this.__values__ = undefined;
      }

      lodash.templateSettings = {
        'escape': reEscape,
        'evaluate': reEvaluate,
        'interpolate': reInterpolate,
        'variable': '',
        'imports': {
          '_': lodash
        }
      };
      lodash.prototype = baseLodash.prototype;
      lodash.prototype.constructor = lodash;
      LodashWrapper.prototype = baseCreate(baseLodash.prototype);
      LodashWrapper.prototype.constructor = LodashWrapper;

      function LazyWrapper(value) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__dir__ = 1;
        this.__filtered__ = false;
        this.__iteratees__ = [];
        this.__takeCount__ = MAX_ARRAY_LENGTH;
        this.__views__ = [];
      }

      function lazyClone() {
        var result = new LazyWrapper(this.__wrapped__);
        result.__actions__ = copyArray(this.__actions__);
        result.__dir__ = this.__dir__;
        result.__filtered__ = this.__filtered__;
        result.__iteratees__ = copyArray(this.__iteratees__);
        result.__takeCount__ = this.__takeCount__;
        result.__views__ = copyArray(this.__views__);
        return result;
      }

      function lazyReverse() {
        if (this.__filtered__) {
          var result = new LazyWrapper(this);
          result.__dir__ = -1;
          result.__filtered__ = true;
        } else {
          result = this.clone();
          result.__dir__ *= -1;
        }

        return result;
      }

      function lazyValue() {
        var array = this.__wrapped__.value(),
            dir = this.__dir__,
            isArr = isArray(array),
            isRight = dir < 0,
            arrLength = isArr ? array.length : 0,
            view = getView(0, arrLength, this.__views__),
            start = view.start,
            end = view.end,
            length = end - start,
            index = isRight ? end : start - 1,
            iteratees = this.__iteratees__,
            iterLength = iteratees.length,
            resIndex = 0,
            takeCount = nativeMin(length, this.__takeCount__);

        if (!isArr || arrLength < LARGE_ARRAY_SIZE || arrLength == length && takeCount == length) {
          return baseWrapperValue(array, this.__actions__);
        }

        var result = [];

        outer: while (length-- && resIndex < takeCount) {
          index += dir;
          var iterIndex = -1,
              value = array[index];

          while (++iterIndex < iterLength) {
            var data = iteratees[iterIndex],
                iteratee = data.iteratee,
                type = data.type,
                computed = iteratee(value);

            if (type == LAZY_MAP_FLAG) {
              value = computed;
            } else if (!computed) {
              if (type == LAZY_FILTER_FLAG) {
                continue outer;
              } else {
                break outer;
              }
            }
          }

          result[resIndex++] = value;
        }

        return result;
      }

      LazyWrapper.prototype = baseCreate(baseLodash.prototype);
      LazyWrapper.prototype.constructor = LazyWrapper;

      function Hash() {}

      function hashDelete(hash, key) {
        return hashHas(hash, key) && delete hash[key];
      }

      function hashGet(hash, key) {
        if (nativeCreate) {
          var result = hash[key];
          return result === HASH_UNDEFINED ? undefined : result;
        }

        return hasOwnProperty.call(hash, key) ? hash[key] : undefined;
      }

      function hashHas(hash, key) {
        return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);
      }

      function hashSet(hash, key, value) {
        hash[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
      }

      Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;

      function MapCache(values) {
        var index = -1,
            length = values ? values.length : 0;
        this.clear();

        while (++index < length) {
          var entry = values[index];
          this.set(entry[0], entry[1]);
        }
      }

      function mapClear() {
        this.__data__ = {
          'hash': new Hash(),
          'map': Map ? new Map() : [],
          'string': new Hash()
        };
      }

      function mapDelete(key) {
        var data = this.__data__;

        if (isKeyable(key)) {
          return hashDelete(typeof key == 'string' ? data.string : data.hash, key);
        }

        return Map ? data.map['delete'](key) : assocDelete(data.map, key);
      }

      function mapGet(key) {
        var data = this.__data__;

        if (isKeyable(key)) {
          return hashGet(typeof key == 'string' ? data.string : data.hash, key);
        }

        return Map ? data.map.get(key) : assocGet(data.map, key);
      }

      function mapHas(key) {
        var data = this.__data__;

        if (isKeyable(key)) {
          return hashHas(typeof key == 'string' ? data.string : data.hash, key);
        }

        return Map ? data.map.has(key) : assocHas(data.map, key);
      }

      function mapSet(key, value) {
        var data = this.__data__;

        if (isKeyable(key)) {
          hashSet(typeof key == 'string' ? data.string : data.hash, key, value);
        } else if (Map) {
          data.map.set(key, value);
        } else {
          assocSet(data.map, key, value);
        }

        return this;
      }

      MapCache.prototype.clear = mapClear;
      MapCache.prototype['delete'] = mapDelete;
      MapCache.prototype.get = mapGet;
      MapCache.prototype.has = mapHas;
      MapCache.prototype.set = mapSet;

      function SetCache(values) {
        var index = -1,
            length = values ? values.length : 0;
        this.__data__ = new MapCache();

        while (++index < length) {
          this.push(values[index]);
        }
      }

      function cacheHas(cache, value) {
        var map = cache.__data__;

        if (isKeyable(value)) {
          var data = map.__data__,
              hash = typeof value == 'string' ? data.string : data.hash;
          return hash[value] === HASH_UNDEFINED;
        }

        return map.has(value);
      }

      function cachePush(value) {
        var map = this.__data__;

        if (isKeyable(value)) {
          var data = map.__data__,
              hash = typeof value == 'string' ? data.string : data.hash;
          hash[value] = HASH_UNDEFINED;
        } else {
          map.set(value, HASH_UNDEFINED);
        }
      }

      SetCache.prototype.push = cachePush;

      function Stack(values) {
        var index = -1,
            length = values ? values.length : 0;
        this.clear();

        while (++index < length) {
          var entry = values[index];
          this.set(entry[0], entry[1]);
        }
      }

      function stackClear() {
        this.__data__ = {
          'array': [],
          'map': null
        };
      }

      function stackDelete(key) {
        var data = this.__data__,
            array = data.array;
        return array ? assocDelete(array, key) : data.map['delete'](key);
      }

      function stackGet(key) {
        var data = this.__data__,
            array = data.array;
        return array ? assocGet(array, key) : data.map.get(key);
      }

      function stackHas(key) {
        var data = this.__data__,
            array = data.array;
        return array ? assocHas(array, key) : data.map.has(key);
      }

      function stackSet(key, value) {
        var data = this.__data__,
            array = data.array;

        if (array) {
          if (array.length < LARGE_ARRAY_SIZE - 1) {
            assocSet(array, key, value);
          } else {
            data.array = null;
            data.map = new MapCache(array);
          }
        }

        var map = data.map;

        if (map) {
          map.set(key, value);
        }

        return this;
      }

      Stack.prototype.clear = stackClear;
      Stack.prototype['delete'] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;

      function assocDelete(array, key) {
        var index = assocIndexOf(array, key);

        if (index < 0) {
          return false;
        }

        var lastIndex = array.length - 1;

        if (index == lastIndex) {
          array.pop();
        } else {
          splice.call(array, index, 1);
        }

        return true;
      }

      function assocGet(array, key) {
        var index = assocIndexOf(array, key);
        return index < 0 ? undefined : array[index][1];
      }

      function assocHas(array, key) {
        return assocIndexOf(array, key) > -1;
      }

      function assocIndexOf(array, key) {
        var length = array.length;

        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }

        return -1;
      }

      function assocSet(array, key, value) {
        var index = assocIndexOf(array, key);

        if (index < 0) {
          array.push([key, value]);
        } else {
          array[index][1] = value;
        }
      }

      function assignInDefaults(objValue, srcValue, key, object) {
        if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
          return srcValue;
        }

        return objValue;
      }

      function assignMergeValue(object, key, value) {
        if (value !== undefined && !eq(object[key], value) || typeof key == 'number' && value === undefined && !(key in object)) {
          object[key] = value;
        }
      }

      function assignValue(object, key, value) {
        var objValue = object[key];

        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
          object[key] = value;
        }
      }

      function baseAggregator(collection, setter, iteratee, accumulator) {
        baseEach(collection, function (value, key, collection) {
          setter(accumulator, value, iteratee(value), collection);
        });
        return accumulator;
      }

      function baseAssign(object, source) {
        return object && copyObject(source, keys(source), object);
      }

      function baseAt(object, paths) {
        var index = -1,
            isNil = object == null,
            length = paths.length,
            result = Array(length);

        while (++index < length) {
          result[index] = isNil ? undefined : get(object, paths[index]);
        }

        return result;
      }

      function baseClamp(number, lower, upper) {
        if (number === number) {
          if (upper !== undefined) {
            number = number <= upper ? number : upper;
          }

          if (lower !== undefined) {
            number = number >= lower ? number : lower;
          }
        }

        return number;
      }

      function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
        var result;

        if (customizer) {
          result = object ? customizer(value, key, object, stack) : customizer(value);
        }

        if (result !== undefined) {
          return result;
        }

        if (!isObject(value)) {
          return value;
        }

        var isArr = isArray(value);

        if (isArr) {
          result = initCloneArray(value);

          if (!isDeep) {
            return copyArray(value, result);
          }
        } else {
          var tag = getTag(value),
              isFunc = tag == funcTag || tag == genTag;

          if (isBuffer(value)) {
            return cloneBuffer(value, isDeep);
          }

          if (tag == objectTag || tag == argsTag || isFunc && !object) {
            if (isHostObject(value)) {
              return object ? value : {};
            }

            result = initCloneObject(isFunc ? {} : value);

            if (!isDeep) {
              return copySymbols(value, baseAssign(result, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }

            result = initCloneByTag(value, tag, baseClone, isDeep);
          }
        }

        stack || (stack = new Stack());
        var stacked = stack.get(value);

        if (stacked) {
          return stacked;
        }

        stack.set(value, result);

        if (!isArr) {
          var props = isFull ? getAllKeys(value) : keys(value);
        }

        arrayEach(props || value, function (subValue, key) {
          if (props) {
            key = subValue;
            subValue = value[key];
          }

          assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
        });
        return result;
      }

      function baseConforms(source) {
        var props = keys(source),
            length = props.length;
        return function (object) {
          if (object == null) {
            return !length;
          }

          var index = length;

          while (index--) {
            var key = props[index],
                predicate = source[key],
                value = object[key];

            if (value === undefined && !(key in Object(object)) || !predicate(value)) {
              return false;
            }
          }

          return true;
        };
      }

      function baseCreate(proto) {
        return isObject(proto) ? objectCreate(proto) : {};
      }

      function baseDelay(func, wait, args) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        return setTimeout(function () {
          func.apply(undefined, args);
        }, wait);
      }

      function baseDifference(array, values, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            isCommon = true,
            length = array.length,
            result = [],
            valuesLength = values.length;

        if (!length) {
          return result;
        }

        if (iteratee) {
          values = arrayMap(values, baseUnary(iteratee));
        }

        if (comparator) {
          includes = arrayIncludesWith;
          isCommon = false;
        } else if (values.length >= LARGE_ARRAY_SIZE) {
          includes = cacheHas;
          isCommon = false;
          values = new SetCache(values);
        }

        outer: while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;

          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;

            while (valuesIndex--) {
              if (values[valuesIndex] === computed) {
                continue outer;
              }
            }

            result.push(value);
          } else if (!includes(values, computed, comparator)) {
            result.push(value);
          }
        }

        return result;
      }

      var baseEach = createBaseEach(baseForOwn);
      var baseEachRight = createBaseEach(baseForOwnRight, true);

      function baseEvery(collection, predicate) {
        var result = true;
        baseEach(collection, function (value, index, collection) {
          result = !!predicate(value, index, collection);
          return result;
        });
        return result;
      }

      function baseExtremum(array, iteratee, comparator) {
        var index = -1,
            length = array.length;

        while (++index < length) {
          var value = array[index],
              current = iteratee(value);

          if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
            var computed = current,
                result = value;
          }
        }

        return result;
      }

      function baseFill(array, value, start, end) {
        var length = array.length;
        start = toInteger(start);

        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }

        end = end === undefined || end > length ? length : toInteger(end);

        if (end < 0) {
          end += length;
        }

        end = start > end ? 0 : toLength(end);

        while (start < end) {
          array[start++] = value;
        }

        return array;
      }

      function baseFilter(collection, predicate) {
        var result = [];
        baseEach(collection, function (value, index, collection) {
          if (predicate(value, index, collection)) {
            result.push(value);
          }
        });
        return result;
      }

      function baseFlatten(array, depth, predicate, isStrict, result) {
        var index = -1,
            length = array.length;
        predicate || (predicate = isFlattenable);
        result || (result = []);

        while (++index < length) {
          var value = array[index];

          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              baseFlatten(value, depth - 1, predicate, isStrict, result);
            } else {
              arrayPush(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }

        return result;
      }

      var baseFor = createBaseFor();
      var baseForRight = createBaseFor(true);

      function baseForOwn(object, iteratee) {
        return object && baseFor(object, iteratee, keys);
      }

      function baseForOwnRight(object, iteratee) {
        return object && baseForRight(object, iteratee, keys);
      }

      function baseFunctions(object, props) {
        return arrayFilter(props, function (key) {
          return isFunction(object[key]);
        });
      }

      function baseGet(object, path) {
        path = isKey(path, object) ? [path] : castPath(path);
        var index = 0,
            length = path.length;

        while (object != null && index < length) {
          object = object[toKey(path[index++])];
        }

        return index && index == length ? object : undefined;
      }

      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
      }

      function baseGt(value, other) {
        return value > other;
      }

      function baseHas(object, key) {
        return hasOwnProperty.call(object, key) || typeof object == 'object' && key in object && getPrototype(object) === null;
      }

      function baseHasIn(object, key) {
        return key in Object(object);
      }

      function baseInRange(number, start, end) {
        return number >= nativeMin(start, end) && number < nativeMax(start, end);
      }

      function baseIntersection(arrays, iteratee, comparator) {
        var includes = comparator ? arrayIncludesWith : arrayIncludes,
            length = arrays[0].length,
            othLength = arrays.length,
            othIndex = othLength,
            caches = Array(othLength),
            maxLength = Infinity,
            result = [];

        while (othIndex--) {
          var array = arrays[othIndex];

          if (othIndex && iteratee) {
            array = arrayMap(array, baseUnary(iteratee));
          }

          maxLength = nativeMin(array.length, maxLength);
          caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
        }

        array = arrays[0];
        var index = -1,
            seen = caches[0];

        outer: while (++index < length && result.length < maxLength) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;

          if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
            othIndex = othLength;

            while (--othIndex) {
              var cache = caches[othIndex];

              if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
                continue outer;
              }
            }

            if (seen) {
              seen.push(computed);
            }

            result.push(value);
          }
        }

        return result;
      }

      function baseInverter(object, setter, iteratee, accumulator) {
        baseForOwn(object, function (value, key, object) {
          setter(accumulator, iteratee(value), key, object);
        });
        return accumulator;
      }

      function baseInvoke(object, path, args) {
        if (!isKey(path, object)) {
          path = castPath(path);
          object = parent(object, path);
          path = last(path);
        }

        var func = object == null ? object : object[toKey(path)];
        return func == null ? undefined : apply(func, object, args);
      }

      function baseIsEqual(value, other, customizer, bitmask, stack) {
        if (value === other) {
          return true;
        }

        if (value == null || other == null || !isObject(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }

        return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
      }

      function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
        var objIsArr = isArray(object),
            othIsArr = isArray(other),
            objTag = arrayTag,
            othTag = arrayTag;

        if (!objIsArr) {
          objTag = getTag(object);
          objTag = objTag == argsTag ? objectTag : objTag;
        }

        if (!othIsArr) {
          othTag = getTag(other);
          othTag = othTag == argsTag ? objectTag : othTag;
        }

        var objIsObj = objTag == objectTag && !isHostObject(object),
            othIsObj = othTag == objectTag && !isHostObject(other),
            isSameTag = objTag == othTag;

        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray(object) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
        }

        if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
              othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object,
                othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
          }
        }

        if (!isSameTag) {
          return false;
        }

        stack || (stack = new Stack());
        return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
      }

      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length,
            length = index,
            noCustomizer = !customizer;

        if (object == null) {
          return !length;
        }

        object = Object(object);

        while (index--) {
          var data = matchData[index];

          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }

        while (++index < length) {
          data = matchData[index];
          var key = data[0],
              objValue = object[key],
              srcValue = data[1];

          if (noCustomizer && data[2]) {
            if (objValue === undefined && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack();

            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }

            if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {
              return false;
            }
          }
        }

        return true;
      }

      function baseIteratee(value) {
        if (typeof value == 'function') {
          return value;
        }

        if (value == null) {
          return identity;
        }

        if (typeof value == 'object') {
          return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
        }

        return property(value);
      }

      function baseKeys(object) {
        return nativeKeys(Object(object));
      }

      function baseKeysIn(object) {
        object = object == null ? object : Object(object);
        var result = [];

        for (var key in object) {
          result.push(key);
        }

        return result;
      }

      if (enumerate && !propertyIsEnumerable.call({
        'valueOf': 1
      }, 'valueOf')) {
        baseKeysIn = function baseKeysIn(object) {
          return iteratorToArray(enumerate(object));
        };
      }

      function baseLt(value, other) {
        return value < other;
      }

      function baseMap(collection, iteratee) {
        var index = -1,
            result = isArrayLike(collection) ? Array(collection.length) : [];
        baseEach(collection, function (value, key, collection) {
          result[++index] = iteratee(value, key, collection);
        });
        return result;
      }

      function baseMatches(source) {
        var matchData = getMatchData(source);

        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }

        return function (object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }

      function baseMatchesProperty(path, srcValue) {
        if (isKey(path) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path), srcValue);
        }

        return function (object) {
          var objValue = get(object, path);
          return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
        };
      }

      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }

        if (!(isArray(source) || isTypedArray(source))) {
          var props = keysIn(source);
        }

        arrayEach(props || source, function (srcValue, key) {
          if (props) {
            key = srcValue;
            srcValue = source[key];
          }

          if (isObject(srcValue)) {
            stack || (stack = new Stack());
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(object[key], srcValue, key + '', object, source, stack) : undefined;

            if (newValue === undefined) {
              newValue = srcValue;
            }

            assignMergeValue(object, key, newValue);
          }
        });
      }

      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = object[key],
            srcValue = source[key],
            stacked = stack.get(srcValue);

        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }

        var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
        var isCommon = newValue === undefined;

        if (isCommon) {
          newValue = srcValue;

          if (isArray(srcValue) || isTypedArray(srcValue)) {
            if (isArray(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else {
              isCommon = false;
              newValue = baseClone(srcValue, true);
            }
          } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {
              isCommon = false;
              newValue = baseClone(srcValue, true);
            } else {
              newValue = objValue;
            }
          } else {
            isCommon = false;
          }
        }

        stack.set(srcValue, newValue);

        if (isCommon) {
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        }

        stack['delete'](srcValue);
        assignMergeValue(object, key, newValue);
      }

      function baseNth(array, n) {
        var length = array.length;

        if (!length) {
          return;
        }

        n += n < 0 ? length : 0;
        return isIndex(n, length) ? array[n] : undefined;
      }

      function baseOrderBy(collection, iteratees, orders) {
        var index = -1;
        iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));
        var result = baseMap(collection, function (value, key, collection) {
          var criteria = arrayMap(iteratees, function (iteratee) {
            return iteratee(value);
          });
          return {
            'criteria': criteria,
            'index': ++index,
            'value': value
          };
        });
        return baseSortBy(result, function (object, other) {
          return compareMultiple(object, other, orders);
        });
      }

      function basePick(object, props) {
        object = Object(object);
        return arrayReduce(props, function (result, key) {
          if (key in object) {
            result[key] = object[key];
          }

          return result;
        }, {});
      }

      function basePickBy(object, predicate) {
        var index = -1,
            props = getAllKeysIn(object),
            length = props.length,
            result = {};

        while (++index < length) {
          var key = props[index],
              value = object[key];

          if (predicate(value, key)) {
            result[key] = value;
          }
        }

        return result;
      }

      function baseProperty(key) {
        return function (object) {
          return object == null ? undefined : object[key];
        };
      }

      function basePropertyDeep(path) {
        return function (object) {
          return baseGet(object, path);
        };
      }

      function basePullAll(array, values, iteratee, comparator) {
        var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
            index = -1,
            length = values.length,
            seen = array;

        if (iteratee) {
          seen = arrayMap(array, baseUnary(iteratee));
        }

        while (++index < length) {
          var fromIndex = 0,
              value = values[index],
              computed = iteratee ? iteratee(value) : value;

          while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
            if (seen !== array) {
              splice.call(seen, fromIndex, 1);
            }

            splice.call(array, fromIndex, 1);
          }
        }

        return array;
      }

      function basePullAt(array, indexes) {
        var length = array ? indexes.length : 0,
            lastIndex = length - 1;

        while (length--) {
          var index = indexes[length];

          if (length == lastIndex || index !== previous) {
            var previous = index;

            if (isIndex(index)) {
              splice.call(array, index, 1);
            } else if (!isKey(index, array)) {
              var path = castPath(index),
                  object = parent(array, path);

              if (object != null) {
                delete object[toKey(last(path))];
              }
            } else {
              delete array[toKey(index)];
            }
          }
        }

        return array;
      }

      function baseRandom(lower, upper) {
        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
      }

      function baseRange(start, end, step, fromRight) {
        var index = -1,
            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
            result = Array(length);

        while (length--) {
          result[fromRight ? length : ++index] = start;
          start += step;
        }

        return result;
      }

      function baseRepeat(string, n) {
        var result = '';

        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
          return result;
        }

        do {
          if (n % 2) {
            result += string;
          }

          n = nativeFloor(n / 2);

          if (n) {
            string += string;
          }
        } while (n);

        return result;
      }

      function baseSet(object, path, value, customizer) {
        path = isKey(path, object) ? [path] : castPath(path);
        var index = -1,
            length = path.length,
            lastIndex = length - 1,
            nested = object;

        while (nested != null && ++index < length) {
          var key = toKey(path[index]);

          if (isObject(nested)) {
            var newValue = value;

            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined;

              if (newValue === undefined) {
                newValue = objValue == null ? isIndex(path[index + 1]) ? [] : {} : objValue;
              }
            }

            assignValue(nested, key, newValue);
          }

          nested = nested[key];
        }

        return object;
      }

      var baseSetData = !metaMap ? identity : function (func, data) {
        metaMap.set(func, data);
        return func;
      };

      function baseSlice(array, start, end) {
        var index = -1,
            length = array.length;

        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }

        end = end > length ? length : end;

        if (end < 0) {
          end += length;
        }

        length = start > end ? 0 : end - start >>> 0;
        start >>>= 0;
        var result = Array(length);

        while (++index < length) {
          result[index] = array[index + start];
        }

        return result;
      }

      function baseSome(collection, predicate) {
        var result;
        baseEach(collection, function (value, index, collection) {
          result = predicate(value, index, collection);
          return !result;
        });
        return !!result;
      }

      function baseSortedIndex(array, value, retHighest) {
        var low = 0,
            high = array ? array.length : low;

        if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
          while (low < high) {
            var mid = low + high >>> 1,
                computed = array[mid];

            if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }

          return high;
        }

        return baseSortedIndexBy(array, value, identity, retHighest);
      }

      function baseSortedIndexBy(array, value, iteratee, retHighest) {
        value = iteratee(value);
        var low = 0,
            high = array ? array.length : 0,
            valIsNaN = value !== value,
            valIsNull = value === null,
            valIsSymbol = isSymbol(value),
            valIsUndefined = value === undefined;

        while (low < high) {
          var mid = nativeFloor((low + high) / 2),
              computed = iteratee(array[mid]),
              othIsDefined = computed !== undefined,
              othIsNull = computed === null,
              othIsReflexive = computed === computed,
              othIsSymbol = isSymbol(computed);

          if (valIsNaN) {
            var setLow = retHighest || othIsReflexive;
          } else if (valIsUndefined) {
            setLow = othIsReflexive && (retHighest || othIsDefined);
          } else if (valIsNull) {
            setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
          } else if (valIsSymbol) {
            setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
          } else if (othIsNull || othIsSymbol) {
            setLow = false;
          } else {
            setLow = retHighest ? computed <= value : computed < value;
          }

          if (setLow) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }

        return nativeMin(high, MAX_ARRAY_INDEX);
      }

      function baseSortedUniq(array, iteratee) {
        var index = -1,
            length = array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          if (!index || !eq(computed, seen)) {
            var seen = computed;
            result[resIndex++] = value === 0 ? 0 : value;
          }
        }

        return result;
      }

      function baseToNumber(value) {
        if (typeof value == 'number') {
          return value;
        }

        if (isSymbol(value)) {
          return NAN;
        }

        return +value;
      }

      function baseToString(value) {
        if (typeof value == 'string') {
          return value;
        }

        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : '';
        }

        var result = value + '';
        return result == '0' && 1 / value == -INFINITY ? '-0' : result;
      }

      function baseUniq(array, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            length = array.length,
            isCommon = true,
            result = [],
            seen = result;

        if (comparator) {
          isCommon = false;
          includes = arrayIncludesWith;
        } else if (length >= LARGE_ARRAY_SIZE) {
          var set = iteratee ? null : createSet(array);

          if (set) {
            return setToArray(set);
          }

          isCommon = false;
          includes = cacheHas;
          seen = new SetCache();
        } else {
          seen = iteratee ? [] : result;
        }

        outer: while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;

          if (isCommon && computed === computed) {
            var seenIndex = seen.length;

            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }

            if (iteratee) {
              seen.push(computed);
            }

            result.push(value);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }

            result.push(value);
          }
        }

        return result;
      }

      function baseUnset(object, path) {
        path = isKey(path, object) ? [path] : castPath(path);
        object = parent(object, path);
        var key = toKey(last(path));
        return !(object != null && baseHas(object, key)) || delete object[key];
      }

      function baseUpdate(object, path, updater, customizer) {
        return baseSet(object, path, updater(baseGet(object, path)), customizer);
      }

      function baseWhile(array, predicate, isDrop, fromRight) {
        var length = array.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}

        return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
      }

      function baseWrapperValue(value, actions) {
        var result = value;

        if (result instanceof LazyWrapper) {
          result = result.value();
        }

        return arrayReduce(actions, function (result, action) {
          return action.func.apply(action.thisArg, arrayPush([result], action.args));
        }, result);
      }

      function baseXor(arrays, iteratee, comparator) {
        var index = -1,
            length = arrays.length;

        while (++index < length) {
          var result = result ? arrayPush(baseDifference(result, arrays[index], iteratee, comparator), baseDifference(arrays[index], result, iteratee, comparator)) : arrays[index];
        }

        return result && result.length ? baseUniq(result, iteratee, comparator) : [];
      }

      function baseZipObject(props, values, assignFunc) {
        var index = -1,
            length = props.length,
            valsLength = values.length,
            result = {};

        while (++index < length) {
          var value = index < valsLength ? values[index] : undefined;
          assignFunc(result, props[index], value);
        }

        return result;
      }

      function castArrayLikeObject(value) {
        return isArrayLikeObject(value) ? value : [];
      }

      function castFunction(value) {
        return typeof value == 'function' ? value : identity;
      }

      function castPath(value) {
        return isArray(value) ? value : stringToPath(value);
      }

      function castSlice(array, start, end) {
        var length = array.length;
        end = end === undefined ? length : end;
        return !start && end >= length ? array : baseSlice(array, start, end);
      }

      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }

        var result = new buffer.constructor(buffer.length);
        buffer.copy(result);
        return result;
      }

      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array(result).set(new Uint8Array(arrayBuffer));
        return result;
      }

      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }

      function cloneMap(map, isDeep, cloneFunc) {
        var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
        return arrayReduce(array, addMapEntry, new map.constructor());
      }

      function cloneRegExp(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }

      function cloneSet(set, isDeep, cloneFunc) {
        var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
        return arrayReduce(array, addSetEntry, new set.constructor());
      }

      function cloneSymbol(symbol) {
        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
      }

      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }

      function compareAscending(value, other) {
        if (value !== other) {
          var valIsDefined = value !== undefined,
              valIsNull = value === null,
              valIsReflexive = value === value,
              valIsSymbol = isSymbol(value);
          var othIsDefined = other !== undefined,
              othIsNull = other === null,
              othIsReflexive = other === other,
              othIsSymbol = isSymbol(other);

          if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
            return 1;
          }

          if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
            return -1;
          }
        }

        return 0;
      }

      function compareMultiple(object, other, orders) {
        var index = -1,
            objCriteria = object.criteria,
            othCriteria = other.criteria,
            length = objCriteria.length,
            ordersLength = orders.length;

        while (++index < length) {
          var result = compareAscending(objCriteria[index], othCriteria[index]);

          if (result) {
            if (index >= ordersLength) {
              return result;
            }

            var order = orders[index];
            return result * (order == 'desc' ? -1 : 1);
          }
        }

        return object.index - other.index;
      }

      function composeArgs(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersLength = holders.length,
            leftIndex = -1,
            leftLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(leftLength + rangeLength),
            isUncurried = !isCurried;

        while (++leftIndex < leftLength) {
          result[leftIndex] = partials[leftIndex];
        }

        while (++argsIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[holders[argsIndex]] = args[argsIndex];
          }
        }

        while (rangeLength--) {
          result[leftIndex++] = args[argsIndex++];
        }

        return result;
      }

      function composeArgsRight(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersIndex = -1,
            holdersLength = holders.length,
            rightIndex = -1,
            rightLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(rangeLength + rightLength),
            isUncurried = !isCurried;

        while (++argsIndex < rangeLength) {
          result[argsIndex] = args[argsIndex];
        }

        var offset = argsIndex;

        while (++rightIndex < rightLength) {
          result[offset + rightIndex] = partials[rightIndex];
        }

        while (++holdersIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[offset + holders[holdersIndex]] = args[argsIndex++];
          }
        }

        return result;
      }

      function copyArray(source, array) {
        var index = -1,
            length = source.length;
        array || (array = Array(length));

        while (++index < length) {
          array[index] = source[index];
        }

        return array;
      }

      function copyObject(source, props, object, customizer) {
        object || (object = {});
        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : source[key];
          assignValue(object, key, newValue);
        }

        return object;
      }

      function copySymbols(source, object) {
        return copyObject(source, getSymbols(source), object);
      }

      function createAggregator(setter, initializer) {
        return function (collection, iteratee) {
          var func = isArray(collection) ? arrayAggregator : baseAggregator,
              accumulator = initializer ? initializer() : {};
          return func(collection, setter, getIteratee(iteratee), accumulator);
        };
      }

      function createAssigner(assigner) {
        return rest(function (object, sources) {
          var index = -1,
              length = sources.length,
              customizer = length > 1 ? sources[length - 1] : undefined,
              guard = length > 2 ? sources[2] : undefined;
          customizer = typeof customizer == 'function' ? (length--, customizer) : undefined;

          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer;
            length = 1;
          }

          object = Object(object);

          while (++index < length) {
            var source = sources[index];

            if (source) {
              assigner(object, source, index, customizer);
            }
          }

          return object;
        });
      }

      function createBaseEach(eachFunc, fromRight) {
        return function (collection, iteratee) {
          if (collection == null) {
            return collection;
          }

          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee);
          }

          var length = collection.length,
              index = fromRight ? length : -1,
              iterable = Object(collection);

          while (fromRight ? index-- : ++index < length) {
            if (iteratee(iterable[index], index, iterable) === false) {
              break;
            }
          }

          return collection;
        };
      }

      function createBaseFor(fromRight) {
        return function (object, iteratee, keysFunc) {
          var index = -1,
              iterable = Object(object),
              props = keysFunc(object),
              length = props.length;

          while (length--) {
            var key = props[fromRight ? length : ++index];

            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }

          return object;
        };
      }

      function createBaseWrapper(func, bitmask, thisArg) {
        var isBind = bitmask & BIND_FLAG,
            Ctor = createCtorWrapper(func);

        function wrapper() {
          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return fn.apply(isBind ? thisArg : this, arguments);
        }

        return wrapper;
      }

      function createCaseFirst(methodName) {
        return function (string) {
          string = toString(string);
          var strSymbols = reHasComplexSymbol.test(string) ? stringToArray(string) : undefined;
          var chr = strSymbols ? strSymbols[0] : string.charAt(0);
          var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
          return chr[methodName]() + trailing;
        };
      }

      function createCompounder(callback) {
        return function (string) {
          return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
        };
      }

      function createCtorWrapper(Ctor) {
        return function () {
          var args = arguments;

          switch (args.length) {
            case 0:
              return new Ctor();

            case 1:
              return new Ctor(args[0]);

            case 2:
              return new Ctor(args[0], args[1]);

            case 3:
              return new Ctor(args[0], args[1], args[2]);

            case 4:
              return new Ctor(args[0], args[1], args[2], args[3]);

            case 5:
              return new Ctor(args[0], args[1], args[2], args[3], args[4]);

            case 6:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);

            case 7:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          }

          var thisBinding = baseCreate(Ctor.prototype),
              result = Ctor.apply(thisBinding, args);
          return isObject(result) ? result : thisBinding;
        };
      }

      function createCurryWrapper(func, bitmask, arity) {
        var Ctor = createCtorWrapper(func);

        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length,
              placeholder = getPlaceholder(wrapper);

          while (index--) {
            args[index] = arguments[index];
          }

          var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
          length -= holders.length;

          if (length < arity) {
            return createRecurryWrapper(func, bitmask, createHybridWrapper, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
          }

          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return apply(fn, this, args);
        }

        return wrapper;
      }

      function createFlow(fromRight) {
        return rest(function (funcs) {
          funcs = baseFlatten(funcs, 1);
          var length = funcs.length,
              index = length,
              prereq = LodashWrapper.prototype.thru;

          if (fromRight) {
            funcs.reverse();
          }

          while (index--) {
            var func = funcs[index];

            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }

            if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
              var wrapper = new LodashWrapper([], true);
            }
          }

          index = wrapper ? index : length;

          while (++index < length) {
            func = funcs[index];
            var funcName = getFuncName(func),
                data = funcName == 'wrapper' ? getData(func) : undefined;

            if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
              wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
            } else {
              wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
            }
          }

          return function () {
            var args = arguments,
                value = args[0];

            if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
              return wrapper.plant(value).value();
            }

            var index = 0,
                result = length ? funcs[index].apply(this, args) : value;

            while (++index < length) {
              result = funcs[index].call(this, result);
            }

            return result;
          };
        });
      }

      function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
        var isAry = bitmask & ARY_FLAG,
            isBind = bitmask & BIND_FLAG,
            isBindKey = bitmask & BIND_KEY_FLAG,
            isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),
            isFlip = bitmask & FLIP_FLAG,
            Ctor = isBindKey ? undefined : createCtorWrapper(func);

        function wrapper() {
          var length = arguments.length,
              index = length,
              args = Array(length);

          while (index--) {
            args[index] = arguments[index];
          }

          if (isCurried) {
            var placeholder = getPlaceholder(wrapper),
                holdersCount = countHolders(args, placeholder);
          }

          if (partials) {
            args = composeArgs(args, partials, holders, isCurried);
          }

          if (partialsRight) {
            args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
          }

          length -= holdersCount;

          if (isCurried && length < arity) {
            var newHolders = replaceHolders(args, placeholder);
            return createRecurryWrapper(func, bitmask, createHybridWrapper, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
          }

          var thisBinding = isBind ? thisArg : this,
              fn = isBindKey ? thisBinding[func] : func;
          length = args.length;

          if (argPos) {
            args = reorder(args, argPos);
          } else if (isFlip && length > 1) {
            args.reverse();
          }

          if (isAry && ary < length) {
            args.length = ary;
          }

          if (this && this !== root && this instanceof wrapper) {
            fn = Ctor || createCtorWrapper(fn);
          }

          return fn.apply(thisBinding, args);
        }

        return wrapper;
      }

      function createInverter(setter, toIteratee) {
        return function (object, iteratee) {
          return baseInverter(object, setter, toIteratee(iteratee), {});
        };
      }

      function createMathOperation(operator) {
        return function (value, other) {
          var result;

          if (value === undefined && other === undefined) {
            return 0;
          }

          if (value !== undefined) {
            result = value;
          }

          if (other !== undefined) {
            if (result === undefined) {
              return other;
            }

            if (typeof value == 'string' || typeof other == 'string') {
              value = baseToString(value);
              other = baseToString(other);
            } else {
              value = baseToNumber(value);
              other = baseToNumber(other);
            }

            result = operator(value, other);
          }

          return result;
        };
      }

      function createOver(arrayFunc) {
        return rest(function (iteratees) {
          iteratees = iteratees.length == 1 && isArray(iteratees[0]) ? arrayMap(iteratees[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(iteratees, 1, isFlattenableIteratee), baseUnary(getIteratee()));
          return rest(function (args) {
            var thisArg = this;
            return arrayFunc(iteratees, function (iteratee) {
              return apply(iteratee, thisArg, args);
            });
          });
        });
      }

      function createPadding(length, chars) {
        chars = chars === undefined ? ' ' : baseToString(chars);
        var charsLength = chars.length;

        if (charsLength < 2) {
          return charsLength ? baseRepeat(chars, length) : chars;
        }

        var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
        return reHasComplexSymbol.test(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
      }

      function createPartialWrapper(func, bitmask, thisArg, partials) {
        var isBind = bitmask & BIND_FLAG,
            Ctor = createCtorWrapper(func);

        function wrapper() {
          var argsIndex = -1,
              argsLength = arguments.length,
              leftIndex = -1,
              leftLength = partials.length,
              args = Array(leftLength + argsLength),
              fn = this && this !== root && this instanceof wrapper ? Ctor : func;

          while (++leftIndex < leftLength) {
            args[leftIndex] = partials[leftIndex];
          }

          while (argsLength--) {
            args[leftIndex++] = arguments[++argsIndex];
          }

          return apply(fn, isBind ? thisArg : this, args);
        }

        return wrapper;
      }

      function createRange(fromRight) {
        return function (start, end, step) {
          if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
            end = step = undefined;
          }

          start = toNumber(start);
          start = start === start ? start : 0;

          if (end === undefined) {
            end = start;
            start = 0;
          } else {
            end = toNumber(end) || 0;
          }

          step = step === undefined ? start < end ? 1 : -1 : toNumber(step) || 0;
          return baseRange(start, end, step, fromRight);
        };
      }

      function createRelationalOperation(operator) {
        return function (value, other) {
          if (!(typeof value == 'string' && typeof other == 'string')) {
            value = toNumber(value);
            other = toNumber(other);
          }

          return operator(value, other);
        };
      }

      function createRecurryWrapper(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
        var isCurry = bitmask & CURRY_FLAG,
            newHolders = isCurry ? holders : undefined,
            newHoldersRight = isCurry ? undefined : holders,
            newPartials = isCurry ? partials : undefined,
            newPartialsRight = isCurry ? undefined : partials;
        bitmask |= isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG;
        bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

        if (!(bitmask & CURRY_BOUND_FLAG)) {
          bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
        }

        var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];
        var result = wrapFunc.apply(undefined, newData);

        if (isLaziable(func)) {
          setData(result, newData);
        }

        result.placeholder = placeholder;
        return result;
      }

      function createRound(methodName) {
        var func = Math[methodName];
        return function (number, precision) {
          number = toNumber(number);
          precision = toInteger(precision);

          if (precision) {
            var pair = (toString(number) + 'e').split('e'),
                value = func(pair[0] + 'e' + (+pair[1] + precision));
            pair = (toString(value) + 'e').split('e');
            return +(pair[0] + 'e' + (+pair[1] - precision));
          }

          return func(number);
        };
      }

      var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
        return new Set(values);
      };

      function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
        var isBindKey = bitmask & BIND_KEY_FLAG;

        if (!isBindKey && typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        var length = partials ? partials.length : 0;

        if (!length) {
          bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
          partials = holders = undefined;
        }

        ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
        arity = arity === undefined ? arity : toInteger(arity);
        length -= holders ? holders.length : 0;

        if (bitmask & PARTIAL_RIGHT_FLAG) {
          var partialsRight = partials,
              holdersRight = holders;
          partials = holders = undefined;
        }

        var data = isBindKey ? undefined : getData(func);
        var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

        if (data) {
          mergeData(newData, data);
        }

        func = newData[0];
        bitmask = newData[1];
        thisArg = newData[2];
        partials = newData[3];
        holders = newData[4];
        arity = newData[9] = newData[9] == null ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);

        if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
          bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
        }

        if (!bitmask || bitmask == BIND_FLAG) {
          var result = createBaseWrapper(func, bitmask, thisArg);
        } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
          result = createCurryWrapper(func, bitmask, arity);
        } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
          result = createPartialWrapper(func, bitmask, thisArg, partials);
        } else {
          result = createHybridWrapper.apply(undefined, newData);
        }

        var setter = data ? baseSetData : setData;
        return setter(result, newData);
      }

      function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
        var index = -1,
            isPartial = bitmask & PARTIAL_COMPARE_FLAG,
            isUnordered = bitmask & UNORDERED_COMPARE_FLAG,
            arrLength = array.length,
            othLength = other.length;

        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }

        var stacked = stack.get(array);

        if (stacked) {
          return stacked == other;
        }

        var result = true;
        stack.set(array, other);

        while (++index < arrLength) {
          var arrValue = array[index],
              othValue = other[index];

          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
          }

          if (compared !== undefined) {
            if (compared) {
              continue;
            }

            result = false;
            break;
          }

          if (isUnordered) {
            if (!arraySome(other, function (othValue) {
              return arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack);
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
            result = false;
            break;
          }
        }

        stack['delete'](array);
        return result;
      }

      function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
        switch (tag) {
          case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }

            object = object.buffer;
            other = other.buffer;

          case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
              return false;
            }

            return true;

          case boolTag:
          case dateTag:
            return +object == +other;

          case errorTag:
            return object.name == other.name && object.message == other.message;

          case numberTag:
            return object != +object ? other != +other : object == +other;

          case regexpTag:
          case stringTag:
            return object == other + '';

          case mapTag:
            var convert = mapToArray;

          case setTag:
            var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
            convert || (convert = setToArray);

            if (object.size != other.size && !isPartial) {
              return false;
            }

            var stacked = stack.get(object);

            if (stacked) {
              return stacked == other;
            }

            bitmask |= UNORDERED_COMPARE_FLAG;
            stack.set(object, other);
            return equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);

          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }

        }

        return false;
      }

      function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
        var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
            objProps = keys(object),
            objLength = objProps.length,
            othProps = keys(other),
            othLength = othProps.length;

        if (objLength != othLength && !isPartial) {
          return false;
        }

        var index = objLength;

        while (index--) {
          var key = objProps[index];

          if (!(isPartial ? key in other : baseHas(other, key))) {
            return false;
          }
        }

        var stacked = stack.get(object);

        if (stacked) {
          return stacked == other;
        }

        var result = true;
        stack.set(object, other);
        var skipCtor = isPartial;

        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key],
              othValue = other[key];

          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }

          if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) : compared)) {
            result = false;
            break;
          }

          skipCtor || (skipCtor = key == 'constructor');
        }

        if (result && !skipCtor) {
          var objCtor = object.constructor,
              othCtor = other.constructor;

          if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
            result = false;
          }
        }

        stack['delete'](object);
        return result;
      }

      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }

      function getAllKeysIn(object) {
        return baseGetAllKeys(object, keysIn, getSymbolsIn);
      }

      var getData = !metaMap ? noop : function (func) {
        return metaMap.get(func);
      };

      function getFuncName(func) {
        var result = func.name + '',
            array = realNames[result],
            length = hasOwnProperty.call(realNames, result) ? array.length : 0;

        while (length--) {
          var data = array[length],
              otherFunc = data.func;

          if (otherFunc == null || otherFunc == func) {
            return data.name;
          }
        }

        return result;
      }

      function getIteratee() {
        var result = lodash.iteratee || iteratee;
        result = result === iteratee ? baseIteratee : result;
        return arguments.length ? result(arguments[0], arguments[1]) : result;
      }

      var getLength = baseProperty('length');

      function getMatchData(object) {
        var result = toPairs(object),
            length = result.length;

        while (length--) {
          result[length][2] = isStrictComparable(result[length][1]);
        }

        return result;
      }

      function getNative(object, key) {
        var value = object[key];
        return isNative(value) ? value : undefined;
      }

      function getPlaceholder(func) {
        var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
        return object.placeholder;
      }

      function getPrototype(value) {
        return nativeGetPrototype(Object(value));
      }

      function getSymbols(object) {
        return getOwnPropertySymbols(Object(object));
      }

      if (!getOwnPropertySymbols) {
        getSymbols = function getSymbols() {
          return [];
        };
      }

      var getSymbolsIn = !getOwnPropertySymbols ? getSymbols : function (object) {
        var result = [];

        while (object) {
          arrayPush(result, getSymbols(object));
          object = getPrototype(object);
        }

        return result;
      };

      function getTag(value) {
        return objectToString.call(value);
      }

      if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
        getTag = function getTag(value) {
          var result = objectToString.call(value),
              Ctor = result == objectTag ? value.constructor : undefined,
              ctorString = Ctor ? toSource(Ctor) : undefined;

          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;

              case mapCtorString:
                return mapTag;

              case promiseCtorString:
                return promiseTag;

              case setCtorString:
                return setTag;

              case weakMapCtorString:
                return weakMapTag;
            }
          }

          return result;
        };
      }

      function getView(start, end, transforms) {
        var index = -1,
            length = transforms.length;

        while (++index < length) {
          var data = transforms[index],
              size = data.size;

          switch (data.type) {
            case 'drop':
              start += size;
              break;

            case 'dropRight':
              end -= size;
              break;

            case 'take':
              end = nativeMin(end, start + size);
              break;

            case 'takeRight':
              start = nativeMax(start, end - size);
              break;
          }
        }

        return {
          'start': start,
          'end': end
        };
      }

      function hasPath(object, path, hasFunc) {
        path = isKey(path, object) ? [path] : castPath(path);
        var result,
            index = -1,
            length = path.length;

        while (++index < length) {
          var key = toKey(path[index]);

          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }

          object = object[key];
        }

        if (result) {
          return result;
        }

        var length = object ? object.length : 0;
        return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isString(object) || isArguments(object));
      }

      function initCloneArray(array) {
        var length = array.length,
            result = array.constructor(length);

        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
          result.index = array.index;
          result.input = array.input;
        }

        return result;
      }

      function initCloneObject(object) {
        return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
      }

      function initCloneByTag(object, tag, cloneFunc, isDeep) {
        var Ctor = object.constructor;

        switch (tag) {
          case arrayBufferTag:
            return cloneArrayBuffer(object);

          case boolTag:
          case dateTag:
            return new Ctor(+object);

          case dataViewTag:
            return cloneDataView(object, isDeep);

          case float32Tag:
          case float64Tag:
          case int8Tag:
          case int16Tag:
          case int32Tag:
          case uint8Tag:
          case uint8ClampedTag:
          case uint16Tag:
          case uint32Tag:
            return cloneTypedArray(object, isDeep);

          case mapTag:
            return cloneMap(object, isDeep, cloneFunc);

          case numberTag:
          case stringTag:
            return new Ctor(object);

          case regexpTag:
            return cloneRegExp(object);

          case setTag:
            return cloneSet(object, isDeep, cloneFunc);

          case symbolTag:
            return cloneSymbol(object);
        }
      }

      function indexKeys(object) {
        var length = object ? object.length : undefined;

        if (isLength(length) && (isArray(object) || isString(object) || isArguments(object))) {
          return baseTimes(length, String);
        }

        return null;
      }

      function isFlattenable(value) {
        return isArrayLikeObject(value) && (isArray(value) || isArguments(value));
      }

      function isFlattenableIteratee(value) {
        return isArray(value) && !(value.length == 2 && !isFunction(value[0]));
      }

      function isIndex(value, length) {
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
      }

      function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
          return false;
        }

        var type = typeof index;

        if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
          return eq(object[index], value);
        }

        return false;
      }

      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }

        var type = typeof value;

        if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
          return true;
        }

        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
      }

      function isKeyable(value) {
        var type = typeof value;
        return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
      }

      function isLaziable(func) {
        var funcName = getFuncName(func),
            other = lodash[funcName];

        if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
          return false;
        }

        if (func === other) {
          return true;
        }

        var data = getData(other);
        return !!data && func === data[0];
      }

      function isPrototype(value) {
        var Ctor = value && value.constructor,
            proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
        return value === proto;
      }

      function isStrictComparable(value) {
        return value === value && !isObject(value);
      }

      function matchesStrictComparable(key, srcValue) {
        return function (object) {
          if (object == null) {
            return false;
          }

          return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
        };
      }

      function mergeData(data, source) {
        var bitmask = data[1],
            srcBitmask = source[1],
            newBitmask = bitmask | srcBitmask,
            isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);
        var isCombo = srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG || srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8] || srcBitmask == (ARY_FLAG | REARG_FLAG) && source[7].length <= source[8] && bitmask == CURRY_FLAG;

        if (!(isCommon || isCombo)) {
          return data;
        }

        if (srcBitmask & BIND_FLAG) {
          data[2] = source[2];
          newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;
        }

        var value = source[3];

        if (value) {
          var partials = data[3];
          data[3] = partials ? composeArgs(partials, value, source[4]) : value;
          data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
        }

        value = source[5];

        if (value) {
          partials = data[5];
          data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
          data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
        }

        value = source[7];

        if (value) {
          data[7] = value;
        }

        if (srcBitmask & ARY_FLAG) {
          data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
        }

        if (data[9] == null) {
          data[9] = source[9];
        }

        data[0] = source[0];
        data[1] = newBitmask;
        return data;
      }

      function mergeDefaults(objValue, srcValue, key, object, source, stack) {
        if (isObject(objValue) && isObject(srcValue)) {
          baseMerge(objValue, srcValue, undefined, mergeDefaults, stack.set(srcValue, objValue));
        }

        return objValue;
      }

      function parent(object, path) {
        return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
      }

      function reorder(array, indexes) {
        var arrLength = array.length,
            length = nativeMin(indexes.length, arrLength),
            oldArray = copyArray(array);

        while (length--) {
          var index = indexes[length];
          array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
        }

        return array;
      }

      var setData = function () {
        var count = 0,
            lastCalled = 0;
        return function (key, value) {
          var stamp = now(),
              remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;

          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return key;
            }
          } else {
            count = 0;
          }

          return baseSetData(key, value);
        };
      }();

      var stringToPath = memoize(function (string) {
        var result = [];
        toString(string).replace(rePropName, function (match, number, quote, string) {
          result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
        });
        return result;
      });

      function toKey(value) {
        if (typeof value == 'string' || isSymbol(value)) {
          return value;
        }

        var result = value + '';
        return result == '0' && 1 / value == -INFINITY ? '-0' : result;
      }

      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {}

          try {
            return func + '';
          } catch (e) {}
        }

        return '';
      }

      function wrapperClone(wrapper) {
        if (wrapper instanceof LazyWrapper) {
          return wrapper.clone();
        }

        var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
        result.__actions__ = copyArray(wrapper.__actions__);
        result.__index__ = wrapper.__index__;
        result.__values__ = wrapper.__values__;
        return result;
      }

      function chunk(array, size, guard) {
        if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
          size = 1;
        } else {
          size = nativeMax(toInteger(size), 0);
        }

        var length = array ? array.length : 0;

        if (!length || size < 1) {
          return [];
        }

        var index = 0,
            resIndex = 0,
            result = Array(nativeCeil(length / size));

        while (index < length) {
          result[resIndex++] = baseSlice(array, index, index += size);
        }

        return result;
      }

      function compact(array) {
        var index = -1,
            length = array ? array.length : 0,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index];

          if (value) {
            result[resIndex++] = value;
          }
        }

        return result;
      }

      function concat() {
        var length = arguments.length,
            array = castArray(arguments[0]);

        if (length < 2) {
          return length ? copyArray(array) : [];
        }

        var args = Array(length - 1);

        while (length--) {
          args[length - 1] = arguments[length];
        }

        return arrayConcat(array, baseFlatten(args, 1));
      }

      var difference = rest(function (array, values) {
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
      });
      var differenceBy = rest(function (array, values) {
        var iteratee = last(values);

        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }

        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee)) : [];
      });
      var differenceWith = rest(function (array, values) {
        var comparator = last(values);

        if (isArrayLikeObject(comparator)) {
          comparator = undefined;
        }

        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
      });

      function drop(array, n, guard) {
        var length = array ? array.length : 0;

        if (!length) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      function dropRight(array, n, guard) {
        var length = array ? array.length : 0;

        if (!length) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      function dropRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
      }

      function dropWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
      }

      function fill(array, value, start, end) {
        var length = array ? array.length : 0;

        if (!length) {
          return [];
        }

        if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
          start = 0;
          end = length;
        }

        return baseFill(array, value, start, end);
      }

      function findIndex(array, predicate) {
        return array && array.length ? baseFindIndex(array, getIteratee(predicate, 3)) : -1;
      }

      function findLastIndex(array, predicate) {
        return array && array.length ? baseFindIndex(array, getIteratee(predicate, 3), true) : -1;
      }

      function flatten(array) {
        var length = array ? array.length : 0;
        return length ? baseFlatten(array, 1) : [];
      }

      function flattenDeep(array) {
        var length = array ? array.length : 0;
        return length ? baseFlatten(array, INFINITY) : [];
      }

      function flattenDepth(array, depth) {
        var length = array ? array.length : 0;

        if (!length) {
          return [];
        }

        depth = depth === undefined ? 1 : toInteger(depth);
        return baseFlatten(array, depth);
      }

      function fromPairs(pairs) {
        var index = -1,
            length = pairs ? pairs.length : 0,
            result = {};

        while (++index < length) {
          var pair = pairs[index];
          result[pair[0]] = pair[1];
        }

        return result;
      }

      function head(array) {
        return array && array.length ? array[0] : undefined;
      }

      function indexOf(array, value, fromIndex) {
        var length = array ? array.length : 0;

        if (!length) {
          return -1;
        }

        fromIndex = toInteger(fromIndex);

        if (fromIndex < 0) {
          fromIndex = nativeMax(length + fromIndex, 0);
        }

        return baseIndexOf(array, value, fromIndex);
      }

      function initial(array) {
        return dropRight(array, 1);
      }

      var intersection = rest(function (arrays) {
        var mapped = arrayMap(arrays, castArrayLikeObject);
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
      });
      var intersectionBy = rest(function (arrays) {
        var iteratee = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);

        if (iteratee === last(mapped)) {
          iteratee = undefined;
        } else {
          mapped.pop();
        }

        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee)) : [];
      });
      var intersectionWith = rest(function (arrays) {
        var comparator = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);

        if (comparator === last(mapped)) {
          comparator = undefined;
        } else {
          mapped.pop();
        }

        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
      });

      function join(array, separator) {
        return array ? nativeJoin.call(array, separator) : '';
      }

      function last(array) {
        var length = array ? array.length : 0;
        return length ? array[length - 1] : undefined;
      }

      function lastIndexOf(array, value, fromIndex) {
        var length = array ? array.length : 0;

        if (!length) {
          return -1;
        }

        var index = length;

        if (fromIndex !== undefined) {
          index = toInteger(fromIndex);
          index = (index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1)) + 1;
        }

        if (value !== value) {
          return indexOfNaN(array, index, true);
        }

        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }

        return -1;
      }

      function nth(array, n) {
        return array && array.length ? baseNth(array, toInteger(n)) : undefined;
      }

      var pull = rest(pullAll);

      function pullAll(array, values) {
        return array && array.length && values && values.length ? basePullAll(array, values) : array;
      }

      function pullAllBy(array, values, iteratee) {
        return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee)) : array;
      }

      function pullAllWith(array, values, comparator) {
        return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
      }

      var pullAt = rest(function (array, indexes) {
        indexes = baseFlatten(indexes, 1);
        var length = array ? array.length : 0,
            result = baseAt(array, indexes);
        basePullAt(array, arrayMap(indexes, function (index) {
          return isIndex(index, length) ? +index : index;
        }).sort(compareAscending));
        return result;
      });

      function remove(array, predicate) {
        var result = [];

        if (!(array && array.length)) {
          return result;
        }

        var index = -1,
            indexes = [],
            length = array.length;
        predicate = getIteratee(predicate, 3);

        while (++index < length) {
          var value = array[index];

          if (predicate(value, index, array)) {
            result.push(value);
            indexes.push(index);
          }
        }

        basePullAt(array, indexes);
        return result;
      }

      function reverse(array) {
        return array ? nativeReverse.call(array) : array;
      }

      function slice(array, start, end) {
        var length = array ? array.length : 0;

        if (!length) {
          return [];
        }

        if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
          start = 0;
          end = length;
        } else {
          start = start == null ? 0 : toInteger(start);
          end = end === undefined ? length : toInteger(end);
        }

        return baseSlice(array, start, end);
      }

      function sortedIndex(array, value) {
        return baseSortedIndex(array, value);
      }

      function sortedIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee));
      }

      function sortedIndexOf(array, value) {
        var length = array ? array.length : 0;

        if (length) {
          var index = baseSortedIndex(array, value);

          if (index < length && eq(array[index], value)) {
            return index;
          }
        }

        return -1;
      }

      function sortedLastIndex(array, value) {
        return baseSortedIndex(array, value, true);
      }

      function sortedLastIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee), true);
      }

      function sortedLastIndexOf(array, value) {
        var length = array ? array.length : 0;

        if (length) {
          var index = baseSortedIndex(array, value, true) - 1;

          if (eq(array[index], value)) {
            return index;
          }
        }

        return -1;
      }

      function sortedUniq(array) {
        return array && array.length ? baseSortedUniq(array) : [];
      }

      function sortedUniqBy(array, iteratee) {
        return array && array.length ? baseSortedUniq(array, getIteratee(iteratee)) : [];
      }

      function tail(array) {
        return drop(array, 1);
      }

      function take(array, n, guard) {
        if (!(array && array.length)) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      function takeRight(array, n, guard) {
        var length = array ? array.length : 0;

        if (!length) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      function takeRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
      }

      function takeWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
      }

      var union = rest(function (arrays) {
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
      });
      var unionBy = rest(function (arrays) {
        var iteratee = last(arrays);

        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }

        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee));
      });
      var unionWith = rest(function (arrays) {
        var comparator = last(arrays);

        if (isArrayLikeObject(comparator)) {
          comparator = undefined;
        }

        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
      });

      function uniq(array) {
        return array && array.length ? baseUniq(array) : [];
      }

      function uniqBy(array, iteratee) {
        return array && array.length ? baseUniq(array, getIteratee(iteratee)) : [];
      }

      function uniqWith(array, comparator) {
        return array && array.length ? baseUniq(array, undefined, comparator) : [];
      }

      function unzip(array) {
        if (!(array && array.length)) {
          return [];
        }

        var length = 0;
        array = arrayFilter(array, function (group) {
          if (isArrayLikeObject(group)) {
            length = nativeMax(group.length, length);
            return true;
          }
        });
        return baseTimes(length, function (index) {
          return arrayMap(array, baseProperty(index));
        });
      }

      function unzipWith(array, iteratee) {
        if (!(array && array.length)) {
          return [];
        }

        var result = unzip(array);

        if (iteratee == null) {
          return result;
        }

        return arrayMap(result, function (group) {
          return apply(iteratee, undefined, group);
        });
      }

      var without = rest(function (array, values) {
        return isArrayLikeObject(array) ? baseDifference(array, values) : [];
      });
      var xor = rest(function (arrays) {
        return baseXor(arrayFilter(arrays, isArrayLikeObject));
      });
      var xorBy = rest(function (arrays) {
        var iteratee = last(arrays);

        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }

        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee));
      });
      var xorWith = rest(function (arrays) {
        var comparator = last(arrays);

        if (isArrayLikeObject(comparator)) {
          comparator = undefined;
        }

        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
      });
      var zip = rest(unzip);

      function zipObject(props, values) {
        return baseZipObject(props || [], values || [], assignValue);
      }

      function zipObjectDeep(props, values) {
        return baseZipObject(props || [], values || [], baseSet);
      }

      var zipWith = rest(function (arrays) {
        var length = arrays.length,
            iteratee = length > 1 ? arrays[length - 1] : undefined;
        iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
        return unzipWith(arrays, iteratee);
      });

      function chain(value) {
        var result = lodash(value);
        result.__chain__ = true;
        return result;
      }

      function tap(value, interceptor) {
        interceptor(value);
        return value;
      }

      function thru(value, interceptor) {
        return interceptor(value);
      }

      var wrapperAt = rest(function (paths) {
        paths = baseFlatten(paths, 1);

        var length = paths.length,
            start = length ? paths[0] : 0,
            value = this.__wrapped__,
            interceptor = function interceptor(object) {
          return baseAt(object, paths);
        };

        if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
          return this.thru(interceptor);
        }

        value = value.slice(start, +start + (length ? 1 : 0));

        value.__actions__.push({
          'func': thru,
          'args': [interceptor],
          'thisArg': undefined
        });

        return new LodashWrapper(value, this.__chain__).thru(function (array) {
          if (length && !array.length) {
            array.push(undefined);
          }

          return array;
        });
      });

      function wrapperChain() {
        return chain(this);
      }

      function wrapperCommit() {
        return new LodashWrapper(this.value(), this.__chain__);
      }

      function wrapperNext() {
        if (this.__values__ === undefined) {
          this.__values__ = toArray(this.value());
        }

        var done = this.__index__ >= this.__values__.length,
            value = done ? undefined : this.__values__[this.__index__++];
        return {
          'done': done,
          'value': value
        };
      }

      function wrapperToIterator() {
        return this;
      }

      function wrapperPlant(value) {
        var result,
            parent = this;

        while (parent instanceof baseLodash) {
          var clone = wrapperClone(parent);
          clone.__index__ = 0;
          clone.__values__ = undefined;

          if (result) {
            previous.__wrapped__ = clone;
          } else {
            result = clone;
          }

          var previous = clone;
          parent = parent.__wrapped__;
        }

        previous.__wrapped__ = value;
        return result;
      }

      function wrapperReverse() {
        var value = this.__wrapped__;

        if (value instanceof LazyWrapper) {
          var wrapped = value;

          if (this.__actions__.length) {
            wrapped = new LazyWrapper(this);
          }

          wrapped = wrapped.reverse();

          wrapped.__actions__.push({
            'func': thru,
            'args': [reverse],
            'thisArg': undefined
          });

          return new LodashWrapper(wrapped, this.__chain__);
        }

        return this.thru(reverse);
      }

      function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
      }

      var countBy = createAggregator(function (result, value, key) {
        hasOwnProperty.call(result, key) ? ++result[key] : result[key] = 1;
      });

      function every(collection, predicate, guard) {
        var func = isArray(collection) ? arrayEvery : baseEvery;

        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined;
        }

        return func(collection, getIteratee(predicate, 3));
      }

      function filter(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, getIteratee(predicate, 3));
      }

      function find(collection, predicate) {
        predicate = getIteratee(predicate, 3);

        if (isArray(collection)) {
          var index = baseFindIndex(collection, predicate);
          return index > -1 ? collection[index] : undefined;
        }

        return baseFind(collection, predicate, baseEach);
      }

      function findLast(collection, predicate) {
        predicate = getIteratee(predicate, 3);

        if (isArray(collection)) {
          var index = baseFindIndex(collection, predicate, true);
          return index > -1 ? collection[index] : undefined;
        }

        return baseFind(collection, predicate, baseEachRight);
      }

      function flatMap(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), 1);
      }

      function flatMapDeep(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), INFINITY);
      }

      function flatMapDepth(collection, iteratee, depth) {
        depth = depth === undefined ? 1 : toInteger(depth);
        return baseFlatten(map(collection, iteratee), depth);
      }

      function forEach(collection, iteratee) {
        return typeof iteratee == 'function' && isArray(collection) ? arrayEach(collection, iteratee) : baseEach(collection, getIteratee(iteratee));
      }

      function forEachRight(collection, iteratee) {
        return typeof iteratee == 'function' && isArray(collection) ? arrayEachRight(collection, iteratee) : baseEachRight(collection, getIteratee(iteratee));
      }

      var groupBy = createAggregator(function (result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          result[key].push(value);
        } else {
          result[key] = [value];
        }
      });

      function includes(collection, value, fromIndex, guard) {
        collection = isArrayLike(collection) ? collection : values(collection);
        fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
        var length = collection.length;

        if (fromIndex < 0) {
          fromIndex = nativeMax(length + fromIndex, 0);
        }

        return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
      }

      var invokeMap = rest(function (collection, path, args) {
        var index = -1,
            isFunc = typeof path == 'function',
            isProp = isKey(path),
            result = isArrayLike(collection) ? Array(collection.length) : [];
        baseEach(collection, function (value) {
          var func = isFunc ? path : isProp && value != null ? value[path] : undefined;
          result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);
        });
        return result;
      });
      var keyBy = createAggregator(function (result, value, key) {
        result[key] = value;
      });

      function map(collection, iteratee) {
        var func = isArray(collection) ? arrayMap : baseMap;
        return func(collection, getIteratee(iteratee, 3));
      }

      function orderBy(collection, iteratees, orders, guard) {
        if (collection == null) {
          return [];
        }

        if (!isArray(iteratees)) {
          iteratees = iteratees == null ? [] : [iteratees];
        }

        orders = guard ? undefined : orders;

        if (!isArray(orders)) {
          orders = orders == null ? [] : [orders];
        }

        return baseOrderBy(collection, iteratees, orders);
      }

      var partition = createAggregator(function (result, value, key) {
        result[key ? 0 : 1].push(value);
      }, function () {
        return [[], []];
      });

      function reduce(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduce : baseReduce,
            initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
      }

      function reduceRight(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduceRight : baseReduce,
            initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
      }

      function reject(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        predicate = getIteratee(predicate, 3);
        return func(collection, function (value, index, collection) {
          return !predicate(value, index, collection);
        });
      }

      function sample(collection) {
        var array = isArrayLike(collection) ? collection : values(collection),
            length = array.length;
        return length > 0 ? array[baseRandom(0, length - 1)] : undefined;
      }

      function sampleSize(collection, n, guard) {
        var index = -1,
            result = toArray(collection),
            length = result.length,
            lastIndex = length - 1;

        if (guard ? isIterateeCall(collection, n, guard) : n === undefined) {
          n = 1;
        } else {
          n = baseClamp(toInteger(n), 0, length);
        }

        while (++index < n) {
          var rand = baseRandom(index, lastIndex),
              value = result[rand];
          result[rand] = result[index];
          result[index] = value;
        }

        result.length = n;
        return result;
      }

      function shuffle(collection) {
        return sampleSize(collection, MAX_ARRAY_LENGTH);
      }

      function size(collection) {
        if (collection == null) {
          return 0;
        }

        if (isArrayLike(collection)) {
          var result = collection.length;
          return result && isString(collection) ? stringSize(collection) : result;
        }

        if (isObjectLike(collection)) {
          var tag = getTag(collection);

          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
        }

        return keys(collection).length;
      }

      function some(collection, predicate, guard) {
        var func = isArray(collection) ? arraySome : baseSome;

        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined;
        }

        return func(collection, getIteratee(predicate, 3));
      }

      var sortBy = rest(function (collection, iteratees) {
        if (collection == null) {
          return [];
        }

        var length = iteratees.length;

        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }

        iteratees = iteratees.length == 1 && isArray(iteratees[0]) ? iteratees[0] : baseFlatten(iteratees, 1, isFlattenableIteratee);
        return baseOrderBy(collection, iteratees, []);
      });
      var now = Date.now;

      function after(n, func) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        n = toInteger(n);
        return function () {
          if (--n < 1) {
            return func.apply(this, arguments);
          }
        };
      }

      function ary(func, n, guard) {
        n = guard ? undefined : n;
        n = func && n == null ? func.length : n;
        return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
      }

      function before(n, func) {
        var result;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        n = toInteger(n);
        return function () {
          if (--n > 0) {
            result = func.apply(this, arguments);
          }

          if (n <= 1) {
            func = undefined;
          }

          return result;
        };
      }

      var bind = rest(function (func, thisArg, partials) {
        var bitmask = BIND_FLAG;

        if (partials.length) {
          var holders = replaceHolders(partials, getPlaceholder(bind));
          bitmask |= PARTIAL_FLAG;
        }

        return createWrapper(func, bitmask, thisArg, partials, holders);
      });
      var bindKey = rest(function (object, key, partials) {
        var bitmask = BIND_FLAG | BIND_KEY_FLAG;

        if (partials.length) {
          var holders = replaceHolders(partials, getPlaceholder(bindKey));
          bitmask |= PARTIAL_FLAG;
        }

        return createWrapper(key, bitmask, object, partials, holders);
      });

      function curry(func, arity, guard) {
        arity = guard ? undefined : arity;
        var result = createWrapper(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curry.placeholder;
        return result;
      }

      function curryRight(func, arity, guard) {
        arity = guard ? undefined : arity;
        var result = createWrapper(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curryRight.placeholder;
        return result;
      }

      function debounce(func, wait, options) {
        var lastArgs,
            lastThis,
            maxWait,
            result,
            timerId,
            lastCallTime = 0,
            lastInvokeTime = 0,
            leading = false,
            maxing = false,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        wait = toNumber(wait) || 0;

        if (isObject(options)) {
          leading = !!options.leading;
          maxing = 'maxWait' in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        function invokeFunc(time) {
          var args = lastArgs,
              thisArg = lastThis;
          lastArgs = lastThis = undefined;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }

        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time) : result;
        }

        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime,
              result = wait - timeSinceLastCall;
          return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
        }

        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime;
          return !lastCallTime || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }

        function timerExpired() {
          var time = now();

          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }

          timerId = setTimeout(timerExpired, remainingWait(time));
        }

        function trailingEdge(time) {
          clearTimeout(timerId);
          timerId = undefined;

          if (trailing && lastArgs) {
            return invokeFunc(time);
          }

          lastArgs = lastThis = undefined;
          return result;
        }

        function cancel() {
          if (timerId !== undefined) {
            clearTimeout(timerId);
          }

          lastCallTime = lastInvokeTime = 0;
          lastArgs = lastThis = timerId = undefined;
        }

        function flush() {
          return timerId === undefined ? result : trailingEdge(now());
        }

        function debounced() {
          var time = now(),
              isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;

          if (isInvoking) {
            if (timerId === undefined) {
              return leadingEdge(lastCallTime);
            }

            if (maxing) {
              clearTimeout(timerId);
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }

          if (timerId === undefined) {
            timerId = setTimeout(timerExpired, wait);
          }

          return result;
        }

        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }

      var defer = rest(function (func, args) {
        return baseDelay(func, 1, args);
      });
      var delay = rest(function (func, wait, args) {
        return baseDelay(func, toNumber(wait) || 0, args);
      });

      function flip(func) {
        return createWrapper(func, FLIP_FLAG);
      }

      function memoize(func, resolver) {
        if (typeof func != 'function' || resolver && typeof resolver != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        var memoized = function memoized() {
          var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;

          if (cache.has(key)) {
            return cache.get(key);
          }

          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result);
          return result;
        };

        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }

      memoize.Cache = MapCache;

      function negate(predicate) {
        if (typeof predicate != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        return function () {
          return !predicate.apply(this, arguments);
        };
      }

      function once(func) {
        return before(2, func);
      }

      var overArgs = rest(function (func, transforms) {
        transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1, isFlattenableIteratee), baseUnary(getIteratee()));
        var funcsLength = transforms.length;
        return rest(function (args) {
          var index = -1,
              length = nativeMin(args.length, funcsLength);

          while (++index < length) {
            args[index] = transforms[index].call(this, args[index]);
          }

          return apply(func, this, args);
        });
      });
      var partial = rest(function (func, partials) {
        var holders = replaceHolders(partials, getPlaceholder(partial));
        return createWrapper(func, PARTIAL_FLAG, undefined, partials, holders);
      });
      var partialRight = rest(function (func, partials) {
        var holders = replaceHolders(partials, getPlaceholder(partialRight));
        return createWrapper(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);
      });
      var rearg = rest(function (func, indexes) {
        return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes, 1));
      });

      function rest(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        start = nativeMax(start === undefined ? func.length - 1 : toInteger(start), 0);
        return function () {
          var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array(length);

          while (++index < length) {
            array[index] = args[start + index];
          }

          switch (start) {
            case 0:
              return func.call(this, array);

            case 1:
              return func.call(this, args[0], array);

            case 2:
              return func.call(this, args[0], args[1], array);
          }

          var otherArgs = Array(start + 1);
          index = -1;

          while (++index < start) {
            otherArgs[index] = args[index];
          }

          otherArgs[start] = array;
          return apply(func, this, otherArgs);
        };
      }

      function spread(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
        return rest(function (args) {
          var array = args[start],
              otherArgs = castSlice(args, 0, start);

          if (array) {
            arrayPush(otherArgs, array);
          }

          return apply(func, this, otherArgs);
        });
      }

      function throttle(func, wait, options) {
        var leading = true,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        if (isObject(options)) {
          leading = 'leading' in options ? !!options.leading : leading;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        return debounce(func, wait, {
          'leading': leading,
          'maxWait': wait,
          'trailing': trailing
        });
      }

      function unary(func) {
        return ary(func, 1);
      }

      function wrap(value, wrapper) {
        wrapper = wrapper == null ? identity : wrapper;
        return partial(wrapper, value);
      }

      function castArray() {
        if (!arguments.length) {
          return [];
        }

        var value = arguments[0];
        return isArray(value) ? value : [value];
      }

      function clone(value) {
        return baseClone(value, false, true);
      }

      function cloneWith(value, customizer) {
        return baseClone(value, false, true, customizer);
      }

      function cloneDeep(value) {
        return baseClone(value, true, true);
      }

      function cloneDeepWith(value, customizer) {
        return baseClone(value, true, true, customizer);
      }

      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }

      var gt = createRelationalOperation(baseGt);
      var gte = createRelationalOperation(function (value, other) {
        return value >= other;
      });

      function isArguments(value) {
        return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
      }

      var isArray = Array.isArray;

      function isArrayBuffer(value) {
        return isObjectLike(value) && objectToString.call(value) == arrayBufferTag;
      }

      function isArrayLike(value) {
        return value != null && isLength(getLength(value)) && !isFunction(value);
      }

      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }

      function isBoolean(value) {
        return value === true || value === false || isObjectLike(value) && objectToString.call(value) == boolTag;
      }

      var isBuffer = !Buffer ? constant(false) : function (value) {
        return value instanceof Buffer;
      };

      function isDate(value) {
        return isObjectLike(value) && objectToString.call(value) == dateTag;
      }

      function isElement(value) {
        return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
      }

      function isEmpty(value) {
        if (isArrayLike(value) && (isArray(value) || isString(value) || isFunction(value.splice) || isArguments(value) || isBuffer(value))) {
          return !value.length;
        }

        if (isObjectLike(value)) {
          var tag = getTag(value);

          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
        }

        for (var key in value) {
          if (hasOwnProperty.call(value, key)) {
            return false;
          }
        }

        return !(nonEnumShadows && keys(value).length);
      }

      function isEqual(value, other) {
        return baseIsEqual(value, other);
      }

      function isEqualWith(value, other, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        var result = customizer ? customizer(value, other) : undefined;
        return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
      }

      function isError(value) {
        if (!isObjectLike(value)) {
          return false;
        }

        return objectToString.call(value) == errorTag || typeof value.message == 'string' && typeof value.name == 'string';
      }

      function isFinite(value) {
        return typeof value == 'number' && nativeIsFinite(value);
      }

      function isFunction(value) {
        var tag = isObject(value) ? objectToString.call(value) : '';
        return tag == funcTag || tag == genTag;
      }

      function isInteger(value) {
        return typeof value == 'number' && value == toInteger(value);
      }

      function isLength(value) {
        return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }

      function isObject(value) {
        var type = typeof value;
        return !!value && (type == 'object' || type == 'function');
      }

      function isObjectLike(value) {
        return !!value && typeof value == 'object';
      }

      function isMap(value) {
        return isObjectLike(value) && getTag(value) == mapTag;
      }

      function isMatch(object, source) {
        return object === source || baseIsMatch(object, source, getMatchData(source));
      }

      function isMatchWith(object, source, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseIsMatch(object, source, getMatchData(source), customizer);
      }

      function isNaN(value) {
        return isNumber(value) && value != +value;
      }

      function isNative(value) {
        if (!isObject(value)) {
          return false;
        }

        var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }

      function isNull(value) {
        return value === null;
      }

      function isNil(value) {
        return value == null;
      }

      function isNumber(value) {
        return typeof value == 'number' || isObjectLike(value) && objectToString.call(value) == numberTag;
      }

      function isPlainObject(value) {
        if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {
          return false;
        }

        var proto = getPrototype(value);

        if (proto === null) {
          return true;
        }

        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
        return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }

      function isRegExp(value) {
        return isObject(value) && objectToString.call(value) == regexpTag;
      }

      function isSafeInteger(value) {
        return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
      }

      function isSet(value) {
        return isObjectLike(value) && getTag(value) == setTag;
      }

      function isString(value) {
        return typeof value == 'string' || !isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag;
      }

      function isSymbol(value) {
        return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
      }

      function isTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
      }

      function isUndefined(value) {
        return value === undefined;
      }

      function isWeakMap(value) {
        return isObjectLike(value) && getTag(value) == weakMapTag;
      }

      function isWeakSet(value) {
        return isObjectLike(value) && objectToString.call(value) == weakSetTag;
      }

      var lt = createRelationalOperation(baseLt);
      var lte = createRelationalOperation(function (value, other) {
        return value <= other;
      });

      function toArray(value) {
        if (!value) {
          return [];
        }

        if (isArrayLike(value)) {
          return isString(value) ? stringToArray(value) : copyArray(value);
        }

        if (iteratorSymbol && value[iteratorSymbol]) {
          return iteratorToArray(value[iteratorSymbol]());
        }

        var tag = getTag(value),
            func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
        return func(value);
      }

      function toInteger(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }

        value = toNumber(value);

        if (value === INFINITY || value === -INFINITY) {
          var sign = value < 0 ? -1 : 1;
          return sign * MAX_INTEGER;
        }

        var remainder = value % 1;
        return value === value ? remainder ? value - remainder : value : 0;
      }

      function toLength(value) {
        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
      }

      function toNumber(value) {
        if (typeof value == 'number') {
          return value;
        }

        if (isSymbol(value)) {
          return NAN;
        }

        if (isObject(value)) {
          var other = isFunction(value.valueOf) ? value.valueOf() : value;
          value = isObject(other) ? other + '' : other;
        }

        if (typeof value != 'string') {
          return value === 0 ? value : +value;
        }

        value = value.replace(reTrim, '');
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }

      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }

      function toSafeInteger(value) {
        return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
      }

      function toString(value) {
        return value == null ? '' : baseToString(value);
      }

      var assign = createAssigner(function (object, source) {
        if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
          copyObject(source, keys(source), object);
          return;
        }

        for (var key in source) {
          if (hasOwnProperty.call(source, key)) {
            assignValue(object, key, source[key]);
          }
        }
      });
      var assignIn = createAssigner(function (object, source) {
        if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
          copyObject(source, keysIn(source), object);
          return;
        }

        for (var key in source) {
          assignValue(object, key, source[key]);
        }
      });
      var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
        copyObject(source, keysIn(source), object, customizer);
      });
      var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
        copyObject(source, keys(source), object, customizer);
      });
      var at = rest(function (object, paths) {
        return baseAt(object, baseFlatten(paths, 1));
      });

      function create(prototype, properties) {
        var result = baseCreate(prototype);
        return properties ? baseAssign(result, properties) : result;
      }

      var defaults = rest(function (args) {
        args.push(undefined, assignInDefaults);
        return apply(assignInWith, undefined, args);
      });
      var defaultsDeep = rest(function (args) {
        args.push(undefined, mergeDefaults);
        return apply(mergeWith, undefined, args);
      });

      function findKey(object, predicate) {
        return baseFind(object, getIteratee(predicate, 3), baseForOwn, true);
      }

      function findLastKey(object, predicate) {
        return baseFind(object, getIteratee(predicate, 3), baseForOwnRight, true);
      }

      function forIn(object, iteratee) {
        return object == null ? object : baseFor(object, getIteratee(iteratee), keysIn);
      }

      function forInRight(object, iteratee) {
        return object == null ? object : baseForRight(object, getIteratee(iteratee), keysIn);
      }

      function forOwn(object, iteratee) {
        return object && baseForOwn(object, getIteratee(iteratee));
      }

      function forOwnRight(object, iteratee) {
        return object && baseForOwnRight(object, getIteratee(iteratee));
      }

      function functions(object) {
        return object == null ? [] : baseFunctions(object, keys(object));
      }

      function functionsIn(object) {
        return object == null ? [] : baseFunctions(object, keysIn(object));
      }

      function get(object, path, defaultValue) {
        var result = object == null ? undefined : baseGet(object, path);
        return result === undefined ? defaultValue : result;
      }

      function has(object, path) {
        return object != null && hasPath(object, path, baseHas);
      }

      function hasIn(object, path) {
        return object != null && hasPath(object, path, baseHasIn);
      }

      var invert = createInverter(function (result, value, key) {
        result[value] = key;
      }, constant(identity));
      var invertBy = createInverter(function (result, value, key) {
        if (hasOwnProperty.call(result, value)) {
          result[value].push(key);
        } else {
          result[value] = [key];
        }
      }, getIteratee);
      var invoke = rest(baseInvoke);

      function keys(object) {
        var isProto = isPrototype(object);

        if (!(isProto || isArrayLike(object))) {
          return baseKeys(object);
        }

        var indexes = indexKeys(object),
            skipIndexes = !!indexes,
            result = indexes || [],
            length = result.length;

        for (var key in object) {
          if (baseHas(object, key) && !(skipIndexes && (key == 'length' || isIndex(key, length))) && !(isProto && key == 'constructor')) {
            result.push(key);
          }
        }

        return result;
      }

      function keysIn(object) {
        var index = -1,
            isProto = isPrototype(object),
            props = baseKeysIn(object),
            propsLength = props.length,
            indexes = indexKeys(object),
            skipIndexes = !!indexes,
            result = indexes || [],
            length = result.length;

        while (++index < propsLength) {
          var key = props[index];

          if (!(skipIndexes && (key == 'length' || isIndex(key, length))) && !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key);
          }
        }

        return result;
      }

      function mapKeys(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);
        baseForOwn(object, function (value, key, object) {
          result[iteratee(value, key, object)] = value;
        });
        return result;
      }

      function mapValues(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);
        baseForOwn(object, function (value, key, object) {
          result[key] = iteratee(value, key, object);
        });
        return result;
      }

      var merge = createAssigner(function (object, source, srcIndex) {
        baseMerge(object, source, srcIndex);
      });
      var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
        baseMerge(object, source, srcIndex, customizer);
      });
      var omit = rest(function (object, props) {
        if (object == null) {
          return {};
        }

        props = arrayMap(baseFlatten(props, 1), toKey);
        return basePick(object, baseDifference(getAllKeysIn(object), props));
      });

      function omitBy(object, predicate) {
        predicate = getIteratee(predicate);
        return basePickBy(object, function (value, key) {
          return !predicate(value, key);
        });
      }

      var pick = rest(function (object, props) {
        return object == null ? {} : basePick(object, arrayMap(baseFlatten(props, 1), toKey));
      });

      function pickBy(object, predicate) {
        return object == null ? {} : basePickBy(object, getIteratee(predicate));
      }

      function result(object, path, defaultValue) {
        path = isKey(path, object) ? [path] : castPath(path);
        var index = -1,
            length = path.length;

        if (!length) {
          object = undefined;
          length = 1;
        }

        while (++index < length) {
          var value = object == null ? undefined : object[toKey(path[index])];

          if (value === undefined) {
            index = length;
            value = defaultValue;
          }

          object = isFunction(value) ? value.call(object) : value;
        }

        return object;
      }

      function set(object, path, value) {
        return object == null ? object : baseSet(object, path, value);
      }

      function setWith(object, path, value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return object == null ? object : baseSet(object, path, value, customizer);
      }

      function toPairs(object) {
        return baseToPairs(object, keys(object));
      }

      function toPairsIn(object) {
        return baseToPairs(object, keysIn(object));
      }

      function transform(object, iteratee, accumulator) {
        var isArr = isArray(object) || isTypedArray(object);
        iteratee = getIteratee(iteratee, 4);

        if (accumulator == null) {
          if (isArr || isObject(object)) {
            var Ctor = object.constructor;

            if (isArr) {
              accumulator = isArray(object) ? new Ctor() : [];
            } else {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            }
          } else {
            accumulator = {};
          }
        }

        (isArr ? arrayEach : baseForOwn)(object, function (value, index, object) {
          return iteratee(accumulator, value, index, object);
        });
        return accumulator;
      }

      function unset(object, path) {
        return object == null ? true : baseUnset(object, path);
      }

      function update(object, path, updater) {
        return object == null ? object : baseUpdate(object, path, castFunction(updater));
      }

      function updateWith(object, path, updater, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
      }

      function values(object) {
        return object ? baseValues(object, keys(object)) : [];
      }

      function valuesIn(object) {
        return object == null ? [] : baseValues(object, keysIn(object));
      }

      function clamp(number, lower, upper) {
        if (upper === undefined) {
          upper = lower;
          lower = undefined;
        }

        if (upper !== undefined) {
          upper = toNumber(upper);
          upper = upper === upper ? upper : 0;
        }

        if (lower !== undefined) {
          lower = toNumber(lower);
          lower = lower === lower ? lower : 0;
        }

        return baseClamp(toNumber(number), lower, upper);
      }

      function inRange(number, start, end) {
        start = toNumber(start) || 0;

        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toNumber(end) || 0;
        }

        number = toNumber(number);
        return baseInRange(number, start, end);
      }

      function random(lower, upper, floating) {
        if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
          upper = floating = undefined;
        }

        if (floating === undefined) {
          if (typeof upper == 'boolean') {
            floating = upper;
            upper = undefined;
          } else if (typeof lower == 'boolean') {
            floating = lower;
            lower = undefined;
          }
        }

        if (lower === undefined && upper === undefined) {
          lower = 0;
          upper = 1;
        } else {
          lower = toNumber(lower) || 0;

          if (upper === undefined) {
            upper = lower;
            lower = 0;
          } else {
            upper = toNumber(upper) || 0;
          }
        }

        if (lower > upper) {
          var temp = lower;
          lower = upper;
          upper = temp;
        }

        if (floating || lower % 1 || upper % 1) {
          var rand = nativeRandom();
          return nativeMin(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
        }

        return baseRandom(lower, upper);
      }

      var camelCase = createCompounder(function (result, word, index) {
        word = word.toLowerCase();
        return result + (index ? capitalize(word) : word);
      });

      function capitalize(string) {
        return upperFirst(toString(string).toLowerCase());
      }

      function deburr(string) {
        string = toString(string);
        return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
      }

      function endsWith(string, target, position) {
        string = toString(string);
        target = baseToString(target);
        var length = string.length;
        position = position === undefined ? length : baseClamp(toInteger(position), 0, length);
        position -= target.length;
        return position >= 0 && string.indexOf(target, position) == position;
      }

      function escape(string) {
        string = toString(string);
        return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
      }

      function escapeRegExp(string) {
        string = toString(string);
        return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
      }

      var kebabCase = createCompounder(function (result, word, index) {
        return result + (index ? '-' : '') + word.toLowerCase();
      });
      var lowerCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + word.toLowerCase();
      });
      var lowerFirst = createCaseFirst('toLowerCase');

      function pad(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;

        if (!length || strLength >= length) {
          return string;
        }

        var mid = (length - strLength) / 2;
        return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
      }

      function padEnd(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
      }

      function padStart(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
      }

      function parseInt(string, radix, guard) {
        if (guard || radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }

        string = toString(string).replace(reTrim, '');
        return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
      }

      function repeat(string, n, guard) {
        if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
          n = 1;
        } else {
          n = toInteger(n);
        }

        return baseRepeat(toString(string), n);
      }

      function replace() {
        var args = arguments,
            string = toString(args[0]);
        return args.length < 3 ? string : nativeReplace.call(string, args[1], args[2]);
      }

      var snakeCase = createCompounder(function (result, word, index) {
        return result + (index ? '_' : '') + word.toLowerCase();
      });

      function split(string, separator, limit) {
        if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
          separator = limit = undefined;
        }

        limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;

        if (!limit) {
          return [];
        }

        string = toString(string);

        if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {
          separator = baseToString(separator);

          if (separator == '' && reHasComplexSymbol.test(string)) {
            return castSlice(stringToArray(string), 0, limit);
          }
        }

        return nativeSplit.call(string, separator, limit);
      }

      var startCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + upperFirst(word);
      });

      function startsWith(string, target, position) {
        string = toString(string);
        position = baseClamp(toInteger(position), 0, string.length);
        return string.lastIndexOf(baseToString(target), position) == position;
      }

      function template(string, options, guard) {
        var settings = lodash.templateSettings;

        if (guard && isIterateeCall(string, options, guard)) {
          options = undefined;
        }

        string = toString(string);
        options = assignInWith({}, options, settings, assignInDefaults);
        var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
            importsKeys = keys(imports),
            importsValues = baseValues(imports, importsKeys);
        var isEscaping,
            isEvaluating,
            index = 0,
            interpolate = options.interpolate || reNoMatch,
            source = "__p += '";
        var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');
        var sourceURL = '//# sourceURL=' + ('sourceURL' in options ? options.sourceURL : 'lodash.templateSources[' + ++templateCounter + ']') + '\n';
        string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
          interpolateValue || (interpolateValue = esTemplateValue);
          source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

          if (escapeValue) {
            isEscaping = true;
            source += "' +\n__e(" + escapeValue + ") +\n'";
          }

          if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
          }

          if (interpolateValue) {
            source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
          }

          index = offset + match.length;
          return match;
        });
        source += "';\n";
        var variable = options.variable;

        if (!variable) {
          source = 'with (obj) {\n' + source + '\n}\n';
        }

        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');
        source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
        var result = attempt(function () {
          return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
        });
        result.source = source;

        if (isError(result)) {
          throw result;
        }

        return result;
      }

      function toLower(value) {
        return toString(value).toLowerCase();
      }

      function toUpper(value) {
        return toString(value).toUpperCase();
      }

      function trim(string, chars, guard) {
        string = toString(string);

        if (string && (guard || chars === undefined)) {
          return string.replace(reTrim, '');
        }

        if (!string || !(chars = baseToString(chars))) {
          return string;
        }

        var strSymbols = stringToArray(string),
            chrSymbols = stringToArray(chars),
            start = charsStartIndex(strSymbols, chrSymbols),
            end = charsEndIndex(strSymbols, chrSymbols) + 1;
        return castSlice(strSymbols, start, end).join('');
      }

      function trimEnd(string, chars, guard) {
        string = toString(string);

        if (string && (guard || chars === undefined)) {
          return string.replace(reTrimEnd, '');
        }

        if (!string || !(chars = baseToString(chars))) {
          return string;
        }

        var strSymbols = stringToArray(string),
            end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
        return castSlice(strSymbols, 0, end).join('');
      }

      function trimStart(string, chars, guard) {
        string = toString(string);

        if (string && (guard || chars === undefined)) {
          return string.replace(reTrimStart, '');
        }

        if (!string || !(chars = baseToString(chars))) {
          return string;
        }

        var strSymbols = stringToArray(string),
            start = charsStartIndex(strSymbols, stringToArray(chars));
        return castSlice(strSymbols, start).join('');
      }

      function truncate(string, options) {
        var length = DEFAULT_TRUNC_LENGTH,
            omission = DEFAULT_TRUNC_OMISSION;

        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? toInteger(options.length) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        }

        string = toString(string);
        var strLength = string.length;

        if (reHasComplexSymbol.test(string)) {
          var strSymbols = stringToArray(string);
          strLength = strSymbols.length;
        }

        if (length >= strLength) {
          return string;
        }

        var end = length - stringSize(omission);

        if (end < 1) {
          return omission;
        }

        var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);

        if (separator === undefined) {
          return result + omission;
        }

        if (strSymbols) {
          end += result.length - end;
        }

        if (isRegExp(separator)) {
          if (string.slice(end).search(separator)) {
            var match,
                substring = result;

            if (!separator.global) {
              separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
            }

            separator.lastIndex = 0;

            while (match = separator.exec(substring)) {
              var newEnd = match.index;
            }

            result = result.slice(0, newEnd === undefined ? end : newEnd);
          }
        } else if (string.indexOf(baseToString(separator), end) != end) {
          var index = result.lastIndexOf(separator);

          if (index > -1) {
            result = result.slice(0, index);
          }
        }

        return result + omission;
      }

      function unescape(string) {
        string = toString(string);
        return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
      }

      var upperCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + word.toUpperCase();
      });
      var upperFirst = createCaseFirst('toUpperCase');

      function words(string, pattern, guard) {
        string = toString(string);
        pattern = guard ? undefined : pattern;

        if (pattern === undefined) {
          pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;
        }

        return string.match(pattern) || [];
      }

      var attempt = rest(function (func, args) {
        try {
          return apply(func, undefined, args);
        } catch (e) {
          return isError(e) ? e : new Error(e);
        }
      });
      var bindAll = rest(function (object, methodNames) {
        arrayEach(baseFlatten(methodNames, 1), function (key) {
          key = toKey(key);
          object[key] = bind(object[key], object);
        });
        return object;
      });

      function cond(pairs) {
        var length = pairs ? pairs.length : 0,
            toIteratee = getIteratee();
        pairs = !length ? [] : arrayMap(pairs, function (pair) {
          if (typeof pair[1] != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }

          return [toIteratee(pair[0]), pair[1]];
        });
        return rest(function (args) {
          var index = -1;

          while (++index < length) {
            var pair = pairs[index];

            if (apply(pair[0], this, args)) {
              return apply(pair[1], this, args);
            }
          }
        });
      }

      function conforms(source) {
        return baseConforms(baseClone(source, true));
      }

      function constant(value) {
        return function () {
          return value;
        };
      }

      var flow = createFlow();
      var flowRight = createFlow(true);

      function identity(value) {
        return value;
      }

      function iteratee(func) {
        return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));
      }

      function matches(source) {
        return baseMatches(baseClone(source, true));
      }

      function matchesProperty(path, srcValue) {
        return baseMatchesProperty(path, baseClone(srcValue, true));
      }

      var method = rest(function (path, args) {
        return function (object) {
          return baseInvoke(object, path, args);
        };
      });
      var methodOf = rest(function (object, args) {
        return function (path) {
          return baseInvoke(object, path, args);
        };
      });

      function mixin(object, source, options) {
        var props = keys(source),
            methodNames = baseFunctions(source, props);

        if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
          options = source;
          source = object;
          object = this;
          methodNames = baseFunctions(source, keys(source));
        }

        var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
            isFunc = isFunction(object);
        arrayEach(methodNames, function (methodName) {
          var func = source[methodName];
          object[methodName] = func;

          if (isFunc) {
            object.prototype[methodName] = function () {
              var chainAll = this.__chain__;

              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = copyArray(this.__actions__);
                actions.push({
                  'func': func,
                  'args': arguments,
                  'thisArg': object
                });
                result.__chain__ = chainAll;
                return result;
              }

              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }
        });
        return object;
      }

      function noConflict() {
        if (root._ === this) {
          root._ = oldDash;
        }

        return this;
      }

      function noop() {}

      function nthArg(n) {
        n = toInteger(n);
        return rest(function (args) {
          return baseNth(args, n);
        });
      }

      var over = createOver(arrayMap);
      var overEvery = createOver(arrayEvery);
      var overSome = createOver(arraySome);

      function property(path) {
        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
      }

      function propertyOf(object) {
        return function (path) {
          return object == null ? undefined : baseGet(object, path);
        };
      }

      var range = createRange();
      var rangeRight = createRange(true);

      function times(n, iteratee) {
        n = toInteger(n);

        if (n < 1 || n > MAX_SAFE_INTEGER) {
          return [];
        }

        var index = MAX_ARRAY_LENGTH,
            length = nativeMin(n, MAX_ARRAY_LENGTH);
        iteratee = getIteratee(iteratee);
        n -= MAX_ARRAY_LENGTH;
        var result = baseTimes(length, iteratee);

        while (++index < n) {
          iteratee(index);
        }

        return result;
      }

      function toPath(value) {
        if (isArray(value)) {
          return arrayMap(value, toKey);
        }

        return isSymbol(value) ? [value] : copyArray(stringToPath(value));
      }

      function uniqueId(prefix) {
        var id = ++idCounter;
        return toString(prefix) + id;
      }

      var add = createMathOperation(function (augend, addend) {
        return augend + addend;
      });
      var ceil = createRound('ceil');
      var divide = createMathOperation(function (dividend, divisor) {
        return dividend / divisor;
      });
      var floor = createRound('floor');

      function max(array) {
        return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
      }

      function maxBy(array, iteratee) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee), baseGt) : undefined;
      }

      function mean(array) {
        return baseMean(array, identity);
      }

      function meanBy(array, iteratee) {
        return baseMean(array, getIteratee(iteratee));
      }

      function min(array) {
        return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
      }

      function minBy(array, iteratee) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee), baseLt) : undefined;
      }

      var multiply = createMathOperation(function (multiplier, multiplicand) {
        return multiplier * multiplicand;
      });
      var round = createRound('round');
      var subtract = createMathOperation(function (minuend, subtrahend) {
        return minuend - subtrahend;
      });

      function sum(array) {
        return array && array.length ? baseSum(array, identity) : 0;
      }

      function sumBy(array, iteratee) {
        return array && array.length ? baseSum(array, getIteratee(iteratee)) : 0;
      }

      lodash.after = after;
      lodash.ary = ary;
      lodash.assign = assign;
      lodash.assignIn = assignIn;
      lodash.assignInWith = assignInWith;
      lodash.assignWith = assignWith;
      lodash.at = at;
      lodash.before = before;
      lodash.bind = bind;
      lodash.bindAll = bindAll;
      lodash.bindKey = bindKey;
      lodash.castArray = castArray;
      lodash.chain = chain;
      lodash.chunk = chunk;
      lodash.compact = compact;
      lodash.concat = concat;
      lodash.cond = cond;
      lodash.conforms = conforms;
      lodash.constant = constant;
      lodash.countBy = countBy;
      lodash.create = create;
      lodash.curry = curry;
      lodash.curryRight = curryRight;
      lodash.debounce = debounce;
      lodash.defaults = defaults;
      lodash.defaultsDeep = defaultsDeep;
      lodash.defer = defer;
      lodash.delay = delay;
      lodash.difference = difference;
      lodash.differenceBy = differenceBy;
      lodash.differenceWith = differenceWith;
      lodash.drop = drop;
      lodash.dropRight = dropRight;
      lodash.dropRightWhile = dropRightWhile;
      lodash.dropWhile = dropWhile;
      lodash.fill = fill;
      lodash.filter = filter;
      lodash.flatMap = flatMap;
      lodash.flatMapDeep = flatMapDeep;
      lodash.flatMapDepth = flatMapDepth;
      lodash.flatten = flatten;
      lodash.flattenDeep = flattenDeep;
      lodash.flattenDepth = flattenDepth;
      lodash.flip = flip;
      lodash.flow = flow;
      lodash.flowRight = flowRight;
      lodash.fromPairs = fromPairs;
      lodash.functions = functions;
      lodash.functionsIn = functionsIn;
      lodash.groupBy = groupBy;
      lodash.initial = initial;
      lodash.intersection = intersection;
      lodash.intersectionBy = intersectionBy;
      lodash.intersectionWith = intersectionWith;
      lodash.invert = invert;
      lodash.invertBy = invertBy;
      lodash.invokeMap = invokeMap;
      lodash.iteratee = iteratee;
      lodash.keyBy = keyBy;
      lodash.keys = keys;
      lodash.keysIn = keysIn;
      lodash.map = map;
      lodash.mapKeys = mapKeys;
      lodash.mapValues = mapValues;
      lodash.matches = matches;
      lodash.matchesProperty = matchesProperty;
      lodash.memoize = memoize;
      lodash.merge = merge;
      lodash.mergeWith = mergeWith;
      lodash.method = method;
      lodash.methodOf = methodOf;
      lodash.mixin = mixin;
      lodash.negate = negate;
      lodash.nthArg = nthArg;
      lodash.omit = omit;
      lodash.omitBy = omitBy;
      lodash.once = once;
      lodash.orderBy = orderBy;
      lodash.over = over;
      lodash.overArgs = overArgs;
      lodash.overEvery = overEvery;
      lodash.overSome = overSome;
      lodash.partial = partial;
      lodash.partialRight = partialRight;
      lodash.partition = partition;
      lodash.pick = pick;
      lodash.pickBy = pickBy;
      lodash.property = property;
      lodash.propertyOf = propertyOf;
      lodash.pull = pull;
      lodash.pullAll = pullAll;
      lodash.pullAllBy = pullAllBy;
      lodash.pullAllWith = pullAllWith;
      lodash.pullAt = pullAt;
      lodash.range = range;
      lodash.rangeRight = rangeRight;
      lodash.rearg = rearg;
      lodash.reject = reject;
      lodash.remove = remove;
      lodash.rest = rest;
      lodash.reverse = reverse;
      lodash.sampleSize = sampleSize;
      lodash.set = set;
      lodash.setWith = setWith;
      lodash.shuffle = shuffle;
      lodash.slice = slice;
      lodash.sortBy = sortBy;
      lodash.sortedUniq = sortedUniq;
      lodash.sortedUniqBy = sortedUniqBy;
      lodash.split = split;
      lodash.spread = spread;
      lodash.tail = tail;
      lodash.take = take;
      lodash.takeRight = takeRight;
      lodash.takeRightWhile = takeRightWhile;
      lodash.takeWhile = takeWhile;
      lodash.tap = tap;
      lodash.throttle = throttle;
      lodash.thru = thru;
      lodash.toArray = toArray;
      lodash.toPairs = toPairs;
      lodash.toPairsIn = toPairsIn;
      lodash.toPath = toPath;
      lodash.toPlainObject = toPlainObject;
      lodash.transform = transform;
      lodash.unary = unary;
      lodash.union = union;
      lodash.unionBy = unionBy;
      lodash.unionWith = unionWith;
      lodash.uniq = uniq;
      lodash.uniqBy = uniqBy;
      lodash.uniqWith = uniqWith;
      lodash.unset = unset;
      lodash.unzip = unzip;
      lodash.unzipWith = unzipWith;
      lodash.update = update;
      lodash.updateWith = updateWith;
      lodash.values = values;
      lodash.valuesIn = valuesIn;
      lodash.without = without;
      lodash.words = words;
      lodash.wrap = wrap;
      lodash.xor = xor;
      lodash.xorBy = xorBy;
      lodash.xorWith = xorWith;
      lodash.zip = zip;
      lodash.zipObject = zipObject;
      lodash.zipObjectDeep = zipObjectDeep;
      lodash.zipWith = zipWith;
      lodash.entries = toPairs;
      lodash.entriesIn = toPairsIn;
      lodash.extend = assignIn;
      lodash.extendWith = assignInWith;
      mixin(lodash, lodash);
      lodash.add = add;
      lodash.attempt = attempt;
      lodash.camelCase = camelCase;
      lodash.capitalize = capitalize;
      lodash.ceil = ceil;
      lodash.clamp = clamp;
      lodash.clone = clone;
      lodash.cloneDeep = cloneDeep;
      lodash.cloneDeepWith = cloneDeepWith;
      lodash.cloneWith = cloneWith;
      lodash.deburr = deburr;
      lodash.divide = divide;
      lodash.endsWith = endsWith;
      lodash.eq = eq;
      lodash.escape = escape;
      lodash.escapeRegExp = escapeRegExp;
      lodash.every = every;
      lodash.find = find;
      lodash.findIndex = findIndex;
      lodash.findKey = findKey;
      lodash.findLast = findLast;
      lodash.findLastIndex = findLastIndex;
      lodash.findLastKey = findLastKey;
      lodash.floor = floor;
      lodash.forEach = forEach;
      lodash.forEachRight = forEachRight;
      lodash.forIn = forIn;
      lodash.forInRight = forInRight;
      lodash.forOwn = forOwn;
      lodash.forOwnRight = forOwnRight;
      lodash.get = get;
      lodash.gt = gt;
      lodash.gte = gte;
      lodash.has = has;
      lodash.hasIn = hasIn;
      lodash.head = head;
      lodash.identity = identity;
      lodash.includes = includes;
      lodash.indexOf = indexOf;
      lodash.inRange = inRange;
      lodash.invoke = invoke;
      lodash.isArguments = isArguments;
      lodash.isArray = isArray;
      lodash.isArrayBuffer = isArrayBuffer;
      lodash.isArrayLike = isArrayLike;
      lodash.isArrayLikeObject = isArrayLikeObject;
      lodash.isBoolean = isBoolean;
      lodash.isBuffer = isBuffer;
      lodash.isDate = isDate;
      lodash.isElement = isElement;
      lodash.isEmpty = isEmpty;
      lodash.isEqual = isEqual;
      lodash.isEqualWith = isEqualWith;
      lodash.isError = isError;
      lodash.isFinite = isFinite;
      lodash.isFunction = isFunction;
      lodash.isInteger = isInteger;
      lodash.isLength = isLength;
      lodash.isMap = isMap;
      lodash.isMatch = isMatch;
      lodash.isMatchWith = isMatchWith;
      lodash.isNaN = isNaN;
      lodash.isNative = isNative;
      lodash.isNil = isNil;
      lodash.isNull = isNull;
      lodash.isNumber = isNumber;
      lodash.isObject = isObject;
      lodash.isObjectLike = isObjectLike;
      lodash.isPlainObject = isPlainObject;
      lodash.isRegExp = isRegExp;
      lodash.isSafeInteger = isSafeInteger;
      lodash.isSet = isSet;
      lodash.isString = isString;
      lodash.isSymbol = isSymbol;
      lodash.isTypedArray = isTypedArray;
      lodash.isUndefined = isUndefined;
      lodash.isWeakMap = isWeakMap;
      lodash.isWeakSet = isWeakSet;
      lodash.join = join;
      lodash.kebabCase = kebabCase;
      lodash.last = last;
      lodash.lastIndexOf = lastIndexOf;
      lodash.lowerCase = lowerCase;
      lodash.lowerFirst = lowerFirst;
      lodash.lt = lt;
      lodash.lte = lte;
      lodash.max = max;
      lodash.maxBy = maxBy;
      lodash.mean = mean;
      lodash.meanBy = meanBy;
      lodash.min = min;
      lodash.minBy = minBy;
      lodash.multiply = multiply;
      lodash.nth = nth;
      lodash.noConflict = noConflict;
      lodash.noop = noop;
      lodash.now = now;
      lodash.pad = pad;
      lodash.padEnd = padEnd;
      lodash.padStart = padStart;
      lodash.parseInt = parseInt;
      lodash.random = random;
      lodash.reduce = reduce;
      lodash.reduceRight = reduceRight;
      lodash.repeat = repeat;
      lodash.replace = replace;
      lodash.result = result;
      lodash.round = round;
      lodash.runInContext = runInContext;
      lodash.sample = sample;
      lodash.size = size;
      lodash.snakeCase = snakeCase;
      lodash.some = some;
      lodash.sortedIndex = sortedIndex;
      lodash.sortedIndexBy = sortedIndexBy;
      lodash.sortedIndexOf = sortedIndexOf;
      lodash.sortedLastIndex = sortedLastIndex;
      lodash.sortedLastIndexBy = sortedLastIndexBy;
      lodash.sortedLastIndexOf = sortedLastIndexOf;
      lodash.startCase = startCase;
      lodash.startsWith = startsWith;
      lodash.subtract = subtract;
      lodash.sum = sum;
      lodash.sumBy = sumBy;
      lodash.template = template;
      lodash.times = times;
      lodash.toInteger = toInteger;
      lodash.toLength = toLength;
      lodash.toLower = toLower;
      lodash.toNumber = toNumber;
      lodash.toSafeInteger = toSafeInteger;
      lodash.toString = toString;
      lodash.toUpper = toUpper;
      lodash.trim = trim;
      lodash.trimEnd = trimEnd;
      lodash.trimStart = trimStart;
      lodash.truncate = truncate;
      lodash.unescape = unescape;
      lodash.uniqueId = uniqueId;
      lodash.upperCase = upperCase;
      lodash.upperFirst = upperFirst;
      lodash.each = forEach;
      lodash.eachRight = forEachRight;
      lodash.first = head;
      mixin(lodash, function () {
        var source = {};
        baseForOwn(lodash, function (func, methodName) {
          if (!hasOwnProperty.call(lodash.prototype, methodName)) {
            source[methodName] = func;
          }
        });
        return source;
      }(), {
        'chain': false
      });
      lodash.VERSION = VERSION;
      arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
        lodash[methodName].placeholder = lodash;
      });
      arrayEach(['drop', 'take'], function (methodName, index) {
        LazyWrapper.prototype[methodName] = function (n) {
          var filtered = this.__filtered__;

          if (filtered && !index) {
            return new LazyWrapper(this);
          }

          n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
          var result = this.clone();

          if (filtered) {
            result.__takeCount__ = nativeMin(n, result.__takeCount__);
          } else {
            result.__views__.push({
              'size': nativeMin(n, MAX_ARRAY_LENGTH),
              'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
            });
          }

          return result;
        };

        LazyWrapper.prototype[methodName + 'Right'] = function (n) {
          return this.reverse()[methodName](n).reverse();
        };
      });
      arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
        var type = index + 1,
            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

        LazyWrapper.prototype[methodName] = function (iteratee) {
          var result = this.clone();

          result.__iteratees__.push({
            'iteratee': getIteratee(iteratee, 3),
            'type': type
          });

          result.__filtered__ = result.__filtered__ || isFilter;
          return result;
        };
      });
      arrayEach(['head', 'last'], function (methodName, index) {
        var takeName = 'take' + (index ? 'Right' : '');

        LazyWrapper.prototype[methodName] = function () {
          return this[takeName](1).value()[0];
        };
      });
      arrayEach(['initial', 'tail'], function (methodName, index) {
        var dropName = 'drop' + (index ? '' : 'Right');

        LazyWrapper.prototype[methodName] = function () {
          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
        };
      });

      LazyWrapper.prototype.compact = function () {
        return this.filter(identity);
      };

      LazyWrapper.prototype.find = function (predicate) {
        return this.filter(predicate).head();
      };

      LazyWrapper.prototype.findLast = function (predicate) {
        return this.reverse().find(predicate);
      };

      LazyWrapper.prototype.invokeMap = rest(function (path, args) {
        if (typeof path == 'function') {
          return new LazyWrapper(this);
        }

        return this.map(function (value) {
          return baseInvoke(value, path, args);
        });
      });

      LazyWrapper.prototype.reject = function (predicate) {
        predicate = getIteratee(predicate, 3);
        return this.filter(function (value) {
          return !predicate(value);
        });
      };

      LazyWrapper.prototype.slice = function (start, end) {
        start = toInteger(start);
        var result = this;

        if (result.__filtered__ && (start > 0 || end < 0)) {
          return new LazyWrapper(result);
        }

        if (start < 0) {
          result = result.takeRight(-start);
        } else if (start) {
          result = result.drop(start);
        }

        if (end !== undefined) {
          end = toInteger(end);
          result = end < 0 ? result.dropRight(-end) : result.take(end - start);
        }

        return result;
      };

      LazyWrapper.prototype.takeRightWhile = function (predicate) {
        return this.reverse().takeWhile(predicate).reverse();
      };

      LazyWrapper.prototype.toArray = function () {
        return this.take(MAX_ARRAY_LENGTH);
      };

      baseForOwn(LazyWrapper.prototype, function (func, methodName) {
        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
            isTaker = /^(?:head|last)$/.test(methodName),
            lodashFunc = lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName],
            retUnwrapped = isTaker || /^find/.test(methodName);

        if (!lodashFunc) {
          return;
        }

        lodash.prototype[methodName] = function () {
          var value = this.__wrapped__,
              args = isTaker ? [1] : arguments,
              isLazy = value instanceof LazyWrapper,
              iteratee = args[0],
              useLazy = isLazy || isArray(value);

          var interceptor = function interceptor(value) {
            var result = lodashFunc.apply(lodash, arrayPush([value], args));
            return isTaker && chainAll ? result[0] : result;
          };

          if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
            isLazy = useLazy = false;
          }

          var chainAll = this.__chain__,
              isHybrid = !!this.__actions__.length,
              isUnwrapped = retUnwrapped && !chainAll,
              onlyLazy = isLazy && !isHybrid;

          if (!retUnwrapped && useLazy) {
            value = onlyLazy ? value : new LazyWrapper(this);
            var result = func.apply(value, args);

            result.__actions__.push({
              'func': thru,
              'args': [interceptor],
              'thisArg': undefined
            });

            return new LodashWrapper(result, chainAll);
          }

          if (isUnwrapped && onlyLazy) {
            return func.apply(this, args);
          }

          result = this.thru(interceptor);
          return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;
        };
      });
      arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
        var func = arrayProto[methodName],
            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
            retUnwrapped = /^(?:pop|shift)$/.test(methodName);

        lodash.prototype[methodName] = function () {
          var args = arguments;

          if (retUnwrapped && !this.__chain__) {
            var value = this.value();
            return func.apply(isArray(value) ? value : [], args);
          }

          return this[chainName](function (value) {
            return func.apply(isArray(value) ? value : [], args);
          });
        };
      });
      baseForOwn(LazyWrapper.prototype, function (func, methodName) {
        var lodashFunc = lodash[methodName];

        if (lodashFunc) {
          var key = lodashFunc.name + '',
              names = realNames[key] || (realNames[key] = []);
          names.push({
            'name': methodName,
            'func': lodashFunc
          });
        }
      });
      realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{
        'name': 'wrapper',
        'func': undefined
      }];
      LazyWrapper.prototype.clone = lazyClone;
      LazyWrapper.prototype.reverse = lazyReverse;
      LazyWrapper.prototype.value = lazyValue;
      lodash.prototype.at = wrapperAt;
      lodash.prototype.chain = wrapperChain;
      lodash.prototype.commit = wrapperCommit;
      lodash.prototype.next = wrapperNext;
      lodash.prototype.plant = wrapperPlant;
      lodash.prototype.reverse = wrapperReverse;
      lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

      if (iteratorSymbol) {
        lodash.prototype[iteratorSymbol] = wrapperToIterator;
      }

      return lodash;
    }

    var _ = runInContext();

    (freeWindow || freeSelf || {})._ = _;

    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
      define(function () {
        return _;
      });
    } else if (freeExports && freeModule) {
        if (moduleExports) {
          (freeModule.exports = _)._ = _;
        }

        freeExports._ = _;
      } else {
        root._ = _;
      }
  }).call(this);
},407,[],"lodash/lodash.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = normalizeStyle;

  var _lodash = require(_dependencyMap[0], "lodash");

  var _lodash2 = babelHelpers.interopRequireDefault(_lodash);

  var _StyleNormalizer = require(_dependencyMap[1], "./StyleNormalizer");

  var _StyleNormalizer2 = babelHelpers.interopRequireDefault(_StyleNormalizer);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var styleNormalizer = new _StyleNormalizer2.default();

  function normalizeStyle(style) {
    return _lodash2.default.reduce(style, function (normalizedStyle, val, prop) {
      if (_lodash2.default.isPlainObject(val)) {
        normalizedStyle[prop] = normalizeStyle(val);
      } else if (styleNormalizer.canNormalize(prop)) {
        normalizedStyle = babelHelpers.extends({}, normalizedStyle, styleNormalizer.normalize(prop, val));
      } else {
        normalizedStyle[prop] = val;
      }

      return normalizedStyle;
    }, {});
  }
},408,[407,409,12],"native-base-shoutem-theme/src/StyleNormalizer/normalizeStyle.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _ShorthandsNormalizerFactory = require(_dependencyMap[0], "./ShorthandsNormalizerFactory");

  var _ShorthandsNormalizerFactory2 = babelHelpers.interopRequireDefault(_ShorthandsNormalizerFactory);

  var StyleNormalizer = function () {
    function StyleNormalizer() {
      babelHelpers.classCallCheck(this, StyleNormalizer);
      this.normalizers = {};
      this.createNormalizers('margin', [_ShorthandsNormalizerFactory.HORIZONTAL, _ShorthandsNormalizerFactory.VERTICAL, _ShorthandsNormalizerFactory.SIDES]);
      this.createNormalizers('padding', [_ShorthandsNormalizerFactory.HORIZONTAL, _ShorthandsNormalizerFactory.VERTICAL, _ShorthandsNormalizerFactory.SIDES]);
      this.createNormalizers('border', [_ShorthandsNormalizerFactory.SIDES], 'Width');
    }

    babelHelpers.createClass(StyleNormalizer, [{
      key: "createNormalizers",
      value: function createNormalizers(prop, shorthands) {
        var _this = this;

        var suffix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
        shorthands.forEach(function (shorthand) {
          var propName = prop + shorthand.type + suffix;

          if (_this.normalizerExists(propName)) {
            throw Error("Normalizer for '" + propName + "' shorthand already exists");
          }

          _this.normalizers[propName] = _ShorthandsNormalizerFactory2.default.createNormalizer(prop, shorthand, suffix);
        });
      }
    }, {
      key: "normalizerExists",
      value: function normalizerExists(normalizerName) {
        return !!this.normalizers[normalizerName];
      }
    }, {
      key: "canNormalize",
      value: function canNormalize(prop) {
        return this.normalizerExists(prop);
      }
    }, {
      key: "normalize",
      value: function normalize(prop, val) {
        return this.normalizers[prop](val);
      }
    }]);
    return StyleNormalizer;
  }();

  exports.default = StyleNormalizer;
},409,[410],"native-base-shoutem-theme/src/StyleNormalizer/StyleNormalizer.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BOTTOM_LEFT = exports.TOP_LEFT = exports.BOTTOM_RIGHT = exports.TOP_RIGHT = exports.BOTTOM = exports.TOP = exports.RIGHT = exports.LEFT = exports.VERTICAL = exports.HORIZONTAL = exports.CORNERS = exports.SIDES = undefined;

  var _lodash = require(_dependencyMap[0], "lodash");

  var _lodash2 = babelHelpers.interopRequireDefault(_lodash);

  var createShorthand = function createShorthand(name, type) {
    return {
      name: name,
      type: _lodash2.default.isUndefined(type) ? name : type
    };
  };

  var SIDES = exports.SIDES = createShorthand('Sides', '');
  var CORNERS = exports.CORNERS = createShorthand('Corners', '');
  var HORIZONTAL = exports.HORIZONTAL = createShorthand('Horizontal');
  var VERTICAL = exports.VERTICAL = createShorthand('Vertical');
  var LEFT = exports.LEFT = 'Left';
  var RIGHT = exports.RIGHT = 'Right';
  var TOP = exports.TOP = 'Top';
  var BOTTOM = exports.BOTTOM = 'Bottom';
  var TOP_RIGHT = exports.TOP_RIGHT = 'TopRight';
  var BOTTOM_RIGHT = exports.BOTTOM_RIGHT = 'BottomRight';
  var TOP_LEFT = exports.TOP_LEFT = 'TopLeft';
  var BOTTOM_LEFT = exports.BOTTOM_LEFT = 'BottomLeft';

  var ShorthandsNormalizerFactory = function () {
    function ShorthandsNormalizerFactory() {
      var _createNormalizersMap;

      babelHelpers.classCallCheck(this, ShorthandsNormalizerFactory);
      this.createNormalizersMap = (_createNormalizersMap = {}, babelHelpers.defineProperty(_createNormalizersMap, SIDES.name, this.createAllSidesNormalizer), babelHelpers.defineProperty(_createNormalizersMap, CORNERS.name, this.createAllCornersNormalizer), babelHelpers.defineProperty(_createNormalizersMap, HORIZONTAL.name, this.createHorizontalSidesNormalizer), babelHelpers.defineProperty(_createNormalizersMap, VERTICAL.name, this.createVerticalSidesNormalizer), _createNormalizersMap);
    }

    babelHelpers.createClass(ShorthandsNormalizerFactory, [{
      key: "createAllSidesNormalizer",
      value: function createAllSidesNormalizer(prop, shorthand) {
        var suffix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
        return function (val) {
          var _ref;

          return _ref = {}, babelHelpers.defineProperty(_ref, prop + LEFT + suffix, val), babelHelpers.defineProperty(_ref, prop + RIGHT + suffix, val), babelHelpers.defineProperty(_ref, prop + TOP + suffix, val), babelHelpers.defineProperty(_ref, prop + BOTTOM + suffix, val), _ref;
        };
      }
    }, {
      key: "createAllCornersNormalizer",
      value: function createAllCornersNormalizer(prop, shorthand) {
        var suffix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
        return function (val) {
          var _ref2;

          return _ref2 = {}, babelHelpers.defineProperty(_ref2, prop + BOTTOM_LEFT + suffix, val), babelHelpers.defineProperty(_ref2, prop + BOTTOM_RIGHT + suffix, val), babelHelpers.defineProperty(_ref2, prop + TOP_LEFT + suffix, val), babelHelpers.defineProperty(_ref2, prop + TOP_RIGHT + suffix, val), _ref2;
        };
      }
    }, {
      key: "createHorizontalSidesNormalizer",
      value: function createHorizontalSidesNormalizer(prop) {
        return function (val) {
          var _ref3;

          return _ref3 = {}, babelHelpers.defineProperty(_ref3, prop + LEFT, val), babelHelpers.defineProperty(_ref3, prop + RIGHT, val), _ref3;
        };
      }
    }, {
      key: "createVerticalSidesNormalizer",
      value: function createVerticalSidesNormalizer(prop) {
        return function (val) {
          var _ref4;

          return _ref4 = {}, babelHelpers.defineProperty(_ref4, prop + TOP, val), babelHelpers.defineProperty(_ref4, prop + BOTTOM, val), _ref4;
        };
      }
    }, {
      key: "getNormalizerCreator",
      value: function getNormalizerCreator(shorthand) {
        return this.createNormalizersMap[shorthand.name];
      }
    }, {
      key: "createNormalizer",
      value: function createNormalizer(prop, shorthand, suffix) {
        var normalizerCreator = this.getNormalizerCreator(shorthand);
        return normalizerCreator(prop, shorthand, suffix);
      }
    }]);
    return ShorthandsNormalizerFactory;
  }();

  exports.default = new ShorthandsNormalizerFactory();
},410,[407],"native-base-shoutem-theme/src/StyleNormalizer/ShorthandsNormalizerFactory.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ThemeShape = undefined;

  var _propTypes = require(_dependencyMap[0], "prop-types");

  var _resolveIncludes = require(_dependencyMap[1], "./resolveIncludes");

  var _resolveIncludes2 = babelHelpers.interopRequireDefault(_resolveIncludes);

  var _mergeComponentAndThemeStyles = require(_dependencyMap[2], "./mergeComponentAndThemeStyles");

  var _mergeComponentAndThemeStyles2 = babelHelpers.interopRequireDefault(_mergeComponentAndThemeStyles);

  var _normalizeStyle = require(_dependencyMap[3], "./StyleNormalizer/normalizeStyle");

  var _normalizeStyle2 = babelHelpers.interopRequireDefault(_normalizeStyle);

  var THEME_STYLE = "@@shoutem.theme/themeStyle";
  var THEME_STYLE_CACHE = "@@shoutem.theme/themeCachedStyle";
  var defaultTheme = void 0;

  var resolveStyle = function resolveStyle(style, baseStyle) {
    return (0, _normalizeStyle2.default)((0, _resolveIncludes2.default)(style, baseStyle));
  };

  var Theme = function () {
    function Theme(themeStyle) {
      babelHelpers.classCallCheck(this, Theme);
      this[THEME_STYLE] = resolveStyle(themeStyle);
      this[THEME_STYLE_CACHE] = {};
    }

    babelHelpers.createClass(Theme, [{
      key: "createComponentStyle",
      value: function createComponentStyle(componentName, defaultStyle) {
        if (this[THEME_STYLE_CACHE][componentName]) {
          return this[THEME_STYLE_CACHE][componentName];
        }

        var componentIncludedStyle = resolveStyle(defaultStyle, this[THEME_STYLE]);
        this[THEME_STYLE_CACHE][componentName] = (0, _mergeComponentAndThemeStyles2.default)(componentIncludedStyle, this[THEME_STYLE][componentName], this[THEME_STYLE]);
        return this[THEME_STYLE_CACHE][componentName];
      }
    }], [{
      key: "setDefaultThemeStyle",
      value: function setDefaultThemeStyle(style) {
        defaultTheme = new Theme(style);
      }
    }, {
      key: "getDefaultTheme",
      value: function getDefaultTheme() {
        if (!defaultTheme) {
          defaultTheme = new Theme({});
        }

        return defaultTheme;
      }
    }]);
    return Theme;
  }();

  exports.default = Theme;

  var ThemeShape = exports.ThemeShape = _propTypes.PropTypes.shape({
    createComponentStyle: _propTypes.PropTypes.func.isRequired
  });
},411,[127,412,413,408],"native-base-shoutem-theme/src/Theme.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.INCLUDE = undefined;
  exports.default = resolveIncludes;

  var _lodash = require(_dependencyMap[0], "lodash");

  var _ = babelHelpers.interopRequireWildcard(_lodash);

  var INCLUDE = exports.INCLUDE = '@@shoutem.theme/include';

  function includeSymbolMergeHandler(objVal, srcVal) {
    var newObjVal = objVal;
    var include = void 0;

    if (srcVal && srcVal[INCLUDE]) {
      include = newObjVal && newObjVal[INCLUDE] ? [].concat(babelHelpers.toConsumableArray(newObjVal[INCLUDE]), babelHelpers.toConsumableArray(srcVal[INCLUDE])) : srcVal[INCLUDE];
    }

    if (_.isUndefined(newObjVal) && _.isPlainObject(srcVal)) {
      var newObj = _.mergeWith({}, srcVal, function (o, s) {
        return s;
      });

      if (include) {
        newObj[INCLUDE] = include;
      }

      return newObj;
    }

    if (_.isPlainObject(newObjVal) && include) {
      newObjVal[INCLUDE] = include;
    }
  }

  function resolveIncludes(target) {
    var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    function getStyle(styleName) {
      var defaultStyle = {};
      var style = defaultStyle;
      var baseStyle = base[styleName];

      if (baseStyle) {
        if (baseStyle[INCLUDE]) {
          throw Error("Base style cannot have includes, unexpected include in " + styleName + ".");
        }

        style = babelHelpers.extends({}, baseStyle);
      }

      var targetStyle = target[styleName];

      if (targetStyle) {
        style = babelHelpers.extends({}, style, targetStyle);
      }

      if (style === defaultStyle) {
        console.warn("Including unexisting style: " + styleName);
      }

      return style;
    }

    function includeNodeStyles(styleNode, processingStyleNames) {
      if (!_.isPlainObject(styleNode)) {
        return styleNode;
      }

      var styleNamesToInclude = styleNode[INCLUDE];
      var stylesToInclude = {};

      if (styleNamesToInclude) {
        if (!_.isArray(styleNamesToInclude)) {
          throw Error('Include should be array');
        }

        for (var _iterator = styleNamesToInclude, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var styleName = _ref;

          if (processingStyleNames.has(styleName)) {
            throw Error("Circular style include, including " + styleName);
          }

          processingStyleNames.add(styleName);
          stylesToInclude = _.mergeWith({}, stylesToInclude, includeNodeStyles(getStyle(styleName), processingStyleNames), includeSymbolMergeHandler);
          processingStyleNames.delete(styleName);
        }
      }

      var resultingStyle = _.mergeWith({}, stylesToInclude, styleNode, includeSymbolMergeHandler);

      delete resultingStyle[INCLUDE];

      for (var _iterator2 = _.keys(resultingStyle), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var _styleName = _ref2;
        resultingStyle[_styleName] = includeNodeStyles(resultingStyle[_styleName], processingStyleNames);
      }

      return resultingStyle;
    }

    var processingStyleNames = new Set();
    return includeNodeStyles(target, processingStyleNames);
  }
},412,[407],"native-base-shoutem-theme/src/resolveIncludes.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = mergeComponentAndThemeStyles;

  var _lodash = require(_dependencyMap[0], "lodash");

  var _ = babelHelpers.interopRequireWildcard(_lodash);

  function mergeComponentAndThemeStyles(componentStyle, themeComponentStyle, themeStyle) {
    var componentThemedStyle = _.merge({}, componentStyle, themeComponentStyle);

    var intersectedRootThemeStyle = _.pick(themeStyle, _.keys(componentThemedStyle));

    return _.merge({}, intersectedRootThemeStyle, componentThemedStyle);
  }
},413,[407],"native-base-shoutem-theme/src/mergeComponentAndThemeStyles.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.resolveComponentStyle = resolveComponentStyle;

  var _lodash = require(_dependencyMap[0], "lodash");

  var _lodash2 = babelHelpers.interopRequireDefault(_lodash);

  var _customMerge = require(_dependencyMap[1], "./customMerge");

  var _customMerge2 = babelHelpers.interopRequireDefault(_customMerge);

  function isStyleVariant(propertyName) {
    return (/^\./.test(propertyName)
    );
  }

  function isChildStyle(propertyName) {
    return (/(^[^\.].*\.)|^\*$/.test(propertyName)
    );
  }

  function splitStyle(style) {
    return _lodash2.default.reduce(style, function (result, value, key) {
      var styleSection = result.componentStyle;

      if (isStyleVariant(key)) {
        styleSection = result.styleVariants;
      } else if (isChildStyle(key)) {
        styleSection = result.childrenStyle;
      }

      styleSection[key] = value;
      return result;
    }, {
      componentStyle: {},
      styleVariants: {},
      childrenStyle: {}
    });
  }

  function resolveComponentStyle(componentName) {
    var styleNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var themeStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var parentStyle = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var themeCache = arguments[4];
    var mergedStyle = (0, _customMerge2.default)(themeStyle, parentStyle[componentName]);
    styleNames.forEach(function (sn, index) {
      mergedStyle = (0, _customMerge2.default)(mergedStyle, themeStyle["" + sn]);
    });
    styleNames.forEach(function (sn, index) {
      mergedStyle = (0, _customMerge2.default)(mergedStyle, parentStyle["" + componentName + sn]);
    });
    var resolvedStyle = (0, _customMerge2.default)(mergedStyle, parentStyle[componentName]);
    styleNames.forEach(function (sn, index) {
      resolvedStyle = (0, _customMerge2.default)(resolvedStyle, mergedStyle["" + sn]);
    });
    styleNames.forEach(function (sn, index) {
      resolvedStyle = (0, _customMerge2.default)(resolvedStyle, parentStyle["" + componentName + sn]);
    });
    return resolvedStyle;
  }
},414,[407,415],"native-base-shoutem-theme/src/resolveComponentStyle.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = customMerge;

  function customMerge(obj1, obj2) {
    var objToReturn = {};
    var property1 = void 0,
        property2 = void 0;

    if (!obj1) {
      return obj2;
    } else if (!obj2) {
      return obj1;
    }

    for (property1 in obj1) {
      for (property2 in obj2) {
        if (property1 === property2) {
          if (typeof obj1[property1] !== "object" || typeof obj2[property1] !== "object" || !obj2[property1] || !obj1[property1]) {
            objToReturn[property1] = obj2[property1];
          } else {
            objToReturn[property1] = customMerge(obj1[property1], obj2[property1]);
          }
        } else {
          if (objToReturn[property1] === undefined) objToReturn[property1] = obj1[property1];
          if (objToReturn[property2] === undefined) objToReturn[property2] = obj2[property2];
        }
      }
    }

    return objToReturn;
  }
},415,[],"native-base-shoutem-theme/src/customMerge.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _Theme = require(_dependencyMap[2], "./Theme");

  var _Theme2 = babelHelpers.interopRequireDefault(_Theme);

  var _normalizeStyle = require(_dependencyMap[3], "./StyleNormalizer/normalizeStyle");

  var _normalizeStyle2 = babelHelpers.interopRequireDefault(_normalizeStyle);

  var StyleProvider = function (_React$Component) {
    babelHelpers.inherits(StyleProvider, _React$Component);

    function StyleProvider(props, context) {
      babelHelpers.classCallCheck(this, StyleProvider);

      var _this = babelHelpers.possibleConstructorReturn(this, (StyleProvider.__proto__ || Object.getPrototypeOf(StyleProvider)).call(this, props, context));

      _this.state = {
        theme: _this.createTheme(props)
      };
      return _this;
    }

    babelHelpers.createClass(StyleProvider, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          theme: this.state.theme
        };
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        if (nextProps.style !== this.props.style) {
          this.setState({
            theme: this.createTheme(nextProps)
          });
        }
      }
    }, {
      key: "createTheme",
      value: function createTheme(props) {
        return new _Theme2.default(props.style);
      }
    }, {
      key: "render",
      value: function render() {
        var children = this.props.children;
        return _react.Children.only(children);
      }
    }]);
    return StyleProvider;
  }(_react2.default.Component);

  StyleProvider.propTypes = {
    children: _propTypes2.default.element.isRequired,
    style: _propTypes2.default.object
  };
  StyleProvider.defaultProps = {
    style: {}
  };
  StyleProvider.childContextTypes = {
    theme: _Theme.ThemeShape.isRequired
  };
  exports.default = StyleProvider;
},416,[108,127,411,408],"native-base-shoutem-theme/src/StyleProvider.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createVariations = createVariations;
  exports.createSharedStyle = createSharedStyle;

  var _lodash = require(_dependencyMap[0], "lodash");

  var _lodash2 = babelHelpers.interopRequireDefault(_lodash);

  function capitalizeFirstLetter(value) {
    return value.charAt(0).toUpperCase() + value.slice(1);
  }

  function createVariations(baseName, nameSuffixes, key, value) {
    return _lodash2.default.reduce(nameSuffixes, function (result, variant) {
      var variantName = variant ? baseName + "-" + variant : baseName;
      var keyName = variant ? "" + key + capitalizeFirstLetter(variant) : key;
      result[variantName] = babelHelpers.defineProperty({}, keyName, value);
      return result;
    }, {});
  }

  function createSharedStyle(componentNames) {
    var sharedStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var customStyles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    return _lodash2.default.reduce(componentNames, function (result, componentName) {
      result[componentName] = babelHelpers.extends({}, sharedStyle, customStyles[componentName]);
      return result;
    }, {});
  }
},417,[407],"native-base-shoutem-theme/src/addons.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Col = exports.Grid = exports.Row = undefined;

  var _Row = require(_dependencyMap[0], "./Components/Row");

  var _Row2 = babelHelpers.interopRequireDefault(_Row);

  var _Grid = require(_dependencyMap[1], "./Components/Grid");

  var _Grid2 = babelHelpers.interopRequireDefault(_Grid);

  var _Col = require(_dependencyMap[2], "./Components/Col");

  var _Col2 = babelHelpers.interopRequireDefault(_Col);

  exports.Row = _Row2.default;
  exports.Grid = _Grid2.default;
  exports.Col = _Col2.default;
},418,[419,421,422],"react-native-easy-grid/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-easy-grid/Components/Row.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _computeProps = require(_dependencyMap[2], "../Utils/computeProps");

  var _computeProps2 = babelHelpers.interopRequireDefault(_computeProps);

  var RowNB = function (_Component) {
    babelHelpers.inherits(RowNB, _Component);

    function RowNB() {
      babelHelpers.classCallCheck(this, RowNB);
      return babelHelpers.possibleConstructorReturn(this, (RowNB.__proto__ || Object.getPrototypeOf(RowNB)).apply(this, arguments));
    }

    babelHelpers.createClass(RowNB, [{
      key: "prepareRootProps",
      value: function prepareRootProps() {
        var type = {
          flexDirection: 'row',
          flex: this.props.size ? this.props.size : this.props.style && this.props.style.height ? 0 : 1
        };
        var defaultProps = {
          style: type
        };
        return (0, _computeProps2.default)(this.props, defaultProps);
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(nativeProps) {
        this._root.setNativeProps(nativeProps);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        if (this.props.onPress) {
          return _react2.default.createElement(
            _reactNative.TouchableOpacity,
            babelHelpers.extends({
              onPress: this.props.onPress
            }, this.prepareRootProps(), {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 31
              }
            }),
            _react2.default.createElement(
              _reactNative.View,
              babelHelpers.extends({
                ref: function ref(component) {
                  return _this2._root = component;
                }
              }, this.props, this.prepareRootProps(), {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 33
                }
              }),
              this.props.children
            )
          );
        } else {
          return _react2.default.createElement(
            _reactNative.View,
            babelHelpers.extends({
              ref: function ref(component) {
                return _this2._root = component;
              }
            }, this.props, this.prepareRootProps(), {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 43
              }
            }),
            this.props.children
          );
        }
      }
    }]);
    return RowNB;
  }(_react.Component);

  exports.default = RowNB;
},419,[108,12,420],"react-native-easy-grid/Components/Row.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _ReactNativePropRegistry = require(_dependencyMap[1], "react-native/Libraries/Renderer/shims/ReactNativePropRegistry");

  var _ReactNativePropRegistry2 = babelHelpers.interopRequireDefault(_ReactNativePropRegistry);

  var _lodash = require(_dependencyMap[2], "lodash");

  var _lodash2 = babelHelpers.interopRequireDefault(_lodash);

  function computeProps(incomingProps, defaultProps) {
    var computedProps = {};
    incomingProps = _lodash2.default.clone(incomingProps);
    delete incomingProps.children;
    var incomingPropsStyle = incomingProps.style;
    delete incomingProps.style;
    if (incomingProps) _lodash2.default.merge(computedProps, defaultProps, incomingProps);else computedProps = defaultProps;

    if (incomingPropsStyle) {
      var computedPropsStyle = {};
      computedProps.style = {};

      if (Array.isArray(incomingPropsStyle)) {
        _lodash2.default.forEach(incomingPropsStyle, function (style) {
          if (typeof style == "number") {
            _lodash2.default.merge(computedPropsStyle, _ReactNativePropRegistry2.default.getByID(style));
          } else {
            _lodash2.default.merge(computedPropsStyle, style);
          }
        });
      } else {
        if (typeof incomingPropsStyle == "number") {
          computedPropsStyle = _ReactNativePropRegistry2.default.getByID(incomingPropsStyle);
        } else {
          computedPropsStyle = incomingPropsStyle;
        }
      }

      _lodash2.default.merge(computedProps.style, defaultProps.style, computedPropsStyle);
    }

    return computedProps;
  }

  ;
  exports.default = computeProps;
},420,[108,102,407],"react-native-easy-grid/Utils/computeProps.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-easy-grid/Components/Grid.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _computeProps = require(_dependencyMap[2], "../Utils/computeProps");

  var _computeProps2 = babelHelpers.interopRequireDefault(_computeProps);

  var _Col = require(_dependencyMap[3], "./Col");

  var _Col2 = babelHelpers.interopRequireDefault(_Col);

  var _Row = require(_dependencyMap[4], "./Row");

  var _Row2 = babelHelpers.interopRequireDefault(_Row);

  var GridNB = function (_Component) {
    babelHelpers.inherits(GridNB, _Component);

    function GridNB() {
      babelHelpers.classCallCheck(this, GridNB);
      return babelHelpers.possibleConstructorReturn(this, (GridNB.__proto__ || Object.getPrototypeOf(GridNB)).apply(this, arguments));
    }

    babelHelpers.createClass(GridNB, [{
      key: "prepareRootProps",
      value: function prepareRootProps() {
        var type = {
          flex: 1,
          flexDirection: this.ifRow() ? 'column' : 'row'
        };
        var defaultProps = {
          style: type
        };
        return (0, _computeProps2.default)(this.props, defaultProps);
      }
    }, {
      key: "ifRow",
      value: function ifRow() {
        var row = false;

        _react2.default.Children.forEach(this.props.children, function (child) {
          if (child && child.type == _Row2.default) row = true;
        });

        return row;
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(nativeProps) {
        this._root.setNativeProps(nativeProps);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        if (this.props.onPress) {
          return _react2.default.createElement(
            _reactNative.TouchableOpacity,
            {
              onPress: this.props.onPress,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 42
              }
            },
            _react2.default.createElement(
              _reactNative.View,
              babelHelpers.extends({
                ref: function ref(component) {
                  return _this2._root = component;
                }
              }, this.props, this.prepareRootProps(), {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 43
                }
              }),
              this.props.children
            )
          );
        } else {
          return _react2.default.createElement(
            _reactNative.View,
            babelHelpers.extends({
              ref: function ref(component) {
                return _this2._root = component;
              }
            }, this.props, this.prepareRootProps(), {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 53
              }
            }),
            this.props.children
          );
        }
      }
    }]);
    return GridNB;
  }(_react.Component);

  exports.default = GridNB;
},421,[108,12,420,422,419],"react-native-easy-grid/Components/Grid.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-easy-grid/Components/Col.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _computeProps = require(_dependencyMap[2], "../Utils/computeProps");

  var _computeProps2 = babelHelpers.interopRequireDefault(_computeProps);

  var ColumnNB = function (_Component) {
    babelHelpers.inherits(ColumnNB, _Component);

    function ColumnNB() {
      babelHelpers.classCallCheck(this, ColumnNB);
      return babelHelpers.possibleConstructorReturn(this, (ColumnNB.__proto__ || Object.getPrototypeOf(ColumnNB)).apply(this, arguments));
    }

    babelHelpers.createClass(ColumnNB, [{
      key: "prepareRootProps",
      value: function prepareRootProps() {
        var type = {
          flexDirection: 'column',
          flex: this.props.size ? this.props.size : this.props.style && this.props.style.width ? 0 : 1
        };
        var defaultProps = {
          style: type
        };
        return (0, _computeProps2.default)(this.props, defaultProps);
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(nativeProps) {
        this._root.setNativeProps(nativeProps);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        if (this.props.onPress) {
          return _react2.default.createElement(
            _reactNative.TouchableOpacity,
            babelHelpers.extends({
              onPress: this.props.onPress
            }, this.prepareRootProps(), {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 30
              }
            }),
            _react2.default.createElement(
              _reactNative.View,
              babelHelpers.extends({
                ref: function ref(component) {
                  return _this2._root = component;
                }
              }, this.props, this.prepareRootProps(), {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 32
                }
              }),
              this.props.children
            )
          );
        } else {
          return _react2.default.createElement(
            _reactNative.View,
            babelHelpers.extends({
              ref: function ref(component) {
                return _this2._root = component;
              }
            }, this.props, this.prepareRootProps(), {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 42
              }
            }),
            this.props.children
          );
        }
      }
    }]);
    return ColumnNB;
  }(_react.Component);

  exports.default = ColumnNB;
},422,[108,12,420],"react-native-easy-grid/Components/Col.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = setDefaultThemeStyle;

  var _nativeBaseShoutemTheme = require(_dependencyMap[0], "native-base-shoutem-theme");

  var _components = require(_dependencyMap[1], "./theme/components");

  var _components2 = _interopRequireDefault(_components);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function setDefaultThemeStyle() {
    var theme = (0, _components2.default)();

    _nativeBaseShoutemTheme.Theme.setDefaultThemeStyle(theme);
  }
},423,[404,424],"native-base/dist/src/init.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _lodash = require(_dependencyMap[0], "lodash");

  var _lodash2 = _interopRequireDefault(_lodash);

  var _Body = require(_dependencyMap[1], "./Body");

  var _Body2 = _interopRequireDefault(_Body);

  var _Left = require(_dependencyMap[2], "./Left");

  var _Left2 = _interopRequireDefault(_Left);

  var _Right = require(_dependencyMap[3], "./Right");

  var _Right2 = _interopRequireDefault(_Right);

  var _Header = require(_dependencyMap[4], "./Header");

  var _Header2 = _interopRequireDefault(_Header);

  var _Switch = require(_dependencyMap[5], "./Switch");

  var _Switch2 = _interopRequireDefault(_Switch);

  var _Thumbnail = require(_dependencyMap[6], "./Thumbnail");

  var _Thumbnail2 = _interopRequireDefault(_Thumbnail);

  var _Container = require(_dependencyMap[7], "./Container");

  var _Container2 = _interopRequireDefault(_Container);

  var _Content = require(_dependencyMap[8], "./Content");

  var _Content2 = _interopRequireDefault(_Content);

  var _Button = require(_dependencyMap[9], "./Button");

  var _Button2 = _interopRequireDefault(_Button);

  var _Title = require(_dependencyMap[10], "./Title");

  var _Title2 = _interopRequireDefault(_Title);

  var _Subtitle = require(_dependencyMap[11], "./Subtitle");

  var _Subtitle2 = _interopRequireDefault(_Subtitle);

  var _InputGroup = require(_dependencyMap[12], "./InputGroup");

  var _InputGroup2 = _interopRequireDefault(_InputGroup);

  var _Badge = require(_dependencyMap[13], "./Badge");

  var _Badge2 = _interopRequireDefault(_Badge);

  var _CheckBox = require(_dependencyMap[14], "./CheckBox");

  var _CheckBox2 = _interopRequireDefault(_CheckBox);

  var _Card = require(_dependencyMap[15], "./Card");

  var _Card2 = _interopRequireDefault(_Card);

  var _Radio = require(_dependencyMap[16], "./Radio");

  var _Radio2 = _interopRequireDefault(_Radio);

  var _H = require(_dependencyMap[17], "./H3");

  var _H2 = _interopRequireDefault(_H);

  var _H3 = require(_dependencyMap[18], "./H2");

  var _H4 = _interopRequireDefault(_H3);

  var _H5 = require(_dependencyMap[19], "./H1");

  var _H6 = _interopRequireDefault(_H5);

  var _Footer = require(_dependencyMap[20], "./Footer");

  var _Footer2 = _interopRequireDefault(_Footer);

  var _FooterTab = require(_dependencyMap[21], "./FooterTab");

  var _FooterTab2 = _interopRequireDefault(_FooterTab);

  var _Fab = require(_dependencyMap[22], "./Fab");

  var _Fab2 = _interopRequireDefault(_Fab);

  var _Item = require(_dependencyMap[23], "./Item");

  var _Item2 = _interopRequireDefault(_Item);

  var _Label = require(_dependencyMap[24], "./Label");

  var _Label2 = _interopRequireDefault(_Label);

  var _Textarea = require(_dependencyMap[25], "./Textarea");

  var _Textarea2 = _interopRequireDefault(_Textarea);

  var _Text = require(_dependencyMap[26], "./Text");

  var _Text2 = _interopRequireDefault(_Text);

  var _Toast = require(_dependencyMap[27], "./Toast");

  var _Toast2 = _interopRequireDefault(_Toast);

  var _Tab = require(_dependencyMap[28], "./Tab");

  var _Tab2 = _interopRequireDefault(_Tab);

  var _TabBar = require(_dependencyMap[29], "./TabBar");

  var _TabBar2 = _interopRequireDefault(_TabBar);

  var _TabContainer = require(_dependencyMap[30], "./TabContainer");

  var _TabContainer2 = _interopRequireDefault(_TabContainer);

  var _View = require(_dependencyMap[31], "./View");

  var _View2 = _interopRequireDefault(_View);

  var _TabHeading = require(_dependencyMap[32], "./TabHeading");

  var _TabHeading2 = _interopRequireDefault(_TabHeading);

  var _Icon = require(_dependencyMap[33], "./Icon");

  var _Icon2 = _interopRequireDefault(_Icon);

  var _Input = require(_dependencyMap[34], "./Input");

  var _Input2 = _interopRequireDefault(_Input);

  var _SwipeRow = require(_dependencyMap[35], "./SwipeRow");

  var _SwipeRow2 = _interopRequireDefault(_SwipeRow);

  var _Segment = require(_dependencyMap[36], "./Segment");

  var _Segment2 = _interopRequireDefault(_Segment);

  var _Spinner = require(_dependencyMap[37], "./Spinner");

  var _Spinner2 = _interopRequireDefault(_Spinner);

  var _CardItem = require(_dependencyMap[38], "./CardItem");

  var _CardItem2 = _interopRequireDefault(_CardItem);

  var _ListItem = require(_dependencyMap[39], "./ListItem");

  var _ListItem2 = _interopRequireDefault(_ListItem);

  var _Form = require(_dependencyMap[40], "./Form");

  var _Form2 = _interopRequireDefault(_Form);

  var _Separator = require(_dependencyMap[41], "./Separator");

  var _Separator2 = _interopRequireDefault(_Separator);

  var _platform = require(_dependencyMap[42], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var theme = {
      variables: variables,
      "NativeBase.Left": _extends({}, (0, _Left2.default)(variables)),
      "NativeBase.Right": _extends({}, (0, _Right2.default)(variables)),
      "NativeBase.Body": _extends({}, (0, _Body2.default)(variables)),
      "NativeBase.Header": _extends({}, (0, _Header2.default)(variables)),
      "NativeBase.Button": _extends({}, (0, _Button2.default)(variables)),
      "NativeBase.Title": _extends({}, (0, _Title2.default)(variables)),
      "NativeBase.Subtitle": _extends({}, (0, _Subtitle2.default)(variables)),
      "NativeBase.InputGroup": _extends({}, (0, _InputGroup2.default)(variables)),
      "NativeBase.Input": _extends({}, (0, _Input2.default)(variables)),
      "NativeBase.Badge": _extends({}, (0, _Badge2.default)(variables)),
      "NativeBase.CheckBox": _extends({}, (0, _CheckBox2.default)(variables)),
      "NativeBase.Radio": _extends({}, (0, _Radio2.default)(variables)),
      "NativeBase.Card": _extends({}, (0, _Card2.default)()),
      "NativeBase.CardItem": _extends({}, (0, _CardItem2.default)(variables)),
      "NativeBase.Toast": _extends({}, (0, _Toast2.default)(variables)),
      "NativeBase.H1": _extends({}, (0, _H6.default)(variables)),
      "NativeBase.H2": _extends({}, (0, _H4.default)(variables)),
      "NativeBase.H3": _extends({}, (0, _H2.default)(variables)),
      "NativeBase.Form": _extends({}, (0, _Form2.default)(variables)),
      "NativeBase.Container": _extends({}, (0, _Container2.default)(variables)),
      "NativeBase.Content": _extends({}, (0, _Content2.default)(variables)),
      "NativeBase.Footer": _extends({}, (0, _Footer2.default)(variables)),
      "NativeBase.Tabs": {
        flex: 1
      },
      "NativeBase.FooterTab": _extends({}, (0, _FooterTab2.default)(variables)),
      "NativeBase.ListItem": _extends({}, (0, _ListItem2.default)(variables)),
      "NativeBase.ListItem1": _extends({}, (0, _ListItem2.default)(variables)),
      "NativeBase.Icon": _extends({}, (0, _Icon2.default)(variables)),
      "NativeBase.IconNB": _extends({}, (0, _Icon2.default)(variables)),
      "NativeBase.Text": _extends({}, (0, _Text2.default)(variables)),
      "NativeBase.Spinner": _extends({}, (0, _Spinner2.default)(variables)),
      "NativeBase.Fab": _extends({}, (0, _Fab2.default)(variables)),
      "NativeBase.Item": _extends({}, (0, _Item2.default)(variables)),
      "NativeBase.Label": _extends({}, (0, _Label2.default)(variables)),
      "NativeBase.Textarea": _extends({}, (0, _Textarea2.default)(variables)),
      "NativeBase.PickerNB": {
        "NativeBase.Button": {
          "NativeBase.Text": {}
        }
      },
      "NativeBase.Tab": _extends({}, (0, _Tab2.default)(variables)),
      "NativeBase.Segment": _extends({}, (0, _Segment2.default)(variables)),
      "NativeBase.TabBar": _extends({}, (0, _TabBar2.default)(variables)),
      "NativeBase.ViewNB": _extends({}, (0, _View2.default)(variables)),
      "NativeBase.TabHeading": _extends({}, (0, _TabHeading2.default)(variables)),
      "NativeBase.TabContainer": _extends({}, (0, _TabContainer2.default)(variables)),
      "NativeBase.Switch": _extends({}, (0, _Switch2.default)(variables)),
      "NativeBase.Separator": _extends({}, (0, _Separator2.default)(variables)),
      "NativeBase.SwipeRow": _extends({}, (0, _SwipeRow2.default)(variables)),
      "NativeBase.Thumbnail": _extends({}, (0, _Thumbnail2.default)(variables))
    };

    var cssifyTheme = function cssifyTheme(grandparent, parent, parentKey) {
      _lodash2.default.forEach(parent, function (style, styleName) {
        if (styleName.indexOf(".") === 0 && parentKey && parentKey.indexOf(".") === 0) {
          if (grandparent) {
            if (!grandparent[styleName]) {
              grandparent[styleName] = {};
            } else {
              grandparent[styleName][parentKey] = style;
            }
          }
        }

        if (style && typeof style === "object") {
          cssifyTheme(parent, style, styleName);
        }
      });
    };

    cssifyTheme(null, theme, null);
    return theme;
  };
},424,[407,425,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,474,475,426],"native-base/dist/src/theme/components/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], './../variables/platform');

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var bodyTheme = {
      flex: 1,
      alignItems: 'center',
      alignSelf: 'center'
    };
    return bodyTheme;
  };
},425,[426],"native-base/dist/src/theme/components/Body.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _color = require(_dependencyMap[0], "color");

  var _color2 = _interopRequireDefault(_color);

  var _reactNative = require(_dependencyMap[1], "react-native");

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var deviceHeight = _reactNative.Dimensions.get("window").height;

  var deviceWidth = _reactNative.Dimensions.get("window").width;

  var platform = _reactNative.Platform.OS;
  var platformStyle = undefined;
  var isIphoneX = platform === "ios" && deviceHeight === 812 && deviceWidth === 375;
  exports.default = {
    platformStyle: platformStyle,
    platform: platform,
    androidRipple: true,
    androidRippleColor: "rgba(256, 256, 256, 0.3)",
    androidRippleColorDark: "rgba(0, 0, 0, 0.15)",
    btnUppercaseAndroidText: true,
    badgeBg: "#ED1727",
    badgeColor: "#fff",
    badgePadding: platform === "ios" ? 3 : 0,
    btnFontFamily: platform === "ios" ? "System" : "Roboto_medium",
    btnDisabledBg: "#b5b5b5",
    buttonPadding: 6,

    get btnPrimaryBg() {
      return this.brandPrimary;
    },

    get btnPrimaryColor() {
      return this.inverseTextColor;
    },

    get btnInfoBg() {
      return this.brandInfo;
    },

    get btnInfoColor() {
      return this.inverseTextColor;
    },

    get btnSuccessBg() {
      return this.brandSuccess;
    },

    get btnSuccessColor() {
      return this.inverseTextColor;
    },

    get btnDangerBg() {
      return this.brandDanger;
    },

    get btnDangerColor() {
      return this.inverseTextColor;
    },

    get btnWarningBg() {
      return this.brandWarning;
    },

    get btnWarningColor() {
      return this.inverseTextColor;
    },

    get btnTextSize() {
      return platform === "ios" ? this.fontSizeBase * 1.1 : this.fontSizeBase - 1;
    },

    get btnTextSizeLarge() {
      return this.fontSizeBase * 1.5;
    },

    get btnTextSizeSmall() {
      return this.fontSizeBase * 0.8;
    },

    get borderRadiusLarge() {
      return this.fontSizeBase * 3.8;
    },

    get iconSizeLarge() {
      return this.iconFontSize * 1.5;
    },

    get iconSizeSmall() {
      return this.iconFontSize * 0.6;
    },

    cardDefaultBg: "#fff",
    cardBorderColor: "#ccc",
    CheckboxRadius: platform === "ios" ? 13 : 0,
    CheckboxBorderWidth: platform === "ios" ? 1 : 2,
    CheckboxPaddingLeft: platform === "ios" ? 4 : 2,
    CheckboxPaddingBottom: platform === "ios" ? 0 : 5,
    CheckboxIconSize: platform === "ios" ? 21 : 14,
    CheckboxIconMarginTop: platform === "ios" ? undefined : 1,
    CheckboxFontSize: platform === "ios" ? 23 / 0.9 : 18,
    DefaultFontSize: 17,
    checkboxBgColor: "#039BE5",
    checkboxSize: 20,
    checkboxTickColor: "#fff",
    brandPrimary: "#007aff",
    brandInfo: "#62B1F6",
    brandSuccess: "#5cb85c",
    brandDanger: "#d9534f",
    brandWarning: "#f0ad4e",
    brandDark: "#000",
    brandLight: "#f4f4f4",
    fontFamily: platform === "ios" ? "System" : "Roboto",
    fontSizeBase: 15,

    get fontSizeH1() {
      return this.fontSizeBase * 1.8;
    },

    get fontSizeH2() {
      return this.fontSizeBase * 1.6;
    },

    get fontSizeH3() {
      return this.fontSizeBase * 1.4;
    },

    footerHeight: isIphoneX ? 89 : 55,
    footerDefaultBg: platform === "ios" ? "#F8F8F8" : "#4179F7",
    footerPaddingBottom: isIphoneX ? 34 : 0,
    tabBarTextColor: "#2874F0",
    tabBarTextSize: platform === "ios" ? 14 : 11,
    activeTab: "#fff",
    sTabBarActiveTextColor: "#007aff",
    tabBarActiveTextColor: "#2874F0",
    tabActiveBgColor: "#cde1f9",
    toolbarBtnColor: platform === "ios" ? "#007aff" : "#fff",
    toolbarDefaultBg: platform === "ios" ? "#F8F8F8" : "#3F51B5",
    toolbarHeight: platform === "ios" ? isIphoneX ? 88 : 64 : 56,
    toolbarSearchIconSize: platform === "ios" ? 20 : 23,
    toolbarInputColor: platform === "ios" ? "#CECDD2" : "#fff",
    searchBarHeight: platform === "ios" ? 30 : 40,
    searchBarInputHeight: platform === "ios" ? 30 : 50,
    toolbarBtnTextColor: "#000",
    toolbarDefaultBorder: "#a7a6ab",
    iosStatusbar: platform === "ios" ? "dark-content" : "light-content",

    get statusBarColor() {
      return (0, _color2.default)(this.toolbarDefaultBg).darken(0.2).hex();
    },

    get darkenHeader() {
      return (0, _color2.default)(this.tabBgColor).darken(0.03).hex();
    },

    iconFamily: "Ionicons",
    iconFontSize: platform === "ios" ? 30 : 28,
    iconHeaderSize: platform === "ios" ? 33 : 24,
    inputFontSize: 17,
    inputBorderColor: "#D9D5DC",
    inputSuccessBorderColor: "#2b8339",
    inputErrorBorderColor: "#ed2f2f",
    inputHeightBase: 50,

    get inputColor() {
      return this.textColor;
    },

    get inputColorPlaceholder() {
      return "#575757";
    },

    btnLineHeight: 19,
    lineHeightH1: 32,
    lineHeightH2: 27,
    lineHeightH3: 22,
    lineHeight: platform === "ios" ? 20 : 24,
    listBg: "transparent",
    listBorderColor: "#c9c9c9",
    listDividerBg: "#f4f4f4",
    listBtnUnderlayColor: "#DDD",
    listItemPadding: platform === "ios" ? 10 : 12,
    listNoteColor: "#808080",
    listNoteSize: 13,
    defaultProgressColor: "#E4202D",
    inverseProgressColor: "#1A191B",
    radioBtnSize: platform === "ios" ? 25 : 23,
    radioSelectedColorAndroid: "#3F51B5",
    radioBtnLineHeight: platform === "ios" ? 29 : 24,
    radioColor: this.brandPrimary,
    segmentBackgroundColor: platform === "ios" ? "#F8F8F8" : "#3F51B5",
    segmentActiveBackgroundColor: platform === "ios" ? "#007aff" : "#fff",
    segmentTextColor: platform === "ios" ? "#007aff" : "#fff",
    segmentActiveTextColor: platform === "ios" ? "#fff" : "#3F51B5",
    segmentBorderColor: platform === "ios" ? "#007aff" : "#fff",
    segmentBorderColorMain: platform === "ios" ? "#a7a6ab" : "#3F51B5",
    defaultSpinnerColor: "#45D56E",
    inverseSpinnerColor: "#1A191B",
    tabDefaultBg: platform === "ios" ? "#F8F8F8" : "#3F51B5",
    topTabBarTextColor: platform === "ios" ? "#6b6b6b" : "#b3c7f9",
    topTabBarActiveTextColor: platform === "ios" ? "#007aff" : "#fff",
    topTabBarBorderColor: platform === "ios" ? "#a7a6ab" : "#fff",
    topTabBarActiveBorderColor: platform === "ios" ? "#007aff" : "#fff",
    tabBgColor: "#F8F8F8",
    tabFontSize: 15,
    textColor: "#000",
    inverseTextColor: "#fff",
    noteFontSize: 14,

    get defaultTextColor() {
      return this.textColor;
    },

    titleFontfamily: platform === "ios" ? "System" : "Roboto_medium",
    titleFontSize: platform === "ios" ? 17 : 19,
    subTitleFontSize: platform === "ios" ? 12 : 14,
    subtitleColor: platform === "ios" ? "#8e8e93" : "#FFF",
    titleFontColor: platform === "ios" ? "#000" : "#FFF",
    borderRadiusBase: platform === "ios" ? 5 : 2,
    borderWidth: 1 / _reactNative.PixelRatio.getPixelSizeForLayoutSize(1),
    contentPadding: 10,
    dropdownLinkColor: "#414142",
    inputLineHeight: 24,
    deviceWidth: deviceWidth,
    deviceHeight: deviceHeight,
    isIphoneX: isIphoneX,
    inputGroupRoundedBorderRadius: 30
  };
},426,[427,12],"native-base/dist/src/theme/variables/platform.js");
__d(function (global, require, module, exports, _dependencyMap) {
	'use strict';

	var colorString = require(_dependencyMap[0], 'color-string');

	var convert = require(_dependencyMap[1], 'color-convert');

	var _slice = [].slice;
	var skippedModels = ['keyword', 'gray', 'hex'];
	var hashedModelKeys = {};
	Object.keys(convert).forEach(function (model) {
		hashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;
	});
	var limiters = {};

	function Color(obj, model) {
		if (!(this instanceof Color)) {
			return new Color(obj, model);
		}

		if (model && model in skippedModels) {
			model = null;
		}

		if (model && !(model in convert)) {
			throw new Error('Unknown model: ' + model);
		}

		var i;
		var channels;

		if (!obj) {
			this.model = 'rgb';
			this.color = [0, 0, 0];
			this.valpha = 1;
		} else if (obj instanceof Color) {
			this.model = obj.model;
			this.color = obj.color.slice();
			this.valpha = obj.valpha;
		} else if (typeof obj === 'string') {
			var result = colorString.get(obj);

			if (result === null) {
				throw new Error('Unable to parse color from string: ' + obj);
			}

			this.model = result.model;
			channels = convert[this.model].channels;
			this.color = result.value.slice(0, channels);
			this.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;
		} else if (obj.length) {
			this.model = model || 'rgb';
			channels = convert[this.model].channels;

			var newArr = _slice.call(obj, 0, channels);

			this.color = zeroArray(newArr, channels);
			this.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;
		} else if (typeof obj === 'number') {
			obj &= 0xFFFFFF;
			this.model = 'rgb';
			this.color = [obj >> 16 & 0xFF, obj >> 8 & 0xFF, obj & 0xFF];
			this.valpha = 1;
		} else {
			this.valpha = 1;
			var keys = Object.keys(obj);

			if ('alpha' in obj) {
				keys.splice(keys.indexOf('alpha'), 1);
				this.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;
			}

			var hashedKeys = keys.sort().join('');

			if (!(hashedKeys in hashedModelKeys)) {
				throw new Error('Unable to parse color from object: ' + JSON.stringify(obj));
			}

			this.model = hashedModelKeys[hashedKeys];
			var labels = convert[this.model].labels;
			var color = [];

			for (i = 0; i < labels.length; i++) {
				color.push(obj[labels[i]]);
			}

			this.color = zeroArray(color);
		}

		if (limiters[this.model]) {
			channels = convert[this.model].channels;

			for (i = 0; i < channels; i++) {
				var limit = limiters[this.model][i];

				if (limit) {
					this.color[i] = limit(this.color[i]);
				}
			}
		}

		this.valpha = Math.max(0, Math.min(1, this.valpha));

		if (Object.freeze) {
			Object.freeze(this);
		}
	}

	Color.prototype = {
		toString: function toString() {
			return this.string();
		},
		toJSON: function toJSON() {
			return this[this.model]();
		},
		string: function string(places) {
			var self = this.model in colorString.to ? this : this.rgb();
			self = self.round(typeof places === 'number' ? places : 1);
			var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
			return colorString.to[self.model](args);
		},
		percentString: function percentString(places) {
			var self = this.rgb().round(typeof places === 'number' ? places : 1);
			var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
			return colorString.to.rgb.percent(args);
		},
		array: function array() {
			return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);
		},
		object: function object() {
			var result = {};
			var channels = convert[this.model].channels;
			var labels = convert[this.model].labels;

			for (var i = 0; i < channels; i++) {
				result[labels[i]] = this.color[i];
			}

			if (this.valpha !== 1) {
				result.alpha = this.valpha;
			}

			return result;
		},
		unitArray: function unitArray() {
			var rgb = this.rgb().color;
			rgb[0] /= 255;
			rgb[1] /= 255;
			rgb[2] /= 255;

			if (this.valpha !== 1) {
				rgb.push(this.valpha);
			}

			return rgb;
		},
		unitObject: function unitObject() {
			var rgb = this.rgb().object();
			rgb.r /= 255;
			rgb.g /= 255;
			rgb.b /= 255;

			if (this.valpha !== 1) {
				rgb.alpha = this.valpha;
			}

			return rgb;
		},
		round: function round(places) {
			places = Math.max(places || 0, 0);
			return new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);
		},
		alpha: function alpha(val) {
			if (arguments.length) {
				return new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);
			}

			return this.valpha;
		},
		red: getset('rgb', 0, maxfn(255)),
		green: getset('rgb', 1, maxfn(255)),
		blue: getset('rgb', 2, maxfn(255)),
		hue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) {
			return (val % 360 + 360) % 360;
		}),
		saturationl: getset('hsl', 1, maxfn(100)),
		lightness: getset('hsl', 2, maxfn(100)),
		saturationv: getset('hsv', 1, maxfn(100)),
		value: getset('hsv', 2, maxfn(100)),
		chroma: getset('hcg', 1, maxfn(100)),
		gray: getset('hcg', 2, maxfn(100)),
		white: getset('hwb', 1, maxfn(100)),
		wblack: getset('hwb', 2, maxfn(100)),
		cyan: getset('cmyk', 0, maxfn(100)),
		magenta: getset('cmyk', 1, maxfn(100)),
		yellow: getset('cmyk', 2, maxfn(100)),
		black: getset('cmyk', 3, maxfn(100)),
		x: getset('xyz', 0, maxfn(100)),
		y: getset('xyz', 1, maxfn(100)),
		z: getset('xyz', 2, maxfn(100)),
		l: getset('lab', 0, maxfn(100)),
		a: getset('lab', 1),
		b: getset('lab', 2),
		keyword: function keyword(val) {
			if (arguments.length) {
				return new Color(val);
			}

			return convert[this.model].keyword(this.color);
		},
		hex: function hex(val) {
			if (arguments.length) {
				return new Color(val);
			}

			return colorString.to.hex(this.rgb().round().color);
		},
		rgbNumber: function rgbNumber() {
			var rgb = this.rgb().color;
			return (rgb[0] & 0xFF) << 16 | (rgb[1] & 0xFF) << 8 | rgb[2] & 0xFF;
		},
		luminosity: function luminosity() {
			var rgb = this.rgb().color;
			var lum = [];

			for (var i = 0; i < rgb.length; i++) {
				var chan = rgb[i] / 255;
				lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
			}

			return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
		},
		contrast: function contrast(color2) {
			var lum1 = this.luminosity();
			var lum2 = color2.luminosity();

			if (lum1 > lum2) {
				return (lum1 + 0.05) / (lum2 + 0.05);
			}

			return (lum2 + 0.05) / (lum1 + 0.05);
		},
		level: function level(color2) {
			var contrastRatio = this.contrast(color2);

			if (contrastRatio >= 7.1) {
				return 'AAA';
			}

			return contrastRatio >= 4.5 ? 'AA' : '';
		},
		dark: function dark() {
			var rgb = this.rgb().color;
			var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
			return yiq < 128;
		},
		light: function light() {
			return !this.dark();
		},
		negate: function negate() {
			var rgb = this.rgb();

			for (var i = 0; i < 3; i++) {
				rgb.color[i] = 255 - rgb.color[i];
			}

			return rgb;
		},
		lighten: function lighten(ratio) {
			var hsl = this.hsl();
			hsl.color[2] += hsl.color[2] * ratio;
			return hsl;
		},
		darken: function darken(ratio) {
			var hsl = this.hsl();
			hsl.color[2] -= hsl.color[2] * ratio;
			return hsl;
		},
		saturate: function saturate(ratio) {
			var hsl = this.hsl();
			hsl.color[1] += hsl.color[1] * ratio;
			return hsl;
		},
		desaturate: function desaturate(ratio) {
			var hsl = this.hsl();
			hsl.color[1] -= hsl.color[1] * ratio;
			return hsl;
		},
		whiten: function whiten(ratio) {
			var hwb = this.hwb();
			hwb.color[1] += hwb.color[1] * ratio;
			return hwb;
		},
		blacken: function blacken(ratio) {
			var hwb = this.hwb();
			hwb.color[2] += hwb.color[2] * ratio;
			return hwb;
		},
		grayscale: function grayscale() {
			var rgb = this.rgb().color;
			var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
			return Color.rgb(val, val, val);
		},
		fade: function fade(ratio) {
			return this.alpha(this.valpha - this.valpha * ratio);
		},
		opaquer: function opaquer(ratio) {
			return this.alpha(this.valpha + this.valpha * ratio);
		},
		rotate: function rotate(degrees) {
			var hsl = this.hsl();
			var hue = hsl.color[0];
			hue = (hue + degrees) % 360;
			hue = hue < 0 ? 360 + hue : hue;
			hsl.color[0] = hue;
			return hsl;
		},
		mix: function mix(mixinColor, weight) {
			var color1 = this.rgb();
			var color2 = mixinColor.rgb();
			var p = weight === undefined ? 0.5 : weight;
			var w = 2 * p - 1;
			var a = color1.alpha() - color2.alpha();
			var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
			var w2 = 1 - w1;
			return Color.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue(), color1.alpha() * p + color2.alpha() * (1 - p));
		}
	};
	Object.keys(convert).forEach(function (model) {
		if (skippedModels.indexOf(model) !== -1) {
			return;
		}

		var channels = convert[model].channels;

		Color.prototype[model] = function () {
			if (this.model === model) {
				return new Color(this);
			}

			if (arguments.length) {
				return new Color(arguments, model);
			}

			var newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;
			return new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);
		};

		Color[model] = function (color) {
			if (typeof color === 'number') {
				color = zeroArray(_slice.call(arguments), channels);
			}

			return new Color(color, model);
		};
	});

	function roundTo(num, places) {
		return Number(num.toFixed(places));
	}

	function roundToPlace(places) {
		return function (num) {
			return roundTo(num, places);
		};
	}

	function getset(model, channel, modifier) {
		model = Array.isArray(model) ? model : [model];
		model.forEach(function (m) {
			(limiters[m] || (limiters[m] = []))[channel] = modifier;
		});
		model = model[0];
		return function (val) {
			var result;

			if (arguments.length) {
				if (modifier) {
					val = modifier(val);
				}

				result = this[model]();
				result.color[channel] = val;
				return result;
			}

			result = this[model]().color[channel];

			if (modifier) {
				result = modifier(result);
			}

			return result;
		};
	}

	function maxfn(max) {
		return function (v) {
			return Math.max(0, Math.min(max, v));
		};
	}

	function assertArray(val) {
		return Array.isArray(val) ? val : [val];
	}

	function zeroArray(arr, length) {
		for (var i = 0; i < length; i++) {
			if (typeof arr[i] !== 'number') {
				arr[i] = 0;
			}
		}

		return arr;
	}

	module.exports = Color;
},427,[428,432],"color/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
	var colorNames = require(_dependencyMap[0], 'color-name');

	var swizzle = require(_dependencyMap[1], 'simple-swizzle');

	var reverseNames = {};

	for (var name in colorNames) {
		if (colorNames.hasOwnProperty(name)) {
			reverseNames[colorNames[name]] = name;
		}
	}

	var cs = module.exports = {
		to: {}
	};

	cs.get = function (string) {
		var prefix = string.substring(0, 3).toLowerCase();
		var val;
		var model;

		switch (prefix) {
			case 'hsl':
				val = cs.get.hsl(string);
				model = 'hsl';
				break;

			case 'hwb':
				val = cs.get.hwb(string);
				model = 'hwb';
				break;

			default:
				val = cs.get.rgb(string);
				model = 'rgb';
				break;
		}

		if (!val) {
			return null;
		}

		return {
			model: model,
			value: val
		};
	};

	cs.get.rgb = function (string) {
		if (!string) {
			return null;
		}

		var abbr = /^#([a-f0-9]{3,4})$/i;
		var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
		var rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
		var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
		var keyword = /(\D+)/;
		var rgb = [0, 0, 0, 1];
		var match;
		var i;
		var hexAlpha;

		if (match = string.match(hex)) {
			hexAlpha = match[2];
			match = match[1];

			for (i = 0; i < 3; i++) {
				var i2 = i * 2;
				rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
			}

			if (hexAlpha) {
				rgb[3] = Math.round(parseInt(hexAlpha, 16) / 255 * 100) / 100;
			}
		} else if (match = string.match(abbr)) {
			match = match[1];
			hexAlpha = match[3];

			for (i = 0; i < 3; i++) {
				rgb[i] = parseInt(match[i] + match[i], 16);
			}

			if (hexAlpha) {
				rgb[3] = Math.round(parseInt(hexAlpha + hexAlpha, 16) / 255 * 100) / 100;
			}
		} else if (match = string.match(rgba)) {
			for (i = 0; i < 3; i++) {
				rgb[i] = parseInt(match[i + 1], 0);
			}

			if (match[4]) {
				rgb[3] = parseFloat(match[4]);
			}
		} else if (match = string.match(per)) {
			for (i = 0; i < 3; i++) {
				rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
			}

			if (match[4]) {
				rgb[3] = parseFloat(match[4]);
			}
		} else if (match = string.match(keyword)) {
			if (match[1] === 'transparent') {
				return [0, 0, 0, 0];
			}

			rgb = colorNames[match[1]];

			if (!rgb) {
				return null;
			}

			rgb[3] = 1;
			return rgb;
		} else {
			return null;
		}

		for (i = 0; i < 3; i++) {
			rgb[i] = clamp(rgb[i], 0, 255);
		}

		rgb[3] = clamp(rgb[3], 0, 1);
		return rgb;
	};

	cs.get.hsl = function (string) {
		if (!string) {
			return null;
		}

		var hsl = /^hsla?\(\s*([+-]?\d*[\.]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
		var match = string.match(hsl);

		if (match) {
			var alpha = parseFloat(match[4]);
			var h = (parseFloat(match[1]) % 360 + 360) % 360;
			var s = clamp(parseFloat(match[2]), 0, 100);
			var l = clamp(parseFloat(match[3]), 0, 100);
			var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
			return [h, s, l, a];
		}

		return null;
	};

	cs.get.hwb = function (string) {
		if (!string) {
			return null;
		}

		var hwb = /^hwb\(\s*([+-]?\d*[\.]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
		var match = string.match(hwb);

		if (match) {
			var alpha = parseFloat(match[4]);
			var h = (parseFloat(match[1]) % 360 + 360) % 360;
			var w = clamp(parseFloat(match[2]), 0, 100);
			var b = clamp(parseFloat(match[3]), 0, 100);
			var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
			return [h, w, b, a];
		}

		return null;
	};

	cs.to.hex = function () {
		var rgba = swizzle(arguments);
		return '#' + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (rgba[3] < 1 ? hexDouble(Math.round(rgba[3] * 255)) : '');
	};

	cs.to.rgb = function () {
		var rgba = swizzle(arguments);
		return rgba.length < 4 || rgba[3] === 1 ? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')' : 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';
	};

	cs.to.rgb.percent = function () {
		var rgba = swizzle(arguments);
		var r = Math.round(rgba[0] / 255 * 100);
		var g = Math.round(rgba[1] / 255 * 100);
		var b = Math.round(rgba[2] / 255 * 100);
		return rgba.length < 4 || rgba[3] === 1 ? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)' : 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';
	};

	cs.to.hsl = function () {
		var hsla = swizzle(arguments);
		return hsla.length < 4 || hsla[3] === 1 ? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)' : 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';
	};

	cs.to.hwb = function () {
		var hwba = swizzle(arguments);
		var a = '';

		if (hwba.length >= 4 && hwba[3] !== 1) {
			a = ', ' + hwba[3];
		}

		return 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';
	};

	cs.to.keyword = function (rgb) {
		return reverseNames[rgb.slice(0, 3)];
	};

	function clamp(num, min, max) {
		return Math.min(Math.max(min, num), max);
	}

	function hexDouble(num) {
		var str = num.toString(16).toUpperCase();
		return str.length < 2 ? '0' + str : str;
	}
},428,[429,430],"color-string/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
	'use strict';

	module.exports = {
		"aliceblue": [240, 248, 255],
		"antiquewhite": [250, 235, 215],
		"aqua": [0, 255, 255],
		"aquamarine": [127, 255, 212],
		"azure": [240, 255, 255],
		"beige": [245, 245, 220],
		"bisque": [255, 228, 196],
		"black": [0, 0, 0],
		"blanchedalmond": [255, 235, 205],
		"blue": [0, 0, 255],
		"blueviolet": [138, 43, 226],
		"brown": [165, 42, 42],
		"burlywood": [222, 184, 135],
		"cadetblue": [95, 158, 160],
		"chartreuse": [127, 255, 0],
		"chocolate": [210, 105, 30],
		"coral": [255, 127, 80],
		"cornflowerblue": [100, 149, 237],
		"cornsilk": [255, 248, 220],
		"crimson": [220, 20, 60],
		"cyan": [0, 255, 255],
		"darkblue": [0, 0, 139],
		"darkcyan": [0, 139, 139],
		"darkgoldenrod": [184, 134, 11],
		"darkgray": [169, 169, 169],
		"darkgreen": [0, 100, 0],
		"darkgrey": [169, 169, 169],
		"darkkhaki": [189, 183, 107],
		"darkmagenta": [139, 0, 139],
		"darkolivegreen": [85, 107, 47],
		"darkorange": [255, 140, 0],
		"darkorchid": [153, 50, 204],
		"darkred": [139, 0, 0],
		"darksalmon": [233, 150, 122],
		"darkseagreen": [143, 188, 143],
		"darkslateblue": [72, 61, 139],
		"darkslategray": [47, 79, 79],
		"darkslategrey": [47, 79, 79],
		"darkturquoise": [0, 206, 209],
		"darkviolet": [148, 0, 211],
		"deeppink": [255, 20, 147],
		"deepskyblue": [0, 191, 255],
		"dimgray": [105, 105, 105],
		"dimgrey": [105, 105, 105],
		"dodgerblue": [30, 144, 255],
		"firebrick": [178, 34, 34],
		"floralwhite": [255, 250, 240],
		"forestgreen": [34, 139, 34],
		"fuchsia": [255, 0, 255],
		"gainsboro": [220, 220, 220],
		"ghostwhite": [248, 248, 255],
		"gold": [255, 215, 0],
		"goldenrod": [218, 165, 32],
		"gray": [128, 128, 128],
		"green": [0, 128, 0],
		"greenyellow": [173, 255, 47],
		"grey": [128, 128, 128],
		"honeydew": [240, 255, 240],
		"hotpink": [255, 105, 180],
		"indianred": [205, 92, 92],
		"indigo": [75, 0, 130],
		"ivory": [255, 255, 240],
		"khaki": [240, 230, 140],
		"lavender": [230, 230, 250],
		"lavenderblush": [255, 240, 245],
		"lawngreen": [124, 252, 0],
		"lemonchiffon": [255, 250, 205],
		"lightblue": [173, 216, 230],
		"lightcoral": [240, 128, 128],
		"lightcyan": [224, 255, 255],
		"lightgoldenrodyellow": [250, 250, 210],
		"lightgray": [211, 211, 211],
		"lightgreen": [144, 238, 144],
		"lightgrey": [211, 211, 211],
		"lightpink": [255, 182, 193],
		"lightsalmon": [255, 160, 122],
		"lightseagreen": [32, 178, 170],
		"lightskyblue": [135, 206, 250],
		"lightslategray": [119, 136, 153],
		"lightslategrey": [119, 136, 153],
		"lightsteelblue": [176, 196, 222],
		"lightyellow": [255, 255, 224],
		"lime": [0, 255, 0],
		"limegreen": [50, 205, 50],
		"linen": [250, 240, 230],
		"magenta": [255, 0, 255],
		"maroon": [128, 0, 0],
		"mediumaquamarine": [102, 205, 170],
		"mediumblue": [0, 0, 205],
		"mediumorchid": [186, 85, 211],
		"mediumpurple": [147, 112, 219],
		"mediumseagreen": [60, 179, 113],
		"mediumslateblue": [123, 104, 238],
		"mediumspringgreen": [0, 250, 154],
		"mediumturquoise": [72, 209, 204],
		"mediumvioletred": [199, 21, 133],
		"midnightblue": [25, 25, 112],
		"mintcream": [245, 255, 250],
		"mistyrose": [255, 228, 225],
		"moccasin": [255, 228, 181],
		"navajowhite": [255, 222, 173],
		"navy": [0, 0, 128],
		"oldlace": [253, 245, 230],
		"olive": [128, 128, 0],
		"olivedrab": [107, 142, 35],
		"orange": [255, 165, 0],
		"orangered": [255, 69, 0],
		"orchid": [218, 112, 214],
		"palegoldenrod": [238, 232, 170],
		"palegreen": [152, 251, 152],
		"paleturquoise": [175, 238, 238],
		"palevioletred": [219, 112, 147],
		"papayawhip": [255, 239, 213],
		"peachpuff": [255, 218, 185],
		"peru": [205, 133, 63],
		"pink": [255, 192, 203],
		"plum": [221, 160, 221],
		"powderblue": [176, 224, 230],
		"purple": [128, 0, 128],
		"rebeccapurple": [102, 51, 153],
		"red": [255, 0, 0],
		"rosybrown": [188, 143, 143],
		"royalblue": [65, 105, 225],
		"saddlebrown": [139, 69, 19],
		"salmon": [250, 128, 114],
		"sandybrown": [244, 164, 96],
		"seagreen": [46, 139, 87],
		"seashell": [255, 245, 238],
		"sienna": [160, 82, 45],
		"silver": [192, 192, 192],
		"skyblue": [135, 206, 235],
		"slateblue": [106, 90, 205],
		"slategray": [112, 128, 144],
		"slategrey": [112, 128, 144],
		"snow": [255, 250, 250],
		"springgreen": [0, 255, 127],
		"steelblue": [70, 130, 180],
		"tan": [210, 180, 140],
		"teal": [0, 128, 128],
		"thistle": [216, 191, 216],
		"tomato": [255, 99, 71],
		"turquoise": [64, 224, 208],
		"violet": [238, 130, 238],
		"wheat": [245, 222, 179],
		"white": [255, 255, 255],
		"whitesmoke": [245, 245, 245],
		"yellow": [255, 255, 0],
		"yellowgreen": [154, 205, 50]
	};
},429,[],"color-name/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
	'use strict';

	var isArrayish = require(_dependencyMap[0], 'is-arrayish');

	var concat = Array.prototype.concat;
	var slice = Array.prototype.slice;

	var swizzle = module.exports = function swizzle(args) {
		var results = [];

		for (var i = 0, len = args.length; i < len; i++) {
			var arg = args[i];

			if (isArrayish(arg)) {
				results = concat.call(results, slice.call(arg));
			} else {
				results.push(arg);
			}
		}

		return results;
	};

	swizzle.wrap = function (fn) {
		return function () {
			return fn(swizzle(arguments));
		};
	};
},430,[431],"simple-swizzle/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
	'use strict';

	module.exports = function isArrayish(obj) {
		if (!obj || typeof obj === 'string') {
			return false;
		}

		return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && (obj.splice instanceof Function || Object.getOwnPropertyDescriptor(obj, obj.length - 1) && obj.constructor.name !== 'String');
	};
},431,[],"is-arrayish/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
	var conversions = require(_dependencyMap[0], './conversions');

	var route = require(_dependencyMap[1], './route');

	var convert = {};
	var models = Object.keys(conversions);

	function wrapRaw(fn) {
		var wrappedFn = function wrappedFn(args) {
			if (args === undefined || args === null) {
				return args;
			}

			if (arguments.length > 1) {
				args = Array.prototype.slice.call(arguments);
			}

			return fn(args);
		};

		if ('conversion' in fn) {
			wrappedFn.conversion = fn.conversion;
		}

		return wrappedFn;
	}

	function wrapRounded(fn) {
		var wrappedFn = function wrappedFn(args) {
			if (args === undefined || args === null) {
				return args;
			}

			if (arguments.length > 1) {
				args = Array.prototype.slice.call(arguments);
			}

			var result = fn(args);

			if (typeof result === 'object') {
				for (var len = result.length, i = 0; i < len; i++) {
					result[i] = Math.round(result[i]);
				}
			}

			return result;
		};

		if ('conversion' in fn) {
			wrappedFn.conversion = fn.conversion;
		}

		return wrappedFn;
	}

	models.forEach(function (fromModel) {
		convert[fromModel] = {};
		Object.defineProperty(convert[fromModel], 'channels', {
			value: conversions[fromModel].channels
		});
		Object.defineProperty(convert[fromModel], 'labels', {
			value: conversions[fromModel].labels
		});
		var routes = route(fromModel);
		var routeModels = Object.keys(routes);
		routeModels.forEach(function (toModel) {
			var fn = routes[toModel];
			convert[fromModel][toModel] = wrapRounded(fn);
			convert[fromModel][toModel].raw = wrapRaw(fn);
		});
	});
	module.exports = convert;
},432,[433,434],"color-convert/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
	var cssKeywords = require(_dependencyMap[0], 'color-name');

	var reverseKeywords = {};

	for (var key in cssKeywords) {
		if (cssKeywords.hasOwnProperty(key)) {
			reverseKeywords[cssKeywords[key]] = key;
		}
	}

	var convert = module.exports = {
		rgb: {
			channels: 3,
			labels: 'rgb'
		},
		hsl: {
			channels: 3,
			labels: 'hsl'
		},
		hsv: {
			channels: 3,
			labels: 'hsv'
		},
		hwb: {
			channels: 3,
			labels: 'hwb'
		},
		cmyk: {
			channels: 4,
			labels: 'cmyk'
		},
		xyz: {
			channels: 3,
			labels: 'xyz'
		},
		lab: {
			channels: 3,
			labels: 'lab'
		},
		lch: {
			channels: 3,
			labels: 'lch'
		},
		hex: {
			channels: 1,
			labels: ['hex']
		},
		keyword: {
			channels: 1,
			labels: ['keyword']
		},
		ansi16: {
			channels: 1,
			labels: ['ansi16']
		},
		ansi256: {
			channels: 1,
			labels: ['ansi256']
		},
		hcg: {
			channels: 3,
			labels: ['h', 'c', 'g']
		},
		apple: {
			channels: 3,
			labels: ['r16', 'g16', 'b16']
		},
		gray: {
			channels: 1,
			labels: ['gray']
		}
	};

	for (var model in convert) {
		if (convert.hasOwnProperty(model)) {
			if (!('channels' in convert[model])) {
				throw new Error('missing channels property: ' + model);
			}

			if (!('labels' in convert[model])) {
				throw new Error('missing channel labels property: ' + model);
			}

			if (convert[model].labels.length !== convert[model].channels) {
				throw new Error('channel and label counts mismatch: ' + model);
			}

			var channels = convert[model].channels;
			var labels = convert[model].labels;
			delete convert[model].channels;
			delete convert[model].labels;
			Object.defineProperty(convert[model], 'channels', {
				value: channels
			});
			Object.defineProperty(convert[model], 'labels', {
				value: labels
			});
		}
	}

	convert.rgb.hsl = function (rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var min = Math.min(r, g, b);
		var max = Math.max(r, g, b);
		var delta = max - min;
		var h;
		var s;
		var l;

		if (max === min) {
			h = 0;
		} else if (r === max) {
			h = (g - b) / delta;
		} else if (g === max) {
			h = 2 + (b - r) / delta;
		} else if (b === max) {
			h = 4 + (r - g) / delta;
		}

		h = Math.min(h * 60, 360);

		if (h < 0) {
			h += 360;
		}

		l = (min + max) / 2;

		if (max === min) {
			s = 0;
		} else if (l <= 0.5) {
			s = delta / (max + min);
		} else {
			s = delta / (2 - max - min);
		}

		return [h, s * 100, l * 100];
	};

	convert.rgb.hsv = function (rgb) {
		var r = rgb[0];
		var g = rgb[1];
		var b = rgb[2];
		var min = Math.min(r, g, b);
		var max = Math.max(r, g, b);
		var delta = max - min;
		var h;
		var s;
		var v;

		if (max === 0) {
			s = 0;
		} else {
			s = delta / max * 1000 / 10;
		}

		if (max === min) {
			h = 0;
		} else if (r === max) {
			h = (g - b) / delta;
		} else if (g === max) {
			h = 2 + (b - r) / delta;
		} else if (b === max) {
			h = 4 + (r - g) / delta;
		}

		h = Math.min(h * 60, 360);

		if (h < 0) {
			h += 360;
		}

		v = max / 255 * 1000 / 10;
		return [h, s, v];
	};

	convert.rgb.hwb = function (rgb) {
		var r = rgb[0];
		var g = rgb[1];
		var b = rgb[2];
		var h = convert.rgb.hsl(rgb)[0];
		var w = 1 / 255 * Math.min(r, Math.min(g, b));
		b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
		return [h, w * 100, b * 100];
	};

	convert.rgb.cmyk = function (rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var c;
		var m;
		var y;
		var k;
		k = Math.min(1 - r, 1 - g, 1 - b);
		c = (1 - r - k) / (1 - k) || 0;
		m = (1 - g - k) / (1 - k) || 0;
		y = (1 - b - k) / (1 - k) || 0;
		return [c * 100, m * 100, y * 100, k * 100];
	};

	function comparativeDistance(x, y) {
		return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
	}

	convert.rgb.keyword = function (rgb) {
		var reversed = reverseKeywords[rgb];

		if (reversed) {
			return reversed;
		}

		var currentClosestDistance = Infinity;
		var currentClosestKeyword;

		for (var keyword in cssKeywords) {
			if (cssKeywords.hasOwnProperty(keyword)) {
				var value = cssKeywords[keyword];
				var distance = comparativeDistance(rgb, value);

				if (distance < currentClosestDistance) {
					currentClosestDistance = distance;
					currentClosestKeyword = keyword;
				}
			}
		}

		return currentClosestKeyword;
	};

	convert.keyword.rgb = function (keyword) {
		return cssKeywords[keyword];
	};

	convert.rgb.xyz = function (rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
		g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
		b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
		var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
		var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
		var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
		return [x * 100, y * 100, z * 100];
	};

	convert.rgb.lab = function (rgb) {
		var xyz = convert.rgb.xyz(rgb);
		var x = xyz[0];
		var y = xyz[1];
		var z = xyz[2];
		var l;
		var a;
		var b;
		x /= 95.047;
		y /= 100;
		z /= 108.883;
		x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
		y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
		z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
		l = 116 * y - 16;
		a = 500 * (x - y);
		b = 200 * (y - z);
		return [l, a, b];
	};

	convert.hsl.rgb = function (hsl) {
		var h = hsl[0] / 360;
		var s = hsl[1] / 100;
		var l = hsl[2] / 100;
		var t1;
		var t2;
		var t3;
		var rgb;
		var val;

		if (s === 0) {
			val = l * 255;
			return [val, val, val];
		}

		if (l < 0.5) {
			t2 = l * (1 + s);
		} else {
			t2 = l + s - l * s;
		}

		t1 = 2 * l - t2;
		rgb = [0, 0, 0];

		for (var i = 0; i < 3; i++) {
			t3 = h + 1 / 3 * -(i - 1);

			if (t3 < 0) {
				t3++;
			}

			if (t3 > 1) {
				t3--;
			}

			if (6 * t3 < 1) {
				val = t1 + (t2 - t1) * 6 * t3;
			} else if (2 * t3 < 1) {
				val = t2;
			} else if (3 * t3 < 2) {
				val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
			} else {
				val = t1;
			}

			rgb[i] = val * 255;
		}

		return rgb;
	};

	convert.hsl.hsv = function (hsl) {
		var h = hsl[0];
		var s = hsl[1] / 100;
		var l = hsl[2] / 100;
		var smin = s;
		var lmin = Math.max(l, 0.01);
		var sv;
		var v;
		l *= 2;
		s *= l <= 1 ? l : 2 - l;
		smin *= lmin <= 1 ? lmin : 2 - lmin;
		v = (l + s) / 2;
		sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
		return [h, sv * 100, v * 100];
	};

	convert.hsv.rgb = function (hsv) {
		var h = hsv[0] / 60;
		var s = hsv[1] / 100;
		var v = hsv[2] / 100;
		var hi = Math.floor(h) % 6;
		var f = h - Math.floor(h);
		var p = 255 * v * (1 - s);
		var q = 255 * v * (1 - s * f);
		var t = 255 * v * (1 - s * (1 - f));
		v *= 255;

		switch (hi) {
			case 0:
				return [v, t, p];

			case 1:
				return [q, v, p];

			case 2:
				return [p, v, t];

			case 3:
				return [p, q, v];

			case 4:
				return [t, p, v];

			case 5:
				return [v, p, q];
		}
	};

	convert.hsv.hsl = function (hsv) {
		var h = hsv[0];
		var s = hsv[1] / 100;
		var v = hsv[2] / 100;
		var vmin = Math.max(v, 0.01);
		var lmin;
		var sl;
		var l;
		l = (2 - s) * v;
		lmin = (2 - s) * vmin;
		sl = s * vmin;
		sl /= lmin <= 1 ? lmin : 2 - lmin;
		sl = sl || 0;
		l /= 2;
		return [h, sl * 100, l * 100];
	};

	convert.hwb.rgb = function (hwb) {
		var h = hwb[0] / 360;
		var wh = hwb[1] / 100;
		var bl = hwb[2] / 100;
		var ratio = wh + bl;
		var i;
		var v;
		var f;
		var n;

		if (ratio > 1) {
			wh /= ratio;
			bl /= ratio;
		}

		i = Math.floor(6 * h);
		v = 1 - bl;
		f = 6 * h - i;

		if ((i & 0x01) !== 0) {
			f = 1 - f;
		}

		n = wh + f * (v - wh);
		var r;
		var g;
		var b;

		switch (i) {
			default:
			case 6:
			case 0:
				r = v;
				g = n;
				b = wh;
				break;

			case 1:
				r = n;
				g = v;
				b = wh;
				break;

			case 2:
				r = wh;
				g = v;
				b = n;
				break;

			case 3:
				r = wh;
				g = n;
				b = v;
				break;

			case 4:
				r = n;
				g = wh;
				b = v;
				break;

			case 5:
				r = v;
				g = wh;
				b = n;
				break;
		}

		return [r * 255, g * 255, b * 255];
	};

	convert.cmyk.rgb = function (cmyk) {
		var c = cmyk[0] / 100;
		var m = cmyk[1] / 100;
		var y = cmyk[2] / 100;
		var k = cmyk[3] / 100;
		var r;
		var g;
		var b;
		r = 1 - Math.min(1, c * (1 - k) + k);
		g = 1 - Math.min(1, m * (1 - k) + k);
		b = 1 - Math.min(1, y * (1 - k) + k);
		return [r * 255, g * 255, b * 255];
	};

	convert.xyz.rgb = function (xyz) {
		var x = xyz[0] / 100;
		var y = xyz[1] / 100;
		var z = xyz[2] / 100;
		var r;
		var g;
		var b;
		r = x * 3.2406 + y * -1.5372 + z * -0.4986;
		g = x * -0.9689 + y * 1.8758 + z * 0.0415;
		b = x * 0.0557 + y * -0.2040 + z * 1.0570;
		r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r * 12.92;
		g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g * 12.92;
		b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b * 12.92;
		r = Math.min(Math.max(0, r), 1);
		g = Math.min(Math.max(0, g), 1);
		b = Math.min(Math.max(0, b), 1);
		return [r * 255, g * 255, b * 255];
	};

	convert.xyz.lab = function (xyz) {
		var x = xyz[0];
		var y = xyz[1];
		var z = xyz[2];
		var l;
		var a;
		var b;
		x /= 95.047;
		y /= 100;
		z /= 108.883;
		x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
		y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
		z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
		l = 116 * y - 16;
		a = 500 * (x - y);
		b = 200 * (y - z);
		return [l, a, b];
	};

	convert.lab.xyz = function (lab) {
		var l = lab[0];
		var a = lab[1];
		var b = lab[2];
		var x;
		var y;
		var z;
		y = (l + 16) / 116;
		x = a / 500 + y;
		z = y - b / 200;
		var y2 = Math.pow(y, 3);
		var x2 = Math.pow(x, 3);
		var z2 = Math.pow(z, 3);
		y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
		x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
		z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;
		x *= 95.047;
		y *= 100;
		z *= 108.883;
		return [x, y, z];
	};

	convert.lab.lch = function (lab) {
		var l = lab[0];
		var a = lab[1];
		var b = lab[2];
		var hr;
		var h;
		var c;
		hr = Math.atan2(b, a);
		h = hr * 360 / 2 / Math.PI;

		if (h < 0) {
			h += 360;
		}

		c = Math.sqrt(a * a + b * b);
		return [l, c, h];
	};

	convert.lch.lab = function (lch) {
		var l = lch[0];
		var c = lch[1];
		var h = lch[2];
		var a;
		var b;
		var hr;
		hr = h / 360 * 2 * Math.PI;
		a = c * Math.cos(hr);
		b = c * Math.sin(hr);
		return [l, a, b];
	};

	convert.rgb.ansi16 = function (args) {
		var r = args[0];
		var g = args[1];
		var b = args[2];
		var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
		value = Math.round(value / 50);

		if (value === 0) {
			return 30;
		}

		var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));

		if (value === 2) {
			ansi += 60;
		}

		return ansi;
	};

	convert.hsv.ansi16 = function (args) {
		return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
	};

	convert.rgb.ansi256 = function (args) {
		var r = args[0];
		var g = args[1];
		var b = args[2];

		if (r === g && g === b) {
			if (r < 8) {
				return 16;
			}

			if (r > 248) {
				return 231;
			}

			return Math.round((r - 8) / 247 * 24) + 232;
		}

		var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
		return ansi;
	};

	convert.ansi16.rgb = function (args) {
		var color = args % 10;

		if (color === 0 || color === 7) {
			if (args > 50) {
				color += 3.5;
			}

			color = color / 10.5 * 255;
			return [color, color, color];
		}

		var mult = (~~(args > 50) + 1) * 0.5;
		var r = (color & 1) * mult * 255;
		var g = (color >> 1 & 1) * mult * 255;
		var b = (color >> 2 & 1) * mult * 255;
		return [r, g, b];
	};

	convert.ansi256.rgb = function (args) {
		if (args >= 232) {
			var c = (args - 232) * 10 + 8;
			return [c, c, c];
		}

		args -= 16;
		var rem;
		var r = Math.floor(args / 36) / 5 * 255;
		var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
		var b = rem % 6 / 5 * 255;
		return [r, g, b];
	};

	convert.rgb.hex = function (args) {
		var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);
		var string = integer.toString(16).toUpperCase();
		return '000000'.substring(string.length) + string;
	};

	convert.hex.rgb = function (args) {
		var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);

		if (!match) {
			return [0, 0, 0];
		}

		var colorString = match[0];

		if (match[0].length === 3) {
			colorString = colorString.split('').map(function (char) {
				return char + char;
			}).join('');
		}

		var integer = parseInt(colorString, 16);
		var r = integer >> 16 & 0xFF;
		var g = integer >> 8 & 0xFF;
		var b = integer & 0xFF;
		return [r, g, b];
	};

	convert.rgb.hcg = function (rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var max = Math.max(Math.max(r, g), b);
		var min = Math.min(Math.min(r, g), b);
		var chroma = max - min;
		var grayscale;
		var hue;

		if (chroma < 1) {
			grayscale = min / (1 - chroma);
		} else {
			grayscale = 0;
		}

		if (chroma <= 0) {
			hue = 0;
		} else if (max === r) {
			hue = (g - b) / chroma % 6;
		} else if (max === g) {
			hue = 2 + (b - r) / chroma;
		} else {
			hue = 4 + (r - g) / chroma + 4;
		}

		hue /= 6;
		hue %= 1;
		return [hue * 360, chroma * 100, grayscale * 100];
	};

	convert.hsl.hcg = function (hsl) {
		var s = hsl[1] / 100;
		var l = hsl[2] / 100;
		var c = 1;
		var f = 0;

		if (l < 0.5) {
			c = 2.0 * s * l;
		} else {
			c = 2.0 * s * (1.0 - l);
		}

		if (c < 1.0) {
			f = (l - 0.5 * c) / (1.0 - c);
		}

		return [hsl[0], c * 100, f * 100];
	};

	convert.hsv.hcg = function (hsv) {
		var s = hsv[1] / 100;
		var v = hsv[2] / 100;
		var c = s * v;
		var f = 0;

		if (c < 1.0) {
			f = (v - c) / (1 - c);
		}

		return [hsv[0], c * 100, f * 100];
	};

	convert.hcg.rgb = function (hcg) {
		var h = hcg[0] / 360;
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;

		if (c === 0.0) {
			return [g * 255, g * 255, g * 255];
		}

		var pure = [0, 0, 0];
		var hi = h % 1 * 6;
		var v = hi % 1;
		var w = 1 - v;
		var mg = 0;

		switch (Math.floor(hi)) {
			case 0:
				pure[0] = 1;
				pure[1] = v;
				pure[2] = 0;
				break;

			case 1:
				pure[0] = w;
				pure[1] = 1;
				pure[2] = 0;
				break;

			case 2:
				pure[0] = 0;
				pure[1] = 1;
				pure[2] = v;
				break;

			case 3:
				pure[0] = 0;
				pure[1] = w;
				pure[2] = 1;
				break;

			case 4:
				pure[0] = v;
				pure[1] = 0;
				pure[2] = 1;
				break;

			default:
				pure[0] = 1;
				pure[1] = 0;
				pure[2] = w;
		}

		mg = (1.0 - c) * g;
		return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];
	};

	convert.hcg.hsv = function (hcg) {
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;
		var v = c + g * (1.0 - c);
		var f = 0;

		if (v > 0.0) {
			f = c / v;
		}

		return [hcg[0], f * 100, v * 100];
	};

	convert.hcg.hsl = function (hcg) {
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;
		var l = g * (1.0 - c) + 0.5 * c;
		var s = 0;

		if (l > 0.0 && l < 0.5) {
			s = c / (2 * l);
		} else if (l >= 0.5 && l < 1.0) {
			s = c / (2 * (1 - l));
		}

		return [hcg[0], s * 100, l * 100];
	};

	convert.hcg.hwb = function (hcg) {
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;
		var v = c + g * (1.0 - c);
		return [hcg[0], (v - c) * 100, (1 - v) * 100];
	};

	convert.hwb.hcg = function (hwb) {
		var w = hwb[1] / 100;
		var b = hwb[2] / 100;
		var v = 1 - b;
		var c = v - w;
		var g = 0;

		if (c < 1) {
			g = (v - c) / (1 - c);
		}

		return [hwb[0], c * 100, g * 100];
	};

	convert.apple.rgb = function (apple) {
		return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
	};

	convert.rgb.apple = function (rgb) {
		return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
	};

	convert.gray.rgb = function (args) {
		return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
	};

	convert.gray.hsl = convert.gray.hsv = function (args) {
		return [0, 0, args[0]];
	};

	convert.gray.hwb = function (gray) {
		return [0, 100, gray[0]];
	};

	convert.gray.cmyk = function (gray) {
		return [0, 0, 0, gray[0]];
	};

	convert.gray.lab = function (gray) {
		return [gray[0], 0, 0];
	};

	convert.gray.hex = function (gray) {
		var val = Math.round(gray[0] / 100 * 255) & 0xFF;
		var integer = (val << 16) + (val << 8) + val;
		var string = integer.toString(16).toUpperCase();
		return '000000'.substring(string.length) + string;
	};

	convert.rgb.gray = function (rgb) {
		var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
		return [val / 255 * 100];
	};
},433,[429],"color-convert/conversions.js");
__d(function (global, require, module, exports, _dependencyMap) {
	var conversions = require(_dependencyMap[0], './conversions');

	function buildGraph() {
		var graph = {};
		var models = Object.keys(conversions);

		for (var len = models.length, i = 0; i < len; i++) {
			graph[models[i]] = {
				distance: -1,
				parent: null
			};
		}

		return graph;
	}

	function deriveBFS(fromModel) {
		var graph = buildGraph();
		var queue = [fromModel];
		graph[fromModel].distance = 0;

		while (queue.length) {
			var current = queue.pop();
			var adjacents = Object.keys(conversions[current]);

			for (var len = adjacents.length, i = 0; i < len; i++) {
				var adjacent = adjacents[i];
				var node = graph[adjacent];

				if (node.distance === -1) {
					node.distance = graph[current].distance + 1;
					node.parent = current;
					queue.unshift(adjacent);
				}
			}
		}

		return graph;
	}

	function link(from, to) {
		return function (args) {
			return to(from(args));
		};
	}

	function wrapConversion(toModel, graph) {
		var path = [graph[toModel].parent, toModel];
		var fn = conversions[graph[toModel].parent][toModel];
		var cur = graph[toModel].parent;

		while (graph[cur].parent) {
			path.unshift(graph[cur].parent);
			fn = link(conversions[graph[cur].parent][cur], fn);
			cur = graph[cur].parent;
		}

		fn.conversion = path;
		return fn;
	}

	module.exports = function (fromModel) {
		var graph = deriveBFS(fromModel);
		var conversion = {};
		var models = Object.keys(graph);

		for (var len = models.length, i = 0; i < len; i++) {
			var toModel = models[i];
			var node = graph[toModel];

			if (node.parent === null) {
				continue;
			}

			conversion[toModel] = wrapConversion(toModel, graph);
		}

		return conversion;
	};
},434,[433],"color-convert/route.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], './../variables/platform');

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var leftTheme = {
      flex: 1,
      alignSelf: 'center',
      alignItems: 'flex-start'
    };
    return leftTheme;
  };
},435,[426],"native-base/dist/src/theme/components/Left.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], './../variables/platform');

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var rightTheme = {
      'NativeBase.Button': {
        alignSelf: null
      },
      flex: 1,
      alignSelf: 'center',
      alignItems: 'flex-end'
    };
    return rightTheme;
  };
},436,[426],"native-base/dist/src/theme/components/Right.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _platform = require(_dependencyMap[1], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var platformStyle = variables.platformStyle;
    var platform = variables.platform;
    var headerTheme = {
      ".span": {
        height: 128,
        "NativeBase.Left": {
          alignSelf: "flex-start"
        },
        "NativeBase.Body": {
          alignSelf: "flex-end",
          alignItems: "flex-start",
          justifyContent: "center",
          paddingBottom: 26
        },
        "NativeBase.Right": {
          alignSelf: "flex-start"
        }
      },
      ".hasSubtitle": {
        "NativeBase.Body": {
          "NativeBase.Title": {
            fontSize: variables.titleFontSize - 2,
            fontFamily: variables.titleFontfamily,
            textAlign: "center"
          },
          "NativeBase.Subtitle": {
            fontSize: variables.subTitleFontSize,
            fontFamily: variables.titleFontfamily,
            color: variables.subtitleColor,
            textAlign: "center"
          }
        }
      },
      ".noShadow": {
        elevation: 0,
        shadowColor: null,
        shadowOffset: null,
        shadowRadius: null,
        shadowOpacity: null
      },
      ".hasTabs": {
        elevation: 0,
        shadowColor: null,
        shadowOffset: null,
        shadowRadius: null,
        shadowOpacity: null,
        borderBottomWidth: null
      },
      ".hasSegment": {
        elevation: 0,
        shadowColor: null,
        shadowOffset: null,
        shadowRadius: null,
        shadowOpacity: null,
        borderBottomWidth: null,
        "NativeBase.Left": {
          flex: 0.3
        },
        "NativeBase.Right": {
          flex: 0.3
        },
        "NativeBase.Body": {
          flex: 1,
          "NativeBase.Segment": {
            marginRight: 0,
            alignSelf: 'center',
            "NativeBase.Button": {
              paddingLeft: 0,
              paddingRight: 0
            }
          }
        }
      },
      "NativeBase.Button": {
        justifyContent: "center",
        alignSelf: "center",
        alignItems: "center",
        ".transparent": {
          "NativeBase.Text": {
            color: variables.toolbarBtnTextColor,
            fontWeight: "600"
          },
          "NativeBase.Icon": {
            color: variables.toolbarBtnColor
          },
          "NativeBase.IconNB": {
            color: variables.toolbarBtnColor
          },
          paddingHorizontal: variables.buttonPadding
        },
        paddingHorizontal: 15
      },
      ".searchBar": {
        "NativeBase.Item": {
          "NativeBase.Icon": {
            backgroundColor: "transparent",
            color: variables.dropdownLinkColor,
            fontSize: variables.toolbarSearchIconSize,
            alignItems: "center",
            marginTop: 2,
            paddingRight: 10,
            paddingLeft: 10
          },
          "NativeBase.IconNB": {
            backgroundColor: "transparent",
            color: null,
            alignSelf: "center"
          },
          "NativeBase.Input": {
            alignSelf: "center",
            lineHeight: 24,
            height: variables.searchBarInputHeight
          },
          alignSelf: "center",
          alignItems: "center",
          justifyContent: "flex-start",
          flex: 1,
          height: variables.searchBarHeight,
          borderColor: "transparent",
          backgroundColor: variables.toolbarInputColor
        },
        "NativeBase.Button": {
          ".transparent": {
            "NativeBase.Text": {
              fontWeight: "500"
            },
            paddingHorizontal: null,
            paddingLeft: platform === "ios" ? 10 : null
          },
          paddingHorizontal: platform === "ios" ? undefined : null,
          width: platform === "ios" ? undefined : 0,
          height: platform === "ios" ? undefined : 0
        }
      },
      ".rounded": {
        "NativeBase.Item": {
          borderRadius: platform === "ios" && platformStyle !== "material" ? 25 : 3
        }
      },
      "NativeBase.Left": {
        "NativeBase.Button": {
          ".hasText": {
            marginLeft: -10,
            height: 30,
            "NativeBase.Icon": {
              color: variables.toolbarBtnColor,
              fontSize: variables.iconHeaderSize,
              marginTop: 2,
              marginRight: 5,
              marginLeft: 2
            },
            "NativeBase.Text": {
              color: variables.toolbarBtnTextColor,
              fontSize: 17,
              marginLeft: 2,
              lineHeight: 21
            },
            "NativeBase.IconNB": {
              color: variables.toolbarBtnColor,
              fontSize: variables.iconHeaderSize,
              marginTop: 2,
              marginRight: 5,
              marginLeft: 2
            }
          },
          ".transparent": {
            marginLeft: -3,
            "NativeBase.Icon": {
              color: variables.toolbarBtnColor,
              fontSize: variables.iconHeaderSize,
              marginTop: 2,
              marginRight: 2,
              marginLeft: 2
            },
            "NativeBase.IconNB": {
              color: variables.toolbarBtnColor,
              fontSize: variables.iconHeaderSize,
              marginTop: 2,
              marginRight: 2,
              marginLeft: 2
            },
            "NativeBase.Text": {
              color: variables.toolbarBtnTextColor,
              fontSize: 17,
              top: platform === "ios" ? undefined : -1.5
            },
            backgroundColor: "transparent",
            borderColor: null,
            elevation: 0,
            shadowColor: null,
            shadowOffset: null,
            shadowRadius: null,
            shadowOpacity: null
          },
          "NativeBase.Icon": {
            color: variables.toolbarBtnColor
          },
          "NativeBase.IconNB": {
            color: variables.toolbarBtnColor
          },
          alignSelf: null,
          paddingHorizontal: variables.buttonPadding
        },
        flex: platform === "ios" && platformStyle !== "material" ? 1 : 0.5,
        alignSelf: "center",
        alignItems: "flex-start"
      },
      "NativeBase.Body": {
        flex: 1,
        alignItems: platform === "ios" && platformStyle !== "material" ? "center" : "flex-start",
        alignSelf: "center",
        "NativeBase.Segment": {
          borderWidth: 0,
          alignSelf: "flex-end",
          marginRight: platform === "ios" ? -40 : -55
        },
        "NativeBase.Button": {
          alignSelf: "center",
          ".transparent": {
            backgroundColor: "transparent"
          },
          "NativeBase.Icon": {
            color: variables.toolbarBtnColor
          },
          "NativeBase.IconNB": {
            color: variables.toolbarBtnColor
          },
          "NativeBase.Text": {
            color: variables.inverseTextColor,
            backgroundColor: "transparent"
          }
        }
      },
      "NativeBase.Right": {
        "NativeBase.Button": {
          ".hasText": {
            height: 30,
            "NativeBase.Icon": {
              color: variables.toolbarBtnColor,
              fontSize: variables.iconHeaderSize - 2,
              marginTop: 2,
              marginRight: 2,
              marginLeft: 5
            },
            "NativeBase.Text": {
              color: variables.toolbarBtnTextColor,
              fontSize: 17,
              lineHeight: 21
            },
            "NativeBase.IconNB": {
              color: variables.toolbarBtnColor,
              fontSize: variables.iconHeaderSize - 2,
              marginTop: 2,
              marginRight: 2,
              marginLeft: 5
            }
          },
          ".transparent": {
            marginRight: -8,
            paddingHorizontal: 15,
            borderRadius: 50,
            "NativeBase.Icon": {
              color: variables.toolbarBtnColor,
              fontSize: platform === "ios" ? variables.iconHeaderSize - 6 : variables.iconHeaderSize - 2,
              marginTop: 2,
              marginLeft: 2,
              marginRight: 2
            },
            "NativeBase.IconNB": {
              color: variables.toolbarBtnColor,
              fontSize: platform === "ios" ? variables.iconHeaderSize - 6 : variables.iconHeaderSize - 2,
              marginTop: 2,
              marginLeft: 2,
              marginRight: 2
            },
            "NativeBase.Text": {
              color: variables.toolbarBtnTextColor,
              fontSize: 17,
              top: platform === "ios" ? undefined : -1.5
            },
            backgroundColor: "transparent",
            borderColor: null,
            elevation: 0,
            shadowColor: null,
            shadowOffset: null,
            shadowRadius: null,
            shadowOpacity: null
          },
          "NativeBase.Icon": {
            color: variables.toolbarBtnColor
          },
          "NativeBase.IconNB": {
            color: variables.toolbarBtnColor
          },
          alignSelf: null,
          paddingHorizontal: variables.buttonPadding
        },
        flex: 1,
        alignSelf: "center",
        alignItems: "flex-end",
        flexDirection: "row",
        justifyContent: "flex-end"
      },
      backgroundColor: variables.toolbarDefaultBg,
      flexDirection: "row",
      paddingHorizontal: 10,
      justifyContent: "center",
      paddingTop: platform === "ios" ? variables.isIphoneX ? 39 : 15 : 0,
      borderBottomWidth: platform === "ios" ? 1 / _reactNative.PixelRatio.getPixelSizeForLayoutSize(1) : 0,
      borderBottomColor: variables.toolbarDefaultBorder,
      height: variables.toolbarHeight,
      elevation: 3,
      shadowColor: platformStyle === "material" ? "#000" : undefined,
      shadowOffset: platformStyle === "material" ? {
        width: 0,
        height: 2
      } : undefined,
      shadowOpacity: platformStyle === "material" ? 0.2 : undefined,
      shadowRadius: platformStyle === "material" ? 1.2 : undefined,
      top: 0,
      left: 0,
      right: 0
    };
    return headerTheme;
  };
},437,[12,426],"native-base/dist/src/theme/components/Header.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var switchTheme = {
      marginVertical: -5
    };
    return switchTheme;
  };
},438,[426],"native-base/dist/src/theme/components/Switch.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], './../variables/platform');

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var thumbnailTheme = {
      '.square': {
        borderRadius: 0,
        '.small': {
          width: 36,
          height: 36,
          borderRadius: 0
        },
        '.large': {
          width: 80,
          height: 80,
          borderRadius: 0
        }
      },
      '.small': {
        width: 36,
        height: 36,
        borderRadius: 18,
        '.square': {
          borderRadius: 0
        }
      },
      '.large': {
        width: 80,
        height: 80,
        borderRadius: 40,
        '.square': {
          borderRadius: 0
        }
      },
      width: 56,
      height: 56,
      borderRadius: 28
    };
    return thumbnailTheme;
  };
},439,[426],"native-base/dist/src/theme/components/Thumbnail.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _platform = require(_dependencyMap[1], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var deviceHeight = _reactNative.Dimensions.get("window").height;

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var theme = {
      flex: 1,
      height: _reactNative.Platform.OS === "ios" ? deviceHeight : deviceHeight - 20
    };
    return theme;
  };
},440,[12,426],"native-base/dist/src/theme/components/Container.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var contentTheme = {
      ".padder": {
        padding: variables.contentPadding
      },
      flex: 1,
      backgroundColor: "transparent",
      "NativeBase.Segment": {
        borderWidth: 0,
        backgroundColor: "transparent"
      }
    };
    return contentTheme;
  };
},441,[426],"native-base/dist/src/theme/components/Content.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _platform = require(_dependencyMap[0], './../variables/platform');

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var platformStyle = variables.platformStyle;
    var platform = variables.platform;
    var darkCommon = {
      'NativeBase.Text': {
        color: variables.brandDark
      },
      'NativeBase.Icon': {
        color: variables.brandDark
      },
      'NativeBase.IconNB': {
        color: variables.brandDark
      }
    };
    var lightCommon = {
      'NativeBase.Text': {
        color: variables.brandLight
      },
      'NativeBase.Icon': {
        color: variables.brandLight
      },
      'NativeBase.IconNB': {
        color: variables.brandLight
      }
    };
    var primaryCommon = {
      'NativeBase.Text': {
        color: variables.btnPrimaryBg
      },
      'NativeBase.Icon': {
        color: variables.btnPrimaryBg
      },
      'NativeBase.IconNB': {
        color: variables.btnPrimaryBg
      }
    };
    var successCommon = {
      'NativeBase.Text': {
        color: variables.btnSuccessBg
      },
      'NativeBase.Icon': {
        color: variables.btnSuccessBg
      },
      'NativeBase.IconNB': {
        color: variables.btnSuccessBg
      }
    };
    var infoCommon = {
      'NativeBase.Text': {
        color: variables.btnInfoBg
      },
      'NativeBase.Icon': {
        color: variables.btnInfoBg
      },
      'NativeBase.IconNB': {
        color: variables.btnInfoBg
      }
    };
    var warningCommon = {
      'NativeBase.Text': {
        color: variables.btnWarningBg
      },
      'NativeBase.Icon': {
        color: variables.btnWarningBg
      },
      'NativeBase.IconNB': {
        color: variables.btnWarningBg
      }
    };
    var dangerCommon = {
      'NativeBase.Text': {
        color: variables.btnDangerBg
      },
      'NativeBase.Icon': {
        color: variables.btnDangerBg
      },
      'NativeBase.IconNB': {
        color: variables.btnDangerBg
      }
    };
    var buttonTheme = {
      '.disabled': {
        backgroundColor: variables.btnDisabledBg
      },
      '.bordered': _extends({
        '.dark': _extends({}, darkCommon, {
          backgroundColor: 'transparent',
          borderColor: variables.brandDark,
          borderWidth: variables.borderWidth * 2
        }),
        '.light': _extends({}, lightCommon, {
          backgroundColor: 'transparent',
          borderColor: variables.brandLight,
          borderWidth: variables.borderWidth * 2
        }),
        '.primary': _extends({}, primaryCommon, {
          backgroundColor: 'transparent',
          borderColor: variables.btnPrimaryBg,
          borderWidth: variables.borderWidth * 2
        }),
        '.success': _extends({}, successCommon, {
          backgroundColor: 'transparent',
          borderColor: variables.btnSuccessBg,
          borderWidth: variables.borderWidth * 2
        }),
        '.info': _extends({}, infoCommon, {
          backgroundColor: 'transparent',
          borderColor: variables.btnInfoBg,
          borderWidth: variables.borderWidth * 2
        }),
        '.warning': _extends({}, warningCommon, {
          backgroundColor: 'transparent',
          borderColor: variables.btnWarningBg,
          borderWidth: variables.borderWidth * 2
        }),
        '.danger': _extends({}, dangerCommon, {
          backgroundColor: 'transparent',
          borderColor: variables.btnDangerBg,
          borderWidth: variables.borderWidth * 2
        }),
        '.disabled': {
          backgroundColor: null,
          borderColor: variables.btnDisabledBg,
          borderWidth: variables.borderWidth * 2,
          'NativeBase.Text': {
            color: variables.btnDisabledBg
          }
        }
      }, primaryCommon, {
        borderWidth: variables.borderWidth * 2,
        elevation: null,
        shadowColor: null,
        shadowOffset: null,
        shadowOpacity: null,
        shadowRadius: null,
        backgroundColor: 'transparent'
      }),
      '.dark': {
        '.bordered': _extends({}, darkCommon),
        backgroundColor: variables.brandDark
      },
      '.light': _extends({
        '.transparent': _extends({}, lightCommon, {
          backgroundColor: null
        }),
        '.bordered': _extends({}, lightCommon)
      }, darkCommon, {
        backgroundColor: variables.brandLight
      }),
      '.primary': {
        '.bordered': _extends({}, primaryCommon),
        backgroundColor: variables.btnPrimaryBg
      },
      '.success': {
        '.bordered': _extends({}, successCommon),
        backgroundColor: variables.btnSuccessBg
      },
      '.info': {
        '.bordered': _extends({}, infoCommon),
        backgroundColor: variables.btnInfoBg
      },
      '.warning': {
        '.bordered': _extends({}, warningCommon),
        backgroundColor: variables.btnWarningBg
      },
      '.danger': {
        '.bordered': _extends({}, dangerCommon),
        backgroundColor: variables.btnDangerBg
      },
      '.block': {
        justifyContent: 'center',
        alignSelf: 'stretch'
      },
      '.full': {
        justifyContent: 'center',
        alignSelf: 'stretch',
        borderRadius: 0
      },
      '.rounded': {
        borderRadius: variables.borderRadiusLarge
      },
      '.transparent': _extends({
        backgroundColor: 'transparent',
        elevation: 0,
        shadowColor: null,
        shadowOffset: null,
        shadowRadius: null,
        shadowOpacity: null
      }, primaryCommon, {
        '.dark': _extends({}, darkCommon, {
          backgroundColor: null
        }),
        '.danger': _extends({}, dangerCommon, {
          backgroundColor: null
        }),
        '.warning': _extends({}, warningCommon, {
          backgroundColor: null
        }),
        '.info': _extends({}, infoCommon, {
          backgroundColor: null
        }),
        '.primary': _extends({}, primaryCommon, {
          backgroundColor: null
        }),
        '.success': _extends({}, successCommon, {
          backgroundColor: null
        }),
        '.light': _extends({}, lightCommon, {
          backgroundColor: null
        })
      }),
      '.small': {
        height: 30,
        'NativeBase.Text': {
          fontSize: 14
        }
      },
      '.large': {
        height: 60,
        'NativeBase.Text': {
          fontSize: 22,
          lineHeight: 32
        }
      },
      '.capitalize': {},
      '.vertical': {
        flexDirection: 'column',
        height: null
      },
      'NativeBase.Text': {
        fontFamily: variables.btnFontFamily,
        marginLeft: 0,
        marginRight: 0,
        color: variables.inverseTextColor,
        fontSize: variables.btnTextSize,
        lineHeight: variables.btnLineHeight,
        paddingHorizontal: 16,
        backgroundColor: 'transparent'
      },
      'NativeBase.Icon': {
        color: variables.inverseTextColor,
        fontSize: 24,
        marginHorizontal: 16,
        paddingTop: platform === 'ios' ? 2 : undefined
      },
      'NativeBase.IconNB': {
        color: variables.inverseTextColor,
        fontSize: 24,
        marginHorizontal: 16,
        paddingTop: platform === 'ios' ? 2 : undefined
      },
      '.iconLeft': {
        'NativeBase.Text': {
          marginLeft: 0
        },
        'NativeBase.IconNB': {
          marginRight: 0,
          marginLeft: 16
        },
        'NativeBase.Icon': {
          marginRight: 0,
          marginLeft: 16
        }
      },
      '.iconRight': {
        'NativeBase.Text': {
          marginRight: 0
        },
        'NativeBase.IconNB': {
          marginLeft: 0,
          marginRight: 16
        },
        'NativeBase.Icon': {
          marginLeft: 0,
          marginRight: 16
        }
      },
      '.picker': {
        'NativeBase.Text': {
          '.note': {
            fontSize: 16,
            lineHeight: null
          }
        }
      },
      paddingVertical: variables.buttonPadding,
      backgroundColor: variables.btnPrimaryBg,
      borderRadius: variables.borderRadiusBase,
      borderColor: variables.btnPrimaryBg,
      borderWidth: null,
      height: 45,
      alignSelf: 'flex-start',
      flexDirection: 'row',
      elevation: 2,
      shadowColor: platformStyle === 'material' ? variables.brandDark : undefined,
      shadowOffset: platformStyle === 'material' ? {
        width: 0,
        height: 2
      } : undefined,
      shadowOpacity: platformStyle === 'material' ? 0.2 : undefined,
      shadowRadius: platformStyle === 'material' ? 1.2 : undefined,
      alignItems: 'center',
      justifyContent: 'space-between'
    };
    return buttonTheme;
  };
},442,[426],"native-base/dist/src/theme/components/Button.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _platform = require(_dependencyMap[1], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var titleTheme = {
      fontSize: variables.titleFontSize,
      fontFamily: variables.titleFontfamily,
      color: variables.titleFontColor,
      fontWeight: _reactNative.Platform.OS === "ios" ? "600" : undefined,
      textAlign: "center"
    };
    return titleTheme;
  };
},443,[12,426],"native-base/dist/src/theme/components/Title.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], './../variables/platform');

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var subtitleTheme = {
      fontSize: variables.subTitleFontSize,
      fontFamily: variables.titleFontfamily,
      color: variables.subtitleColor,
      textAlign: 'center'
    };
    return subtitleTheme;
  };
},444,[426],"native-base/dist/src/theme/components/Subtitle.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var inputGroupTheme = {
      "NativeBase.Icon": {
        fontSize: 24,
        color: variables.sTabBarActiveTextColor,
        paddingHorizontal: 5
      },
      "NativeBase.IconNB": {
        fontSize: 24,
        color: variables.sTabBarActiveTextColor,
        paddingHorizontal: 5
      },
      "NativeBase.Input": {
        height: variables.inputHeightBase,
        color: variables.inputColor,
        paddingLeft: 5,
        paddingRight: 5,
        flex: 1,
        fontSize: variables.inputFontSize,
        lineHeight: variables.inputLineHeight
      },
      ".underline": {
        ".success": {
          borderColor: variables.inputSuccessBorderColor
        },
        ".error": {
          borderColor: variables.inputErrorBorderColor
        },
        paddingLeft: 5,
        borderWidth: variables.borderWidth,
        borderTopWidth: 0,
        borderRightWidth: 0,
        borderLeftWidth: 0,
        borderColor: variables.inputBorderColor
      },
      ".regular": {
        ".success": {
          borderColor: variables.inputSuccessBorderColor
        },
        ".error": {
          borderColor: variables.inputErrorBorderColor
        },
        paddingLeft: 5,
        borderWidth: variables.borderWidth,
        borderColor: variables.inputBorderColor
      },
      ".rounded": {
        ".success": {
          borderColor: variables.inputSuccessBorderColor
        },
        ".error": {
          borderColor: variables.inputErrorBorderColor
        },
        paddingLeft: 5,
        borderWidth: variables.borderWidth,
        borderRadius: variables.inputGroupRoundedBorderRadius,
        borderColor: variables.inputBorderColor
      },
      ".success": {
        "NativeBase.Icon": {
          color: variables.inputSuccessBorderColor
        },
        "NativeBase.IconNB": {
          color: variables.inputSuccessBorderColor
        },
        ".rounded": {
          borderRadius: 30,
          borderColor: variables.inputSuccessBorderColor
        },
        ".regular": {
          borderColor: variables.inputSuccessBorderColor
        },
        ".underline": {
          borderWidth: variables.borderWidth,
          borderTopWidth: 0,
          borderRightWidth: 0,
          borderLeftWidth: 0,
          borderColor: variables.inputSuccessBorderColor
        },
        borderColor: variables.inputSuccessBorderColor
      },
      ".error": {
        "NativeBase.Icon": {
          color: variables.inputErrorBorderColor
        },
        "NativeBase.IconNB": {
          color: variables.inputErrorBorderColor
        },
        ".rounded": {
          borderRadius: 30,
          borderColor: variables.inputErrorBorderColor
        },
        ".regular": {
          borderColor: variables.inputErrorBorderColor
        },
        ".underline": {
          borderWidth: variables.borderWidth,
          borderTopWidth: 0,
          borderRightWidth: 0,
          borderLeftWidth: 0,
          borderColor: variables.inputErrorBorderColor
        },
        borderColor: variables.inputErrorBorderColor
      },
      ".disabled": {
        "NativeBase.Icon": {
          color: "#384850"
        },
        "NativeBase.IconNB": {
          color: "#384850"
        }
      },
      paddingLeft: 5,
      borderWidth: variables.borderWidth,
      borderTopWidth: 0,
      borderRightWidth: 0,
      borderLeftWidth: 0,
      borderColor: variables.inputBorderColor,
      backgroundColor: "transparent",
      flexDirection: "row",
      alignItems: "center"
    };
    return inputGroupTheme;
  };
},445,[426],"native-base/dist/src/theme/components/InputGroup.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var badgeTheme = {
      ".primary": {
        backgroundColor: variables.btnPrimaryBg
      },
      ".warning": {
        backgroundColor: variables.btnWarningBg
      },
      ".info": {
        backgroundColor: variables.btnInfoBg
      },
      ".success": {
        backgroundColor: variables.btnSuccessBg
      },
      ".danger": {
        backgroundColor: variables.btnDangerBg
      },
      "NativeBase.Text": {
        color: variables.badgeColor,
        fontSize: variables.fontSizeBase,
        lineHeight: variables.lineHeight - 1,
        textAlign: "center",
        paddingHorizontal: 3
      },
      backgroundColor: variables.badgeBg,
      padding: variables.badgePadding,
      paddingHorizontal: 6,
      alignSelf: "flex-start",
      borderRadius: 13.5,
      height: 27
    };
    return badgeTheme;
  };
},446,[426],"native-base/dist/src/theme/components/Badge.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var checkBoxTheme = {
      ".checked": {
        "NativeBase.Icon": {
          color: variables.checkboxTickColor
        },
        "NativeBase.IconNB": {
          color: variables.checkboxTickColor
        }
      },
      "NativeBase.Icon": {
        color: "transparent",
        lineHeight: variables.CheckboxIconSize,
        marginTop: variables.CheckboxIconMarginTop,
        fontSize: variables.CheckboxFontSize
      },
      "NativeBase.IconNB": {
        color: "transparent",
        lineHeight: variables.CheckboxIconSize,
        marginTop: variables.CheckboxIconMarginTop,
        fontSize: variables.CheckboxFontSize
      },
      borderRadius: variables.CheckboxRadius,
      overflow: "hidden",
      width: variables.checkboxSize,
      height: variables.checkboxSize,
      borderWidth: variables.CheckboxBorderWidth,
      paddingLeft: variables.CheckboxPaddingLeft - 1,
      paddingBottom: variables.CheckboxPaddingBottom,
      left: 10
    };
    return checkBoxTheme;
  };
},447,[426],"native-base/dist/src/theme/components/CheckBox.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var cardTheme = {
      ".transparent": {
        shadowColor: null,
        shadowOffset: null,
        shadowOpacity: null,
        shadowRadius: null,
        elevation: null
      },
      marginVertical: 5,
      marginHorizontal: 2,
      flex: 1,
      borderWidth: variables.borderWidth,
      borderRadius: 2,
      borderColor: variables.cardBorderColor,
      flexWrap: "nowrap",
      backgroundColor: variables.cardDefaultBg,
      shadowColor: "#000",
      shadowOffset: {
        width: 0,
        height: 2
      },
      shadowOpacity: 0.1,
      shadowRadius: 1.5,
      elevation: 3
    };
    return cardTheme;
  };
},448,[426],"native-base/dist/src/theme/components/Card.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _platform = require(_dependencyMap[1], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var radioTheme = {
      ".selected": {
        "NativeBase.IconNB": {
          color: _reactNative.Platform.OS === "ios" ? variables.radioColor : variables.radioSelectedColorAndroid,
          lineHeight: _reactNative.Platform.OS === "ios" ? 25 : variables.radioBtnLineHeight,
          height: _reactNative.Platform.OS === "ios" ? 20 : undefined
        }
      },
      "NativeBase.IconNB": {
        color: _reactNative.Platform.OS === "ios" ? "transparent" : undefined,
        lineHeight: _reactNative.Platform.OS === "ios" ? undefined : variables.radioBtnLineHeight,
        fontSize: _reactNative.Platform.OS === "ios" ? undefined : variables.radioBtnSize
      }
    };
    return radioTheme;
  };
},449,[12,426],"native-base/dist/src/theme/components/Radio.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var h3Theme = {
      color: variables.textColor,
      fontSize: variables.fontSizeH3,
      lineHeight: variables.lineHeightH3
    };
    return h3Theme;
  };
},450,[426],"native-base/dist/src/theme/components/H3.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var h2Theme = {
      color: variables.textColor,
      fontSize: variables.fontSizeH2,
      lineHeight: variables.lineHeightH2
    };
    return h2Theme;
  };
},451,[426],"native-base/dist/src/theme/components/H2.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var h1Theme = {
      color: variables.textColor,
      fontSize: variables.fontSizeH1,
      lineHeight: variables.lineHeightH1
    };
    return h1Theme;
  };
},452,[426],"native-base/dist/src/theme/components/H1.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var platformStyle = variables.platformStyle;
    var platform = variables.platform;
    var footerTheme = {
      "NativeBase.Left": {
        "NativeBase.Button": {
          ".transparent": {
            backgroundColor: "transparent",
            borderColor: null,
            elevation: 0,
            shadowColor: null,
            shadowOffset: null,
            shadowRadius: null,
            shadowOpacity: null
          },
          "NativeBase.Icon": {
            color: variables.topTabBarActiveTextColor
          },
          "NativeBase.IconNB": {
            color: variables.topTabBarActiveTextColor
          },
          alignSelf: null
        },
        flex: 1,
        alignSelf: "center",
        alignItems: "flex-start"
      },
      "NativeBase.Body": {
        flex: 1,
        alignItems: "center",
        alignSelf: "center",
        flexDirection: "row",
        "NativeBase.Button": {
          alignSelf: "center",
          ".transparent": {
            backgroundColor: "transparent",
            borderColor: null,
            elevation: 0,
            shadowColor: null,
            shadowOffset: null,
            shadowRadius: null,
            shadowOpacity: null
          },
          ".full": {
            height: variables.footerHeight,
            paddingBottom: variables.footerPaddingBottom,
            flex: 1
          },
          "NativeBase.Icon": {
            color: variables.topTabBarActiveTextColor
          },
          "NativeBase.IconNB": {
            color: variables.topTabBarActiveTextColor
          }
        }
      },
      "NativeBase.Right": {
        "NativeBase.Button": {
          ".transparent": {
            backgroundColor: "transparent",
            borderColor: null,
            elevation: 0,
            shadowColor: null,
            shadowOffset: null,
            shadowRadius: null,
            shadowOpacity: null
          },
          "NativeBase.Icon": {
            color: variables.topTabBarActiveTextColor
          },
          "NativeBase.IconNB": {
            color: variables.topTabBarActiveTextColor
          },
          alignSelf: null
        },
        flex: 1,
        alignSelf: "center",
        alignItems: "flex-end"
      },
      backgroundColor: variables.footerDefaultBg,
      flexDirection: "row",
      justifyContent: "center",
      borderTopWidth: platform === "ios" && platformStyle !== "material" ? variables.borderWidth : undefined,
      borderColor: platform === "ios" && platformStyle !== "material" ? "#cbcbcb" : undefined,
      height: variables.footerHeight,
      paddingBottom: variables.footerPaddingBottom,
      elevation: 3,
      left: 0,
      right: 0
    };
    return footerTheme;
  };
},453,[426],"native-base/dist/src/theme/components/Footer.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _platform = require(_dependencyMap[1], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var platform = variables.platform;
    var footerTabTheme = {
      "NativeBase.Button": {
        ".active": {
          "NativeBase.Text": {
            color: variables.tabBarActiveTextColor,
            fontSize: variables.tabBarTextSize,
            lineHeight: 16
          },
          "NativeBase.Icon": {
            color: variables.tabBarActiveTextColor
          },
          "NativeBase.IconNB": {
            color: variables.tabBarActiveTextColor
          },
          backgroundColor: variables.tabActiveBgColor
        },
        flexDirection: null,
        backgroundColor: "transparent",
        borderColor: null,
        elevation: 0,
        shadowColor: null,
        shadowOffset: null,
        shadowRadius: null,
        shadowOpacity: null,
        alignSelf: "center",
        flex: 1,
        height: variables.footerHeight - (variables.isIphoneX ? 34 : 0),
        justifyContent: "center",
        ".badge": {
          "NativeBase.Badge": {
            "NativeBase.Text": {
              fontSize: 11,
              fontWeight: platform === "ios" ? "600" : undefined,
              lineHeight: 14
            },
            top: -3,
            alignSelf: "center",
            left: 10,
            zIndex: 99,
            height: 18,
            padding: 1.7,
            paddingHorizontal: 3
          },
          "NativeBase.Icon": {
            marginTop: -18
          }
        },
        "NativeBase.Icon": {
          color: variables.tabBarTextColor
        },
        "NativeBase.IconNB": {
          color: variables.tabBarTextColor
        },
        "NativeBase.Text": {
          color: variables.tabBarTextColor,
          fontSize: variables.tabBarTextSize,
          lineHeight: 16
        }
      },
      backgroundColor: _reactNative.Platform.OS === "android" ? variables.tabActiveBgColor : undefined,
      flexDirection: "row",
      justifyContent: "space-between",
      flex: 1,
      alignSelf: "stretch"
    };
    return footerTabTheme;
  };
},454,[12,426],"native-base/dist/src/theme/components/FooterTab.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var platform = variables.platform;
    var fabTheme = {
      "NativeBase.Button": {
        alignItems: "center",
        padding: null,
        justifyContent: "center",
        "NativeBase.Icon": {
          alignSelf: "center",
          fontSize: 20,
          marginLeft: 0,
          marginRight: 0
        },
        "NativeBase.IconNB": {
          alignSelf: "center",
          fontSize: 20,
          marginLeft: 0,
          marginRight: 0
        }
      }
    };
    return fabTheme;
  };
},455,[426],"native-base/dist/src/theme/components/Fab.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _platform = require(_dependencyMap[1], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var itemTheme = {
      ".floatingLabel": {
        "NativeBase.Input": {
          height: 50,
          top: 8
        },
        "NativeBase.Label": {
          top: 8
        },
        "NativeBase.Icon": {
          top: 6
        }
      },
      ".fixedLabel": {
        "NativeBase.Label": {
          position: null,
          top: null,
          left: null,
          right: null,
          flex: 1,
          height: null,
          width: null,
          fontSize: variables.inputFontSize
        },
        "NativeBase.Input": {
          flex: 2,
          fontSize: variables.inputFontSize
        }
      },
      ".stackedLabel": {
        "NativeBase.Label": {
          position: null,
          top: null,
          left: null,
          right: null,
          paddingTop: 5,
          alignSelf: "flex-start",
          fontSize: variables.inputFontSize - 2
        },
        "NativeBase.Icon": {
          marginTop: 36
        },
        "NativeBase.Input": {
          alignSelf: _reactNative.Platform.OS === "ios" ? "stretch" : "flex-start",
          flex: 1,
          width: _reactNative.Platform.OS === "ios" ? null : variables.deviceWidth - 25,
          fontSize: variables.inputFontSize
        },
        flexDirection: null
      },
      ".inlineLabel": {
        "NativeBase.Label": {
          position: null,
          top: null,
          left: null,
          right: null,
          paddingRight: 20,
          height: null,
          width: null,
          fontSize: variables.inputFontSize
        },
        "NativeBase.Input": {
          paddingLeft: 5,
          fontSize: variables.inputFontSize
        },
        flexDirection: "row"
      },
      "NativeBase.Label": {
        fontSize: variables.inputFontSize,
        color: variables.inputColorPlaceholder,
        paddingRight: 5
      },
      "NativeBase.Icon": {
        fontSize: 24,
        paddingRight: 8
      },
      "NativeBase.IconNB": {
        fontSize: 24,
        paddingRight: 8
      },
      "NativeBase.Input": {
        ".multiline": {
          height: null
        },
        height: variables.inputHeightBase,
        color: variables.inputColor,
        flex: 1,
        top: _reactNative.Platform.OS === "ios" ? 1.5 : undefined,
        fontSize: variables.inputFontSize,
        lineHeight: variables.inputLineHeight
      },
      ".underline": {
        "NativeBase.Input": {
          paddingLeft: 15
        },
        ".success": {
          borderColor: variables.inputSuccessBorderColor
        },
        ".error": {
          borderColor: variables.inputErrorBorderColor
        },
        borderWidth: variables.borderWidth * 2,
        borderTopWidth: 0,
        borderRightWidth: 0,
        borderLeftWidth: 0,
        borderColor: variables.inputBorderColor
      },
      ".regular": {
        "NativeBase.Input": {
          paddingLeft: 8
        },
        "NativeBase.Icon": {
          paddingLeft: 10
        },
        ".success": {
          borderColor: variables.inputSuccessBorderColor
        },
        ".error": {
          borderColor: variables.inputErrorBorderColor
        },
        borderWidth: variables.borderWidth * 2,
        borderColor: variables.inputBorderColor
      },
      ".rounded": {
        "NativeBase.Input": {
          paddingLeft: 8
        },
        "NativeBase.Icon": {
          paddingLeft: 10
        },
        ".success": {
          borderColor: variables.inputSuccessBorderColor
        },
        ".error": {
          borderColor: variables.inputErrorBorderColor
        },
        borderWidth: variables.borderWidth * 2,
        borderRadius: 30,
        borderColor: variables.inputBorderColor
      },
      ".success": {
        "NativeBase.Icon": {
          color: variables.inputSuccessBorderColor
        },
        "NativeBase.IconNB": {
          color: variables.inputSuccessBorderColor
        },
        ".rounded": {
          borderRadius: 30,
          borderColor: variables.inputSuccessBorderColor
        },
        ".regular": {
          borderColor: variables.inputSuccessBorderColor
        },
        ".underline": {
          borderWidth: variables.borderWidth * 2,
          borderTopWidth: 0,
          borderRightWidth: 0,
          borderLeftWidth: 0,
          borderColor: variables.inputSuccessBorderColor
        },
        borderColor: variables.inputSuccessBorderColor
      },
      ".error": {
        "NativeBase.Icon": {
          color: variables.inputErrorBorderColor
        },
        "NativeBase.IconNB": {
          color: variables.inputErrorBorderColor
        },
        ".rounded": {
          borderRadius: 30,
          borderColor: variables.inputErrorBorderColor
        },
        ".regular": {
          borderColor: variables.inputErrorBorderColor
        },
        ".underline": {
          borderWidth: variables.borderWidth * 2,
          borderTopWidth: 0,
          borderRightWidth: 0,
          borderLeftWidth: 0,
          borderColor: variables.inputErrorBorderColor
        },
        borderColor: variables.inputErrorBorderColor
      },
      ".disabled": {
        "NativeBase.Icon": {
          color: "#384850"
        },
        "NativeBase.IconNB": {
          color: "#384850"
        }
      },
      borderWidth: variables.borderWidth * 2,
      borderTopWidth: 0,
      borderRightWidth: 0,
      borderLeftWidth: 0,
      borderColor: variables.inputBorderColor,
      backgroundColor: "transparent",
      flexDirection: "row",
      alignItems: "center",
      marginLeft: 2
    };
    return itemTheme;
  };
},456,[12,426],"native-base/dist/src/theme/components/Item.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var labelTheme = {
      ".focused": {
        width: 0
      },
      fontSize: 17
    };
    return labelTheme;
  };
},457,[426],"native-base/dist/src/theme/components/Label.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var textAreaTheme = {
      ".underline": {
        borderBottomWidth: variables.borderWidth,
        marginTop: 5,
        borderColor: variables.inputBorderColor
      },
      ".bordered": {
        borderWidth: 1,
        marginTop: 5,
        borderColor: variables.inputBorderColor
      },
      color: variables.textColor,
      paddingLeft: 10,
      paddingRight: 5,
      fontSize: 15,
      textAlignVertical: "top"
    };
    return textAreaTheme;
  };
},458,[426],"native-base/dist/src/theme/components/Textarea.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var textTheme = {
      fontSize: variables.DefaultFontSize - 1,
      fontFamily: variables.fontFamily,
      color: variables.textColor,
      ".note": {
        color: "#a7a7a7",
        fontSize: variables.noteFontSize
      }
    };
    return textTheme;
  };
},459,[426],"native-base/dist/src/theme/components/Text.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var platform = variables.platform;
    var toastTheme = {
      ".danger": {
        backgroundColor: variables.brandDanger
      },
      ".warning": {
        backgroundColor: variables.brandWarning
      },
      ".success": {
        backgroundColor: variables.brandSuccess
      },
      backgroundColor: "rgba(0,0,0,0.8)",
      borderRadius: platform === "ios" ? 5 : 0,
      flexDirection: "row",
      justifyContent: "space-between",
      alignItems: "center",
      padding: 10,
      minHeight: 50,
      "NativeBase.Text": {
        color: "#fff",
        flex: 1
      },
      "NativeBase.Button": {
        backgroundColor: "transparent",
        height: 30,
        elevation: 0,
        "NativeBase.Text": {
          fontSize: 14
        }
      }
    };
    return toastTheme;
  };
},460,[426],"native-base/dist/src/theme/components/Toast.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var tabTheme = {
      flex: 1,
      backgroundColor: "#FFF"
    };
    return tabTheme;
  };
},461,[426],"native-base/dist/src/theme/components/Tab.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var tabBarTheme = {
      ".tabIcon": {
        height: undefined
      },
      ".vertical": {
        height: 60
      },
      "NativeBase.Button": {
        ".transparent": {
          "NativeBase.Text": {
            fontSize: variables.tabFontSize,
            color: variables.sTabBarActiveTextColor,
            fontWeight: "400"
          },
          "NativeBase.IconNB": {
            color: variables.sTabBarActiveTextColor
          }
        },
        "NativeBase.IconNB": {
          color: variables.sTabBarActiveTextColor
        },
        "NativeBase.Text": {
          fontSize: variables.tabFontSize,
          color: variables.sTabBarActiveTextColor,
          fontWeight: "400"
        },
        ".isTabActive": {
          "NativeBase.Text": {
            fontWeight: "900"
          }
        },
        flex: 1,
        alignSelf: "stretch",
        alignItems: "center",
        justifyContent: "center",
        borderRadius: null,
        borderBottomColor: "transparent",
        backgroundColor: variables.tabBgColor
      },
      height: 45,
      flexDirection: "row",
      justifyContent: "space-around",
      borderWidth: 1,
      borderTopWidth: 0,
      borderLeftWidth: 0,
      borderRightWidth: 0,
      borderBottomColor: "#ccc",
      backgroundColor: variables.tabBgColor
    };
    return tabBarTheme;
  };
},462,[426],"native-base/dist/src/theme/components/TabBar.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  var _reactNative = require(_dependencyMap[1], "react-native");

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var platformStyle = variables.platformStyle;
    var platform = variables.platform;
    var tabContainerTheme = {
      elevation: 3,
      height: 50,
      flexDirection: "row",
      shadowColor: platformStyle === "material" ? "#000" : undefined,
      shadowOffset: platformStyle === "material" ? {
        width: 0,
        height: 2
      } : undefined,
      shadowOpacity: platformStyle === "material" ? 0.2 : undefined,
      shadowRadius: platformStyle === "material" ? 1.2 : undefined,
      justifyContent: "space-around",
      borderBottomWidth: _reactNative.Platform.OS === "ios" ? variables.borderWidth : 0,
      borderColor: variables.topTabBarBorderColor
    };
    return tabContainerTheme;
  };
},463,[426,12],"native-base/dist/src/theme/components/TabContainer.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var viewTheme = {
      ".padder": {
        padding: variables.contentPadding
      }
    };
    return viewTheme;
  };
},464,[426],"native-base/dist/src/theme/components/View.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var platform = variables.platform;
    var tabHeadingTheme = {
      flexDirection: "row",
      backgroundColor: variables.tabDefaultBg,
      flex: 1,
      alignItems: "center",
      justifyContent: "center",
      ".scrollable": {
        paddingHorizontal: 20,
        flex: platform === "android" ? 0 : 1,
        minWidth: platform === "android" ? undefined : 60
      },
      "NativeBase.Text": {
        color: variables.topTabBarTextColor,
        marginHorizontal: 7
      },
      "NativeBase.Icon": {
        color: variables.topTabBarTextColor,
        fontSize: platform === "ios" ? 26 : undefined
      },
      ".active": {
        "NativeBase.Text": {
          color: variables.topTabBarActiveTextColor,
          fontWeight: "600"
        },
        "NativeBase.Icon": {
          color: variables.topTabBarActiveTextColor
        }
      }
    };
    return tabHeadingTheme;
  };
},465,[426],"native-base/dist/src/theme/components/TabHeading.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var iconTheme = {
      fontSize: variables.iconFontSize,
      color: "#000"
    };
    return iconTheme;
  };
},466,[426],"native-base/dist/src/theme/components/Icon.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], './../variables/platform');

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var inputTheme = {
      '.multiline': {
        height: null
      },
      height: variables.inputHeightBase,
      color: variables.inputColor,
      paddingLeft: 5,
      paddingRight: 5,
      flex: 1,
      fontSize: variables.inputFontSize,
      lineHeight: variables.inputLineHeight
    };
    return inputTheme;
  };
},467,[426],"native-base/dist/src/theme/components/Input.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var swipeRowTheme = {
      "NativeBase.ListItem": {
        ".list": {
          backgroundColor: "#FFF"
        },
        marginLeft: 0
      },
      "NativeBase.Left": {
        flex: 0,
        alignSelf: null,
        alignItems: null,
        "NativeBase.Button": {
          flex: 1,
          alignItems: "center",
          justifyContent: "center",
          alignSelf: "stretch",
          borderRadius: 0
        }
      },
      "NativeBase.Right": {
        flex: 0,
        alignSelf: null,
        alignItems: null,
        "NativeBase.Button": {
          flex: 1,
          alignItems: "center",
          justifyContent: "center",
          alignSelf: "stretch",
          borderRadius: 0
        }
      },
      "NativeBase.Button": {
        flex: 1,
        height: null,
        alignItems: "center",
        justifyContent: "center",
        alignSelf: "stretch",
        borderRadius: 0
      }
    };
    return swipeRowTheme;
  };
},468,[426],"native-base/dist/src/theme/components/SwipeRow.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var platform = variables.platform;
    var segmentTheme = {
      height: 45,
      borderColor: variables.segmentBorderColorMain,
      flexDirection: "row",
      justifyContent: "center",
      backgroundColor: variables.segmentBackgroundColor,
      "NativeBase.Button": {
        alignSelf: "center",
        borderRadius: 0,
        paddingHorizontal: 20,
        height: 30,
        backgroundColor: "transparent",
        borderWidth: 1,
        borderLeftWidth: 0,
        borderColor: variables.segmentBorderColor,
        elevation: 0,
        ".active": {
          backgroundColor: variables.segmentActiveBackgroundColor,
          "NativeBase.Text": {
            color: variables.segmentActiveTextColor
          }
        },
        ".first": {
          borderTopLeftRadius: platform === "ios" ? 5 : undefined,
          borderBottomLeftRadius: platform === "ios" ? 5 : undefined,
          borderLeftWidth: 1
        },
        ".last": {
          borderTopRightRadius: platform === "ios" ? 5 : undefined,
          borderBottomRightRadius: platform === "ios" ? 5 : undefined
        },
        "NativeBase.Text": {
          color: variables.segmentTextColor,
          fontSize: 14
        }
      }
    };
    return segmentTheme;
  };
},469,[426],"native-base/dist/src/theme/components/Segment.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var spinnerTheme = {
      height: 80
    };
    return spinnerTheme;
  };
},470,[426],"native-base/dist/src/theme/components/Spinner.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _platform = require(_dependencyMap[0], './../variables/platform');

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var platform = variables.platform;
    var transparentBtnCommon = {
      'NativeBase.Text': {
        fontSize: variables.DefaultFontSize - 4,
        color: variables.sTabBarActiveTextColor
      },
      'NativeBase.Icon': {
        fontSize: variables.iconFontSize - 10,
        color: variables.sTabBarActiveTextColor,
        marginHorizontal: null
      },
      'NativeBase.IconNB': {
        fontSize: variables.iconFontSize - 10,
        color: variables.sTabBarActiveTextColor
      },
      paddingVertical: null,
      paddingHorizontal: null
    };
    var cardItemTheme = {
      'NativeBase.Left': {
        'NativeBase.Body': {
          'NativeBase.Text': {
            '.note': {
              color: variables.listNoteColor,
              fontWeight: '400',
              marginRight: 20
            }
          },
          flex: 1,
          marginLeft: 10,
          alignItems: null
        },
        'NativeBase.Icon': {
          fontSize: variables.iconFontSize
        },
        'NativeBase.IconNB': {
          fontSize: variables.iconFontSize
        },
        'NativeBase.Text': {
          marginLeft: 10,
          alignSelf: 'center'
        },
        'NativeBase.Button': {
          '.transparent': _extends({}, transparentBtnCommon, {
            paddingRight: variables.listItemPadding + 5
          })
        },
        flex: 1,
        flexDirection: 'row',
        alignItems: 'center'
      },
      '.content': {
        'NativeBase.Text': {
          color: platform === 'ios' ? '#555' : '#222',
          fontSize: variables.DefaultFontSize - 3
        }
      },
      '.cardBody': {
        padding: -5,
        'NativeBase.Text': {
          marginTop: 5
        }
      },
      'NativeBase.Body': {
        'NativeBase.Text': {
          '.note': {
            color: variables.listNoteColor,
            fontWeight: '200',
            marginRight: 20
          }
        },
        'NativeBase.Button': {
          '.transparent': _extends({}, transparentBtnCommon, {
            paddingRight: variables.listItemPadding + 5,
            alignSelf: 'stretch'
          })
        },
        flex: 1,
        alignSelf: 'stretch',
        alignItems: 'flex-start'
      },
      'NativeBase.Right': {
        'NativeBase.Badge': {
          alignSelf: null
        },
        'NativeBase.Button': {
          '.transparent': _extends({}, transparentBtnCommon),
          alignSelf: null
        },
        'NativeBase.Icon': {
          alignSelf: null,
          fontSize: variables.iconFontSize - 8,
          color: variables.cardBorderColor
        },
        'NativeBase.IconNB': {
          alignSelf: null,
          fontSize: variables.iconFontSize - 8,
          color: variables.cardBorderColor
        },
        'NativeBase.Text': {
          fontSize: variables.DefaultFontSize - 2,
          alignSelf: null
        },
        'NativeBase.Thumbnail': {
          alignSelf: null
        },
        'NativeBase.Image': {
          alignSelf: null
        },
        'NativeBase.Radio': {
          alignSelf: null
        },
        'NativeBase.Checkbox': {
          alignSelf: null
        },
        'NativeBase.Switch': {
          alignSelf: null
        },
        flex: 0.8
      },
      '.header': {
        'NativeBase.Text': {
          fontSize: 16,
          fontWeight: platform === 'ios' ? '500' : undefined
        },
        '.bordered': {
          'NativeBase.Text': {
            color: variables.sTabBarActiveTextColor,
            fontWeight: platform === 'ios' ? '500' : undefined
          },
          borderBottomWidth: platform === 'ios' ? variables.borderWidth : null
        },
        borderBottomWidth: null,
        paddingVertical: variables.listItemPadding + 5
      },
      '.footer': {
        'NativeBase.Text': {
          fontSize: 16,
          fontWeight: platform === 'ios' ? '500' : undefined
        },
        '.bordered': {
          'NativeBase.Text': {
            color: variables.activeTab,
            fontWeight: '500'
          },
          borderTopWidth: platform === 'ios' ? variables.borderWidth : null
        },
        borderBottomWidth: null
      },
      'NativeBase.Text': {
        '.note': {
          color: variables.listNoteColor,
          fontWeight: '200'
        }
      },
      'NativeBase.Icon': {
        width: variables.iconFontSize + 5,
        fontSize: variables.iconFontSize - 2
      },
      'NativeBase.IconNB': {
        width: variables.iconFontSize + 5,
        fontSize: variables.iconFontSize - 2
      },
      '.bordered': {
        borderBottomWidth: variables.borderWidth,
        borderColor: variables.cardBorderColor
      },
      flexDirection: 'row',
      alignItems: 'center',
      borderRadius: 2,
      padding: variables.listItemPadding + 5,
      paddingVertical: variables.listItemPadding,
      backgroundColor: variables.cardDefaultBg
    };
    return cardItemTheme;
  };
},471,[426],"native-base/dist/src/theme/components/CardItem.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _Picker = require(_dependencyMap[1], "./Picker");

  var _Picker2 = _interopRequireDefault(_Picker);

  var _platform = require(_dependencyMap[2], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var platform = variables.platform;
    var listItemTheme = {
      "NativeBase.InputGroup": {
        "NativeBase.Icon": {
          paddingRight: 5
        },
        "NativeBase.IconNB": {
          paddingRight: 5
        },
        "NativeBase.Input": {
          paddingHorizontal: 5
        },
        flex: 1,
        borderWidth: null,
        margin: -10,
        borderBottomColor: "transparent"
      },
      ".searchBar": {
        "NativeBase.Item": {
          "NativeBase.Icon": {
            backgroundColor: "transparent",
            color: variables.dropdownLinkColor,
            fontSize: platform === "ios" ? variables.iconFontSize - 10 : variables.iconFontSize - 5,
            alignItems: "center",
            marginTop: 2,
            paddingRight: 8
          },
          "NativeBase.IconNB": {
            backgroundColor: "transparent",
            color: null,
            alignSelf: "center"
          },
          "NativeBase.Input": {
            alignSelf: "center"
          },
          alignSelf: "center",
          alignItems: "center",
          justifyContent: "flex-start",
          flex: 1,
          height: platform === "ios" ? 30 : 40,
          borderColor: "transparent",
          backgroundColor: "#fff",
          borderRadius: 5
        },
        "NativeBase.Button": {
          ".transparent": {
            "NativeBase.Text": {
              fontWeight: "500"
            },
            paddingHorizontal: null,
            paddingLeft: platform === "ios" ? 10 : null
          },
          paddingHorizontal: platform === "ios" ? undefined : null,
          width: platform === "ios" ? undefined : 0,
          height: platform === "ios" ? undefined : 0
        },
        backgroundColor: variables.toolbarInputColor,
        padding: 10,
        marginLeft: null
      },
      "NativeBase.CheckBox": {
        marginLeft: -10,
        marginRight: 10
      },
      ".first": {
        ".itemHeader": {
          paddingTop: variables.listItemPadding + 3
        }
      },
      ".itemHeader": {
        ".first": {
          paddingTop: variables.listItemPadding + 3
        },
        borderBottomWidth: platform === "ios" ? variables.borderWidth : null,
        marginLeft: null,
        padding: variables.listItemPadding,
        paddingLeft: variables.listItemPadding + 5,
        paddingTop: platform === "ios" ? variables.listItemPadding + 25 : undefined,
        paddingBottom: platform === "android" ? variables.listItemPadding + 20 : undefined,
        flexDirection: "row",
        borderColor: variables.listBorderColor,
        "NativeBase.Text": {
          fontSize: 14,
          color: platform === "ios" ? undefined : variables.listNoteColor
        }
      },
      ".itemDivider": {
        borderBottomWidth: null,
        marginLeft: null,
        padding: variables.listItemPadding,
        paddingLeft: variables.listItemPadding + 5,
        backgroundColor: variables.listDividerBg,
        flexDirection: "row",
        borderColor: variables.listBorderColor
      },
      ".selected": {
        "NativeBase.Left": {
          "NativeBase.Text": {
            color: variables.brandPrimary
          }
        },
        "NativeBase.Text": {
          color: variables.brandPrimary
        }
      },
      "NativeBase.Left": {
        "NativeBase.Body": {
          "NativeBase.Text": {
            ".note": {
              color: variables.listNoteColor,
              fontWeight: "200"
            },
            fontWeight: "600"
          },
          marginLeft: 10,
          alignItems: null,
          alignSelf: null
        },
        "NativeBase.Icon": {
          width: variables.iconFontSize - 10,
          fontSize: variables.iconFontSize - 10
        },
        "NativeBase.IconNB": {
          width: variables.iconFontSize - 10,
          fontSize: variables.iconFontSize - 10
        },
        "NativeBase.Text": {
          marginLeft: 10,
          alignSelf: "center"
        },
        flexDirection: "row"
      },
      "NativeBase.Body": {
        "NativeBase.Text": {
          marginHorizontal: variables.listItemPadding,
          ".note": {
            color: variables.listNoteColor,
            fontWeight: "200"
          }
        },
        alignSelf: null,
        alignItems: null
      },
      "NativeBase.Right": {
        "NativeBase.Badge": {
          alignSelf: null
        },
        "NativeBase.PickerNB": {
          "NativeBase.Button": {
            marginRight: -15,
            "NativeBase.Text": {
              color: variables.topTabBarActiveTextColor
            }
          }
        },
        "NativeBase.Button": {
          alignSelf: null,
          ".transparent": {
            "NativeBase.Text": {
              color: variables.topTabBarActiveTextColor
            }
          }
        },
        "NativeBase.Icon": {
          alignSelf: null,
          fontSize: variables.iconFontSize - 8,
          color: "#c9c8cd"
        },
        "NativeBase.IconNB": {
          alignSelf: null,
          fontSize: variables.iconFontSize - 8,
          color: "#c9c8cd"
        },
        "NativeBase.Text": {
          ".note": {
            color: variables.listNoteColor,
            fontWeight: "200"
          },
          alignSelf: null
        },
        "NativeBase.Thumbnail": {
          alignSelf: null
        },
        "NativeBase.Image": {
          alignSelf: null
        },
        "NativeBase.Radio": {
          alignSelf: null
        },
        "NativeBase.Checkbox": {
          alignSelf: null
        },
        "NativeBase.Switch": {
          alignSelf: null
        },
        padding: null,
        flex: 0.28
      },
      "NativeBase.Text": {
        ".note": {
          color: variables.listNoteColor,
          fontWeight: "200"
        },
        alignSelf: 'center'
      },
      ".last": {
        marginLeft: -(variables.listItemPadding + 5),
        paddingLeft: (variables.listItemPadding + 5) * 2,
        top: 1
      },
      ".avatar": {
        "NativeBase.Left": {
          flex: 0
        },
        "NativeBase.Body": {
          "NativeBase.Text": {
            marginLeft: null
          },
          flex: 1,
          paddingVertical: variables.listItemPadding,
          borderBottomWidth: variables.borderWidth,
          borderColor: variables.listBorderColor,
          marginLeft: variables.listItemPadding + 5
        },
        "NativeBase.Right": {
          "NativeBase.Text": {
            ".note": {
              fontSize: variables.noteFontSize - 2
            }
          },
          flex: 0,
          paddingRight: variables.listItemPadding + 5,
          alignSelf: "stretch",
          paddingVertical: variables.listItemPadding,
          borderBottomWidth: variables.borderWidth,
          borderColor: variables.listBorderColor
        },
        borderBottomWidth: null,
        paddingVertical: null,
        paddingRight: null
      },
      ".thumbnail": {
        "NativeBase.Left": {
          flex: 0
        },
        "NativeBase.Body": {
          "NativeBase.Text": {
            marginLeft: null
          },
          flex: 1,
          paddingVertical: variables.listItemPadding + 5,
          borderBottomWidth: variables.borderWidth,
          borderColor: variables.listBorderColor,
          marginLeft: variables.listItemPadding + 5
        },
        "NativeBase.Right": {
          "NativeBase.Button": {
            ".transparent": {
              "NativeBase.Text": {
                fontSize: variables.listNoteSize,
                color: variables.sTabBarActiveTextColor
              }
            },
            height: null
          },
          flex: 0,
          justifyContent: "center",
          alignSelf: "stretch",
          paddingRight: variables.listItemPadding + 5,
          paddingVertical: variables.listItemPadding + 5,
          borderBottomWidth: variables.borderWidth,
          borderColor: variables.listBorderColor
        },
        borderBottomWidth: null,
        paddingVertical: null,
        paddingRight: null
      },
      ".icon": {
        ".last": {
          "NativeBase.Body": {
            borderBottomWidth: null
          },
          "NativeBase.Right": {
            borderBottomWidth: null
          },
          borderBottomWidth: variables.borderWidth,
          borderColor: variables.listBorderColor
        },
        "NativeBase.Left": {
          "NativeBase.Button": {
            "NativeBase.IconNB": {
              marginHorizontal: null,
              fontSize: variables.iconFontSize - 5
            },
            "NativeBase.Icon": {
              marginHorizontal: null,
              fontSize: variables.iconFontSize - 8
            },
            alignSelf: "center",
            height: 29,
            width: 29,
            borderRadius: 6,
            paddingVertical: null,
            paddingHorizontal: null,
            alignItems: "center",
            justifyContent: "center"
          },
          "NativeBase.Icon": {
            width: variables.iconFontSize - 5,
            fontSize: variables.iconFontSize - 2
          },
          "NativeBase.IconNB": {
            width: variables.iconFontSize - 5,
            fontSize: variables.iconFontSize - 2
          },
          paddingRight: variables.listItemPadding + 5,
          flex: 0,
          height: 44,
          justifyContent: "center",
          alignItems: "center"
        },
        "NativeBase.Body": {
          "NativeBase.Text": {
            marginLeft: null,
            fontSize: 17
          },
          flex: 1,
          height: 44,
          justifyContent: "center",
          borderBottomWidth: 1 / _reactNative.PixelRatio.getPixelSizeForLayoutSize(1),
          borderColor: variables.listBorderColor
        },
        "NativeBase.Right": {
          "NativeBase.Text": {
            textAlign: "center",
            color: "#8F8E95",
            fontSize: 17
          },
          "NativeBase.IconNB": {
            color: "#C8C7CC",
            fontSize: variables.iconFontSize - 10,
            alignSelf: "center",
            paddingLeft: 10,
            paddingTop: 3
          },
          "NativeBase.Icon": {
            color: "#C8C7CC",
            fontSize: variables.iconFontSize - 10,
            alignSelf: "center",
            paddingLeft: 10,
            paddingTop: 3
          },
          "NativeBase.Switch": {
            marginRight: _reactNative.Platform.OS === "ios" ? undefined : -5,
            alignSelf: null
          },
          "NativeBase.PickerNB": _extends({}, (0, _Picker2.default)()),
          flexDirection: "row",
          alignItems: "center",
          flex: 0,
          alignSelf: "stretch",
          height: 44,
          justifyContent: "flex-end",
          borderBottomWidth: 1 / _reactNative.PixelRatio.getPixelSizeForLayoutSize(1),
          borderColor: variables.listBorderColor,
          paddingRight: variables.listItemPadding + 5
        },
        borderBottomWidth: null,
        paddingVertical: null,
        paddingRight: null,
        height: 44,
        justifyContent: "center"
      },
      ".noBorder": {
        borderBottomWidth: null
      },
      alignItems: "center",
      flexDirection: "row",
      paddingRight: variables.listItemPadding + 5,
      paddingVertical: variables.listItemPadding + 3,
      marginLeft: variables.listItemPadding + 5,
      borderBottomWidth: 1 / _reactNative.PixelRatio.getPixelSizeForLayoutSize(1),
      backgroundColor: variables.listBg,
      borderColor: variables.listBorderColor
    };
    return listItemTheme;
  };
},472,[12,473,426],"native-base/dist/src/theme/components/ListItem.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var pickerTheme = {
      ".note": {
        color: "#8F8E95"
      },
      width: 90,
      marginRight: -4
    };
    return pickerTheme;
  };
},473,[426],"native-base/dist/src/theme/components/Picker.android.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], "./../variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var platform = variables.platform;
    var theme = {
      "NativeBase.Item": {
        ".fixedLabel": {
          "NativeBase.Label": {
            paddingLeft: null
          },
          marginLeft: 15
        },
        ".inlineLabel": {
          "NativeBase.Label": {
            paddingLeft: null
          },
          marginLeft: 15
        },
        ".placeholderLabel": {
          "NativeBase.Input": {}
        },
        ".stackedLabel": {
          "NativeBase.Label": {
            top: 5,
            paddingLeft: null
          },
          "NativeBase.Input": {
            paddingLeft: null,
            marginLeft: null
          },
          "NativeBase.Icon": {
            marginTop: 36
          },
          marginLeft: 15
        },
        ".floatingLabel": {
          "NativeBase.Input": {
            paddingLeft: null,
            top: 10,
            marginLeft: null
          },
          "NativeBase.Label": {
            left: 0,
            top: 6
          },
          "NativeBase.Icon": {
            top: 6
          },
          marginTop: 15,
          marginLeft: 15
        },
        ".regular": {
          "NativeBase.Label": {
            left: 0
          },
          marginLeft: 0
        },
        ".rounded": {
          "NativeBase.Label": {
            left: 0
          },
          marginLeft: 0
        },
        ".underline": {
          "NativeBase.Label": {
            left: 0,
            top: 0,
            position: "relative"
          },
          "NativeBase.Input": {
            left: -15
          },
          marginLeft: 15
        },
        ".last": {
          marginLeft: 0,
          paddingLeft: 15
        },
        "NativeBase.Label": {
          paddingRight: 5
        },
        marginLeft: 15
      }
    };
    return theme;
  };
},474,[426],"native-base/dist/src/theme/components/Form.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _platform = require(_dependencyMap[0], './../variables/platform');

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
    var theme = {
      '.group': {
        height: 50,
        paddingVertical: variables.listItemPadding - 8,
        paddingTop: variables.listItemPadding + 12,
        '.bordered': {
          height: 50,
          paddingVertical: variables.listItemPadding - 8,
          paddingTop: variables.listItemPadding + 12
        }
      },
      '.bordered': {
        '.noTopBorder': {
          borderTopWidth: 0
        },
        '.noBottomBorder': {
          borderBottomWidth: 0
        },
        height: 35,
        paddingTop: variables.listItemPadding + 2,
        paddingBottom: variables.listItemPadding,
        borderBottomWidth: variables.borderWidth,
        borderTopWidth: variables.borderWidth,
        borderColor: variables.listBorderColor
      },
      'NativeBase.Text': {
        fontSize: variables.tabBarTextSize - 2,
        color: '#777'
      },
      '.noTopBorder': {
        borderTopWidth: 0
      },
      '.noBottomBorder': {
        borderBottomWidth: 0
      },
      height: 38,
      backgroundColor: '#F0EFF5',
      flex: 1,
      justifyContent: 'center',
      paddingLeft: variables.listItemPadding + 5
    };
    return theme;
  };
},475,[426],"native-base/dist/src/theme/components/Separator.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Drawer/index.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNativeDrawer = require(_dependencyMap[1], "react-native-drawer");

  var _reactNativeDrawer2 = _interopRequireDefault(_reactNativeDrawer);

  var _propTypes = require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Drawer = function (_Component) {
    _inherits(Drawer, _Component);

    function Drawer(props) {
      _classCallCheck(this, Drawer);

      return _possibleConstructorReturn(this, (Drawer.__proto__ || Object.getPrototypeOf(Drawer)).call(this, props));
    }

    _createClass(Drawer, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNativeDrawer2.default, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 10
          }
        }));
      }
    }]);

    return Drawer;
  }(_react.Component);

  exports.default = Drawer;
  Drawer.defaultProps = {
    type: "overlay",
    tapToClose: true,
    openDrawerOffset: 0.2,
    panCloseMask: 0.2,
    closedDrawerOffset: 0,
    styles: {
      drawer: {
        shadowColor: "#000000",
        shadowOpacity: 0,
        shadowRadius: 0,
        elevation: 5
      },
      mainOverlay: {
        opacity: 0,
        backgroundColor: "rgba(0, 0, 0, 0.8)",
        elevation: 8
      }
    },
    tweenHandler: function tweenHandler(ratio) {
      return {
        mainOverlay: {
          opacity: ratio / 2
        }
      };
    }
  };
},476,[108,477,127],"native-base/dist/src/basic/Drawer/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-drawer/index.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _tweener = require(_dependencyMap[3], "./tweener");

  var _tweener2 = babelHelpers.interopRequireDefault(_tweener);

  var deviceScreen = _reactNative.Dimensions.get('window');

  var DOUBLE_TAP_INTERVAL = 500;
  var TAP_DURATION = 250;
  var propsWhomRequireUpdate = ['closedDrawerOffset', 'openDrawerOffset', 'type', 'styles'];

  var Drawer = function (_Component) {
    babelHelpers.inherits(Drawer, _Component);

    function Drawer() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, Drawer);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = Drawer.__proto__ || Object.getPrototypeOf(Drawer)).call.apply(_ref, [this].concat(args))), _this), _this._length = 0, _this._prevLength = 0, _this._offsetOpen = 0, _this._offsetClosed = 0, _this._open = false, _this._panning = false, _this._tweenPending = false, _this._activeTween = null, _this._lastPress = 0, _this._panStartTime = 0, _this._syncAfterUpdate = false, _this._interactionHandle = null, _this.state = {
        viewport: deviceScreen
      }, _this.getChildContext = function () {
        return {
          drawer: _this
        };
      }, _this.initialize = function (props) {
        var fullLength = _this.getDeviceLength();

        _this._offsetClosed = _this.getClosedOffset(props, _this.state.viewport);
        _this._offsetOpen = _this.getOpenOffset(props, _this.state.viewport);
        _this._prevLength = _this._length;
        var styles = {
          container: {
            flex: 1,
            justifyContent: 'center',
            alignItems: 'center'
          }
        };
        styles.main = babelHelpers.extends({
          position: 'absolute',
          borderWidth: 0
        }, _this.isLeftOrRightSide() ? {
          top: 0
        } : {
          left: 0
        }, _this.props.styles.main);
        styles.drawer = babelHelpers.extends({
          position: 'absolute',
          borderWidth: 0
        }, _this.isLeftOrRightSide() ? {
          top: 0
        } : {
          left: 0
        }, _this.props.styles.drawer);

        if (props.initializeOpen || props.open) {
          _this._open = true;
          _this._length = fullLength - _this._offsetOpen;
          styles.main[_this.props.side] = 0;
          styles.drawer[_this.props.side] = 0;
          if (props.type === 'static') styles.main[_this.props.side] = fullLength - _this._offsetOpen;
          if (props.type === 'displace') styles.main[_this.props.side] = fullLength - _this._offsetOpen;
        } else {
          _this._open = false;
          _this._length = _this._offsetClosed;
          styles.main[_this.props.side] = _this._offsetClosed;
          if (props.type === 'static') styles.drawer[_this.props.side] = 0;
          if (props.type === 'overlay') styles.drawer[_this.props.side] = _this._offsetClosed + _this._offsetOpen - fullLength;
          if (props.type === 'displace') styles.drawer[_this.props.side] = -fullLength + _this._offsetClosed + _this._offsetOpen;
        }

        if (_this.main) {
          _this.drawer.setNativeProps({
            style: {
              left: styles.drawer.left
            }
          });

          _this.main.setNativeProps({
            style: {
              left: styles.main.left
            }
          });
        } else {
          _this.stylesheet = _reactNative.StyleSheet.create(styles);
          _this.responder = _reactNative.PanResponder.create({
            onStartShouldSetPanResponder: _this.onStartShouldSetPanResponder,
            onStartShouldSetPanResponderCapture: _this.onStartShouldSetPanResponderCapture,
            onMoveShouldSetPanResponder: _this.onMoveShouldSetPanResponder,
            onMoveShouldSetPanResponderCapture: _this.onMoveShouldSetPanResponderCapture,
            onPanResponderMove: _this.onPanResponderMove,
            onPanResponderRelease: _this.onPanResponderRelease,
            onPanResponderTerminate: _this.onPanResponderTerminate
          });
        }

        _this.resync(null, props);
      }, _this.updatePosition = function () {
        var mainProps = {};
        var drawerProps = {};

        var ratio = (_this._length - _this._offsetClosed) / (_this.getOpenLength() - _this._offsetClosed);

        switch (_this.props.type) {
          case 'overlay':
            drawerProps[_this.props.side] = -_this.getDeviceLength() + _this._offsetOpen + _this._length;
            mainProps[_this.props.side] = _this._offsetClosed;
            break;

          case 'static':
            mainProps[_this.props.side] = _this._length;
            drawerProps[_this.props.side] = 0;
            break;

          case 'displace':
            mainProps[_this.props.side] = _this._length;
            drawerProps[_this.props.side] = -_this.getDeviceLength() + _this._length + _this._offsetOpen;
            break;
        }

        var mainOverlayProps = null;
        var drawerOverlayProps = null;

        if (_this.props.tweenHandler) {
          var propsFrag = _this.props.tweenHandler(ratio, _this.props.side);

          mainProps = babelHelpers.extends(mainProps, propsFrag.main);
          drawerProps = babelHelpers.extends(drawerProps, propsFrag.drawer);
          mainOverlayProps = propsFrag.mainOverlay;
          drawerOverlayProps = propsFrag.drawerOverlay;
        }

        if (_this.main && _this.drawer && _this.mainOverlay && _this.drawerOverlay) {
          _this.drawer.setNativeProps({
            style: drawerProps
          });

          _this.main.setNativeProps({
            style: mainProps
          });

          if (mainOverlayProps) _this.mainOverlay.setNativeProps({
            style: mainOverlayProps
          });
          if (drawerOverlayProps) _this.drawerOverlay.setNativeProps({
            style: drawerOverlayProps
          });
        }
      }, _this.onPanResponderTerminate = function (e, gestureState) {
        _this._panning = false;
        _this.shouldOpenDrawer(_this.getGestureDelta(gestureState)) ? _this.open() : _this.close();
      }, _this.onStartShouldSetPanResponderCapture = function (e, gestureState) {
        if (_this.shouldCaptureGestures()) return _this.processShouldSet(e, gestureState);
        return false;
      }, _this.onStartShouldSetPanResponder = function (e, gestureState) {
        if (!_this.shouldCaptureGestures()) return _this.processShouldSet(e, gestureState);
        return false;
      }, _this.onMoveShouldSetPanResponderCapture = function (e, gestureState) {
        if (_this.shouldCaptureGestures() && _this.props.negotiatePan) return _this.processMoveShouldSet(e, gestureState);
        return false;
      }, _this.onMoveShouldSetPanResponder = function (e, gestureState) {
        if (!_this.shouldCaptureGestures() && _this.props.negotiatePan) return _this.processMoveShouldSet(e, gestureState);
        return false;
      }, _this.onPanResponderMove = function (e, gestureState) {
        var delta = _this.getGestureDelta(gestureState);

        if (!_this.props.acceptPan) return false;
        if (_this._open ^ delta < 0 ^ _this.isRightOrBottomSide()) return false;
        delta = _this.isRightOrBottomSide() ? delta * -1 : delta;
        var length = _this._prevLength + delta;
        length = Math.min(length, _this.getOpenLength());
        length = Math.max(length, _this.getClosedLength());
        _this._length = length;

        _this.updatePosition();

        _this._panning = true;
      }, _this.onPanResponderRelease = function (e, gestureState) {
        var delta = _this.getGestureDelta(gestureState);

        _this._panning = false;
        if (Date.now() - _this._panStartTime < TAP_DURATION) _this.processTapGestures();
        if (Math.abs(delta) < 50 && _this._activeTween) return;
        _this.shouldOpenDrawer(delta) ? _this.open() : _this.close();

        _this.updatePosition();

        _this._prevLength = _this._length;
      }, _this.processShouldSet = function (e, gestureState) {
        var inMask = _this.testPanResponderMask(e, gestureState);

        if (!inMask) return false;
        _this._panStartTime = Date.now();
        if (inMask && _this.shouldCaptureGestures()) return true;
        if (_this.props.negotiatePan) return false;
        if (!_this.props.acceptPan) return false;

        _this.terminateActiveTween();

        return true;
      }, _this.processMoveShouldSet = function (e, gestureState) {
        var inMask = _this.testPanResponderMask(e, gestureState);

        if (!inMask && (!_this.props.acceptPanOnDrawer || _this._open === false)) return false;
        if (!_this.props.acceptPan) return false;
        if (!_this.props.negotiatePan || _this.props.disabled || !_this.props.acceptPan || _this._panning) return false;

        var delta = _this.getGestureDelta(gestureState);

        var deltaOppositeAxis = _this.getGestureDeltaOppositeAxis(gestureState);

        var swipeToLeftOrTop = delta < 0 ? true : false;
        var swipeToRightOrBottom = delta > 0 ? true : false;
        var swipeOppositeAxis = Math.abs(deltaOppositeAxis) >= Math.abs(delta) ? true : false;
        var swipeInCloseDirection = _this.isLeftOrTopSide() ? swipeToLeftOrTop : swipeToRightOrBottom;

        if (swipeOppositeAxis || _this._open && !swipeInCloseDirection || !_this._open && swipeInCloseDirection) {
          return false;
        }

        _this.terminateActiveTween();

        return true;
      }, _this.processTapGestures = function () {
        if (_this._activeTween) return false;

        if (_this.props.acceptTap || _this.props.tapToClose && _this._open) {
          _this._open ? _this.close() : _this.open();
          return true;
        }

        if (_this.props.acceptDoubleTap) {
          var now = new Date().getTime();
          var timeDelta = now - _this._lastPress;
          _this._lastPress = now;

          if (timeDelta < DOUBLE_TAP_INTERVAL) {
            _this._open ? _this.close() : _this.open();
            return true;
          }
        }

        return false;
      }, _this.testPanResponderMask = function (e, gestureState) {
        if (_this.props.disabled) return false;
        if (_this.context.drawer && _this.context.drawer._open) return false;
        if (_this._childDrawer && _this._childDrawer._open) return false;
        var pos0 = _this.isLeftOrRightSide() ? e.nativeEvent.pageX : e.nativeEvent.pageY;
        var deltaOpen = _this.isLeftOrTopSide() ? _this.getDeviceLength() - pos0 : pos0;
        var deltaClose = _this.isLeftOrTopSide() ? pos0 : _this.getDeviceLength() - pos0;
        if (_this._open && deltaOpen > _this.getOpenMask()) return false;
        if (!_this._open && deltaClose > _this.getClosedMask()) return false;
        return true;
      }, _this.terminateActiveTween = function () {
        if (_this._activeTween) {
          _this._activeTween.terminate();

          _this._activeTween = null;
        }
      }, _this.open = function (type, cb) {
        var start = _this._length;

        var end = _this.getOpenLength();

        if (_this._activeTween) return;
        if (type !== 'force' && start - end === 0 && _this._open === true) return;
        _this.props.onOpenStart && _this.props.onOpenStart();

        _this.setInteractionHandle();

        _this._activeTween = (0, _tweener2.default)({
          start: _this._length,
          end: _this.getOpenLength(),
          duration: _this.props.tweenDuration,
          easingType: _this.props.tweenEasing,
          onFrame: function onFrame(tweenValue) {
            _this._length = tweenValue;

            _this.updatePosition();
          },
          onEnd: function onEnd() {
            _this._activeTween = null;
            _this._open = true;
            _this._prevLength = _this._length;

            _this.adjustForCaptureGestures();

            _this.props.onOpen();

            _this.clearInteractionHandle();

            if (typeof type === 'function') {
              type();
            } else cb && cb();
          }
        });
      }, _this.close = function (type, cb) {
        var start = _this._length;

        var end = _this.getClosedLength();

        if (_this._activeTween) return;
        if (type !== 'force' && start - end === 0 && _this._open === false) return;
        _this.props.onCloseStart && _this.props.onCloseStart();

        _this.setInteractionHandle();

        _this._activeTween = (0, _tweener2.default)({
          start: start,
          end: end,
          easingType: _this.props.tweenEasing,
          duration: _this.props.tweenDuration,
          onFrame: function onFrame(tweenValue) {
            _this._length = tweenValue;

            _this.updatePosition();
          },
          onEnd: function onEnd() {
            _this._activeTween = null;
            _this._open = false;
            _this._prevLength = _this._length;

            _this.adjustForCaptureGestures();

            _this.props.onClose();

            _this.clearInteractionHandle();

            if (typeof type === 'function') {
              type();
            } else cb && cb();
          }
        });
      }, _this.toggle = function () {
        _this._open ? _this.close() : _this.open();
      }, _this.handleSetViewport = function (e) {
        var viewport = e.nativeEvent.layout;
        var oldViewport = _this.state.viewport;
        if (viewport.width === oldViewport.width && viewport.height === oldViewport.height) return;
        var didRotationChange = viewport.width !== oldViewport.width;

        _this.resync(viewport, null, didRotationChange);
      }, _this.resync = function (viewport, props, didRotationChange) {
        if (didRotationChange) _this._syncAfterUpdate = true;
        viewport = viewport || _this.state.viewport;
        props = props || _this.props;
        _this._offsetClosed = _this.getClosedOffset(props, viewport);
        _this._offsetOpen = _this.getOpenOffset(props, viewport);

        _this.setState({
          viewport: viewport
        });
      }, _this.requiresResync = function (nextProps) {
        for (var i = 0; i < propsWhomRequireUpdate.length; i++) {
          var key = propsWhomRequireUpdate[i];
          if (_this.props[key] !== nextProps[key]) return true;
        }
      }, _this.getDeviceLength = function () {
        var viewport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.viewport;
        return _this.isLeftOrRightSide() ? viewport.width : viewport.height;
      }, _this.getOpenLength = function () {
        return _this.getDeviceLength() - _this._offsetOpen;
      }, _this.getClosedLength = function () {
        return _this._offsetClosed;
      }, _this.getMainWidth = function () {
        var viewport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.viewport;
        return _this.isLeftOrRightSide() ? viewport.width - _this._offsetClosed : viewport.width;
      }, _this.getMainHeight = function () {
        var viewport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.viewport;
        return _this.isTopOrBottomSide() ? viewport.height - _this._offsetClosed : viewport.height;
      }, _this.getDrawerWidth = function () {
        var viewport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.viewport;
        return _this.isLeftOrRightSide() ? viewport.width - _this._offsetOpen : viewport.width;
      }, _this.getDrawerHeight = function () {
        var viewport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.viewport;
        return _this.isTopOrBottomSide() ? viewport.height - _this._offsetOpen : viewport.height;
      }, _this.getOpenMask = function () {
        var viewport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.viewport;
        if (_this.props.panCloseMask && _this.props.panCloseMask % 1 === 0) return _this.props.panCloseMask;
        if (_this.props.panCloseMask) return _this.getDeviceLength(viewport) * _this.props.panCloseMask;
        return Math.max(0.05, _this._offsetOpen);
      }, _this.getClosedMask = function () {
        if (_this.props.panOpenMask && _this.props.panOpenMask % 1 === 0) return _this.props.panOpenMask;
        if (_this.props.panOpenMask) return _this.getDeviceLength() * _this.props.panOpenMask;
        return Math.max(0.05, _this._offsetClosed);
      }, _this.getOpenOffset = function (props, viewport) {
        if (typeof props.openDrawerOffset === 'function') return props.openDrawerOffset(viewport);
        return props.openDrawerOffset > 1 || props.openDrawerOffset < 0 ? props.openDrawerOffset : props.openDrawerOffset * _this.getDeviceLength(viewport);
      }, _this.getClosedOffset = function (props, viewport) {
        if (typeof props.closedDrawerOffset === 'function') return props.closedDrawerOffset(viewport);
        return props.closedDrawerOffset > 1 || props.closedDrawerOffset < 0 ? props.closedDrawerOffset : props.closedDrawerOffset * _this.getDeviceLength(viewport);
      }, _this.getGestureDelta = function (gestureState) {
        return _this.isLeftOrRightSide() ? gestureState.dx : gestureState.dy;
      }, _this.getGestureDeltaOppositeAxis = function (gestureState) {
        return _this.isLeftOrRightSide() ? gestureState.dy : gestureState.dx;
      }, _this.isLeftOrRightSide = function () {
        if (_reactNative.I18nManager.isRTL) {
          return ["right", "left"].includes(_this.props.side);
        } else {
          return ["left", "right"].includes(_this.props.side);
        }
      }, _this.isTopOrBottomSide = function () {
        return ["top", "bottom"].includes(_this.props.side);
      }, _this.isLeftOrTopSide = function () {
        var side = "left";

        if (_reactNative.I18nManager.isRTL) {
          side = "right";
        }

        return [side, "top"].includes(_this.props.side);
      }, _this.isRightOrBottomSide = function () {
        var side = "right";

        if (_reactNative.I18nManager.isRTL) {
          side = "left";
        }

        return [side, "bottom"].includes(_this.props.side);
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(Drawer, [{
      key: "_registerChildDrawer",
      value: function _registerChildDrawer(drawer) {
        this._childDrawer = drawer;
      }
    }, {
      key: "componentWillMount",
      value: function componentWillMount() {
        if (this.context.drawer) this.context.drawer._registerChildDrawer(this);
        if (this.props.openDrawerThreshold && process.env.NODE_ENV !== 'production') console.error('react-native-drawer: openDrawerThreshold is obsolete. Use panThreshold instead.');
        if (this.props.panStartCompensation && process.env.NODE_ENV !== 'production') console.error('react-native-drawer: panStartCompensation is deprecated.');
        if (this.props.relativeDrag && process.env.NODE_ENV !== 'production') console.error('react-native-drawer: relativeDrag is deprecated.');
        this.initialize(this.props);
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        if (this.requiresResync(nextProps)) this.resync(null, nextProps);

        if (nextProps.open !== null && this._open !== nextProps.open) {
          this._syncAfterUpdate = true;
          this._open = nextProps.open;
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        if (this._syncAfterUpdate) {
          this._syncAfterUpdate = false;
          this._open ? this.open('force') : this.close('force');
        }
      }
    }, {
      key: "shouldOpenDrawer",
      value: function shouldOpenDrawer(delta) {
        var hasActiveHeading = this._open ^ delta > 0 ^ this.isRightOrBottomSide();
        if (!hasActiveHeading) return this._open;else return this._open ^ Math.abs(delta) > this.getDeviceLength() * this.props.panThreshold;
      }
    }, {
      key: "shouldCaptureGestures",
      value: function shouldCaptureGestures() {
        if (this.props.captureGestures === true) return true;
        if (this.props.captureGestures === 'closed' && this._open === false) return true;
        if (this.props.captureGestures === 'open' && this._open === true) return true;
        return false;
      }
    }, {
      key: "adjustForCaptureGestures",
      value: function adjustForCaptureGestures() {
        if (!this.props.captureGestures) return;
        var shouldCapture = this.shouldCaptureGestures();

        if (this.mainOverlay && this.drawerOverlay) {
          this.mainOverlay.setNativeProps({
            pointerEvents: shouldCapture && this._open ? 'auto' : 'none'
          });
          this.drawerOverlay.setNativeProps({
            pointerEvents: shouldCapture && !this._open ? 'auto' : 'none'
          });
        }
      }
    }, {
      key: "setInteractionHandle",
      value: function setInteractionHandle() {
        if (this._interactionHandle) _reactNative.InteractionManager.clearInteractionHandle(this._interactionHandle);
        if (this.props.useInteractionManager) this._interactionHandle = _reactNative.InteractionManager.createInteractionHandle();
      }
    }, {
      key: "clearInteractionHandle",
      value: function clearInteractionHandle() {
        if (this._interactionHandle) _reactNative.InteractionManager.clearInteractionHandle(this._interactionHandle);
      }
    }, {
      key: "render",
      value: function render() {
        var first = this.props.type === 'overlay' ? this.renderMain() : this.renderDrawer();
        var second = this.props.type === 'overlay' ? this.renderDrawer() : this.renderMain();
        return _react2.default.createElement(
          _reactNative.View,
          {
            key: "drawerContainer",
            onLayout: this.handleSetViewport,
            style: this.stylesheet.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 559
            }
          },
          first,
          second
        );
      }
    }, {
      key: "renderMain",
      value: function renderMain() {
        var _this2 = this;

        return _react2.default.createElement(
          _reactNative.View,
          babelHelpers.extends({}, this.responder.panHandlers, {
            key: "main",
            ref: function ref(c) {
              return _this2.main = c;
            },
            style: [this.stylesheet.main, {
              height: this.getMainHeight(),
              width: this.getMainWidth()
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 572
            }
          }),
          this.props.children,
          _react2.default.createElement(_reactNative.View, {
            pointerEvents: this._open && this.shouldCaptureGestures() ? 'auto' : 'none',
            ref: function ref(c) {
              return _this2.mainOverlay = c;
            },
            style: [styles.overlay, this.props.styles && this.props.styles.mainOverlay],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 579
            }
          })
        );
      }
    }, {
      key: "renderDrawer",
      value: function renderDrawer() {
        var _this3 = this;

        return _react2.default.createElement(
          _reactNative.View,
          babelHelpers.extends({}, this.responder.panHandlers, {
            key: "drawer",
            ref: function ref(c) {
              return _this3.drawer = c;
            },
            elevation: this.props.elevation,
            style: [this.stylesheet.drawer, {
              height: this.getDrawerHeight(),
              width: this.getDrawerWidth()
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 590
            }
          }),
          this.props.content,
          _react2.default.createElement(_reactNative.View, {
            pointerEvents: !this._open && this.shouldCaptureGestures() ? 'auto' : 'none',
            ref: function ref(c) {
              return _this3.drawerOverlay = c;
            },
            style: [styles.overlay, this.props.styles && this.props.styles.drawerOverlay],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 598
            }
          })
        );
      }
    }]);
    return Drawer;
  }(_react.Component);

  Drawer.tweenPresets = {
    parallax: function parallax(ratio) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'left';
      var drawer = babelHelpers.defineProperty({}, side, -150 * (1 - ratio));
      return {
        drawer: drawer
      };
    }
  };
  Drawer.propTypes = {
    acceptDoubleTap: _propTypes2.default.bool,
    acceptPan: _propTypes2.default.bool,
    acceptTap: _propTypes2.default.bool,
    acceptPanOnDrawer: _propTypes2.default.bool,
    captureGestures: _propTypes2.default.oneOf([true, false, 'open', 'closed']),
    children: _propTypes2.default.node,
    closedDrawerOffset: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.func]),
    content: _propTypes2.default.node,
    disabled: _propTypes2.default.bool,
    elevation: _propTypes2.default.number,
    initializeOpen: _propTypes2.default.bool,
    open: _propTypes2.default.bool,
    negotiatePan: _propTypes2.default.bool,
    onClose: _propTypes2.default.func,
    onCloseStart: _propTypes2.default.func,
    onOpen: _propTypes2.default.func,
    onOpenStart: _propTypes2.default.func,
    openDrawerOffset: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.func]),
    panThreshold: _propTypes2.default.number,
    panCloseMask: _propTypes2.default.number,
    panOpenMask: _propTypes2.default.number,
    side: _propTypes2.default.oneOf(['left', 'right', 'top', 'bottom']),
    styles: _propTypes2.default.object,
    tapToClose: _propTypes2.default.bool,
    tweenDuration: _propTypes2.default.number,
    tweenEasing: _propTypes2.default.string,
    tweenHandler: _propTypes2.default.func,
    type: _propTypes2.default.oneOf(['overlay', 'static', 'displace']),
    useInteractionManager: _propTypes2.default.bool,
    panStartCompensation: _propTypes2.default.bool,
    openDrawerThreshold: _propTypes2.default.any
  };
  Drawer.defaultProps = {
    open: null,
    initializeOpen: false,
    type: 'displace',
    closedDrawerOffset: 0,
    openDrawerOffset: 0,
    panThreshold: 0.25,
    panOpenMask: null,
    panCloseMask: null,
    tweenHandler: null,
    tweenDuration: 250,
    tweenEasing: 'linear',
    disabled: false,
    negotiatePan: false,
    captureGestures: 'open',
    acceptDoubleTap: false,
    acceptTap: false,
    acceptPan: true,
    acceptPanOnDrawer: true,
    tapToClose: false,
    styles: {},
    elevation: 0,
    onOpen: function onOpen() {},
    onClose: function onClose() {},
    side: 'left',
    useInteractionManager: false
  };
  Drawer.contextTypes = {
    drawer: _propTypes2.default.object
  };
  Drawer.childContextTypes = {
    drawer: _propTypes2.default.object
  };
  exports.default = Drawer;

  var styles = _reactNative.StyleSheet.create({
    overlay: {
      right: 0,
      left: 0,
      top: 0,
      bottom: 0,
      position: 'absolute',
      backgroundColor: 'transparent'
    }
  });
},477,[108,127,12,478],"react-native-drawer/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
	var easingTypes = require(_dependencyMap[0], 'tween-functions');

	module.exports = function (config) {
		return new Tween(config);
	};

	function Tween(config) {
		this._rafLoop = this._rafLoop.bind(this);
		this.terminate = this.terminate.bind(this);
		this._t0 = Date.now();
		this._config = config;

		this._rafLoop();
	}

	Tween.prototype._rafLoop = function () {
		if (this._break) {
			return;
		}

		var _config = this._config,
		    duration = _config.duration,
		    start = _config.start,
		    end = _config.end,
		    easingType = _config.easingType;
		var now = Date.now();
		var elapsed = now - this._t0;

		if (elapsed >= duration) {
			this._config.onFrame(end);

			this._config.onEnd();

			return;
		}

		var tweenVal = easingTypes[easingType](elapsed, start, end, duration);

		this._config.onFrame(tweenVal);

		requestAnimationFrame(this._rafLoop);
	};

	Tween.prototype.terminate = function () {
		this._break = true;
	};
},478,[479],"react-native-drawer/tweener.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var tweenFunctions = {
    linear: function linear(t, b, _c, d) {
      var c = _c - b;
      return c * t / d + b;
    },
    easeInQuad: function easeInQuad(t, b, _c, d) {
      var c = _c - b;
      return c * (t /= d) * t + b;
    },
    easeOutQuad: function easeOutQuad(t, b, _c, d) {
      var c = _c - b;
      return -c * (t /= d) * (t - 2) + b;
    },
    easeInOutQuad: function easeInOutQuad(t, b, _c, d) {
      var c = _c - b;

      if ((t /= d / 2) < 1) {
        return c / 2 * t * t + b;
      } else {
        return -c / 2 * (--t * (t - 2) - 1) + b;
      }
    },
    easeInCubic: function easeInCubic(t, b, _c, d) {
      var c = _c - b;
      return c * (t /= d) * t * t + b;
    },
    easeOutCubic: function easeOutCubic(t, b, _c, d) {
      var c = _c - b;
      return c * ((t = t / d - 1) * t * t + 1) + b;
    },
    easeInOutCubic: function easeInOutCubic(t, b, _c, d) {
      var c = _c - b;

      if ((t /= d / 2) < 1) {
        return c / 2 * t * t * t + b;
      } else {
        return c / 2 * ((t -= 2) * t * t + 2) + b;
      }
    },
    easeInQuart: function easeInQuart(t, b, _c, d) {
      var c = _c - b;
      return c * (t /= d) * t * t * t + b;
    },
    easeOutQuart: function easeOutQuart(t, b, _c, d) {
      var c = _c - b;
      return -c * ((t = t / d - 1) * t * t * t - 1) + b;
    },
    easeInOutQuart: function easeInOutQuart(t, b, _c, d) {
      var c = _c - b;

      if ((t /= d / 2) < 1) {
        return c / 2 * t * t * t * t + b;
      } else {
        return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
      }
    },
    easeInQuint: function easeInQuint(t, b, _c, d) {
      var c = _c - b;
      return c * (t /= d) * t * t * t * t + b;
    },
    easeOutQuint: function easeOutQuint(t, b, _c, d) {
      var c = _c - b;
      return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
    },
    easeInOutQuint: function easeInOutQuint(t, b, _c, d) {
      var c = _c - b;

      if ((t /= d / 2) < 1) {
        return c / 2 * t * t * t * t * t + b;
      } else {
        return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
      }
    },
    easeInSine: function easeInSine(t, b, _c, d) {
      var c = _c - b;
      return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
    },
    easeOutSine: function easeOutSine(t, b, _c, d) {
      var c = _c - b;
      return c * Math.sin(t / d * (Math.PI / 2)) + b;
    },
    easeInOutSine: function easeInOutSine(t, b, _c, d) {
      var c = _c - b;
      return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
    },
    easeInExpo: function easeInExpo(t, b, _c, d) {
      var c = _c - b;
      return t == 0 ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
    },
    easeOutExpo: function easeOutExpo(t, b, _c, d) {
      var c = _c - b;
      return t == d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
    },
    easeInOutExpo: function easeInOutExpo(t, b, _c, d) {
      var c = _c - b;

      if (t === 0) {
        return b;
      }

      if (t === d) {
        return b + c;
      }

      if ((t /= d / 2) < 1) {
        return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
      } else {
        return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
      }
    },
    easeInCirc: function easeInCirc(t, b, _c, d) {
      var c = _c - b;
      return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
    },
    easeOutCirc: function easeOutCirc(t, b, _c, d) {
      var c = _c - b;
      return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
    },
    easeInOutCirc: function easeInOutCirc(t, b, _c, d) {
      var c = _c - b;

      if ((t /= d / 2) < 1) {
        return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
      } else {
        return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
      }
    },
    easeInElastic: function easeInElastic(t, b, _c, d) {
      var c = _c - b;
      var a, p, s;
      s = 1.70158;
      p = 0;
      a = c;

      if (t === 0) {
        return b;
      } else if ((t /= d) === 1) {
        return b + c;
      }

      if (!p) {
        p = d * 0.3;
      }

      if (a < Math.abs(c)) {
        a = c;
        s = p / 4;
      } else {
        s = p / (2 * Math.PI) * Math.asin(c / a);
      }

      return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
    },
    easeOutElastic: function easeOutElastic(t, b, _c, d) {
      var c = _c - b;
      var a, p, s;
      s = 1.70158;
      p = 0;
      a = c;

      if (t === 0) {
        return b;
      } else if ((t /= d) === 1) {
        return b + c;
      }

      if (!p) {
        p = d * 0.3;
      }

      if (a < Math.abs(c)) {
        a = c;
        s = p / 4;
      } else {
        s = p / (2 * Math.PI) * Math.asin(c / a);
      }

      return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
    },
    easeInOutElastic: function easeInOutElastic(t, b, _c, d) {
      var c = _c - b;
      var a, p, s;
      s = 1.70158;
      p = 0;
      a = c;

      if (t === 0) {
        return b;
      } else if ((t /= d / 2) === 2) {
        return b + c;
      }

      if (!p) {
        p = d * (0.3 * 1.5);
      }

      if (a < Math.abs(c)) {
        a = c;
        s = p / 4;
      } else {
        s = p / (2 * Math.PI) * Math.asin(c / a);
      }

      if (t < 1) {
        return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
      } else {
        return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * 0.5 + c + b;
      }
    },
    easeInBack: function easeInBack(t, b, _c, d, s) {
      var c = _c - b;

      if (s === void 0) {
        s = 1.70158;
      }

      return c * (t /= d) * t * ((s + 1) * t - s) + b;
    },
    easeOutBack: function easeOutBack(t, b, _c, d, s) {
      var c = _c - b;

      if (s === void 0) {
        s = 1.70158;
      }

      return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
    },
    easeInOutBack: function easeInOutBack(t, b, _c, d, s) {
      var c = _c - b;

      if (s === void 0) {
        s = 1.70158;
      }

      if ((t /= d / 2) < 1) {
        return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b;
      } else {
        return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;
      }
    },
    easeInBounce: function easeInBounce(t, b, _c, d) {
      var c = _c - b;
      var v;
      v = tweenFunctions.easeOutBounce(d - t, 0, c, d);
      return c - v + b;
    },
    easeOutBounce: function easeOutBounce(t, b, _c, d) {
      var c = _c - b;

      if ((t /= d) < 1 / 2.75) {
        return c * (7.5625 * t * t) + b;
      } else if (t < 2 / 2.75) {
        return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;
      } else if (t < 2.5 / 2.75) {
        return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;
      } else {
        return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;
      }
    },
    easeInOutBounce: function easeInOutBounce(t, b, _c, d) {
      var c = _c - b;
      var v;

      if (t < d / 2) {
        v = tweenFunctions.easeInBounce(t * 2, 0, c, d);
        return v * 0.5 + b;
      } else {
        v = tweenFunctions.easeOutBounce(t * 2 - d, 0, c, d);
        return v * 0.5 + c * 0.5 + b;
      }
    }
  };
  module.exports = tweenFunctions;
},479,[],"tween-functions/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SwipeRow = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/SwipeRow.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _Text = require(_dependencyMap[4], "./Text");

  var _Left = require(_dependencyMap[5], "./Left");

  var _Right = require(_dependencyMap[6], "./Right");

  var _Body = require(_dependencyMap[7], "./Body");

  var _ListItem = require(_dependencyMap[8], "./ListItem");

  var _mapPropsToStyleNames = require(_dependencyMap[9], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var PREVIEW_OPEN_DELAY = 700;
  var PREVIEW_CLOSE_DELAY = 300;

  var SwipeRow = function (_Component) {
    _inherits(SwipeRow, _Component);

    function SwipeRow(props) {
      _classCallCheck(this, SwipeRow);

      var _this = _possibleConstructorReturn(this, (SwipeRow.__proto__ || Object.getPrototypeOf(SwipeRow)).call(this, props));

      _this.horizontalSwipeGestureBegan = false;
      _this.swipeInitialX = null;
      _this.parentScrollEnabled = true;
      _this.ranPreview = false;
      _this.state = {
        dimensionsSet: false,
        hiddenHeight: 0,
        hiddenWidth: 0
      };
      _this._translateX = new _reactNative.Animated.Value(0);
      return _this;
    }

    _createClass(SwipeRow, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        var _this2 = this;

        this._panResponder = _reactNative.PanResponder.create({
          onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(e, gs) {
            return _this2.handleOnMoveShouldSetPanResponder(e, gs);
          },
          onPanResponderMove: function onPanResponderMove(e, gs) {
            return _this2.handlePanResponderMove(e, gs);
          },
          onPanResponderRelease: function onPanResponderRelease(e, gs) {
            return _this2.handlePanResponderEnd(e, gs);
          },
          onPanResponderTerminate: function onPanResponderTerminate(e, gs) {
            return _this2.handlePanResponderEnd(e, gs);
          },
          onShouldBlockNativeResponder: function onShouldBlockNativeResponder(_) {
            return false;
          }
        });
      }
    }, {
      key: "getPreviewAnimation",
      value: function getPreviewAnimation(toValue, delay) {
        return _reactNative.Animated.timing(this._translateX, {
          duration: this.props.previewDuration,
          toValue: toValue,
          delay: delay
        });
      }
    }, {
      key: "onContentLayout",
      value: function onContentLayout(e) {
        var _this3 = this;

        this.setState({
          dimensionsSet: !this.props.recalculateHiddenLayout,
          hiddenHeight: e.nativeEvent.layout.height,
          hiddenWidth: e.nativeEvent.layout.width
        });

        if (this.props.preview && !this.ranPreview) {
          this.ranPreview = true;
          var previewOpenValue = this.props.previewOpenValue || this.props.rightOpenValue * 0.5;
          this.getPreviewAnimation(previewOpenValue, PREVIEW_OPEN_DELAY).start(function (_) {
            _this3.getPreviewAnimation(0, PREVIEW_CLOSE_DELAY).start();
          });
        }
      }
    }, {
      key: "handleOnMoveShouldSetPanResponder",
      value: function handleOnMoveShouldSetPanResponder(e, gs) {
        var dx = gs.dx;
        return Math.abs(dx) > this.props.directionalDistanceChangeThreshold;
      }
    }, {
      key: "handlePanResponderMove",
      value: function handlePanResponderMove(e, gestureState) {
        var dx = gestureState.dx,
            dy = gestureState.dy;
        var absDx = Math.abs(dx);
        var absDy = Math.abs(dy);

        if (absDx > this.props.directionalDistanceChangeThreshold || absDy > this.props.directionalDistanceChangeThreshold) {
          if (absDy > absDx && !this.horizontalSwipeGestureBegan) {
            return;
          }

          if (this.parentScrollEnabled) {
            this.parentScrollEnabled = false;
            this.props.setScrollEnabled && this.props.setScrollEnabled(false);
          }

          if (this.swipeInitialX === null) {
            this.swipeInitialX = this._translateX._value;
          }

          if (!this.horizontalSwipeGestureBegan) {
            this.horizontalSwipeGestureBegan = true;
            this.props.swipeGestureBegan && this.props.swipeGestureBegan();
          }

          var newDX = this.swipeInitialX + dx;

          if (this.props.disableLeftSwipe && newDX < 0) {
            newDX = 0;
          }

          if (this.props.disableRightSwipe && newDX > 0) {
            newDX = 0;
          }

          if (this.props.stopLeftSwipe && newDX > this.props.stopLeftSwipe) {
            newDX = this.props.stopLeftSwipe;
          }

          if (this.props.stopRightSwipe && newDX < this.props.stopRightSwipe) {
            newDX = this.props.stopRightSwipe;
          }

          this._translateX.setValue(newDX);
        }
      }
    }, {
      key: "handlePanResponderEnd",
      value: function handlePanResponderEnd(e, gestureState) {
        if (!this.parentScrollEnabled) {
          this.parentScrollEnabled = true;
          this.props.setScrollEnabled && this.props.setScrollEnabled(true);
        }

        var toValue = 0;

        if (this._translateX._value >= 0) {
          if (this._translateX._value > this.props.leftOpenValue * (this.props.swipeToOpenPercent / 100)) {
            toValue = this.props.leftOpenValue;
          }
        } else {
          if (this._translateX._value < this.props.rightOpenValue * (this.props.swipeToOpenPercent / 100)) {
            toValue = this.props.rightOpenValue;
          }
        }

        this.manuallySwipeRow(toValue);
      }
    }, {
      key: "closeRow",
      value: function closeRow() {
        this.manuallySwipeRow(0);
      }
    }, {
      key: "manuallySwipeRow",
      value: function manuallySwipeRow(toValue) {
        var _this4 = this;

        _reactNative.Animated.spring(this._translateX, {
          toValue: toValue,
          friction: this.props.friction,
          tension: this.props.tension
        }).start(function (_) {
          if (toValue === 0) {
            _this4.props.onRowDidClose && _this4.props.onRowDidClose();
          } else {
            _this4.props.onRowDidOpen && _this4.props.onRowDidOpen();
          }
        });

        if (toValue === 0) {
          this.props.onRowClose && this.props.onRowClose();
        } else {
          this.props.onRowOpen && this.props.onRowOpen(toValue);
        }

        this.swipeInitialX = null;
        this.horizontalSwipeGestureBegan = false;
      }
    }, {
      key: "renderMainContent",
      value: function renderMainContent() {
        var _this5 = this;

        if (this.state.dimensionsSet) {
          return _react2.default.createElement(_reactNative.Animated.View, _extends({}, this._panResponder.panHandlers, {
            style: {
              transform: [{
                translateX: this._translateX
              }],
              zIndex: 2
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 191
            }
          }), !this.props.list ? _react2.default.createElement(_ListItem.ListItem, {
            list: true,
            style: this.props.style,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 199
            }
          }, this.props.body) : _react2.default.createElement(_reactNative.View, {
            style: [{
              backgroundColor: '#FFF'
            }, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 202
            }
          }, this.props.body));
        } else {
          return _react2.default.createElement(_reactNative.Animated.View, _extends({}, this._panResponder.panHandlers, {
            onLayout: function onLayout(e) {
              return _this5.onContentLayout(e);
            },
            style: {
              transform: [{
                translateX: this._translateX
              }],
              zIndex: 2
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 209
            }
          }), !this.props.list ? _react2.default.createElement(_ListItem.ListItem, {
            list: true,
            style: this.props.style,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 218
            }
          }, this.props.body) : _react2.default.createElement(_reactNative.View, {
            style: [{
              backgroundColor: '#FFF'
            }, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 221
            }
          }, this.props.body));
        }
      }
    }, {
      key: "render",
      value: function render() {
        return _react2.default.createElement(_reactNative.View, {
          style: this.props.style ? this.props.style : undefined,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 231
          }
        }, _react2.default.createElement(_reactNative.View, {
          style: [styles.hidden, {
            height: this.state.hiddenHeight,
            flex: 1,
            flexDirection: "row",
            justifyContent: "space-between"
          }],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 232
          }
        }, _react2.default.createElement(_Left.Left, {
          style: {
            width: this.props.leftOpenValue,
            zIndex: 1
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 243
          }
        }, this.props.left), _react2.default.createElement(_Body.Body, {
          style: {
            flex: 0
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 246
          }
        }), _react2.default.createElement(_Right.Right, {
          style: {
            width: -this.props.rightOpenValue,
            zIndex: 1
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 247
          }
        }, this.props.right)), this.renderMainContent());
      }
    }]);

    return SwipeRow;
  }(_react.Component);

  SwipeRow.defaultProps = {
    leftOpenValue: 0,
    rightOpenValue: 0,
    closeOnRowPress: true,
    disableLeftSwipe: false,
    disableRightSwipe: false,
    recalculateHiddenLayout: false,
    preview: false,
    previewDuration: 300,
    directionalDistanceChangeThreshold: 2,
    swipeToOpenPercent: 50
  };
  var styles = {
    container: {},
    hidden: {
      bottom: 0,
      left: 0,
      overflow: "hidden",
      position: "absolute",
      right: 0,
      top: 0
    }
  };
  var StyledSwipeRow = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.SwipeRow", {}, _mapPropsToStyleNames2.default)(SwipeRow);
  exports.SwipeRow = StyledSwipeRow;
},480,[108,127,12,404,481,483,484,485,486,482],"native-base/dist/src/basic/SwipeRow.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Text = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Text.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _lodash = require(_dependencyMap[3], "lodash");

  var _lodash2 = _interopRequireDefault(_lodash);

  var _nativeBaseShoutemTheme = require(_dependencyMap[4], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[5], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Text = function (_Component) {
    _inherits(Text, _Component);

    function Text() {
      _classCallCheck(this, Text);

      return _possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).apply(this, arguments));
    }

    _createClass(Text, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            uppercase = _props.uppercase,
            children = _props.children;
        var text = void 0;

        if (uppercase) {
          text = _react2.default.Children.map(children, function (child) {
            if (_lodash2.default.isString(child)) {
              return _lodash2.default.toUpper(child);
            } else {
              return child;
            }
          });
        } else {
          text = children;
        }

        return _react2.default.createElement(_reactNative.Text, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 30
          }
        }), text);
      }
    }]);

    return Text;
  }(_react.Component);

  Text.propTypes = _extends({}, _reactNative.Text.propTypes, {
    uppercase: _propTypes2.default.bool,
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  Text.defaultProps = {
    uppercase: false
  };
  var StyledText = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Text", {}, _mapPropsToStyleNames2.default)(Text);
  exports.Text = StyledText;
},481,[108,127,12,407,404,482],"native-base/dist/src/basic/Text.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _lodash = require(_dependencyMap[0], "lodash");

  var _lodash2 = _interopRequireDefault(_lodash);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var mapPropsToStyleNames = function mapPropsToStyleNames(styleNames, props) {
    var keys = _lodash2.default.keys(props);

    var values = _lodash2.default.values(props);

    _lodash2.default.forEach(keys, function (key, index) {
      if (values[index]) {
        styleNames.push(key);
      }
    });

    return styleNames;
  };

  exports.default = mapPropsToStyleNames;
},482,[407],"native-base/dist/src/Utils/mapPropsToStyleNames.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Left = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Left.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Left = function (_Component) {
    _inherits(Left, _Component);

    function Left() {
      _classCallCheck(this, Left);

      return _possibleConstructorReturn(this, (Left.__proto__ || Object.getPrototypeOf(Left)).apply(this, arguments));
    }

    _createClass(Left, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.View, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 10
          }
        }));
      }
    }]);

    return Left;
  }(_react.Component);

  Left.propTypes = _extends({}, _reactNative.ViewPropTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  var StyledLeft = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Left", {}, _mapPropsToStyleNames2.default)(Left);
  exports.Left = StyledLeft;
},483,[108,127,12,404,482],"native-base/dist/src/basic/Left.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Right = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Right.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Right = function (_Component) {
    _inherits(Right, _Component);

    function Right() {
      _classCallCheck(this, Right);

      return _possibleConstructorReturn(this, (Right.__proto__ || Object.getPrototypeOf(Right)).apply(this, arguments));
    }

    _createClass(Right, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.View, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 10
          }
        }));
      }
    }]);

    return Right;
  }(_react.Component);

  Right.propTypes = _extends({}, _reactNative.ViewPropTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  var StyledRight = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Right", {}, _mapPropsToStyleNames2.default)(Right);
  exports.Right = StyledRight;
},484,[108,127,12,404,482],"native-base/dist/src/basic/Right.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Body = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Body.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Body = function (_Component) {
    _inherits(Body, _Component);

    function Body() {
      _classCallCheck(this, Body);

      return _possibleConstructorReturn(this, (Body.__proto__ || Object.getPrototypeOf(Body)).apply(this, arguments));
    }

    _createClass(Body, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.View, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 10
          }
        }));
      }
    }]);

    return Body;
  }(_react.Component);

  Body.propTypes = _extends({}, _reactNative.ViewPropTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  var StyledBody = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Body", {}, _mapPropsToStyleNames2.default)(Body);
  exports.Body = StyledBody;
},485,[108,127,12,404,482],"native-base/dist/src/basic/Body.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ListItem = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/ListItem.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  var _platform = require(_dependencyMap[5], "../theme/variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var ListItem = function (_Component) {
    _inherits(ListItem, _Component);

    function ListItem() {
      _classCallCheck(this, ListItem);

      return _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).apply(this, arguments));
    }

    _createClass(ListItem, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var variables = this.context.theme ? this.context.theme["@@shoutem.theme/themeStyle"].variables : _platform2.default;

        if (_reactNative.Platform.OS === "ios" || variables.androidRipple === false || !this.props.onPress && !this.props.onLongPress || _reactNative.Platform.Version <= 21) {
          return _react2.default.createElement(_reactNative.TouchableHighlight, {
            onPress: this.props.onPress,
            onLongPress: this.props.onLongPress,
            ref: function ref(c) {
              return _this2._root = c;
            },
            underlayColor: variables.listBtnUnderlayColor,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 30
            }
          }, _react2.default.createElement(_reactNative.View, _extends({}, this.props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 36
            }
          }), this.props.children));
        } else {
          return _react2.default.createElement(_reactNative.TouchableNativeFeedback, {
            ref: function ref(c) {
              return _this2._root = c;
            },
            onPress: this.props.onPress,
            onLongPress: this.props.onLongPress,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 41
            }
          }, _react2.default.createElement(_reactNative.View, {
            style: {
              marginLeft: -17,
              paddingLeft: 17
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 46
            }
          }, _react2.default.createElement(_reactNative.View, _extends({}, this.props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 47
            }
          }), this.props.children)));
        }
      }
    }]);

    return ListItem;
  }(_react.Component);

  ListItem.contextTypes = {
    theme: _propTypes2.default.object
  };
  ListItem.propTypes = _extends({}, _reactNative.TouchableHighlight.propTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
    itemDivider: _propTypes2.default.bool,
    button: _propTypes2.default.bool
  });
  var StyledListItem = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.ListItem", {}, _mapPropsToStyleNames2.default)(ListItem);
  exports.ListItem = StyledListItem;
},486,[108,127,12,404,482,426],"native-base/dist/src/basic/ListItem.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ViewNB = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/View.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var ViewNB = function (_Component) {
    _inherits(ViewNB, _Component);

    function ViewNB() {
      _classCallCheck(this, ViewNB);

      return _possibleConstructorReturn(this, (ViewNB.__proto__ || Object.getPrototypeOf(ViewNB)).apply(this, arguments));
    }

    _createClass(ViewNB, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.View, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 9
          }
        }));
      }
    }]);

    return ViewNB;
  }(_react.Component);

  ViewNB.propTypes = _extends({}, _reactNative.ViewPropTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  var StyledViewNB = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.ViewNB", {}, _mapPropsToStyleNames2.default)(ViewNB);
  exports.ViewNB = StyledViewNB;
},487,[108,127,12,404,482],"native-base/dist/src/basic/View.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Button = undefined;
  var _jsxFileName = "src/basic/Button.js";

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _platform = require(_dependencyMap[4], "./../theme/variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  var _Text = require(_dependencyMap[5], "./Text");

  var _computeProps = require(_dependencyMap[6], "../Utils/computeProps");

  var _computeProps2 = _interopRequireDefault(_computeProps);

  var _mapPropsToStyleNames = require(_dependencyMap[7], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Button = function (_Component) {
    _inherits(Button, _Component);

    function Button() {
      _classCallCheck(this, Button);

      return _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
    }

    _createClass(Button, [{
      key: "getInitialStyle",
      value: function getInitialStyle() {
        return {
          borderedBtn: {
            borderWidth: this.props.bordered ? 1 : undefined,
            borderRadius: this.props.rounded && this.props.bordered ? _platform2.default.borderRadiusLarge : 2
          }
        };
      }
    }, {
      key: "prepareRootProps",
      value: function prepareRootProps() {
        var defaultProps = {
          style: this.getInitialStyle().borderedBtn
        };
        return (0, _computeProps2.default)(this.props, defaultProps);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var variables = this.context.theme ? this.context.theme["@@shoutem.theme/themeStyle"].variables : _platform2.default;
        var children = _reactNative.Platform.OS === "ios" ? this.props.children : _react2.default.Children.map(this.props.children, function (child) {
          return child && child.type === _Text.Text ? _react2.default.cloneElement(child, _extends({
            uppercase: variables.btnUppercaseAndroidText
          }, child.props)) : child;
        });

        if (_reactNative.Platform.OS === "ios" || variables.androidRipple === false || _reactNative.Platform["Version"] <= 21) {
          return _react2.default.createElement(_reactNative.TouchableOpacity, _extends({}, this.prepareRootProps(), {
            ref: function ref(c) {
              return _this2._root = c;
            },
            activeOpacity: this.props.activeOpacity > 0 ? this.props.activeOpacity : 0.5,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 65
            }
          }), children);
        } else {
          return _react2.default.createElement(_reactNative.TouchableNativeFeedback, _extends({
            ref: function ref(c) {
              return _this2._root = c;
            },
            onPress: this.props.onPress
          }, this.prepareRootProps(), {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 77
            }
          }), _react2.default.createElement(_reactNative.View, _extends({}, this.prepareRootProps(), {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 82
            }
          }), children));
        }
      }
    }]);

    return Button;
  }(_react.Component);

  Button.contextTypes = {
    theme: _propTypes2.default.object
  };
  Button.propTypes = _extends({}, _reactNative.TouchableOpacity.propTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
    block: _propTypes2.default.bool,
    primary: _propTypes2.default.bool,
    transparent: _propTypes2.default.bool,
    success: _propTypes2.default.bool,
    danger: _propTypes2.default.bool,
    warning: _propTypes2.default.bool,
    info: _propTypes2.default.bool,
    bordered: _propTypes2.default.bool,
    disabled: _propTypes2.default.bool,
    rounded: _propTypes2.default.bool,
    large: _propTypes2.default.bool,
    small: _propTypes2.default.bool,
    active: _propTypes2.default.bool
  });
  var StyledButton = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Button", {}, _mapPropsToStyleNames2.default)(Button);
  exports.Button = StyledButton;
},488,[108,127,12,404,426,481,489,482],"native-base/dist/src/basic/Button.js");
__d(function (global, require, module, exports, _dependencyMap) {
  "use_strict";

  var _lodash = require(_dependencyMap[0], "lodash");

  var _lodash2 = _interopRequireDefault(_lodash);

  var _ReactNativePropRegistry = require(_dependencyMap[1], "react-native/Libraries/Renderer/shims/ReactNativePropRegistry");

  var _ReactNativePropRegistry2 = _interopRequireDefault(_ReactNativePropRegistry);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  module.exports = function (incomingProps, defaultProps) {
    var computedProps = {};
    incomingProps = _lodash2.default.clone(incomingProps);
    delete incomingProps.children;
    var incomingPropsStyle = incomingProps.style;
    delete incomingProps.style;

    if (incomingProps) {
      _lodash2.default.assign(computedProps, defaultProps, incomingProps);
    } else {
      computedProps = defaultProps;
    }

    if (incomingPropsStyle) {
      var computedPropsStyle = {};
      computedProps.style = {};

      if (Array.isArray(incomingPropsStyle)) {
        _lodash2.default.forEach(incomingPropsStyle, function (style) {
          if (typeof style === "number") {
            _lodash2.default.merge(computedPropsStyle, _ReactNativePropRegistry2.default.getByID(style));
          } else {
            _lodash2.default.merge(computedPropsStyle, style);
          }
        });
      } else if (typeof incomingPropsStyle === "number") {
        computedPropsStyle = _ReactNativePropRegistry2.default.getByID(incomingPropsStyle);
      } else {
        computedPropsStyle = incomingPropsStyle;
      }

      _lodash2.default.merge(computedProps.style, defaultProps.style, computedPropsStyle);
    }

    return computedProps;
  };
},489,[407,102],"native-base/dist/src/Utils/computeProps.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TabHeading = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/TabHeading.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var TabHeadingNB = function (_Component) {
    _inherits(TabHeadingNB, _Component);

    function TabHeadingNB() {
      _classCallCheck(this, TabHeadingNB);

      return _possibleConstructorReturn(this, (TabHeadingNB.__proto__ || Object.getPrototypeOf(TabHeadingNB)).apply(this, arguments));
    }

    _createClass(TabHeadingNB, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.View, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 9
          }
        }));
      }
    }]);

    return TabHeadingNB;
  }(_react.Component);

  TabHeadingNB.propTypes = _extends({}, _reactNative.ViewPropTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  var StyledTabHeadingNB = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.TabHeading", {}, _mapPropsToStyleNames2.default)(TabHeadingNB);
  exports.TabHeading = StyledTabHeadingNB;
},490,[108,127,12,404,482],"native-base/dist/src/basic/TabHeading.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TabContainer = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/TabContainer.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var TabContainer = function (_Component) {
    _inherits(TabContainer, _Component);

    function TabContainer() {
      _classCallCheck(this, TabContainer);

      return _possibleConstructorReturn(this, (TabContainer.__proto__ || Object.getPrototypeOf(TabContainer)).apply(this, arguments));
    }

    _createClass(TabContainer, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.View, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 9
          }
        }));
      }
    }]);

    return TabContainer;
  }(_react.Component);

  TabContainer.propTypes = _extends({}, _reactNative.ViewPropTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  var StyledTabContainer = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.TabContainer", {}, _mapPropsToStyleNames2.default)(TabContainer);
  exports.TabContainer = StyledTabContainer;
},491,[108,127,12,404,482],"native-base/dist/src/basic/TabContainer.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.IconNB = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/IconNB.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _nativeBaseShoutemTheme = require(_dependencyMap[2], "native-base-shoutem-theme");

  var _Ionicons = require(_dependencyMap[3], "react-native-vector-icons/Ionicons");

  var _Ionicons2 = _interopRequireDefault(_Ionicons);

  var _Entypo = require(_dependencyMap[4], "react-native-vector-icons/Entypo");

  var _Entypo2 = _interopRequireDefault(_Entypo);

  var _Feather = require(_dependencyMap[5], "react-native-vector-icons/Feather");

  var _Feather2 = _interopRequireDefault(_Feather);

  var _FontAwesome = require(_dependencyMap[6], "react-native-vector-icons/FontAwesome");

  var _FontAwesome2 = _interopRequireDefault(_FontAwesome);

  var _Foundation = require(_dependencyMap[7], "react-native-vector-icons/Foundation");

  var _Foundation2 = _interopRequireDefault(_Foundation);

  var _MaterialIcons = require(_dependencyMap[8], "react-native-vector-icons/MaterialIcons");

  var _MaterialIcons2 = _interopRequireDefault(_MaterialIcons);

  var _MaterialCommunityIcons = require(_dependencyMap[9], "react-native-vector-icons/MaterialCommunityIcons");

  var _MaterialCommunityIcons2 = _interopRequireDefault(_MaterialCommunityIcons);

  var _Octicons = require(_dependencyMap[10], "react-native-vector-icons/Octicons");

  var _Octicons2 = _interopRequireDefault(_Octicons);

  var _Zocial = require(_dependencyMap[11], "react-native-vector-icons/Zocial");

  var _Zocial2 = _interopRequireDefault(_Zocial);

  var _SimpleLineIcons = require(_dependencyMap[12], "react-native-vector-icons/SimpleLineIcons");

  var _SimpleLineIcons2 = _interopRequireDefault(_SimpleLineIcons);

  var _EvilIcons = require(_dependencyMap[13], "react-native-vector-icons/EvilIcons");

  var _EvilIcons2 = _interopRequireDefault(_EvilIcons);

  var _mapPropsToStyleNames = require(_dependencyMap[14], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var IconNB = function (_Component) {
    _inherits(IconNB, _Component);

    function IconNB() {
      _classCallCheck(this, IconNB);

      return _possibleConstructorReturn(this, (IconNB.__proto__ || Object.getPrototypeOf(IconNB)).apply(this, arguments));
    }

    _createClass(IconNB, [{
      key: "setIcon",
      value: function setIcon(iconType) {
        if (iconType == undefined && this.context.theme) {
          iconType = this.context.theme["@@shoutem.theme/themeStyle"].variables.iconFamily;
        }

        switch (iconType) {
          case "Ionicons":
            this.Icon = _Ionicons2.default;
            break;

          case "Entypo":
            this.Icon = _Entypo2.default;
            break;

          case "FontAwesome":
            this.Icon = _FontAwesome2.default;
            break;

          case "Foundation":
            this.Icon = _Foundation2.default;
            break;

          case "MaterialIcons":
            this.Icon = _MaterialIcons2.default;
            break;

          case "MaterialCommunityIcons":
            this.Icon = _MaterialCommunityIcons2.default;
            break;

          case "Octicons":
            this.Icon = _Octicons2.default;
            break;

          case "Zocial":
            this.Icon = _Zocial2.default;
            break;

          case "SimpleLineIcons":
            this.Icon = _SimpleLineIcons2.default;
            break;

          default:
            this.Icon = _Ionicons2.default;
        }
      }
    }, {
      key: "componentWillMount",
      value: function componentWillMount() {
        this.setIcon(this.props.type);
      }
    }, {
      key: "componentWillUpdate",
      value: function componentWillUpdate(nextProps, nextState) {
        if (nextProps.type && this.props.type != nextProps.type) {
          this.setIcon(nextProps.type);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(this.Icon, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 73
          }
        }));
      }
    }]);

    return IconNB;
  }(_react.Component);

  IconNB.contextTypes = {
    theme: _propTypes2.default.object
  };
  IconNB.propTypes = {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
    type: _propTypes2.default.oneOf(["Ionicons", "Entypo", "FontAwesome", "Foundation", "MaterialIcons", "MaterialCommunityIcons", "Octicons", "Zocial", "SimpleLineIcons"])
  };
  var StyledIconNB = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.IconNB", {}, _mapPropsToStyleNames2.default)(IconNB);
  exports.IconNB = StyledIconNB;
},492,[108,127,404,493,599,601,603,605,607,609,611,613,615,617,482],"native-base/dist/src/basic/IconNB.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  var _Ionicons = require(_dependencyMap[1], "./glyphmaps/Ionicons.json");

  var _Ionicons2 = babelHelpers.interopRequireDefault(_Ionicons);

  var iconSet = (0, _createIconSet2.default)(_Ionicons2.default, 'Ionicons', 'Ionicons.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},493,[494,598],"react-native-vector-icons/Ionicons.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/native-base/node_modules/react-native-vector-icons/lib/create-icon-set.js";
  exports.default = createIconSet;

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "./react-native");

  var _iconButton = require(_dependencyMap[3], "./icon-button");

  var _iconButton2 = babelHelpers.interopRequireDefault(_iconButton);

  var _tabBarItemIos = require(_dependencyMap[4], "./tab-bar-item-ios");

  var _tabBarItemIos2 = babelHelpers.interopRequireDefault(_tabBarItemIos);

  var _toolbarAndroid = require(_dependencyMap[5], "./toolbar-android");

  var _toolbarAndroid2 = babelHelpers.interopRequireDefault(_toolbarAndroid);

  var NativeIconAPI = _reactNative.NativeModules.RNVectorIconsManager || _reactNative.NativeModules.RNVectorIconsModule;
  var DEFAULT_ICON_SIZE = 12;
  var DEFAULT_ICON_COLOR = 'black';

  function createIconSet(glyphMap, fontFamily, fontFile) {
    var fontReference = fontFamily;

    if (_reactNative.Platform.OS === 'android' && fontFile) {
      fontReference = fontFile.replace(/\.(otf|ttf)$/, '');
    }

    if (_reactNative.Platform.OS === 'windows' && fontFile) {
      fontReference = "Assets/" + fontFile + "#" + fontFamily;
    }

    var IconNamePropType = _propTypes2.default.oneOf(Object.keys(glyphMap));

    var Icon = function (_PureComponent) {
      babelHelpers.inherits(Icon, _PureComponent);

      function Icon() {
        var _ref;

        var _temp, _this, _ret;

        babelHelpers.classCallCheck(this, Icon);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = Icon.__proto__ || Object.getPrototypeOf(Icon)).call.apply(_ref, [this].concat(args))), _this), _this.root = null, _this.handleRef = function (ref) {
          _this.root = ref;
        }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
      }

      babelHelpers.createClass(Icon, [{
        key: "setNativeProps",
        value: function setNativeProps(nativeProps) {
          if (this.root) {
            this.root.setNativeProps(nativeProps);
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _props = this.props,
              name = _props.name,
              size = _props.size,
              color = _props.color,
              style = _props.style,
              props = babelHelpers.objectWithoutProperties(_props, ["name", "size", "color", "style"]);
          var glyph = name ? glyphMap[name] || '?' : '';

          if (typeof glyph === 'number') {
            glyph = String.fromCharCode(glyph);
          }

          var styleDefaults = {
            fontSize: size,
            color: color
          };
          var styleOverrides = {
            fontFamily: fontReference,
            fontWeight: 'normal',
            fontStyle: 'normal'
          };
          props.style = [styleDefaults, style, styleOverrides];
          props.ref = this.handleRef;
          return _react2.default.createElement(
            _reactNative.Text,
            babelHelpers.extends({}, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 82
              }
            }),
            glyph,
            this.props.children
          );
        }
      }]);
      return Icon;
    }(_react.PureComponent);

    Icon.propTypes = {
      name: IconNamePropType,
      size: _propTypes2.default.number,
      color: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
      children: _propTypes2.default.node,
      style: _propTypes2.default.any
    };
    Icon.defaultProps = {
      size: DEFAULT_ICON_SIZE,
      allowFontScaling: false
    };
    var imageSourceCache = {};

    function ensureNativeModuleAvailable() {
      if (!NativeIconAPI) {
        if (_reactNative.Platform.OS === 'android') {
          throw new Error('RNVectorIconsModule not available, did you properly integrate the module? Try running `react-native link react-native-vector-icons` and recompiling.');
        }

        throw new Error('RNVectorIconsManager not available, did you add the library to your project and link with libRNVectorIcons.a? Try running `react-native link react-native-vector-icons` and recompiling.');
      }
    }

    function getImageSource(name) {
      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;
      var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;
      ensureNativeModuleAvailable();
      var glyph = glyphMap[name] || '?';

      if (typeof glyph === 'number') {
        glyph = String.fromCharCode(glyph);
      }

      var processedColor = (0, _reactNative.processColor)(color);
      var cacheKey = glyph + ":" + size + ":" + processedColor;

      var scale = _reactNative.PixelRatio.get();

      return new Promise(function (resolve, reject) {
        var cached = imageSourceCache[cacheKey];

        if (typeof cached !== 'undefined') {
          if (!cached || cached instanceof Error) {
            reject(cached);
          } else {
            resolve({
              uri: cached,
              scale: scale
            });
          }
        } else {
          NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor, function (err, image) {
            var error = typeof err === 'string' ? new Error(err) : err;
            imageSourceCache[cacheKey] = image || error || false;

            if (!error && image) {
              resolve({
                uri: image,
                scale: scale
              });
            } else {
              reject(error);
            }
          });
        }
      });
    }

    function loadFont() {
      var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : fontFile;

      if (_reactNative.Platform.OS === 'ios') {
        ensureNativeModuleAvailable();

        if (!file) {
          return Promise.reject(new Error('Unable to load font, because no file was specified. '));
        }

        return NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI, babelHelpers.toConsumableArray(file.split('.')));
      }

      return Promise.resolve();
    }

    Icon.Button = (0, _iconButton2.default)(Icon);
    Icon.TabBarItem = (0, _tabBarItemIos2.default)(IconNamePropType, getImageSource);
    Icon.TabBarItemIOS = Icon.TabBarItem;
    Icon.ToolbarAndroid = (0, _toolbarAndroid2.default)(IconNamePropType, getImageSource);
    Icon.getImageSource = getImageSource;
    Icon.loadFont = loadFont;
    return Icon;
  }
},494,[108,127,495,496,570,597],"react-native-vector-icons/lib/create-icon-set.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  Object.keys(_reactNative).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _reactNative[key];
      }
    });
  });
},495,[12],"react-native-vector-icons/lib/react-native.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/native-base/node_modules/react-native-vector-icons/lib/icon-button.js";
  exports.default = createIconButtonComponent;

  var _isString = require(_dependencyMap[0], "lodash/isString");

  var _isString2 = babelHelpers.interopRequireDefault(_isString);

  var _omit = require(_dependencyMap[1], "lodash/omit");

  var _omit2 = babelHelpers.interopRequireDefault(_omit);

  var _pick = require(_dependencyMap[2], "lodash/pick");

  var _pick2 = babelHelpers.interopRequireDefault(_pick);

  var _react = require(_dependencyMap[3], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[4], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[5], "./react-native");

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row',
      justifyContent: 'flex-start',
      alignItems: 'center',
      padding: 8
    },
    touchable: {
      overflow: 'hidden'
    },
    icon: {
      marginRight: 10
    },
    text: {
      fontWeight: '600',
      backgroundColor: 'transparent'
    }
  });

  var IOS7_BLUE = '#007AFF';

  function createIconButtonComponent(Icon) {
    var _class, _temp;

    return _temp = _class = function (_PureComponent) {
      babelHelpers.inherits(IconButton, _PureComponent);

      function IconButton() {
        babelHelpers.classCallCheck(this, IconButton);
        return babelHelpers.possibleConstructorReturn(this, (IconButton.__proto__ || Object.getPrototypeOf(IconButton)).apply(this, arguments));
      }

      babelHelpers.createClass(IconButton, [{
        key: "render",
        value: function render() {
          var _props = this.props,
              style = _props.style,
              iconStyle = _props.iconStyle,
              children = _props.children,
              restProps = babelHelpers.objectWithoutProperties(_props, ["style", "iconStyle", "children"]);
          var iconProps = (0, _pick2.default)(restProps, Object.keys(_reactNative.Text.propTypes), 'style', 'name', 'size', 'color');
          var touchableProps = (0, _pick2.default)(restProps, Object.keys(_reactNative.TouchableHighlight.propTypes));
          var props = (0, _omit2.default)(restProps, Object.keys(iconProps), Object.keys(touchableProps), 'iconStyle', 'borderRadius', 'backgroundColor');
          iconProps.style = iconStyle ? [styles.icon, iconStyle] : styles.icon;
          var colorStyle = (0, _pick2.default)(this.props, 'color');
          var blockStyle = (0, _pick2.default)(this.props, 'backgroundColor', 'borderRadius');
          return _react2.default.createElement(
            _reactNative.TouchableHighlight,
            babelHelpers.extends({
              style: [styles.touchable, blockStyle]
            }, touchableProps, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 80
              }
            }),
            _react2.default.createElement(
              _reactNative.View,
              babelHelpers.extends({
                style: [styles.container, blockStyle, style]
              }, props, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 84
                }
              }),
              _react2.default.createElement(Icon, babelHelpers.extends({}, iconProps, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 85
                }
              })),
              (0, _isString2.default)(children) ? _react2.default.createElement(
                _reactNative.Text,
                {
                  style: [styles.text, colorStyle],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 87
                  }
                },
                children
              ) : children
            )
          );
        }
      }]);
      return IconButton;
    }(_react.PureComponent), _class.propTypes = {
      backgroundColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
      borderRadius: _propTypes2.default.number,
      color: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
      size: _propTypes2.default.number,
      iconStyle: _propTypes2.default.any,
      style: _propTypes2.default.any,
      children: _propTypes2.default.node
    }, _class.defaultProps = {
      backgroundColor: IOS7_BLUE,
      borderRadius: 5,
      color: 'white',
      size: 20
    }, _temp;
  }
},496,[497,500,569,108,127,495],"react-native-vector-icons/lib/icon-button.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isArray = require(_dependencyMap[0], './isArray'),
      isObjectLike = require(_dependencyMap[1], './isObjectLike');

  var stringTag = '[object String]';
  var objectProto = Object.prototype;
  var objectToString = objectProto.toString;

  function isString(value) {
    return typeof value == 'string' || !isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag;
  }

  module.exports = isString;
},497,[498,499],"lodash/isString.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isArray = Array.isArray;
  module.exports = isArray;
},498,[],"lodash/isArray.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  module.exports = isObjectLike;
},499,[],"lodash/isObjectLike.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var arrayMap = require(_dependencyMap[0], './_arrayMap'),
      baseDifference = require(_dependencyMap[1], './_baseDifference'),
      baseFlatten = require(_dependencyMap[2], './_baseFlatten'),
      basePick = require(_dependencyMap[3], './_basePick'),
      getAllKeysIn = require(_dependencyMap[4], './_getAllKeysIn'),
      rest = require(_dependencyMap[5], './rest'),
      toKey = require(_dependencyMap[6], './_toKey');

  var omit = rest(function (object, props) {
    if (object == null) {
      return {};
    }

    props = arrayMap(baseFlatten(props, 1), toKey);
    return basePick(object, baseDifference(getAllKeysIn(object), props));
  });
  module.exports = omit;
},500,[501,502,539,548,550,563,568],"lodash/omit.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }

    return result;
  }

  module.exports = arrayMap;
},501,[],"lodash/_arrayMap.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var SetCache = require(_dependencyMap[0], './_SetCache'),
      arrayIncludes = require(_dependencyMap[1], './_arrayIncludes'),
      arrayIncludesWith = require(_dependencyMap[2], './_arrayIncludesWith'),
      arrayMap = require(_dependencyMap[3], './_arrayMap'),
      baseUnary = require(_dependencyMap[4], './_baseUnary'),
      cacheHas = require(_dependencyMap[5], './_cacheHas');

  var LARGE_ARRAY_SIZE = 200;

  function baseDifference(array, values, iteratee, comparator) {
    var index = -1,
        includes = arrayIncludes,
        isCommon = true,
        length = array.length,
        result = [],
        valuesLength = values.length;

    if (!length) {
      return result;
    }

    if (iteratee) {
      values = arrayMap(values, baseUnary(iteratee));
    }

    if (comparator) {
      includes = arrayIncludesWith;
      isCommon = false;
    } else if (values.length >= LARGE_ARRAY_SIZE) {
      includes = cacheHas;
      isCommon = false;
      values = new SetCache(values);
    }

    outer: while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value) : value;
      value = comparator || value !== 0 ? value : 0;

      if (isCommon && computed === computed) {
        var valuesIndex = valuesLength;

        while (valuesIndex--) {
          if (values[valuesIndex] === computed) {
            continue outer;
          }
        }

        result.push(value);
      } else if (!includes(values, computed, comparator)) {
        result.push(value);
      }
    }

    return result;
  }

  module.exports = baseDifference;
},502,[503,533,536,501,537,538],"lodash/_baseDifference.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var MapCache = require(_dependencyMap[0], './_MapCache'),
      cachePush = require(_dependencyMap[1], './_cachePush');

  function SetCache(values) {
    var index = -1,
        length = values ? values.length : 0;
    this.__data__ = new MapCache();

    while (++index < length) {
      this.push(values[index]);
    }
  }

  SetCache.prototype.push = cachePush;
  module.exports = SetCache;
},503,[504,532],"lodash/_SetCache.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var mapClear = require(_dependencyMap[0], './_mapClear'),
        mapDelete = require(_dependencyMap[1], './_mapDelete'),
        mapGet = require(_dependencyMap[2], './_mapGet'),
        mapHas = require(_dependencyMap[3], './_mapHas'),
        mapSet = require(_dependencyMap[4], './_mapSet');

    function MapCache(values) {
        var index = -1,
            length = values ? values.length : 0;
        this.clear();

        while (++index < length) {
            var entry = values[index];
            this.set(entry[0], entry[1]);
        }
    }

    MapCache.prototype.clear = mapClear;
    MapCache.prototype['delete'] = mapDelete;
    MapCache.prototype.get = mapGet;
    MapCache.prototype.has = mapHas;
    MapCache.prototype.set = mapSet;
    module.exports = MapCache;
},504,[505,517,524,527,529],"lodash/_MapCache.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var Hash = require(_dependencyMap[0], './_Hash'),
      Map = require(_dependencyMap[1], './_Map');

  function mapClear() {
    this.__data__ = {
      'hash': new Hash(),
      'map': Map ? new Map() : [],
      'string': new Hash()
    };
  }

  module.exports = mapClear;
},505,[506,514],"lodash/_mapClear.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var nativeCreate = require(_dependencyMap[0], './_nativeCreate');

  var objectProto = Object.prototype;

  function Hash() {}

  Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;
  module.exports = Hash;
},506,[507],"lodash/_Hash.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var getNative = require(_dependencyMap[0], './_getNative');

  var nativeCreate = getNative(Object, 'create');
  module.exports = nativeCreate;
},507,[508],"lodash/_nativeCreate.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isNative = require(_dependencyMap[0], './isNative');

  function getNative(object, key) {
    var value = object[key];
    return isNative(value) ? value : undefined;
  }

  module.exports = getNative;
},508,[509],"lodash/_getNative.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isFunction = require(_dependencyMap[0], './isFunction'),
      isHostObject = require(_dependencyMap[1], './_isHostObject'),
      isObject = require(_dependencyMap[2], './isObject'),
      toSource = require(_dependencyMap[3], './_toSource');

  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var objectProto = Object.prototype;
  var funcToString = Function.prototype.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

  function isNative(value) {
    if (!isObject(value)) {
      return false;
    }

    var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  module.exports = isNative;
},509,[510,512,511,513],"lodash/isNative.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isObject = require(_dependencyMap[0], './isObject');

  var funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]';
  var objectProto = Object.prototype;
  var objectToString = objectProto.toString;

  function isFunction(value) {
    var tag = isObject(value) ? objectToString.call(value) : '';
    return tag == funcTag || tag == genTag;
  }

  module.exports = isFunction;
},510,[511],"lodash/isFunction.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  module.exports = isObject;
},511,[],"lodash/isObject.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function isHostObject(value) {
    var result = false;

    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }

    return result;
  }

  module.exports = isHostObject;
},512,[],"lodash/_isHostObject.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var funcToString = Function.prototype.toString;

  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}

      try {
        return func + '';
      } catch (e) {}
    }

    return '';
  }

  module.exports = toSource;
},513,[],"lodash/_toSource.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var getNative = require(_dependencyMap[0], './_getNative'),
        root = require(_dependencyMap[1], './_root');

    var Map = getNative(root, 'Map');
    module.exports = Map;
},514,[508,515],"lodash/_Map.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var checkGlobal = require(_dependencyMap[0], './_checkGlobal');

  var objectTypes = {
    'function': true,
    'object': true
  };
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType ? exports : undefined;
  var freeModule = objectTypes[typeof module] && module && !module.nodeType ? module : undefined;
  var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);
  var freeSelf = checkGlobal(objectTypes[typeof self] && self);
  var freeWindow = checkGlobal(objectTypes[typeof window] && window);
  var thisGlobal = checkGlobal(objectTypes[typeof this] && this);
  var root = freeGlobal || freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow || freeSelf || thisGlobal || Function('return this')();
  module.exports = root;
},515,[516],"lodash/_root.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function checkGlobal(value) {
    return value && value.Object === Object ? value : null;
  }

  module.exports = checkGlobal;
},516,[],"lodash/_checkGlobal.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var Map = require(_dependencyMap[0], './_Map'),
      assocDelete = require(_dependencyMap[1], './_assocDelete'),
      hashDelete = require(_dependencyMap[2], './_hashDelete'),
      isKeyable = require(_dependencyMap[3], './_isKeyable');

  function mapDelete(key) {
    var data = this.__data__;

    if (isKeyable(key)) {
      return hashDelete(typeof key == 'string' ? data.string : data.hash, key);
    }

    return Map ? data.map['delete'](key) : assocDelete(data.map, key);
  }

  module.exports = mapDelete;
},517,[514,518,521,523],"lodash/_mapDelete.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var assocIndexOf = require(_dependencyMap[0], './_assocIndexOf');

  var arrayProto = Array.prototype;
  var splice = arrayProto.splice;

  function assocDelete(array, key) {
    var index = assocIndexOf(array, key);

    if (index < 0) {
      return false;
    }

    var lastIndex = array.length - 1;

    if (index == lastIndex) {
      array.pop();
    } else {
      splice.call(array, index, 1);
    }

    return true;
  }

  module.exports = assocDelete;
},518,[519],"lodash/_assocDelete.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var eq = require(_dependencyMap[0], './eq');

  function assocIndexOf(array, key) {
    var length = array.length;

    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }

    return -1;
  }

  module.exports = assocIndexOf;
},519,[520],"lodash/_assocIndexOf.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }

  module.exports = eq;
},520,[],"lodash/eq.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var hashHas = require(_dependencyMap[0], './_hashHas');

  function hashDelete(hash, key) {
    return hashHas(hash, key) && delete hash[key];
  }

  module.exports = hashDelete;
},521,[522],"lodash/_hashDelete.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var nativeCreate = require(_dependencyMap[0], './_nativeCreate');

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function hashHas(hash, key) {
    return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);
  }

  module.exports = hashHas;
},522,[507],"lodash/_hashHas.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function isKeyable(value) {
    var type = typeof value;
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  module.exports = isKeyable;
},523,[],"lodash/_isKeyable.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var Map = require(_dependencyMap[0], './_Map'),
      assocGet = require(_dependencyMap[1], './_assocGet'),
      hashGet = require(_dependencyMap[2], './_hashGet'),
      isKeyable = require(_dependencyMap[3], './_isKeyable');

  function mapGet(key) {
    var data = this.__data__;

    if (isKeyable(key)) {
      return hashGet(typeof key == 'string' ? data.string : data.hash, key);
    }

    return Map ? data.map.get(key) : assocGet(data.map, key);
  }

  module.exports = mapGet;
},524,[514,525,526,523],"lodash/_mapGet.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var assocIndexOf = require(_dependencyMap[0], './_assocIndexOf');

  function assocGet(array, key) {
    var index = assocIndexOf(array, key);
    return index < 0 ? undefined : array[index][1];
  }

  module.exports = assocGet;
},525,[519],"lodash/_assocGet.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var nativeCreate = require(_dependencyMap[0], './_nativeCreate');

  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function hashGet(hash, key) {
    if (nativeCreate) {
      var result = hash[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }

    return hasOwnProperty.call(hash, key) ? hash[key] : undefined;
  }

  module.exports = hashGet;
},526,[507],"lodash/_hashGet.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var Map = require(_dependencyMap[0], './_Map'),
      assocHas = require(_dependencyMap[1], './_assocHas'),
      hashHas = require(_dependencyMap[2], './_hashHas'),
      isKeyable = require(_dependencyMap[3], './_isKeyable');

  function mapHas(key) {
    var data = this.__data__;

    if (isKeyable(key)) {
      return hashHas(typeof key == 'string' ? data.string : data.hash, key);
    }

    return Map ? data.map.has(key) : assocHas(data.map, key);
  }

  module.exports = mapHas;
},527,[514,528,522,523],"lodash/_mapHas.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var assocIndexOf = require(_dependencyMap[0], './_assocIndexOf');

  function assocHas(array, key) {
    return assocIndexOf(array, key) > -1;
  }

  module.exports = assocHas;
},528,[519],"lodash/_assocHas.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var Map = require(_dependencyMap[0], './_Map'),
      assocSet = require(_dependencyMap[1], './_assocSet'),
      hashSet = require(_dependencyMap[2], './_hashSet'),
      isKeyable = require(_dependencyMap[3], './_isKeyable');

  function mapSet(key, value) {
    var data = this.__data__;

    if (isKeyable(key)) {
      hashSet(typeof key == 'string' ? data.string : data.hash, key, value);
    } else if (Map) {
      data.map.set(key, value);
    } else {
      assocSet(data.map, key, value);
    }

    return this;
  }

  module.exports = mapSet;
},529,[514,530,531,523],"lodash/_mapSet.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var assocIndexOf = require(_dependencyMap[0], './_assocIndexOf');

  function assocSet(array, key, value) {
    var index = assocIndexOf(array, key);

    if (index < 0) {
      array.push([key, value]);
    } else {
      array[index][1] = value;
    }
  }

  module.exports = assocSet;
},530,[519],"lodash/_assocSet.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var nativeCreate = require(_dependencyMap[0], './_nativeCreate');

  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  function hashSet(hash, key, value) {
    hash[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
  }

  module.exports = hashSet;
},531,[507],"lodash/_hashSet.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isKeyable = require(_dependencyMap[0], './_isKeyable');

  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  function cachePush(value) {
    var map = this.__data__;

    if (isKeyable(value)) {
      var data = map.__data__,
          hash = typeof value == 'string' ? data.string : data.hash;
      hash[value] = HASH_UNDEFINED;
    } else {
      map.set(value, HASH_UNDEFINED);
    }
  }

  module.exports = cachePush;
},532,[523],"lodash/_cachePush.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseIndexOf = require(_dependencyMap[0], './_baseIndexOf');

  function arrayIncludes(array, value) {
    return !!array.length && baseIndexOf(array, value, 0) > -1;
  }

  module.exports = arrayIncludes;
},533,[534],"lodash/_arrayIncludes.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var indexOfNaN = require(_dependencyMap[0], './_indexOfNaN');

  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }

    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }

    return -1;
  }

  module.exports = baseIndexOf;
},534,[535],"lodash/_baseIndexOf.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 0 : -1);

    while (fromRight ? index-- : ++index < length) {
      var other = array[index];

      if (other !== other) {
        return index;
      }
    }

    return -1;
  }

  module.exports = indexOfNaN;
},535,[],"lodash/_indexOfNaN.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }

    return false;
  }

  module.exports = arrayIncludesWith;
},536,[],"lodash/_arrayIncludesWith.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  module.exports = baseUnary;
},537,[],"lodash/_baseUnary.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isKeyable = require(_dependencyMap[0], './_isKeyable');

  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  function cacheHas(cache, value) {
    var map = cache.__data__;

    if (isKeyable(value)) {
      var data = map.__data__,
          hash = typeof value == 'string' ? data.string : data.hash;
      return hash[value] === HASH_UNDEFINED;
    }

    return map.has(value);
  }

  module.exports = cacheHas;
},538,[523],"lodash/_cacheHas.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var arrayPush = require(_dependencyMap[0], './_arrayPush'),
      isFlattenable = require(_dependencyMap[1], './_isFlattenable');

  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);

    while (++index < length) {
      var value = array[index];

      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }

    return result;
  }

  module.exports = baseFlatten;
},539,[540,541],"lodash/_baseFlatten.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }

    return array;
  }

  module.exports = arrayPush;
},540,[],"lodash/_arrayPush.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isArguments = require(_dependencyMap[0], './isArguments'),
      isArray = require(_dependencyMap[1], './isArray'),
      isArrayLikeObject = require(_dependencyMap[2], './isArrayLikeObject');

  function isFlattenable(value) {
    return isArrayLikeObject(value) && (isArray(value) || isArguments(value));
  }

  module.exports = isFlattenable;
},541,[542,498,543],"lodash/_isFlattenable.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isArrayLikeObject = require(_dependencyMap[0], './isArrayLikeObject');

  var argsTag = '[object Arguments]';
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;

  function isArguments(value) {
    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
  }

  module.exports = isArguments;
},542,[543],"lodash/isArguments.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isArrayLike = require(_dependencyMap[0], './isArrayLike'),
      isObjectLike = require(_dependencyMap[1], './isObjectLike');

  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  module.exports = isArrayLikeObject;
},543,[544,499],"lodash/isArrayLikeObject.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var getLength = require(_dependencyMap[0], './_getLength'),
      isFunction = require(_dependencyMap[1], './isFunction'),
      isLength = require(_dependencyMap[2], './isLength');

  function isArrayLike(value) {
    return value != null && isLength(getLength(value)) && !isFunction(value);
  }

  module.exports = isArrayLike;
},544,[545,510,547],"lodash/isArrayLike.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseProperty = require(_dependencyMap[0], './_baseProperty');

  var getLength = baseProperty('length');
  module.exports = getLength;
},545,[546],"lodash/_getLength.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function baseProperty(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }

  module.exports = baseProperty;
},546,[],"lodash/_baseProperty.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var MAX_SAFE_INTEGER = 9007199254740991;

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  module.exports = isLength;
},547,[],"lodash/isLength.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var arrayReduce = require(_dependencyMap[0], './_arrayReduce');

  function basePick(object, props) {
    object = Object(object);
    return arrayReduce(props, function (result, key) {
      if (key in object) {
        result[key] = object[key];
      }

      return result;
    }, {});
  }

  module.exports = basePick;
},548,[549],"lodash/_basePick.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }

    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }

    return accumulator;
  }

  module.exports = arrayReduce;
},549,[],"lodash/_arrayReduce.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseGetAllKeys = require(_dependencyMap[0], './_baseGetAllKeys'),
      getSymbolsIn = require(_dependencyMap[1], './_getSymbolsIn'),
      keysIn = require(_dependencyMap[2], './keysIn');

  function getAllKeysIn(object) {
    return baseGetAllKeys(object, keysIn, getSymbolsIn);
  }

  module.exports = getAllKeysIn;
},550,[551,552,555],"lodash/_getAllKeysIn.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var arrayPush = require(_dependencyMap[0], './_arrayPush'),
        isArray = require(_dependencyMap[1], './isArray');

    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    module.exports = baseGetAllKeys;
},551,[540,498],"lodash/_baseGetAllKeys.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var arrayPush = require(_dependencyMap[0], './_arrayPush'),
      getPrototype = require(_dependencyMap[1], './_getPrototype'),
      getSymbols = require(_dependencyMap[2], './_getSymbols');

  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var getSymbolsIn = !getOwnPropertySymbols ? getSymbols : function (object) {
    var result = [];

    while (object) {
      arrayPush(result, getSymbols(object));
      object = getPrototype(object);
    }

    return result;
  };
  module.exports = getSymbolsIn;
},552,[540,553,554],"lodash/_getSymbolsIn.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var nativeGetPrototype = Object.getPrototypeOf;

  function getPrototype(value) {
    return nativeGetPrototype(Object(value));
  }

  module.exports = getPrototype;
},553,[],"lodash/_getPrototype.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;

  function getSymbols(object) {
    return getOwnPropertySymbols(Object(object));
  }

  if (!getOwnPropertySymbols) {
    getSymbols = function getSymbols() {
      return [];
    };
  }

  module.exports = getSymbols;
},554,[],"lodash/_getSymbols.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseKeysIn = require(_dependencyMap[0], './_baseKeysIn'),
      indexKeys = require(_dependencyMap[1], './_indexKeys'),
      isIndex = require(_dependencyMap[2], './_isIndex'),
      isPrototype = require(_dependencyMap[3], './_isPrototype');

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function keysIn(object) {
    var index = -1,
        isProto = isPrototype(object),
        props = baseKeysIn(object),
        propsLength = props.length,
        indexes = indexKeys(object),
        skipIndexes = !!indexes,
        result = indexes || [],
        length = result.length;

    while (++index < propsLength) {
      var key = props[index];

      if (!(skipIndexes && (key == 'length' || isIndex(key, length))) && !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = keysIn;
},555,[556,559,561,562],"lodash/keysIn.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var Reflect = require(_dependencyMap[0], './_Reflect'),
      iteratorToArray = require(_dependencyMap[1], './_iteratorToArray');

  var objectProto = Object.prototype;
  var enumerate = Reflect ? Reflect.enumerate : undefined,
      propertyIsEnumerable = objectProto.propertyIsEnumerable;

  function baseKeysIn(object) {
    object = object == null ? object : Object(object);
    var result = [];

    for (var key in object) {
      result.push(key);
    }

    return result;
  }

  if (enumerate && !propertyIsEnumerable.call({
    'valueOf': 1
  }, 'valueOf')) {
    baseKeysIn = function baseKeysIn(object) {
      return iteratorToArray(enumerate(object));
    };
  }

  module.exports = baseKeysIn;
},556,[557,558],"lodash/_baseKeysIn.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var root = require(_dependencyMap[0], './_root');

  var Reflect = root.Reflect;
  module.exports = Reflect;
},557,[515],"lodash/_Reflect.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }

    return result;
  }

  module.exports = iteratorToArray;
},558,[],"lodash/_iteratorToArray.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseTimes = require(_dependencyMap[0], './_baseTimes'),
      isArguments = require(_dependencyMap[1], './isArguments'),
      isArray = require(_dependencyMap[2], './isArray'),
      isLength = require(_dependencyMap[3], './isLength'),
      isString = require(_dependencyMap[4], './isString');

  function indexKeys(object) {
    var length = object ? object.length : undefined;

    if (isLength(length) && (isArray(object) || isString(object) || isArguments(object))) {
      return baseTimes(length, String);
    }

    return null;
  }

  module.exports = indexKeys;
},559,[560,542,498,547,497],"lodash/_indexKeys.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }

    return result;
  }

  module.exports = baseTimes;
},560,[],"lodash/_baseTimes.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var MAX_SAFE_INTEGER = 9007199254740991;
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  module.exports = isIndex;
},561,[],"lodash/_isIndex.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var objectProto = Object.prototype;

  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
  }

  module.exports = isPrototype;
},562,[],"lodash/_isPrototype.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var apply = require(_dependencyMap[0], './_apply'),
      toInteger = require(_dependencyMap[1], './toInteger');

  var FUNC_ERROR_TEXT = 'Expected a function';
  var nativeMax = Math.max;

  function rest(func, start) {
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }

    start = nativeMax(start === undefined ? func.length - 1 : toInteger(start), 0);
    return function () {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }

      switch (start) {
        case 0:
          return func.call(this, array);

        case 1:
          return func.call(this, args[0], array);

        case 2:
          return func.call(this, args[0], args[1], array);
      }

      var otherArgs = Array(start + 1);
      index = -1;

      while (++index < start) {
        otherArgs[index] = args[index];
      }

      otherArgs[start] = array;
      return apply(func, this, otherArgs);
    };
  }

  module.exports = rest;
},563,[564,565],"lodash/rest.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function apply(func, thisArg, args) {
    var length = args.length;

    switch (length) {
      case 0:
        return func.call(thisArg);

      case 1:
        return func.call(thisArg, args[0]);

      case 2:
        return func.call(thisArg, args[0], args[1]);

      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }

    return func.apply(thisArg, args);
  }

  module.exports = apply;
},564,[],"lodash/_apply.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var toNumber = require(_dependencyMap[0], './toNumber');

  var INFINITY = 1 / 0,
      MAX_INTEGER = 1.7976931348623157e+308;

  function toInteger(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }

    value = toNumber(value);

    if (value === INFINITY || value === -INFINITY) {
      var sign = value < 0 ? -1 : 1;
      return sign * MAX_INTEGER;
    }

    var remainder = value % 1;
    return value === value ? remainder ? value - remainder : value : 0;
  }

  module.exports = toInteger;
},565,[566],"lodash/toInteger.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isFunction = require(_dependencyMap[0], './isFunction'),
      isObject = require(_dependencyMap[1], './isObject'),
      isSymbol = require(_dependencyMap[2], './isSymbol');

  var NAN = 0 / 0;
  var reTrim = /^\s+|\s+$/g;
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  var reIsBinary = /^0b[01]+$/i;
  var reIsOctal = /^0o[0-7]+$/i;
  var freeParseInt = parseInt;

  function toNumber(value) {
    if (typeof value == 'number') {
      return value;
    }

    if (isSymbol(value)) {
      return NAN;
    }

    if (isObject(value)) {
      var other = isFunction(value.valueOf) ? value.valueOf() : value;
      value = isObject(other) ? other + '' : other;
    }

    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }

    value = value.replace(reTrim, '');
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }

  module.exports = toNumber;
},566,[510,511,567],"lodash/toNumber.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isObjectLike = require(_dependencyMap[0], './isObjectLike');

  var symbolTag = '[object Symbol]';
  var objectProto = Object.prototype;
  var objectToString = objectProto.toString;

  function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
  }

  module.exports = isSymbol;
},567,[499],"lodash/isSymbol.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isSymbol = require(_dependencyMap[0], './isSymbol');

  var INFINITY = 1 / 0;

  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  }

  module.exports = toKey;
},568,[567],"lodash/_toKey.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var arrayMap = require(_dependencyMap[0], './_arrayMap'),
      baseFlatten = require(_dependencyMap[1], './_baseFlatten'),
      basePick = require(_dependencyMap[2], './_basePick'),
      rest = require(_dependencyMap[3], './rest'),
      toKey = require(_dependencyMap[4], './_toKey');

  var pick = rest(function (object, props) {
    return object == null ? {} : basePick(object, arrayMap(baseFlatten(props, 1), toKey));
  });
  module.exports = pick;
},569,[501,539,548,563,568],"lodash/pick.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/native-base/node_modules/react-native-vector-icons/lib/tab-bar-item-ios.js";
  exports.default = createTabBarItemIOSComponent;

  var _isEqual = require(_dependencyMap[0], "lodash/isEqual");

  var _isEqual2 = babelHelpers.interopRequireDefault(_isEqual);

  var _pick = require(_dependencyMap[1], "lodash/pick");

  var _pick2 = babelHelpers.interopRequireDefault(_pick);

  var _react = require(_dependencyMap[2], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[3], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[4], "./react-native");

  function createTabBarItemIOSComponent(IconNamePropType, getImageSource) {
    var _class, _temp;

    return _temp = _class = function (_PureComponent) {
      babelHelpers.inherits(TabBarItemIOS, _PureComponent);

      function TabBarItemIOS() {
        babelHelpers.classCallCheck(this, TabBarItemIOS);
        return babelHelpers.possibleConstructorReturn(this, (TabBarItemIOS.__proto__ || Object.getPrototypeOf(TabBarItemIOS)).apply(this, arguments));
      }

      babelHelpers.createClass(TabBarItemIOS, [{
        key: "componentWillMount",
        value: function componentWillMount() {
          this.updateIconSources(this.props);
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
          var keys = Object.keys(TabBarItemIOS.propTypes);

          if (!(0, _isEqual2.default)((0, _pick2.default)(nextProps, keys), (0, _pick2.default)(this.props, keys))) {
            this.updateIconSources(nextProps);
          }
        }
      }, {
        key: "updateIconSources",
        value: function updateIconSources(props) {
          var _this2 = this;

          if (props.iconName) {
            getImageSource(props.iconName, props.iconSize, props.iconColor).then(function (icon) {
              return _this2.setState({
                icon: icon
              });
            });
          }

          if (props.selectedIconName || props.selectedIconColor) {
            var selectedIconName = props.selectedIconName || props.iconName;
            var selectedIconColor = props.selectedIconColor || props.iconColor;
            getImageSource(selectedIconName, props.iconSize, selectedIconColor).then(function (selectedIcon) {
              return _this2.setState({
                selectedIcon: selectedIcon
              });
            });
          }
        }
      }, {
        key: "render",
        value: function render() {
          return _react2.default.createElement(_reactNative.TabBarIOS.Item, babelHelpers.extends({}, this.props, this.state, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 59
            }
          }));
        }
      }]);
      return TabBarItemIOS;
    }(_react.PureComponent), _class.propTypes = {
      iconName: IconNamePropType.isRequired,
      selectedIconName: IconNamePropType,
      iconSize: _propTypes2.default.number,
      iconColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
      selectedIconColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
    }, _class.defaultProps = {
      iconSize: 30
    }, _temp;
  }
},570,[571,569,108,127,495],"react-native-vector-icons/lib/tab-bar-item-ios.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseIsEqual = require(_dependencyMap[0], './_baseIsEqual');

  function isEqual(value, other) {
    return baseIsEqual(value, other);
  }

  module.exports = isEqual;
},571,[572],"lodash/isEqual.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseIsEqualDeep = require(_dependencyMap[0], './_baseIsEqualDeep'),
      isObject = require(_dependencyMap[1], './isObject'),
      isObjectLike = require(_dependencyMap[2], './isObjectLike');

  function baseIsEqual(value, other, customizer, bitmask, stack) {
    if (value === other) {
      return true;
    }

    if (value == null || other == null || !isObject(value) && !isObjectLike(other)) {
      return value !== value && other !== other;
    }

    return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
  }

  module.exports = baseIsEqual;
},572,[573,511,499],"lodash/_baseIsEqual.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var Stack = require(_dependencyMap[0], './_Stack'),
      equalArrays = require(_dependencyMap[1], './_equalArrays'),
      equalByTag = require(_dependencyMap[2], './_equalByTag'),
      equalObjects = require(_dependencyMap[3], './_equalObjects'),
      getTag = require(_dependencyMap[4], './_getTag'),
      isArray = require(_dependencyMap[5], './isArray'),
      isHostObject = require(_dependencyMap[6], './_isHostObject'),
      isTypedArray = require(_dependencyMap[7], './isTypedArray');

  var PARTIAL_COMPARE_FLAG = 2;
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      objectTag = '[object Object]';
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = arrayTag,
        othTag = arrayTag;

    if (!objIsArr) {
      objTag = getTag(object);
      objTag = objTag == argsTag ? objectTag : objTag;
    }

    if (!othIsArr) {
      othTag = getTag(other);
      othTag = othTag == argsTag ? objectTag : othTag;
    }

    var objIsObj = objTag == objectTag && !isHostObject(object),
        othIsObj = othTag == objectTag && !isHostObject(other),
        isSameTag = objTag == othTag;

    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack());
      return objIsArr || isTypedArray(object) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
    }

    if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack());
        return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
      }
    }

    if (!isSameTag) {
      return false;
    }

    stack || (stack = new Stack());
    return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
  }

  module.exports = baseIsEqualDeep;
},573,[574,580,582,587,591,498,512,596],"lodash/_baseIsEqualDeep.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var stackClear = require(_dependencyMap[0], './_stackClear'),
        stackDelete = require(_dependencyMap[1], './_stackDelete'),
        stackGet = require(_dependencyMap[2], './_stackGet'),
        stackHas = require(_dependencyMap[3], './_stackHas'),
        stackSet = require(_dependencyMap[4], './_stackSet');

    function Stack(values) {
        var index = -1,
            length = values ? values.length : 0;
        this.clear();

        while (++index < length) {
            var entry = values[index];
            this.set(entry[0], entry[1]);
        }
    }

    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    module.exports = Stack;
},574,[575,576,577,578,579],"lodash/_Stack.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function stackClear() {
    this.__data__ = {
      'array': [],
      'map': null
    };
  }

  module.exports = stackClear;
},575,[],"lodash/_stackClear.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var assocDelete = require(_dependencyMap[0], './_assocDelete');

  function stackDelete(key) {
    var data = this.__data__,
        array = data.array;
    return array ? assocDelete(array, key) : data.map['delete'](key);
  }

  module.exports = stackDelete;
},576,[518],"lodash/_stackDelete.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var assocGet = require(_dependencyMap[0], './_assocGet');

  function stackGet(key) {
    var data = this.__data__,
        array = data.array;
    return array ? assocGet(array, key) : data.map.get(key);
  }

  module.exports = stackGet;
},577,[525],"lodash/_stackGet.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var assocHas = require(_dependencyMap[0], './_assocHas');

  function stackHas(key) {
    var data = this.__data__,
        array = data.array;
    return array ? assocHas(array, key) : data.map.has(key);
  }

  module.exports = stackHas;
},578,[528],"lodash/_stackHas.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var MapCache = require(_dependencyMap[0], './_MapCache'),
      assocSet = require(_dependencyMap[1], './_assocSet');

  var LARGE_ARRAY_SIZE = 200;

  function stackSet(key, value) {
    var data = this.__data__,
        array = data.array;

    if (array) {
      if (array.length < LARGE_ARRAY_SIZE - 1) {
        assocSet(array, key, value);
      } else {
        data.array = null;
        data.map = new MapCache(array);
      }
    }

    var map = data.map;

    if (map) {
      map.set(key, value);
    }

    return this;
  }

  module.exports = stackSet;
},579,[504,530],"lodash/_stackSet.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var arraySome = require(_dependencyMap[0], './_arraySome');

  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;

  function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
    var index = -1,
        isPartial = bitmask & PARTIAL_COMPARE_FLAG,
        isUnordered = bitmask & UNORDERED_COMPARE_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }

    var stacked = stack.get(array);

    if (stacked) {
      return stacked == other;
    }

    var result = true;
    stack.set(array, other);

    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }

      if (compared !== undefined) {
        if (compared) {
          continue;
        }

        result = false;
        break;
      }

      if (isUnordered) {
        if (!arraySome(other, function (othValue) {
          return arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack);
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
        result = false;
        break;
      }
    }

    stack['delete'](array);
    return result;
  }

  module.exports = equalArrays;
},580,[581],"lodash/_equalArrays.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function arraySome(array, predicate) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }

    return false;
  }

  module.exports = arraySome;
},581,[],"lodash/_arraySome.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var Symbol = require(_dependencyMap[0], './_Symbol'),
      Uint8Array = require(_dependencyMap[1], './_Uint8Array'),
      equalArrays = require(_dependencyMap[2], './_equalArrays'),
      mapToArray = require(_dependencyMap[3], './_mapToArray'),
      setToArray = require(_dependencyMap[4], './_setToArray');

  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;
  var boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]';
  var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }

        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
          return false;
        }

        return true;

      case boolTag:
      case dateTag:
        return +object == +other;

      case errorTag:
        return object.name == other.name && object.message == other.message;

      case numberTag:
        return object != +object ? other != +other : object == +other;

      case regexpTag:
      case stringTag:
        return object == other + '';

      case mapTag:
        var convert = mapToArray;

      case setTag:
        var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
        convert || (convert = setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        }

        var stacked = stack.get(object);

        if (stacked) {
          return stacked == other;
        }

        bitmask |= UNORDERED_COMPARE_FLAG;
        stack.set(object, other);
        return equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);

      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }

    }

    return false;
  }

  module.exports = equalByTag;
},582,[583,584,580,585,586],"lodash/_equalByTag.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var root = require(_dependencyMap[0], './_root');

  var Symbol = root.Symbol;
  module.exports = Symbol;
},583,[515],"lodash/_Symbol.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var root = require(_dependencyMap[0], './_root');

  var Uint8Array = root.Uint8Array;
  module.exports = Uint8Array;
},584,[515],"lodash/_Uint8Array.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);
    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  module.exports = mapToArray;
},585,[],"lodash/_mapToArray.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);
    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  module.exports = setToArray;
},586,[],"lodash/_setToArray.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseHas = require(_dependencyMap[0], './_baseHas'),
      keys = require(_dependencyMap[1], './keys');

  var PARTIAL_COMPARE_FLAG = 2;

  function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
    var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
        objProps = keys(object),
        objLength = objProps.length,
        othProps = keys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }

    var index = objLength;

    while (index--) {
      var key = objProps[index];

      if (!(isPartial ? key in other : baseHas(other, key))) {
        return false;
      }
    }

    var stacked = stack.get(object);

    if (stacked) {
      return stacked == other;
    }

    var result = true;
    stack.set(object, other);
    var skipCtor = isPartial;

    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }

      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) : compared)) {
        result = false;
        break;
      }

      skipCtor || (skipCtor = key == 'constructor');
    }

    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }

    stack['delete'](object);
    return result;
  }

  module.exports = equalObjects;
},587,[588,589],"lodash/_equalObjects.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var getPrototype = require(_dependencyMap[0], './_getPrototype');

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function baseHas(object, key) {
    return hasOwnProperty.call(object, key) || typeof object == 'object' && key in object && getPrototype(object) === null;
  }

  module.exports = baseHas;
},588,[553],"lodash/_baseHas.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseHas = require(_dependencyMap[0], './_baseHas'),
      baseKeys = require(_dependencyMap[1], './_baseKeys'),
      indexKeys = require(_dependencyMap[2], './_indexKeys'),
      isArrayLike = require(_dependencyMap[3], './isArrayLike'),
      isIndex = require(_dependencyMap[4], './_isIndex'),
      isPrototype = require(_dependencyMap[5], './_isPrototype');

  function keys(object) {
    var isProto = isPrototype(object);

    if (!(isProto || isArrayLike(object))) {
      return baseKeys(object);
    }

    var indexes = indexKeys(object),
        skipIndexes = !!indexes,
        result = indexes || [],
        length = result.length;

    for (var key in object) {
      if (baseHas(object, key) && !(skipIndexes && (key == 'length' || isIndex(key, length))) && !(isProto && key == 'constructor')) {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = keys;
},589,[588,590,559,544,561,562],"lodash/keys.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var nativeKeys = Object.keys;

  function baseKeys(object) {
    return nativeKeys(Object(object));
  }

  module.exports = baseKeys;
},590,[],"lodash/_baseKeys.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var DataView = require(_dependencyMap[0], './_DataView'),
      Map = require(_dependencyMap[1], './_Map'),
      Promise = require(_dependencyMap[2], './_Promise'),
      Set = require(_dependencyMap[3], './_Set'),
      WeakMap = require(_dependencyMap[4], './_WeakMap'),
      toSource = require(_dependencyMap[5], './_toSource');

  var mapTag = '[object Map]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      setTag = '[object Set]',
      weakMapTag = '[object WeakMap]';
  var dataViewTag = '[object DataView]';
  var objectProto = Object.prototype;
  var objectToString = objectProto.toString;
  var dataViewCtorString = toSource(DataView),
      mapCtorString = toSource(Map),
      promiseCtorString = toSource(Promise),
      setCtorString = toSource(Set),
      weakMapCtorString = toSource(WeakMap);

  function getTag(value) {
    return objectToString.call(value);
  }

  if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
    getTag = function getTag(value) {
      var result = objectToString.call(value),
          Ctor = result == objectTag ? value.constructor : undefined,
          ctorString = Ctor ? toSource(Ctor) : undefined;

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag;

          case mapCtorString:
            return mapTag;

          case promiseCtorString:
            return promiseTag;

          case setCtorString:
            return setTag;

          case weakMapCtorString:
            return weakMapTag;
        }
      }

      return result;
    };
  }

  module.exports = getTag;
},591,[592,514,593,594,595,513],"lodash/_getTag.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var getNative = require(_dependencyMap[0], './_getNative'),
        root = require(_dependencyMap[1], './_root');

    var DataView = getNative(root, 'DataView');
    module.exports = DataView;
},592,[508,515],"lodash/_DataView.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var getNative = require(_dependencyMap[0], './_getNative'),
        root = require(_dependencyMap[1], './_root');

    var Promise = getNative(root, 'Promise');
    module.exports = Promise;
},593,[508,515],"lodash/_Promise.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var getNative = require(_dependencyMap[0], './_getNative'),
        root = require(_dependencyMap[1], './_root');

    var Set = getNative(root, 'Set');
    module.exports = Set;
},594,[508,515],"lodash/_Set.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var getNative = require(_dependencyMap[0], './_getNative'),
        root = require(_dependencyMap[1], './_root');

    var WeakMap = getNative(root, 'WeakMap');
    module.exports = WeakMap;
},595,[508,515],"lodash/_WeakMap.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var isLength = require(_dependencyMap[0], './isLength'),
        isObjectLike = require(_dependencyMap[1], './isObjectLike');

    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        objectTag = '[object Object]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        weakMapTag = '[object WeakMap]';
    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;

    function isTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }

    module.exports = isTypedArray;
},596,[547,499],"lodash/isTypedArray.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/native-base/node_modules/react-native-vector-icons/lib/toolbar-android.js";
  exports.default = createToolbarAndroidComponent;

  var _isEqual = require(_dependencyMap[0], "lodash/isEqual");

  var _isEqual2 = babelHelpers.interopRequireDefault(_isEqual);

  var _pick = require(_dependencyMap[1], "lodash/pick");

  var _pick2 = babelHelpers.interopRequireDefault(_pick);

  var _react = require(_dependencyMap[2], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[3], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[4], "./react-native");

  function createToolbarAndroidComponent(IconNamePropType, getImageSource) {
    var _class, _temp;

    return _temp = _class = function (_PureComponent) {
      babelHelpers.inherits(IconToolbarAndroid, _PureComponent);

      function IconToolbarAndroid() {
        babelHelpers.classCallCheck(this, IconToolbarAndroid);
        return babelHelpers.possibleConstructorReturn(this, (IconToolbarAndroid.__proto__ || Object.getPrototypeOf(IconToolbarAndroid)).apply(this, arguments));
      }

      babelHelpers.createClass(IconToolbarAndroid, [{
        key: "componentWillMount",
        value: function componentWillMount() {
          this.updateIconSources(this.props);
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
          var _this2 = this;

          var keys = Object.keys(IconToolbarAndroid.propTypes);

          if (!(0, _isEqual2.default)((0, _pick2.default)(nextProps, keys), (0, _pick2.default)(this.props, keys))) {
            var stateToEvict = {};

            if (!nextProps.logoName) {
              stateToEvict.logo = undefined;
            }

            if (!nextProps.navIconName) {
              stateToEvict.navIcon = undefined;
            }

            if (!nextProps.overflowIconName) {
              stateToEvict.overflowIcon = undefined;
            }

            if (this.state && Object.keys(stateToEvict).length) {
              this.setState(stateToEvict, function () {
                return _this2.updateIconSources(nextProps);
              });
            } else {
              this.updateIconSources(nextProps);
            }
          }
        }
      }, {
        key: "updateIconSources",
        value: function updateIconSources(props) {
          var _this3 = this;

          var size = props.iconSize;
          var color = props.iconColor || props.titleColor;

          if (props.logoName) {
            getImageSource(props.logoName, size, color).then(function (logo) {
              return _this3.setState({
                logo: logo
              });
            });
          }

          if (props.navIconName) {
            getImageSource(props.navIconName, size, color).then(function (navIcon) {
              return _this3.setState({
                navIcon: navIcon
              });
            });
          }

          if (props.overflowIconName) {
            getImageSource(props.overflowIconName, size, color).then(function (overflowIcon) {
              return _this3.setState({
                overflowIcon: overflowIcon
              });
            });
          }

          Promise.all((props.actions || []).map(function (action) {
            if (action.iconName) {
              return getImageSource(action.iconName, action.iconSize || size, action.iconColor || color).then(function (icon) {
                return babelHelpers.extends({}, action, {
                  icon: icon
                });
              });
            }

            return Promise.resolve(action);
          })).then(function (actions) {
            return _this3.setState({
              actions: actions
            });
          });
        }
      }, {
        key: "render",
        value: function render() {
          return _react2.default.createElement(_reactNative.ToolbarAndroid, babelHelpers.extends({}, this.props, this.state, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 94
            }
          }));
        }
      }]);
      return IconToolbarAndroid;
    }(_react.PureComponent), _class.propTypes = {
      logoName: IconNamePropType,
      navIconName: IconNamePropType,
      overflowIconName: IconNamePropType,
      actions: _propTypes2.default.arrayOf(_propTypes2.default.shape({
        title: _propTypes2.default.string.isRequired,
        iconName: IconNamePropType,
        iconSize: _propTypes2.default.number,
        iconColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
        show: _propTypes2.default.oneOf(['always', 'ifRoom', 'never']),
        showWithText: _propTypes2.default.bool
      })),
      iconSize: _propTypes2.default.number,
      iconColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
    }, _class.defaultProps = {
      iconSize: 24
    }, _temp;
  }
},597,[571,569,108,127,495],"react-native-vector-icons/lib/toolbar-android.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    "ios-add": 61698,
    "ios-add-circle": 61697,
    "ios-add-circle-outline": 61696,
    "ios-add-outline": 61698,
    "ios-alarm": 62408,
    "ios-alarm-outline": 62407,
    "ios-albums": 62410,
    "ios-albums-outline": 62409,
    "ios-alert": 61700,
    "ios-alert-outline": 61699,
    "ios-american-football": 61702,
    "ios-american-football-outline": 61701,
    "ios-analytics": 62414,
    "ios-analytics-outline": 62413,
    "ios-aperture": 61704,
    "ios-aperture-outline": 61703,
    "ios-apps": 61706,
    "ios-apps-outline": 61705,
    "ios-appstore": 61708,
    "ios-appstore-outline": 61707,
    "ios-archive": 61710,
    "ios-archive-outline": 61709,
    "ios-arrow-back": 62415,
    "ios-arrow-back-outline": 62415,
    "ios-arrow-down": 62416,
    "ios-arrow-down-outline": 62416,
    "ios-arrow-dropdown": 61712,
    "ios-arrow-dropdown-circle": 61711,
    "ios-arrow-dropdown-circle-outline": 61711,
    "ios-arrow-dropdown-outline": 61712,
    "ios-arrow-dropleft": 61714,
    "ios-arrow-dropleft-circle": 61713,
    "ios-arrow-dropleft-circle-outline": 61713,
    "ios-arrow-dropleft-outline": 61714,
    "ios-arrow-dropright": 61716,
    "ios-arrow-dropright-circle": 61715,
    "ios-arrow-dropright-circle-outline": 61715,
    "ios-arrow-dropright-outline": 61716,
    "ios-arrow-dropup": 61718,
    "ios-arrow-dropup-circle": 61717,
    "ios-arrow-dropup-circle-outline": 61717,
    "ios-arrow-dropup-outline": 61718,
    "ios-arrow-forward": 62417,
    "ios-arrow-forward-outline": 62417,
    "ios-arrow-round-back": 61719,
    "ios-arrow-round-back-outline": 61719,
    "ios-arrow-round-down": 61720,
    "ios-arrow-round-down-outline": 61720,
    "ios-arrow-round-forward": 61721,
    "ios-arrow-round-forward-outline": 61721,
    "ios-arrow-round-up": 61722,
    "ios-arrow-round-up-outline": 61722,
    "ios-arrow-up": 62424,
    "ios-arrow-up-outline": 62424,
    "ios-at": 62426,
    "ios-at-outline": 62425,
    "ios-attach": 61723,
    "ios-attach-outline": 61723,
    "ios-backspace": 61725,
    "ios-backspace-outline": 61724,
    "ios-barcode": 62428,
    "ios-barcode-outline": 62427,
    "ios-baseball": 62430,
    "ios-baseball-outline": 62429,
    "ios-basket": 61727,
    "ios-basket-outline": 61726,
    "ios-basketball": 62432,
    "ios-basketball-outline": 62431,
    "ios-battery-charging": 61728,
    "ios-battery-charging-outline": 61728,
    "ios-battery-dead": 61729,
    "ios-battery-dead-outline": 61729,
    "ios-battery-full": 61730,
    "ios-battery-full-outline": 61730,
    "ios-beaker": 61732,
    "ios-beaker-outline": 61731,
    "ios-beer": 61734,
    "ios-beer-outline": 61733,
    "ios-bicycle": 61735,
    "ios-bicycle-outline": 61735,
    "ios-bluetooth": 61736,
    "ios-bluetooth-outline": 61736,
    "ios-boat": 61738,
    "ios-boat-outline": 61737,
    "ios-body": 62436,
    "ios-body-outline": 62435,
    "ios-bonfire": 61740,
    "ios-bonfire-outline": 61739,
    "ios-book": 62440,
    "ios-book-outline": 62439,
    "ios-bookmark": 61742,
    "ios-bookmark-outline": 61741,
    "ios-bookmarks": 62442,
    "ios-bookmarks-outline": 62441,
    "ios-bowtie": 61744,
    "ios-bowtie-outline": 61743,
    "ios-briefcase": 62446,
    "ios-briefcase-outline": 62445,
    "ios-browsers": 62448,
    "ios-browsers-outline": 62447,
    "ios-brush": 61746,
    "ios-brush-outline": 61745,
    "ios-bug": 61748,
    "ios-bug-outline": 61747,
    "ios-build": 61750,
    "ios-build-outline": 61749,
    "ios-bulb": 61752,
    "ios-bulb-outline": 61751,
    "ios-bus": 61754,
    "ios-bus-outline": 61753,
    "ios-cafe": 61756,
    "ios-cafe-outline": 61755,
    "ios-calculator": 62450,
    "ios-calculator-outline": 62449,
    "ios-calendar": 62452,
    "ios-calendar-outline": 62451,
    "ios-call": 61758,
    "ios-call-outline": 61757,
    "ios-camera": 62454,
    "ios-camera-outline": 62453,
    "ios-car": 61760,
    "ios-car-outline": 61759,
    "ios-card": 61762,
    "ios-card-outline": 61761,
    "ios-cart": 62456,
    "ios-cart-outline": 62455,
    "ios-cash": 61764,
    "ios-cash-outline": 61763,
    "ios-chatboxes": 62458,
    "ios-chatboxes-outline": 62457,
    "ios-chatbubbles": 61766,
    "ios-chatbubbles-outline": 61765,
    "ios-checkbox": 61768,
    "ios-checkbox-outline": 61767,
    "ios-checkmark": 62463,
    "ios-checkmark-circle": 61770,
    "ios-checkmark-circle-outline": 61769,
    "ios-checkmark-outline": 62463,
    "ios-clipboard": 61772,
    "ios-clipboard-outline": 61771,
    "ios-clock": 62467,
    "ios-clock-outline": 62466,
    "ios-close": 62470,
    "ios-close-circle": 61774,
    "ios-close-circle-outline": 61773,
    "ios-close-outline": 62470,
    "ios-closed-captioning": 61776,
    "ios-closed-captioning-outline": 61775,
    "ios-cloud": 62476,
    "ios-cloud-circle": 61778,
    "ios-cloud-circle-outline": 61777,
    "ios-cloud-done": 61780,
    "ios-cloud-done-outline": 61779,
    "ios-cloud-download": 62472,
    "ios-cloud-download-outline": 62471,
    "ios-cloud-outline": 62473,
    "ios-cloud-upload": 62475,
    "ios-cloud-upload-outline": 62474,
    "ios-cloudy": 62480,
    "ios-cloudy-night": 62478,
    "ios-cloudy-night-outline": 62477,
    "ios-cloudy-outline": 62479,
    "ios-code": 61783,
    "ios-code-download": 61781,
    "ios-code-download-outline": 61781,
    "ios-code-outline": 61783,
    "ios-code-working": 61782,
    "ios-code-working-outline": 61782,
    "ios-cog": 62482,
    "ios-cog-outline": 62481,
    "ios-color-fill": 61785,
    "ios-color-fill-outline": 61784,
    "ios-color-filter": 62484,
    "ios-color-filter-outline": 62483,
    "ios-color-palette": 61787,
    "ios-color-palette-outline": 61786,
    "ios-color-wand": 62486,
    "ios-color-wand-outline": 62485,
    "ios-compass": 61789,
    "ios-compass-outline": 61788,
    "ios-construct": 61791,
    "ios-construct-outline": 61790,
    "ios-contact": 62490,
    "ios-contact-outline": 62489,
    "ios-contacts": 61793,
    "ios-contacts-outline": 61792,
    "ios-contract": 61794,
    "ios-contract-outline": 61794,
    "ios-contrast": 61795,
    "ios-contrast-outline": 61795,
    "ios-copy": 62492,
    "ios-copy-outline": 62491,
    "ios-create": 61797,
    "ios-create-outline": 61796,
    "ios-crop": 62494,
    "ios-crop-outline": 61798,
    "ios-cube": 61800,
    "ios-cube-outline": 61799,
    "ios-cut": 61802,
    "ios-cut-outline": 61801,
    "ios-desktop": 61804,
    "ios-desktop-outline": 61803,
    "ios-disc": 61806,
    "ios-disc-outline": 61805,
    "ios-document": 61808,
    "ios-document-outline": 61807,
    "ios-done-all": 61809,
    "ios-done-all-outline": 61809,
    "ios-download": 62496,
    "ios-download-outline": 62495,
    "ios-easel": 61811,
    "ios-easel-outline": 61810,
    "ios-egg": 61813,
    "ios-egg-outline": 61812,
    "ios-exit": 61815,
    "ios-exit-outline": 61814,
    "ios-expand": 61816,
    "ios-expand-outline": 61816,
    "ios-eye": 62501,
    "ios-eye-off": 61818,
    "ios-eye-off-outline": 61817,
    "ios-eye-outline": 62500,
    "ios-fastforward": 62503,
    "ios-fastforward-outline": 62502,
    "ios-female": 61819,
    "ios-female-outline": 61819,
    "ios-filing": 62505,
    "ios-filing-outline": 62504,
    "ios-film": 62507,
    "ios-film-outline": 62506,
    "ios-finger-print": 61820,
    "ios-finger-print-outline": 61820,
    "ios-flag": 62509,
    "ios-flag-outline": 62508,
    "ios-flame": 62511,
    "ios-flame-outline": 62510,
    "ios-flash": 61822,
    "ios-flash-outline": 61821,
    "ios-flask": 62513,
    "ios-flask-outline": 62512,
    "ios-flower": 62515,
    "ios-flower-outline": 62514,
    "ios-folder": 62517,
    "ios-folder-open": 61824,
    "ios-folder-open-outline": 61823,
    "ios-folder-outline": 62516,
    "ios-football": 62519,
    "ios-football-outline": 62518,
    "ios-funnel": 61826,
    "ios-funnel-outline": 61825,
    "ios-game-controller-a": 62521,
    "ios-game-controller-a-outline": 62520,
    "ios-game-controller-b": 62523,
    "ios-game-controller-b-outline": 62522,
    "ios-git-branch": 61827,
    "ios-git-branch-outline": 61827,
    "ios-git-commit": 61828,
    "ios-git-commit-outline": 61828,
    "ios-git-compare": 61829,
    "ios-git-compare-outline": 61829,
    "ios-git-merge": 61830,
    "ios-git-merge-outline": 61830,
    "ios-git-network": 61831,
    "ios-git-network-outline": 61831,
    "ios-git-pull-request": 61832,
    "ios-git-pull-request-outline": 61832,
    "ios-glasses": 62527,
    "ios-glasses-outline": 62526,
    "ios-globe": 61834,
    "ios-globe-outline": 61833,
    "ios-grid": 61836,
    "ios-grid-outline": 61835,
    "ios-hammer": 61838,
    "ios-hammer-outline": 61837,
    "ios-hand": 61840,
    "ios-hand-outline": 61839,
    "ios-happy": 61842,
    "ios-happy-outline": 61841,
    "ios-headset": 61844,
    "ios-headset-outline": 61843,
    "ios-heart": 62531,
    "ios-heart-outline": 62530,
    "ios-help": 62534,
    "ios-help-buoy": 61846,
    "ios-help-buoy-outline": 61845,
    "ios-help-circle": 61848,
    "ios-help-circle-outline": 61847,
    "ios-help-outline": 62534,
    "ios-home": 62536,
    "ios-home-outline": 62535,
    "ios-ice-cream": 61850,
    "ios-ice-cream-outline": 61849,
    "ios-image": 61852,
    "ios-image-outline": 61851,
    "ios-images": 61854,
    "ios-images-outline": 61853,
    "ios-infinite": 62538,
    "ios-infinite-outline": 62537,
    "ios-information": 62541,
    "ios-information-circle": 61856,
    "ios-information-circle-outline": 61855,
    "ios-information-outline": 62541,
    "ios-ionic": 61857,
    "ios-ionic-outline": 62542,
    "ios-ionitron": 61859,
    "ios-ionitron-outline": 61858,
    "ios-jet": 61861,
    "ios-jet-outline": 61860,
    "ios-key": 61863,
    "ios-key-outline": 61862,
    "ios-keypad": 62544,
    "ios-keypad-outline": 62543,
    "ios-laptop": 61864,
    "ios-laptop-outline": 61864,
    "ios-leaf": 61866,
    "ios-leaf-outline": 61865,
    "ios-link": 61994,
    "ios-link-outline": 61898,
    "ios-list": 62548,
    "ios-list-box": 61868,
    "ios-list-box-outline": 61867,
    "ios-list-outline": 62548,
    "ios-locate": 61870,
    "ios-locate-outline": 61869,
    "ios-lock": 61872,
    "ios-lock-outline": 61871,
    "ios-log-in": 61873,
    "ios-log-in-outline": 61873,
    "ios-log-out": 61874,
    "ios-log-out-outline": 61874,
    "ios-magnet": 61876,
    "ios-magnet-outline": 61875,
    "ios-mail": 61880,
    "ios-mail-open": 61878,
    "ios-mail-open-outline": 61877,
    "ios-mail-outline": 61879,
    "ios-male": 61881,
    "ios-male-outline": 61881,
    "ios-man": 61883,
    "ios-man-outline": 61882,
    "ios-map": 61885,
    "ios-map-outline": 61884,
    "ios-medal": 61887,
    "ios-medal-outline": 61886,
    "ios-medical": 62556,
    "ios-medical-outline": 62555,
    "ios-medkit": 62558,
    "ios-medkit-outline": 62557,
    "ios-megaphone": 61889,
    "ios-megaphone-outline": 61888,
    "ios-menu": 61891,
    "ios-menu-outline": 61890,
    "ios-mic": 62561,
    "ios-mic-off": 62559,
    "ios-mic-off-outline": 61892,
    "ios-mic-outline": 62560,
    "ios-microphone": 61894,
    "ios-microphone-outline": 61893,
    "ios-moon": 62568,
    "ios-moon-outline": 62567,
    "ios-more": 61896,
    "ios-more-outline": 61895,
    "ios-move": 61899,
    "ios-move-outline": 61899,
    "ios-musical-note": 62571,
    "ios-musical-note-outline": 61900,
    "ios-musical-notes": 62572,
    "ios-musical-notes-outline": 61901,
    "ios-navigate": 62574,
    "ios-navigate-outline": 62573,
    "ios-no-smoking": 61903,
    "ios-no-smoking-outline": 61902,
    "ios-notifications": 61907,
    "ios-notifications-off": 61905,
    "ios-notifications-off-outline": 61904,
    "ios-notifications-outline": 61906,
    "ios-nuclear": 61909,
    "ios-nuclear-outline": 61908,
    "ios-nutrition": 62576,
    "ios-nutrition-outline": 62575,
    "ios-open": 61911,
    "ios-open-outline": 61910,
    "ios-options": 61913,
    "ios-options-outline": 61912,
    "ios-outlet": 61915,
    "ios-outlet-outline": 61914,
    "ios-paper": 62578,
    "ios-paper-outline": 62577,
    "ios-paper-plane": 61917,
    "ios-paper-plane-outline": 61916,
    "ios-partly-sunny": 61919,
    "ios-partly-sunny-outline": 61918,
    "ios-pause": 62584,
    "ios-pause-outline": 62583,
    "ios-paw": 62586,
    "ios-paw-outline": 62585,
    "ios-people": 62588,
    "ios-people-outline": 62587,
    "ios-person": 62590,
    "ios-person-add": 61921,
    "ios-person-add-outline": 61920,
    "ios-person-outline": 62589,
    "ios-phone-landscape": 61922,
    "ios-phone-landscape-outline": 61922,
    "ios-phone-portrait": 61923,
    "ios-phone-portrait-outline": 61923,
    "ios-photos": 62594,
    "ios-photos-outline": 62593,
    "ios-pie": 62596,
    "ios-pie-outline": 62595,
    "ios-pin": 61925,
    "ios-pin-outline": 61924,
    "ios-pint": 62598,
    "ios-pint-outline": 62597,
    "ios-pizza": 61927,
    "ios-pizza-outline": 61926,
    "ios-plane": 61929,
    "ios-plane-outline": 61928,
    "ios-planet": 61931,
    "ios-planet-outline": 61930,
    "ios-play": 62600,
    "ios-play-outline": 62599,
    "ios-podium": 61933,
    "ios-podium-outline": 61932,
    "ios-power": 61935,
    "ios-power-outline": 61934,
    "ios-pricetag": 62605,
    "ios-pricetag-outline": 62604,
    "ios-pricetags": 62607,
    "ios-pricetags-outline": 62606,
    "ios-print": 61937,
    "ios-print-outline": 61936,
    "ios-pulse": 62611,
    "ios-pulse-outline": 61938,
    "ios-qr-scanner": 61939,
    "ios-qr-scanner-outline": 61939,
    "ios-quote": 61941,
    "ios-quote-outline": 61940,
    "ios-radio": 61945,
    "ios-radio-button-off": 61942,
    "ios-radio-button-off-outline": 61942,
    "ios-radio-button-on": 61943,
    "ios-radio-button-on-outline": 61943,
    "ios-radio-outline": 61944,
    "ios-rainy": 62613,
    "ios-rainy-outline": 62612,
    "ios-recording": 62615,
    "ios-recording-outline": 62614,
    "ios-redo": 62617,
    "ios-redo-outline": 62616,
    "ios-refresh": 62620,
    "ios-refresh-circle": 61990,
    "ios-refresh-circle-outline": 61988,
    "ios-refresh-outline": 62620,
    "ios-remove": 61948,
    "ios-remove-circle": 61947,
    "ios-remove-circle-outline": 61946,
    "ios-remove-outline": 61948,
    "ios-reorder": 61949,
    "ios-reorder-outline": 61949,
    "ios-repeat": 61950,
    "ios-repeat-outline": 61950,
    "ios-resize": 61951,
    "ios-resize-outline": 61951,
    "ios-restaurant": 61953,
    "ios-restaurant-outline": 61952,
    "ios-return-left": 61954,
    "ios-return-left-outline": 61954,
    "ios-return-right": 61955,
    "ios-return-right-outline": 61955,
    "ios-reverse-camera": 62623,
    "ios-reverse-camera-outline": 62622,
    "ios-rewind": 62625,
    "ios-rewind-outline": 62624,
    "ios-ribbon": 61957,
    "ios-ribbon-outline": 61956,
    "ios-rose": 62627,
    "ios-rose-outline": 62626,
    "ios-sad": 61959,
    "ios-sad-outline": 61958,
    "ios-school": 61961,
    "ios-school-outline": 61960,
    "ios-search": 62629,
    "ios-search-outline": 61962,
    "ios-send": 61964,
    "ios-send-outline": 61963,
    "ios-settings": 62631,
    "ios-settings-outline": 61965,
    "ios-share": 61969,
    "ios-share-alt": 61967,
    "ios-share-alt-outline": 61966,
    "ios-share-outline": 61968,
    "ios-shirt": 61971,
    "ios-shirt-outline": 61970,
    "ios-shuffle": 62633,
    "ios-shuffle-outline": 62633,
    "ios-skip-backward": 61973,
    "ios-skip-backward-outline": 61972,
    "ios-skip-forward": 61975,
    "ios-skip-forward-outline": 61974,
    "ios-snow": 61976,
    "ios-snow-outline": 61996,
    "ios-speedometer": 62640,
    "ios-speedometer-outline": 62639,
    "ios-square": 61978,
    "ios-square-outline": 61977,
    "ios-star": 62643,
    "ios-star-half": 62641,
    "ios-star-half-outline": 62641,
    "ios-star-outline": 62642,
    "ios-stats": 61980,
    "ios-stats-outline": 61979,
    "ios-stopwatch": 62645,
    "ios-stopwatch-outline": 62644,
    "ios-subway": 61982,
    "ios-subway-outline": 61981,
    "ios-sunny": 62647,
    "ios-sunny-outline": 62646,
    "ios-swap": 61983,
    "ios-swap-outline": 61983,
    "ios-switch": 61985,
    "ios-switch-outline": 61984,
    "ios-sync": 61986,
    "ios-sync-outline": 61986,
    "ios-tablet-landscape": 61987,
    "ios-tablet-landscape-outline": 61987,
    "ios-tablet-portrait": 62030,
    "ios-tablet-portrait-outline": 62030,
    "ios-tennisball": 62651,
    "ios-tennisball-outline": 62650,
    "ios-text": 62032,
    "ios-text-outline": 62031,
    "ios-thermometer": 62034,
    "ios-thermometer-outline": 62033,
    "ios-thumbs-down": 62036,
    "ios-thumbs-down-outline": 62035,
    "ios-thumbs-up": 62038,
    "ios-thumbs-up-outline": 62037,
    "ios-thunderstorm": 62653,
    "ios-thunderstorm-outline": 62652,
    "ios-time": 62655,
    "ios-time-outline": 62654,
    "ios-timer": 62657,
    "ios-timer-outline": 62656,
    "ios-train": 62040,
    "ios-train-outline": 62039,
    "ios-transgender": 62041,
    "ios-transgender-outline": 62041,
    "ios-trash": 62661,
    "ios-trash-outline": 62660,
    "ios-trending-down": 62042,
    "ios-trending-down-outline": 62042,
    "ios-trending-up": 62043,
    "ios-trending-up-outline": 62043,
    "ios-trophy": 62045,
    "ios-trophy-outline": 62044,
    "ios-umbrella": 62047,
    "ios-umbrella-outline": 62046,
    "ios-undo": 62663,
    "ios-undo-outline": 62662,
    "ios-unlock": 62049,
    "ios-unlock-outline": 62048,
    "ios-videocam": 62669,
    "ios-videocam-outline": 62668,
    "ios-volume-down": 62050,
    "ios-volume-down-outline": 62050,
    "ios-volume-mute": 62051,
    "ios-volume-mute-outline": 62051,
    "ios-volume-off": 62052,
    "ios-volume-off-outline": 62052,
    "ios-volume-up": 62053,
    "ios-volume-up-outline": 62053,
    "ios-walk": 62054,
    "ios-walk-outline": 62054,
    "ios-warning": 62056,
    "ios-warning-outline": 62055,
    "ios-watch": 62057,
    "ios-watch-outline": 62057,
    "ios-water": 62059,
    "ios-water-outline": 62058,
    "ios-wifi": 62061,
    "ios-wifi-outline": 62060,
    "ios-wine": 62063,
    "ios-wine-outline": 62062,
    "ios-woman": 62065,
    "ios-woman-outline": 62064,
    "logo-android": 61989,
    "logo-angular": 61991,
    "logo-apple": 61993,
    "logo-bitcoin": 61995,
    "logo-buffer": 61997,
    "logo-chrome": 61999,
    "logo-codepen": 62000,
    "logo-css3": 62001,
    "logo-designernews": 62002,
    "logo-dribbble": 62003,
    "logo-dropbox": 62004,
    "logo-euro": 62005,
    "logo-facebook": 62006,
    "logo-foursquare": 62007,
    "logo-freebsd-devil": 62008,
    "logo-github": 62009,
    "logo-google": 62010,
    "logo-googleplus": 62011,
    "logo-hackernews": 62012,
    "logo-html5": 62013,
    "logo-instagram": 62014,
    "logo-javascript": 62015,
    "logo-linkedin": 62016,
    "logo-markdown": 62017,
    "logo-nodejs": 62018,
    "logo-octocat": 62019,
    "logo-pinterest": 62020,
    "logo-playstation": 62021,
    "logo-python": 62022,
    "logo-reddit": 62023,
    "logo-rss": 62024,
    "logo-sass": 62025,
    "logo-skype": 62026,
    "logo-snapchat": 62027,
    "logo-steam": 62028,
    "logo-tumblr": 62029,
    "logo-tux": 62126,
    "logo-twitch": 62127,
    "logo-twitter": 62128,
    "logo-usd": 62129,
    "logo-vimeo": 62148,
    "logo-whatsapp": 62149,
    "logo-windows": 62255,
    "logo-wordpress": 62256,
    "logo-xbox": 62284,
    "logo-yahoo": 62285,
    "logo-yen": 62286,
    "logo-youtube": 62287,
    "md-add": 62067,
    "md-add-circle": 62066,
    "md-alarm": 62068,
    "md-albums": 62069,
    "md-alert": 62070,
    "md-american-football": 62071,
    "md-analytics": 62072,
    "md-aperture": 62073,
    "md-apps": 62074,
    "md-appstore": 62075,
    "md-archive": 62076,
    "md-arrow-back": 62077,
    "md-arrow-down": 62078,
    "md-arrow-dropdown": 62080,
    "md-arrow-dropdown-circle": 62079,
    "md-arrow-dropleft": 62082,
    "md-arrow-dropleft-circle": 62081,
    "md-arrow-dropright": 62084,
    "md-arrow-dropright-circle": 62083,
    "md-arrow-dropup": 62086,
    "md-arrow-dropup-circle": 62085,
    "md-arrow-forward": 62087,
    "md-arrow-round-back": 62088,
    "md-arrow-round-down": 62089,
    "md-arrow-round-forward": 62090,
    "md-arrow-round-up": 62091,
    "md-arrow-up": 62092,
    "md-at": 62093,
    "md-attach": 62094,
    "md-backspace": 62095,
    "md-barcode": 62096,
    "md-baseball": 62097,
    "md-basket": 62098,
    "md-basketball": 62099,
    "md-battery-charging": 62100,
    "md-battery-dead": 62101,
    "md-battery-full": 62102,
    "md-beaker": 62103,
    "md-beer": 62104,
    "md-bicycle": 62105,
    "md-bluetooth": 62106,
    "md-boat": 62107,
    "md-body": 62108,
    "md-bonfire": 62109,
    "md-book": 62110,
    "md-bookmark": 62111,
    "md-bookmarks": 62112,
    "md-bowtie": 62113,
    "md-briefcase": 62114,
    "md-browsers": 62115,
    "md-brush": 62116,
    "md-bug": 62117,
    "md-build": 62118,
    "md-bulb": 62119,
    "md-bus": 62120,
    "md-cafe": 62121,
    "md-calculator": 62122,
    "md-calendar": 62123,
    "md-call": 62124,
    "md-camera": 62125,
    "md-car": 62130,
    "md-card": 62131,
    "md-cart": 62132,
    "md-cash": 62133,
    "md-chatboxes": 62134,
    "md-chatbubbles": 62135,
    "md-checkbox": 62137,
    "md-checkbox-outline": 62136,
    "md-checkmark": 62140,
    "md-checkmark-circle": 62139,
    "md-checkmark-circle-outline": 62138,
    "md-clipboard": 62141,
    "md-clock": 62142,
    "md-close": 62144,
    "md-close-circle": 62143,
    "md-closed-captioning": 62145,
    "md-cloud": 62153,
    "md-cloud-circle": 62146,
    "md-cloud-done": 62147,
    "md-cloud-download": 62150,
    "md-cloud-outline": 62151,
    "md-cloud-upload": 62152,
    "md-cloudy": 62155,
    "md-cloudy-night": 62154,
    "md-code": 62158,
    "md-code-download": 62156,
    "md-code-working": 62157,
    "md-cog": 62159,
    "md-color-fill": 62160,
    "md-color-filter": 62161,
    "md-color-palette": 62162,
    "md-color-wand": 62163,
    "md-compass": 62164,
    "md-construct": 62165,
    "md-contact": 62166,
    "md-contacts": 62167,
    "md-contract": 62168,
    "md-contrast": 62169,
    "md-copy": 62170,
    "md-create": 62171,
    "md-crop": 62172,
    "md-cube": 62173,
    "md-cut": 62174,
    "md-desktop": 62175,
    "md-disc": 62176,
    "md-document": 62177,
    "md-done-all": 62178,
    "md-download": 62179,
    "md-easel": 62180,
    "md-egg": 62181,
    "md-exit": 62182,
    "md-expand": 62183,
    "md-eye": 62185,
    "md-eye-off": 62184,
    "md-fastforward": 62186,
    "md-female": 62187,
    "md-filing": 62188,
    "md-film": 62189,
    "md-finger-print": 62190,
    "md-flag": 62191,
    "md-flame": 62192,
    "md-flash": 62193,
    "md-flask": 62194,
    "md-flower": 62195,
    "md-folder": 62197,
    "md-folder-open": 62196,
    "md-football": 62198,
    "md-funnel": 62199,
    "md-game-controller-a": 62200,
    "md-game-controller-b": 62201,
    "md-git-branch": 62202,
    "md-git-commit": 62203,
    "md-git-compare": 62204,
    "md-git-merge": 62205,
    "md-git-network": 62206,
    "md-git-pull-request": 62207,
    "md-glasses": 62208,
    "md-globe": 62209,
    "md-grid": 62210,
    "md-hammer": 62211,
    "md-hand": 62212,
    "md-happy": 62213,
    "md-headset": 62214,
    "md-heart": 62216,
    "md-heart-outline": 62215,
    "md-help": 62219,
    "md-help-buoy": 62217,
    "md-help-circle": 62218,
    "md-home": 62220,
    "md-ice-cream": 62221,
    "md-image": 62222,
    "md-images": 62223,
    "md-infinite": 62224,
    "md-information": 62226,
    "md-information-circle": 62225,
    "md-ionic": 62227,
    "md-ionitron": 62228,
    "md-jet": 62229,
    "md-key": 62230,
    "md-keypad": 62231,
    "md-laptop": 62232,
    "md-leaf": 62233,
    "md-link": 61998,
    "md-list": 62235,
    "md-list-box": 62234,
    "md-locate": 62236,
    "md-lock": 62237,
    "md-log-in": 62238,
    "md-log-out": 62239,
    "md-magnet": 62240,
    "md-mail": 62242,
    "md-mail-open": 62241,
    "md-male": 62243,
    "md-man": 62244,
    "md-map": 62245,
    "md-medal": 62246,
    "md-medical": 62247,
    "md-medkit": 62248,
    "md-megaphone": 62249,
    "md-menu": 62250,
    "md-mic": 62252,
    "md-mic-off": 62251,
    "md-microphone": 62253,
    "md-moon": 62254,
    "md-more": 61897,
    "md-move": 62257,
    "md-musical-note": 62258,
    "md-musical-notes": 62259,
    "md-navigate": 62260,
    "md-no-smoking": 62261,
    "md-notifications": 62264,
    "md-notifications-off": 62262,
    "md-notifications-outline": 62263,
    "md-nuclear": 62265,
    "md-nutrition": 62266,
    "md-open": 62267,
    "md-options": 62268,
    "md-outlet": 62269,
    "md-paper": 62271,
    "md-paper-plane": 62270,
    "md-partly-sunny": 62272,
    "md-pause": 62273,
    "md-paw": 62274,
    "md-people": 62275,
    "md-person": 62277,
    "md-person-add": 62276,
    "md-phone-landscape": 62278,
    "md-phone-portrait": 62279,
    "md-photos": 62280,
    "md-pie": 62281,
    "md-pin": 62282,
    "md-pint": 62283,
    "md-pizza": 62292,
    "md-plane": 62293,
    "md-planet": 62294,
    "md-play": 62295,
    "md-podium": 62296,
    "md-power": 62297,
    "md-pricetag": 62298,
    "md-pricetags": 62299,
    "md-print": 62300,
    "md-pulse": 62301,
    "md-qr-scanner": 62302,
    "md-quote": 62303,
    "md-radio": 62306,
    "md-radio-button-off": 62304,
    "md-radio-button-on": 62305,
    "md-rainy": 62307,
    "md-recording": 62308,
    "md-redo": 62309,
    "md-refresh": 62310,
    "md-refresh-circle": 61992,
    "md-remove": 62312,
    "md-remove-circle": 62311,
    "md-reorder": 62313,
    "md-repeat": 62314,
    "md-resize": 62315,
    "md-restaurant": 62316,
    "md-return-left": 62317,
    "md-return-right": 62318,
    "md-reverse-camera": 62319,
    "md-rewind": 62320,
    "md-ribbon": 62321,
    "md-rose": 62322,
    "md-sad": 62323,
    "md-school": 62324,
    "md-search": 62325,
    "md-send": 62326,
    "md-settings": 62327,
    "md-share": 62329,
    "md-share-alt": 62328,
    "md-shirt": 62330,
    "md-shuffle": 62331,
    "md-skip-backward": 62332,
    "md-skip-forward": 62333,
    "md-snow": 62334,
    "md-speedometer": 62335,
    "md-square": 62337,
    "md-square-outline": 62336,
    "md-star": 62340,
    "md-star-half": 62338,
    "md-star-outline": 62339,
    "md-stats": 62341,
    "md-stopwatch": 62342,
    "md-subway": 62343,
    "md-sunny": 62344,
    "md-swap": 62345,
    "md-switch": 62346,
    "md-sync": 62347,
    "md-tablet-landscape": 62348,
    "md-tablet-portrait": 62349,
    "md-tennisball": 62350,
    "md-text": 62351,
    "md-thermometer": 62352,
    "md-thumbs-down": 62353,
    "md-thumbs-up": 62354,
    "md-thunderstorm": 62355,
    "md-time": 62356,
    "md-timer": 62357,
    "md-train": 62358,
    "md-transgender": 62359,
    "md-trash": 62360,
    "md-trending-down": 62361,
    "md-trending-up": 62362,
    "md-trophy": 62363,
    "md-umbrella": 62364,
    "md-undo": 62365,
    "md-unlock": 62366,
    "md-videocam": 62367,
    "md-volume-down": 62368,
    "md-volume-mute": 62369,
    "md-volume-off": 62370,
    "md-volume-up": 62371,
    "md-walk": 62372,
    "md-warning": 62373,
    "md-watch": 62374,
    "md-water": 62375,
    "md-wifi": 62376,
    "md-wine": 62377,
    "md-woman": 62378
  };
},598,[],"react-native-vector-icons/glyphmaps/Ionicons.json");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  var _Entypo = require(_dependencyMap[1], "./glyphmaps/Entypo.json");

  var _Entypo2 = babelHelpers.interopRequireDefault(_Entypo);

  var iconSet = (0, _createIconSet2.default)(_Entypo2.default, 'Entypo', 'Entypo.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},599,[494,600],"react-native-vector-icons/Entypo.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    "500px": 61696,
    "500px-with-circle": 61697,
    "add-to-list": 61698,
    "add-user": 61699,
    "address": 61700,
    "adjust": 61701,
    "air": 61702,
    "aircraft": 61703,
    "aircraft-landing": 61704,
    "aircraft-take-off": 61705,
    "align-bottom": 61706,
    "align-horizontal-middle": 61707,
    "align-left": 61708,
    "align-right": 61709,
    "align-top": 61710,
    "align-vertical-middle": 61711,
    "app-store": 61712,
    "archive": 61713,
    "area-graph": 61714,
    "arrow-bold-down": 61715,
    "arrow-bold-left": 61716,
    "arrow-bold-right": 61717,
    "arrow-bold-up": 61718,
    "arrow-down": 61719,
    "arrow-left": 61720,
    "arrow-long-down": 61721,
    "arrow-long-left": 61722,
    "arrow-long-right": 61723,
    "arrow-long-up": 61724,
    "arrow-right": 61725,
    "arrow-up": 61726,
    "arrow-with-circle-down": 61727,
    "arrow-with-circle-left": 61728,
    "arrow-with-circle-right": 61729,
    "arrow-with-circle-up": 61730,
    "attachment": 61731,
    "awareness-ribbon": 61732,
    "back": 61733,
    "back-in-time": 61734,
    "baidu": 61735,
    "bar-graph": 61736,
    "basecamp": 61737,
    "battery": 61738,
    "beamed-note": 61739,
    "behance": 61740,
    "bell": 61741,
    "blackboard": 61742,
    "block": 61743,
    "book": 61744,
    "bookmark": 61745,
    "bookmarks": 61746,
    "bowl": 61747,
    "box": 61748,
    "briefcase": 61749,
    "browser": 61750,
    "brush": 61751,
    "bucket": 61752,
    "bug": 61753,
    "cake": 61754,
    "calculator": 61755,
    "calendar": 61756,
    "camera": 61757,
    "ccw": 61758,
    "chat": 61759,
    "check": 61760,
    "chevron-down": 61761,
    "chevron-left": 61762,
    "chevron-right": 61763,
    "chevron-small-down": 61764,
    "chevron-small-left": 61765,
    "chevron-small-right": 61766,
    "chevron-small-up": 61767,
    "chevron-thin-down": 61768,
    "chevron-thin-left": 61769,
    "chevron-thin-right": 61770,
    "chevron-thin-up": 61771,
    "chevron-up": 61772,
    "chevron-with-circle-down": 61773,
    "chevron-with-circle-left": 61774,
    "chevron-with-circle-right": 61775,
    "chevron-with-circle-up": 61776,
    "circle": 61777,
    "circle-with-cross": 61778,
    "circle-with-minus": 61779,
    "circle-with-plus": 61780,
    "circular-graph": 61781,
    "clapperboard": 61782,
    "classic-computer": 61783,
    "clipboard": 61784,
    "clock": 61785,
    "cloud": 61786,
    "code": 61787,
    "cog": 61788,
    "colours": 61789,
    "compass": 61790,
    "controller-fast-backward": 61791,
    "controller-fast-forward": 61792,
    "controller-jump-to-start": 61793,
    "controller-next": 61794,
    "controller-paus": 61795,
    "controller-play": 61796,
    "controller-record": 61797,
    "controller-stop": 61798,
    "controller-volume": 61799,
    "copy": 61800,
    "creative-cloud": 61801,
    "creative-commons": 61802,
    "creative-commons-attribution": 61803,
    "creative-commons-noderivs": 61804,
    "creative-commons-noncommercial-eu": 61805,
    "creative-commons-noncommercial-us": 61806,
    "creative-commons-public-domain": 61807,
    "creative-commons-remix": 61808,
    "creative-commons-share": 61809,
    "creative-commons-sharealike": 61810,
    "credit": 61811,
    "credit-card": 61812,
    "crop": 61813,
    "cross": 61814,
    "cup": 61815,
    "cw": 61816,
    "cycle": 61817,
    "database": 61818,
    "dial-pad": 61819,
    "direction": 61820,
    "document": 61821,
    "document-landscape": 61822,
    "documents": 61823,
    "dot-single": 61824,
    "dots-three-horizontal": 61825,
    "dots-three-vertical": 61826,
    "dots-two-horizontal": 61827,
    "dots-two-vertical": 61828,
    "download": 61829,
    "dribbble": 61830,
    "dribbble-with-circle": 61831,
    "drink": 61832,
    "drive": 61833,
    "drop": 61834,
    "dropbox": 61835,
    "edit": 61836,
    "email": 61837,
    "emoji-flirt": 61838,
    "emoji-happy": 61839,
    "emoji-neutral": 61840,
    "emoji-sad": 61841,
    "erase": 61842,
    "eraser": 61843,
    "evernote": 61844,
    "export": 61845,
    "eye": 61846,
    "eye-with-line": 61847,
    "facebook": 61848,
    "facebook-with-circle": 61849,
    "feather": 61850,
    "fingerprint": 61851,
    "flag": 61852,
    "flash": 61853,
    "flashlight": 61854,
    "flat-brush": 61855,
    "flattr": 61856,
    "flickr": 61857,
    "flickr-with-circle": 61858,
    "flow-branch": 61859,
    "flow-cascade": 61860,
    "flow-line": 61861,
    "flow-parallel": 61862,
    "flow-tree": 61863,
    "flower": 61864,
    "folder": 61865,
    "folder-images": 61866,
    "folder-music": 61867,
    "folder-video": 61868,
    "forward": 61869,
    "foursquare": 61870,
    "funnel": 61871,
    "game-controller": 61872,
    "gauge": 61873,
    "github": 61874,
    "github-with-circle": 61875,
    "globe": 61876,
    "google-": 61877,
    "google--with-circle": 61878,
    "google-drive": 61879,
    "google-hangouts": 61880,
    "google-play": 61881,
    "graduation-cap": 61882,
    "grid": 61883,
    "grooveshark": 61884,
    "hair-cross": 61885,
    "hand": 61886,
    "heart": 61887,
    "heart-outlined": 61888,
    "help": 61889,
    "help-with-circle": 61890,
    "home": 61891,
    "hour-glass": 61892,
    "houzz": 61893,
    "icloud": 61894,
    "image": 61895,
    "image-inverted": 61896,
    "images": 61897,
    "inbox": 61898,
    "infinity": 61899,
    "info": 61900,
    "info-with-circle": 61901,
    "instagram": 61902,
    "instagram-with-circle": 61903,
    "install": 61904,
    "key": 61905,
    "keyboard": 61906,
    "lab-flask": 61907,
    "landline": 61908,
    "language": 61909,
    "laptop": 61910,
    "lastfm": 61911,
    "lastfm-with-circle": 61912,
    "layers": 61913,
    "leaf": 61914,
    "level-down": 61915,
    "level-up": 61916,
    "lifebuoy": 61917,
    "light-bulb": 61918,
    "light-down": 61919,
    "light-up": 61920,
    "line-graph": 61921,
    "link": 61922,
    "linkedin": 61923,
    "linkedin-with-circle": 61924,
    "list": 61925,
    "location": 61926,
    "location-pin": 61927,
    "lock": 61928,
    "lock-open": 61929,
    "log-out": 61930,
    "login": 61931,
    "loop": 61932,
    "magnet": 61933,
    "magnifying-glass": 61934,
    "mail": 61935,
    "mail-with-circle": 61936,
    "man": 61937,
    "map": 61938,
    "mask": 61939,
    "medal": 61940,
    "medium": 61941,
    "medium-with-circle": 61942,
    "megaphone": 61943,
    "menu": 61944,
    "merge": 61945,
    "message": 61946,
    "mic": 61947,
    "minus": 61948,
    "mixi": 61949,
    "mobile": 61950,
    "modern-mic": 61951,
    "moon": 61952,
    "mouse": 61953,
    "mouse-pointer": 61954,
    "music": 61955,
    "network": 61956,
    "new": 61957,
    "new-message": 61958,
    "news": 61959,
    "newsletter": 61960,
    "note": 61961,
    "notification": 61962,
    "notifications-off": 61963,
    "old-mobile": 61964,
    "old-phone": 61965,
    "onedrive": 61966,
    "open-book": 61967,
    "palette": 61968,
    "paper-plane": 61969,
    "paypal": 61970,
    "pencil": 61971,
    "phone": 61972,
    "picasa": 61973,
    "pie-chart": 61974,
    "pin": 61975,
    "pinterest": 61976,
    "pinterest-with-circle": 61977,
    "plus": 61978,
    "popup": 61979,
    "power-plug": 61980,
    "price-ribbon": 61981,
    "price-tag": 61982,
    "print": 61983,
    "progress-empty": 61984,
    "progress-full": 61985,
    "progress-one": 61986,
    "progress-two": 61987,
    "publish": 61988,
    "qq": 61989,
    "qq-with-circle": 61990,
    "quote": 61991,
    "radio": 61992,
    "raft": 61993,
    "raft-with-circle": 61994,
    "rainbow": 61995,
    "rdio": 61996,
    "rdio-with-circle": 61997,
    "remove-user": 61998,
    "renren": 61999,
    "reply": 62000,
    "reply-all": 62001,
    "resize-100-": 62002,
    "resize-full-screen": 62003,
    "retweet": 62004,
    "rocket": 62005,
    "round-brush": 62006,
    "rss": 62007,
    "ruler": 62008,
    "save": 62009,
    "scissors": 62010,
    "scribd": 62011,
    "select-arrows": 62012,
    "share": 62013,
    "share-alternative": 62014,
    "shareable": 62015,
    "shield": 62016,
    "shop": 62017,
    "shopping-bag": 62018,
    "shopping-basket": 62019,
    "shopping-cart": 62020,
    "shuffle": 62021,
    "signal": 62022,
    "sina-weibo": 62023,
    "skype": 62024,
    "skype-with-circle": 62025,
    "slideshare": 62026,
    "smashing": 62027,
    "sound": 62028,
    "sound-mix": 62029,
    "sound-mute": 62030,
    "soundcloud": 62031,
    "sports-club": 62032,
    "spotify": 62033,
    "spotify-with-circle": 62034,
    "spreadsheet": 62035,
    "squared-cross": 62036,
    "squared-minus": 62037,
    "squared-plus": 62038,
    "star": 62039,
    "star-outlined": 62040,
    "stopwatch": 62041,
    "stumbleupon": 62042,
    "stumbleupon-with-circle": 62043,
    "suitcase": 62044,
    "swap": 62045,
    "swarm": 62046,
    "sweden": 62047,
    "switch": 62048,
    "tablet": 62049,
    "tablet-mobile-combo": 62050,
    "tag": 62051,
    "text": 62052,
    "text-document": 62053,
    "text-document-inverted": 62054,
    "thermometer": 62055,
    "thumbs-down": 62056,
    "thumbs-up": 62057,
    "thunder-cloud": 62058,
    "ticket": 62059,
    "time-slot": 62060,
    "tools": 62061,
    "traffic-cone": 62062,
    "trash": 62063,
    "tree": 62064,
    "triangle-down": 62065,
    "triangle-left": 62066,
    "triangle-right": 62067,
    "triangle-up": 62068,
    "tripadvisor": 62069,
    "trophy": 62070,
    "tumblr": 62071,
    "tumblr-with-circle": 62072,
    "tv": 62073,
    "twitter": 62074,
    "twitter-with-circle": 62075,
    "typing": 62076,
    "uninstall": 62077,
    "unread": 62078,
    "untag": 62079,
    "upload": 62080,
    "upload-to-cloud": 62081,
    "user": 62082,
    "users": 62083,
    "v-card": 62084,
    "video": 62085,
    "video-camera": 62086,
    "vimeo": 62087,
    "vimeo-with-circle": 62088,
    "vine": 62089,
    "vine-with-circle": 62090,
    "vinyl": 62091,
    "vk": 62092,
    "vk-alternitive": 62093,
    "vk-with-circle": 62094,
    "voicemail": 62095,
    "wallet": 62096,
    "warning": 62097,
    "water": 62098,
    "windows-store": 62099,
    "xing": 62100,
    "xing-with-circle": 62101,
    "yelp": 62102,
    "youko": 62103,
    "youko-with-circle": 62104,
    "youtube": 62105,
    "youtube-with-circle": 62106
  };
},600,[],"react-native-vector-icons/glyphmaps/Entypo.json");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  var _Feather = require(_dependencyMap[1], "./glyphmaps/Feather.json");

  var _Feather2 = babelHelpers.interopRequireDefault(_Feather);

  var iconSet = (0, _createIconSet2.default)(_Feather2.default, 'Feather', 'Feather.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},601,[494,602],"react-native-vector-icons/Feather.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    "activity": 59648,
    "airplay": 59649,
    "alert-circle": 59650,
    "alert-octagon": 59651,
    "alert-triangle": 59652,
    "align-center": 59653,
    "align-justify": 59654,
    "align-left": 59655,
    "align-right": 59656,
    "anchor": 59657,
    "aperture": 59658,
    "arrow-down": 59659,
    "arrow-down-left": 59660,
    "arrow-down-right": 59661,
    "arrow-left": 59662,
    "arrow-right": 59663,
    "arrow-up": 59664,
    "arrow-up-left": 59665,
    "arrow-up-right": 59666,
    "at-sign": 59667,
    "award": 59668,
    "bar-chart": 59669,
    "bar-chart-2": 59670,
    "battery": 59671,
    "battery-charging": 59672,
    "bell": 59673,
    "bell-off": 59674,
    "bluetooth": 59675,
    "bold": 59676,
    "book": 59677,
    "bookmark": 59678,
    "box": 59679,
    "briefcase": 59680,
    "calendar": 59681,
    "camera": 59682,
    "camera-off": 59683,
    "cast": 59684,
    "check": 59685,
    "check-circle": 59686,
    "check-square": 59687,
    "chevron-down": 59688,
    "chevron-left": 59689,
    "chevron-right": 59690,
    "chevron-up": 59691,
    "chevrons-down": 59692,
    "chevrons-left": 59693,
    "chevrons-right": 59694,
    "chevrons-up": 59695,
    "chrome": 59696,
    "circle": 59697,
    "clipboard": 59698,
    "clock": 59699,
    "cloud": 59700,
    "cloud-drizzle": 59701,
    "cloud-lightning": 59702,
    "cloud-off": 59703,
    "cloud-rain": 59704,
    "cloud-snow": 59705,
    "codepen": 59706,
    "command": 59707,
    "compass": 59708,
    "copy": 59709,
    "corner-down-left": 59710,
    "corner-down-right": 59711,
    "corner-left-down": 59712,
    "corner-left-up": 59713,
    "corner-right-down": 59714,
    "corner-right-up": 59715,
    "corner-up-left": 59716,
    "corner-up-right": 59717,
    "cpu": 59718,
    "credit-card": 59719,
    "crop": 59720,
    "crosshair": 59721,
    "delete": 59722,
    "disc": 59723,
    "download": 59724,
    "download-cloud": 59725,
    "droplet": 59726,
    "edit": 59727,
    "edit-2": 59728,
    "edit-3": 59729,
    "external-link": 59730,
    "eye": 59731,
    "eye-off": 59732,
    "facebook": 59733,
    "fast-forward": 59734,
    "feather": 59735,
    "file": 59736,
    "file-minus": 59737,
    "file-plus": 59738,
    "file-text": 59739,
    "film": 59740,
    "filter": 59741,
    "flag": 59742,
    "folder": 59743,
    "github": 59744,
    "gitlab": 59745,
    "globe": 59746,
    "grid": 59747,
    "hash": 59748,
    "headphones": 59749,
    "heart": 59750,
    "help-circle": 59751,
    "home": 59752,
    "image": 59753,
    "inbox": 59754,
    "info": 59755,
    "instagram": 59756,
    "italic": 59757,
    "layers": 59758,
    "layout": 59759,
    "life-buoy": 59760,
    "link": 59761,
    "link-2": 59762,
    "list": 59763,
    "loader": 59764,
    "lock": 59765,
    "log-in": 59766,
    "log-out": 59767,
    "mail": 59768,
    "map": 59769,
    "map-pin": 59770,
    "maximize": 59771,
    "maximize-2": 59772,
    "menu": 59773,
    "message-circle": 59774,
    "message-square": 59775,
    "mic": 59776,
    "mic-off": 59777,
    "minimize": 59778,
    "minimize-2": 59779,
    "minus": 59780,
    "minus-circle": 59781,
    "minus-square": 59782,
    "monitor": 59783,
    "moon": 59784,
    "more-horizontal": 59785,
    "more-vertical": 59786,
    "move": 59787,
    "music": 59788,
    "navigation": 59789,
    "navigation-2": 59790,
    "octagon": 59791,
    "package": 59792,
    "paperclip": 59793,
    "pause": 59794,
    "pause-circle": 59795,
    "percent": 59796,
    "phone": 59797,
    "phone-call": 59798,
    "phone-forwarded": 59799,
    "phone-incoming": 59800,
    "phone-missed": 59801,
    "phone-off": 59802,
    "phone-outgoing": 59803,
    "pie-chart": 59804,
    "play": 59805,
    "play-circle": 59806,
    "plus": 59807,
    "plus-circle": 59808,
    "plus-square": 59809,
    "pocket": 59810,
    "power": 59811,
    "printer": 59812,
    "radio": 59813,
    "refresh-ccw": 59814,
    "refresh-cw": 59815,
    "repeat": 59816,
    "rewind": 59817,
    "rotate-ccw": 59818,
    "rotate-cw": 59819,
    "save": 59820,
    "scissors": 59821,
    "search": 59822,
    "server": 59823,
    "settings": 59824,
    "share": 59825,
    "share-2": 59826,
    "shield": 59827,
    "shopping-cart": 59828,
    "shuffle": 59829,
    "sidebar": 59830,
    "skip-back": 59831,
    "skip-forward": 59832,
    "slack": 59833,
    "slash": 59834,
    "sliders": 59835,
    "smartphone": 59836,
    "speaker": 59837,
    "square": 59838,
    "star": 59839,
    "stop-circle": 59840,
    "sun": 59841,
    "sunrise": 59842,
    "sunset": 59843,
    "tablet": 59844,
    "tag": 59845,
    "target": 59846,
    "thermometer": 59847,
    "thumbs-down": 59848,
    "thumbs-up": 59849,
    "toggle-left": 59850,
    "toggle-right": 59851,
    "trash": 59852,
    "trash-2": 59853,
    "trending-down": 59854,
    "trending-up": 59855,
    "triangle": 59856,
    "tv": 59857,
    "twitter": 59858,
    "type": 59859,
    "umbrella": 59860,
    "underline": 59861,
    "unlock": 59862,
    "upload": 59863,
    "upload-cloud": 59864,
    "user": 59865,
    "user-check": 59866,
    "user-minus": 59867,
    "user-plus": 59868,
    "user-x": 59869,
    "users": 59870,
    "video": 59871,
    "video-off": 59872,
    "voicemail": 59873,
    "volume": 59874,
    "volume-1": 59875,
    "volume-2": 59876,
    "volume-x": 59877,
    "watch": 59878,
    "wifi": 59879,
    "wifi-off": 59880,
    "wind": 59881,
    "x": 59882,
    "x-circle": 59883,
    "x-square": 59884,
    "zap": 59885,
    "zoom-in": 59886,
    "zoom-out": 59887
  };
},602,[],"react-native-vector-icons/glyphmaps/Feather.json");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  var _FontAwesome = require(_dependencyMap[1], "./glyphmaps/FontAwesome.json");

  var _FontAwesome2 = babelHelpers.interopRequireDefault(_FontAwesome);

  var iconSet = (0, _createIconSet2.default)(_FontAwesome2.default, 'FontAwesome', 'FontAwesome.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},603,[494,604],"react-native-vector-icons/FontAwesome.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    "glass": 61440,
    "music": 61441,
    "search": 61442,
    "envelope-o": 61443,
    "heart": 61444,
    "star": 61445,
    "star-o": 61446,
    "user": 61447,
    "film": 61448,
    "th-large": 61449,
    "th": 61450,
    "th-list": 61451,
    "check": 61452,
    "remove": 61453,
    "close": 61453,
    "times": 61453,
    "search-plus": 61454,
    "search-minus": 61456,
    "power-off": 61457,
    "signal": 61458,
    "gear": 61459,
    "cog": 61459,
    "trash-o": 61460,
    "home": 61461,
    "file-o": 61462,
    "clock-o": 61463,
    "road": 61464,
    "download": 61465,
    "arrow-circle-o-down": 61466,
    "arrow-circle-o-up": 61467,
    "inbox": 61468,
    "play-circle-o": 61469,
    "rotate-right": 61470,
    "repeat": 61470,
    "refresh": 61473,
    "list-alt": 61474,
    "lock": 61475,
    "flag": 61476,
    "headphones": 61477,
    "volume-off": 61478,
    "volume-down": 61479,
    "volume-up": 61480,
    "qrcode": 61481,
    "barcode": 61482,
    "tag": 61483,
    "tags": 61484,
    "book": 61485,
    "bookmark": 61486,
    "print": 61487,
    "camera": 61488,
    "font": 61489,
    "bold": 61490,
    "italic": 61491,
    "text-height": 61492,
    "text-width": 61493,
    "align-left": 61494,
    "align-center": 61495,
    "align-right": 61496,
    "align-justify": 61497,
    "list": 61498,
    "dedent": 61499,
    "outdent": 61499,
    "indent": 61500,
    "video-camera": 61501,
    "photo": 61502,
    "image": 61502,
    "picture-o": 61502,
    "pencil": 61504,
    "map-marker": 61505,
    "adjust": 61506,
    "tint": 61507,
    "edit": 61508,
    "pencil-square-o": 61508,
    "share-square-o": 61509,
    "check-square-o": 61510,
    "arrows": 61511,
    "step-backward": 61512,
    "fast-backward": 61513,
    "backward": 61514,
    "play": 61515,
    "pause": 61516,
    "stop": 61517,
    "forward": 61518,
    "fast-forward": 61520,
    "step-forward": 61521,
    "eject": 61522,
    "chevron-left": 61523,
    "chevron-right": 61524,
    "plus-circle": 61525,
    "minus-circle": 61526,
    "times-circle": 61527,
    "check-circle": 61528,
    "question-circle": 61529,
    "info-circle": 61530,
    "crosshairs": 61531,
    "times-circle-o": 61532,
    "check-circle-o": 61533,
    "ban": 61534,
    "arrow-left": 61536,
    "arrow-right": 61537,
    "arrow-up": 61538,
    "arrow-down": 61539,
    "mail-forward": 61540,
    "share": 61540,
    "expand": 61541,
    "compress": 61542,
    "plus": 61543,
    "minus": 61544,
    "asterisk": 61545,
    "exclamation-circle": 61546,
    "gift": 61547,
    "leaf": 61548,
    "fire": 61549,
    "eye": 61550,
    "eye-slash": 61552,
    "warning": 61553,
    "exclamation-triangle": 61553,
    "plane": 61554,
    "calendar": 61555,
    "random": 61556,
    "comment": 61557,
    "magnet": 61558,
    "chevron-up": 61559,
    "chevron-down": 61560,
    "retweet": 61561,
    "shopping-cart": 61562,
    "folder": 61563,
    "folder-open": 61564,
    "arrows-v": 61565,
    "arrows-h": 61566,
    "bar-chart-o": 61568,
    "bar-chart": 61568,
    "twitter-square": 61569,
    "facebook-square": 61570,
    "camera-retro": 61571,
    "key": 61572,
    "gears": 61573,
    "cogs": 61573,
    "comments": 61574,
    "thumbs-o-up": 61575,
    "thumbs-o-down": 61576,
    "star-half": 61577,
    "heart-o": 61578,
    "sign-out": 61579,
    "linkedin-square": 61580,
    "thumb-tack": 61581,
    "external-link": 61582,
    "sign-in": 61584,
    "trophy": 61585,
    "github-square": 61586,
    "upload": 61587,
    "lemon-o": 61588,
    "phone": 61589,
    "square-o": 61590,
    "bookmark-o": 61591,
    "phone-square": 61592,
    "twitter": 61593,
    "facebook-f": 61594,
    "facebook": 61594,
    "github": 61595,
    "unlock": 61596,
    "credit-card": 61597,
    "feed": 61598,
    "rss": 61598,
    "hdd-o": 61600,
    "bullhorn": 61601,
    "bell": 61683,
    "certificate": 61603,
    "hand-o-right": 61604,
    "hand-o-left": 61605,
    "hand-o-up": 61606,
    "hand-o-down": 61607,
    "arrow-circle-left": 61608,
    "arrow-circle-right": 61609,
    "arrow-circle-up": 61610,
    "arrow-circle-down": 61611,
    "globe": 61612,
    "wrench": 61613,
    "tasks": 61614,
    "filter": 61616,
    "briefcase": 61617,
    "arrows-alt": 61618,
    "group": 61632,
    "users": 61632,
    "chain": 61633,
    "link": 61633,
    "cloud": 61634,
    "flask": 61635,
    "cut": 61636,
    "scissors": 61636,
    "copy": 61637,
    "files-o": 61637,
    "paperclip": 61638,
    "save": 61639,
    "floppy-o": 61639,
    "square": 61640,
    "navicon": 61641,
    "reorder": 61641,
    "bars": 61641,
    "list-ul": 61642,
    "list-ol": 61643,
    "strikethrough": 61644,
    "underline": 61645,
    "table": 61646,
    "magic": 61648,
    "truck": 61649,
    "pinterest": 61650,
    "pinterest-square": 61651,
    "google-plus-square": 61652,
    "google-plus": 61653,
    "money": 61654,
    "caret-down": 61655,
    "caret-up": 61656,
    "caret-left": 61657,
    "caret-right": 61658,
    "columns": 61659,
    "unsorted": 61660,
    "sort": 61660,
    "sort-down": 61661,
    "sort-desc": 61661,
    "sort-up": 61662,
    "sort-asc": 61662,
    "envelope": 61664,
    "linkedin": 61665,
    "rotate-left": 61666,
    "undo": 61666,
    "legal": 61667,
    "gavel": 61667,
    "dashboard": 61668,
    "tachometer": 61668,
    "comment-o": 61669,
    "comments-o": 61670,
    "flash": 61671,
    "bolt": 61671,
    "sitemap": 61672,
    "umbrella": 61673,
    "paste": 61674,
    "clipboard": 61674,
    "lightbulb-o": 61675,
    "exchange": 61676,
    "cloud-download": 61677,
    "cloud-upload": 61678,
    "user-md": 61680,
    "stethoscope": 61681,
    "suitcase": 61682,
    "bell-o": 61602,
    "coffee": 61684,
    "cutlery": 61685,
    "file-text-o": 61686,
    "building-o": 61687,
    "hospital-o": 61688,
    "ambulance": 61689,
    "medkit": 61690,
    "fighter-jet": 61691,
    "beer": 61692,
    "h-square": 61693,
    "plus-square": 61694,
    "angle-double-left": 61696,
    "angle-double-right": 61697,
    "angle-double-up": 61698,
    "angle-double-down": 61699,
    "angle-left": 61700,
    "angle-right": 61701,
    "angle-up": 61702,
    "angle-down": 61703,
    "desktop": 61704,
    "laptop": 61705,
    "tablet": 61706,
    "mobile-phone": 61707,
    "mobile": 61707,
    "circle-o": 61708,
    "quote-left": 61709,
    "quote-right": 61710,
    "spinner": 61712,
    "circle": 61713,
    "mail-reply": 61714,
    "reply": 61714,
    "github-alt": 61715,
    "folder-o": 61716,
    "folder-open-o": 61717,
    "smile-o": 61720,
    "frown-o": 61721,
    "meh-o": 61722,
    "gamepad": 61723,
    "keyboard-o": 61724,
    "flag-o": 61725,
    "flag-checkered": 61726,
    "terminal": 61728,
    "code": 61729,
    "mail-reply-all": 61730,
    "reply-all": 61730,
    "star-half-empty": 61731,
    "star-half-full": 61731,
    "star-half-o": 61731,
    "location-arrow": 61732,
    "crop": 61733,
    "code-fork": 61734,
    "unlink": 61735,
    "chain-broken": 61735,
    "question": 61736,
    "info": 61737,
    "exclamation": 61738,
    "superscript": 61739,
    "subscript": 61740,
    "eraser": 61741,
    "puzzle-piece": 61742,
    "microphone": 61744,
    "microphone-slash": 61745,
    "shield": 61746,
    "calendar-o": 61747,
    "fire-extinguisher": 61748,
    "rocket": 61749,
    "maxcdn": 61750,
    "chevron-circle-left": 61751,
    "chevron-circle-right": 61752,
    "chevron-circle-up": 61753,
    "chevron-circle-down": 61754,
    "html5": 61755,
    "css3": 61756,
    "anchor": 61757,
    "unlock-alt": 61758,
    "bullseye": 61760,
    "ellipsis-h": 61761,
    "ellipsis-v": 61762,
    "rss-square": 61763,
    "play-circle": 61764,
    "ticket": 61765,
    "minus-square": 61766,
    "minus-square-o": 61767,
    "level-up": 61768,
    "level-down": 61769,
    "check-square": 61770,
    "pencil-square": 61771,
    "external-link-square": 61772,
    "share-square": 61773,
    "compass": 61774,
    "toggle-down": 61776,
    "caret-square-o-down": 61776,
    "toggle-up": 61777,
    "caret-square-o-up": 61777,
    "toggle-right": 61778,
    "caret-square-o-right": 61778,
    "euro": 61779,
    "eur": 61779,
    "gbp": 61780,
    "dollar": 61781,
    "usd": 61781,
    "rupee": 61782,
    "inr": 61782,
    "cny": 61783,
    "rmb": 61783,
    "yen": 61783,
    "jpy": 61783,
    "ruble": 61784,
    "rouble": 61784,
    "rub": 61784,
    "won": 61785,
    "krw": 61785,
    "bitcoin": 61786,
    "btc": 61786,
    "file": 61787,
    "file-text": 61788,
    "sort-alpha-asc": 61789,
    "sort-alpha-desc": 61790,
    "sort-amount-asc": 61792,
    "sort-amount-desc": 61793,
    "sort-numeric-asc": 61794,
    "sort-numeric-desc": 61795,
    "thumbs-up": 61796,
    "thumbs-down": 61797,
    "youtube-square": 61798,
    "youtube": 61799,
    "xing": 61800,
    "xing-square": 61801,
    "youtube-play": 61802,
    "dropbox": 61803,
    "stack-overflow": 61804,
    "instagram": 61805,
    "flickr": 61806,
    "adn": 61808,
    "bitbucket": 61809,
    "bitbucket-square": 61810,
    "tumblr": 61811,
    "tumblr-square": 61812,
    "long-arrow-down": 61813,
    "long-arrow-up": 61814,
    "long-arrow-left": 61815,
    "long-arrow-right": 61816,
    "apple": 61817,
    "windows": 61818,
    "android": 61819,
    "linux": 61820,
    "dribbble": 61821,
    "skype": 61822,
    "foursquare": 61824,
    "trello": 61825,
    "female": 61826,
    "male": 61827,
    "gittip": 61828,
    "gratipay": 61828,
    "sun-o": 61829,
    "moon-o": 61830,
    "archive": 61831,
    "bug": 61832,
    "vk": 61833,
    "weibo": 61834,
    "renren": 61835,
    "pagelines": 61836,
    "stack-exchange": 61837,
    "arrow-circle-o-right": 61838,
    "arrow-circle-o-left": 61840,
    "toggle-left": 61841,
    "caret-square-o-left": 61841,
    "dot-circle-o": 61842,
    "wheelchair": 61843,
    "vimeo-square": 61844,
    "turkish-lira": 61845,
    "try": 61845,
    "plus-square-o": 61846,
    "space-shuttle": 61847,
    "slack": 61848,
    "envelope-square": 61849,
    "wordpress": 61850,
    "openid": 61851,
    "institution": 61852,
    "bank": 61852,
    "university": 61852,
    "mortar-board": 61853,
    "graduation-cap": 61853,
    "yahoo": 61854,
    "google": 61856,
    "reddit": 61857,
    "reddit-square": 61858,
    "stumbleupon-circle": 61859,
    "stumbleupon": 61860,
    "delicious": 61861,
    "digg": 61862,
    "pied-piper-pp": 61863,
    "pied-piper-alt": 61864,
    "drupal": 61865,
    "joomla": 61866,
    "language": 61867,
    "fax": 61868,
    "building": 61869,
    "child": 61870,
    "paw": 61872,
    "spoon": 61873,
    "cube": 61874,
    "cubes": 61875,
    "behance": 61876,
    "behance-square": 61877,
    "steam": 61878,
    "steam-square": 61879,
    "recycle": 61880,
    "automobile": 61881,
    "car": 61881,
    "cab": 61882,
    "taxi": 61882,
    "tree": 61883,
    "spotify": 61884,
    "deviantart": 61885,
    "soundcloud": 61886,
    "database": 61888,
    "file-pdf-o": 61889,
    "file-word-o": 61890,
    "file-excel-o": 61891,
    "file-powerpoint-o": 61892,
    "file-photo-o": 61893,
    "file-picture-o": 61893,
    "file-image-o": 61893,
    "file-zip-o": 61894,
    "file-archive-o": 61894,
    "file-sound-o": 61895,
    "file-audio-o": 61895,
    "file-movie-o": 61896,
    "file-video-o": 61896,
    "file-code-o": 61897,
    "vine": 61898,
    "codepen": 61899,
    "jsfiddle": 61900,
    "life-bouy": 61901,
    "life-buoy": 61901,
    "life-saver": 61901,
    "support": 61901,
    "life-ring": 61901,
    "circle-o-notch": 61902,
    "ra": 61904,
    "resistance": 61904,
    "rebel": 61904,
    "ge": 61905,
    "empire": 61905,
    "git-square": 61906,
    "git": 61907,
    "y-combinator-square": 61908,
    "yc-square": 61908,
    "hacker-news": 61908,
    "tencent-weibo": 61909,
    "qq": 61910,
    "wechat": 61911,
    "weixin": 61911,
    "send": 61912,
    "paper-plane": 61912,
    "send-o": 61913,
    "paper-plane-o": 61913,
    "history": 61914,
    "circle-thin": 61915,
    "header": 61916,
    "paragraph": 61917,
    "sliders": 61918,
    "share-alt": 61920,
    "share-alt-square": 61921,
    "bomb": 61922,
    "soccer-ball-o": 61923,
    "futbol-o": 61923,
    "tty": 61924,
    "binoculars": 61925,
    "plug": 61926,
    "slideshare": 61927,
    "twitch": 61928,
    "yelp": 61929,
    "newspaper-o": 61930,
    "wifi": 61931,
    "calculator": 61932,
    "paypal": 61933,
    "google-wallet": 61934,
    "cc-visa": 61936,
    "cc-mastercard": 61937,
    "cc-discover": 61938,
    "cc-amex": 61939,
    "cc-paypal": 61940,
    "cc-stripe": 61941,
    "bell-slash": 61942,
    "bell-slash-o": 61943,
    "trash": 61944,
    "copyright": 61945,
    "at": 61946,
    "eyedropper": 61947,
    "paint-brush": 61948,
    "birthday-cake": 61949,
    "area-chart": 61950,
    "pie-chart": 61952,
    "line-chart": 61953,
    "lastfm": 61954,
    "lastfm-square": 61955,
    "toggle-off": 61956,
    "toggle-on": 61957,
    "bicycle": 61958,
    "bus": 61959,
    "ioxhost": 61960,
    "angellist": 61961,
    "cc": 61962,
    "shekel": 61963,
    "sheqel": 61963,
    "ils": 61963,
    "meanpath": 61964,
    "buysellads": 61965,
    "connectdevelop": 61966,
    "dashcube": 61968,
    "forumbee": 61969,
    "leanpub": 61970,
    "sellsy": 61971,
    "shirtsinbulk": 61972,
    "simplybuilt": 61973,
    "skyatlas": 61974,
    "cart-plus": 61975,
    "cart-arrow-down": 61976,
    "diamond": 61977,
    "ship": 61978,
    "user-secret": 61979,
    "motorcycle": 61980,
    "street-view": 61981,
    "heartbeat": 61982,
    "venus": 61985,
    "mars": 61986,
    "mercury": 61987,
    "intersex": 61988,
    "transgender": 61988,
    "transgender-alt": 61989,
    "venus-double": 61990,
    "mars-double": 61991,
    "venus-mars": 61992,
    "mars-stroke": 61993,
    "mars-stroke-v": 61994,
    "mars-stroke-h": 61995,
    "neuter": 61996,
    "genderless": 61997,
    "facebook-official": 62000,
    "pinterest-p": 62001,
    "whatsapp": 62002,
    "server": 62003,
    "user-plus": 62004,
    "user-times": 62005,
    "hotel": 62006,
    "bed": 62006,
    "viacoin": 62007,
    "train": 62008,
    "subway": 62009,
    "medium": 62010,
    "yc": 62011,
    "y-combinator": 62011,
    "optin-monster": 62012,
    "opencart": 62013,
    "expeditedssl": 62014,
    "battery-4": 62016,
    "battery": 62016,
    "battery-full": 62016,
    "battery-3": 62017,
    "battery-three-quarters": 62017,
    "battery-2": 62018,
    "battery-half": 62018,
    "battery-1": 62019,
    "battery-quarter": 62019,
    "battery-0": 62020,
    "battery-empty": 62020,
    "mouse-pointer": 62021,
    "i-cursor": 62022,
    "object-group": 62023,
    "object-ungroup": 62024,
    "sticky-note": 62025,
    "sticky-note-o": 62026,
    "cc-jcb": 62027,
    "cc-diners-club": 62028,
    "clone": 62029,
    "balance-scale": 62030,
    "hourglass-o": 62032,
    "hourglass-1": 62033,
    "hourglass-start": 62033,
    "hourglass-2": 62034,
    "hourglass-half": 62034,
    "hourglass-3": 62035,
    "hourglass-end": 62035,
    "hourglass": 62036,
    "hand-grab-o": 62037,
    "hand-rock-o": 62037,
    "hand-stop-o": 62038,
    "hand-paper-o": 62038,
    "hand-scissors-o": 62039,
    "hand-lizard-o": 62040,
    "hand-spock-o": 62041,
    "hand-pointer-o": 62042,
    "hand-peace-o": 62043,
    "trademark": 62044,
    "registered": 62045,
    "creative-commons": 62046,
    "gg": 62048,
    "gg-circle": 62049,
    "tripadvisor": 62050,
    "odnoklassniki": 62051,
    "odnoklassniki-square": 62052,
    "get-pocket": 62053,
    "wikipedia-w": 62054,
    "safari": 62055,
    "chrome": 62056,
    "firefox": 62057,
    "opera": 62058,
    "internet-explorer": 62059,
    "tv": 62060,
    "television": 62060,
    "contao": 62061,
    "500px": 62062,
    "amazon": 62064,
    "calendar-plus-o": 62065,
    "calendar-minus-o": 62066,
    "calendar-times-o": 62067,
    "calendar-check-o": 62068,
    "industry": 62069,
    "map-pin": 62070,
    "map-signs": 62071,
    "map-o": 62072,
    "map": 62073,
    "commenting": 62074,
    "commenting-o": 62075,
    "houzz": 62076,
    "vimeo": 62077,
    "black-tie": 62078,
    "fonticons": 62080,
    "reddit-alien": 62081,
    "edge": 62082,
    "credit-card-alt": 62083,
    "codiepie": 62084,
    "modx": 62085,
    "fort-awesome": 62086,
    "usb": 62087,
    "product-hunt": 62088,
    "mixcloud": 62089,
    "scribd": 62090,
    "pause-circle": 62091,
    "pause-circle-o": 62092,
    "stop-circle": 62093,
    "stop-circle-o": 62094,
    "shopping-bag": 62096,
    "shopping-basket": 62097,
    "hashtag": 62098,
    "bluetooth": 62099,
    "bluetooth-b": 62100,
    "percent": 62101,
    "gitlab": 62102,
    "wpbeginner": 62103,
    "wpforms": 62104,
    "envira": 62105,
    "universal-access": 62106,
    "wheelchair-alt": 62107,
    "question-circle-o": 62108,
    "blind": 62109,
    "audio-description": 62110,
    "volume-control-phone": 62112,
    "braille": 62113,
    "assistive-listening-systems": 62114,
    "asl-interpreting": 62115,
    "american-sign-language-interpreting": 62115,
    "deafness": 62116,
    "hard-of-hearing": 62116,
    "deaf": 62116,
    "glide": 62117,
    "glide-g": 62118,
    "signing": 62119,
    "sign-language": 62119,
    "low-vision": 62120,
    "viadeo": 62121,
    "viadeo-square": 62122,
    "snapchat": 62123,
    "snapchat-ghost": 62124,
    "snapchat-square": 62125,
    "pied-piper": 62126,
    "first-order": 62128,
    "yoast": 62129,
    "themeisle": 62130,
    "google-plus-circle": 62131,
    "google-plus-official": 62131,
    "fa": 62132,
    "font-awesome": 62132,
    "handshake-o": 62133,
    "envelope-open": 62134,
    "envelope-open-o": 62135,
    "linode": 62136,
    "address-book": 62137,
    "address-book-o": 62138,
    "vcard": 62139,
    "address-card": 62139,
    "vcard-o": 62140,
    "address-card-o": 62140,
    "user-circle": 62141,
    "user-circle-o": 62142,
    "user-o": 62144,
    "id-badge": 62145,
    "drivers-license": 62146,
    "id-card": 62146,
    "drivers-license-o": 62147,
    "id-card-o": 62147,
    "quora": 62148,
    "free-code-camp": 62149,
    "telegram": 62150,
    "thermometer-4": 62151,
    "thermometer": 62151,
    "thermometer-full": 62151,
    "thermometer-3": 62152,
    "thermometer-three-quarters": 62152,
    "thermometer-2": 62153,
    "thermometer-half": 62153,
    "thermometer-1": 62154,
    "thermometer-quarter": 62154,
    "thermometer-0": 62155,
    "thermometer-empty": 62155,
    "shower": 62156,
    "bathtub": 62157,
    "s15": 62157,
    "bath": 62157,
    "podcast": 62158,
    "window-maximize": 62160,
    "window-minimize": 62161,
    "window-restore": 62162,
    "times-rectangle": 62163,
    "window-close": 62163,
    "times-rectangle-o": 62164,
    "window-close-o": 62164,
    "bandcamp": 62165,
    "grav": 62166,
    "etsy": 62167,
    "imdb": 62168,
    "ravelry": 62169,
    "eercast": 62170,
    "microchip": 62171,
    "snowflake-o": 62172,
    "superpowers": 62173,
    "wpexplorer": 62174,
    "meetup": 62176
  };
},604,[],"react-native-vector-icons/glyphmaps/FontAwesome.json");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  var _Foundation = require(_dependencyMap[1], "./glyphmaps/Foundation.json");

  var _Foundation2 = babelHelpers.interopRequireDefault(_Foundation);

  var iconSet = (0, _createIconSet2.default)(_Foundation2.default, 'fontcustom', 'Foundation.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},605,[494,606],"react-native-vector-icons/Foundation.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    "address-book": 61696,
    "alert": 61697,
    "align-center": 61698,
    "align-justify": 61699,
    "align-left": 61700,
    "align-right": 61701,
    "anchor": 61702,
    "annotate": 61703,
    "archive": 61704,
    "arrow-down": 61705,
    "arrow-left": 61706,
    "arrow-right": 61707,
    "arrow-up": 61708,
    "arrows-compress": 61709,
    "arrows-expand": 61710,
    "arrows-in": 61711,
    "arrows-out": 61712,
    "asl": 61713,
    "asterisk": 61714,
    "at-sign": 61715,
    "background-color": 61716,
    "battery-empty": 61717,
    "battery-full": 61718,
    "battery-half": 61719,
    "bitcoin-circle": 61720,
    "bitcoin": 61721,
    "blind": 61722,
    "bluetooth": 61723,
    "bold": 61724,
    "book-bookmark": 61725,
    "book": 61726,
    "bookmark": 61727,
    "braille": 61728,
    "burst-new": 61729,
    "burst-sale": 61730,
    "burst": 61731,
    "calendar": 61732,
    "camera": 61733,
    "check": 61734,
    "checkbox": 61735,
    "clipboard-notes": 61736,
    "clipboard-pencil": 61737,
    "clipboard": 61738,
    "clock": 61739,
    "closed-caption": 61740,
    "cloud": 61741,
    "comment-minus": 61742,
    "comment-quotes": 61743,
    "comment-video": 61744,
    "comment": 61745,
    "comments": 61746,
    "compass": 61747,
    "contrast": 61748,
    "credit-card": 61749,
    "crop": 61750,
    "crown": 61751,
    "css3": 61752,
    "database": 61753,
    "die-five": 61754,
    "die-four": 61755,
    "die-one": 61756,
    "die-six": 61757,
    "die-three": 61758,
    "die-two": 61759,
    "dislike": 61760,
    "dollar-bill": 61761,
    "dollar": 61762,
    "download": 61763,
    "eject": 61764,
    "elevator": 61765,
    "euro": 61766,
    "eye": 61767,
    "fast-forward": 61768,
    "female-symbol": 61769,
    "female": 61770,
    "filter": 61771,
    "first-aid": 61772,
    "flag": 61773,
    "folder-add": 61774,
    "folder-lock": 61775,
    "folder": 61776,
    "foot": 61777,
    "foundation": 61778,
    "graph-bar": 61779,
    "graph-horizontal": 61780,
    "graph-pie": 61781,
    "graph-trend": 61782,
    "guide-dog": 61783,
    "hearing-aid": 61784,
    "heart": 61785,
    "home": 61786,
    "html5": 61787,
    "indent-less": 61788,
    "indent-more": 61789,
    "info": 61790,
    "italic": 61791,
    "key": 61792,
    "laptop": 61793,
    "layout": 61794,
    "lightbulb": 61795,
    "like": 61796,
    "link": 61797,
    "list-bullet": 61798,
    "list-number": 61799,
    "list-thumbnails": 61800,
    "list": 61801,
    "lock": 61802,
    "loop": 61803,
    "magnifying-glass": 61804,
    "mail": 61805,
    "male-female": 61806,
    "male-symbol": 61807,
    "male": 61808,
    "map": 61809,
    "marker": 61810,
    "megaphone": 61811,
    "microphone": 61812,
    "minus-circle": 61813,
    "minus": 61814,
    "mobile-signal": 61815,
    "mobile": 61816,
    "monitor": 61817,
    "mountains": 61818,
    "music": 61819,
    "next": 61820,
    "no-dogs": 61821,
    "no-smoking": 61822,
    "page-add": 61823,
    "page-copy": 61824,
    "page-csv": 61825,
    "page-delete": 61826,
    "page-doc": 61827,
    "page-edit": 61828,
    "page-export-csv": 61829,
    "page-export-doc": 61830,
    "page-export-pdf": 61831,
    "page-export": 61832,
    "page-filled": 61833,
    "page-multiple": 61834,
    "page-pdf": 61835,
    "page-remove": 61836,
    "page-search": 61837,
    "page": 61838,
    "paint-bucket": 61839,
    "paperclip": 61840,
    "pause": 61841,
    "paw": 61842,
    "paypal": 61843,
    "pencil": 61844,
    "photo": 61845,
    "play-circle": 61846,
    "play-video": 61847,
    "play": 61848,
    "plus": 61849,
    "pound": 61850,
    "power": 61851,
    "previous": 61852,
    "price-tag": 61853,
    "pricetag-multiple": 61854,
    "print": 61855,
    "prohibited": 61856,
    "projection-screen": 61857,
    "puzzle": 61858,
    "quote": 61859,
    "record": 61860,
    "refresh": 61861,
    "results-demographics": 61862,
    "results": 61863,
    "rewind-ten": 61864,
    "rewind": 61865,
    "rss": 61866,
    "safety-cone": 61867,
    "save": 61868,
    "share": 61869,
    "sheriff-badge": 61870,
    "shield": 61871,
    "shopping-bag": 61872,
    "shopping-cart": 61873,
    "shuffle": 61874,
    "skull": 61875,
    "social-500px": 61876,
    "social-adobe": 61877,
    "social-amazon": 61878,
    "social-android": 61879,
    "social-apple": 61880,
    "social-behance": 61881,
    "social-bing": 61882,
    "social-blogger": 61883,
    "social-delicious": 61884,
    "social-designer-news": 61885,
    "social-deviant-art": 61886,
    "social-digg": 61887,
    "social-dribbble": 61888,
    "social-drive": 61889,
    "social-dropbox": 61890,
    "social-evernote": 61891,
    "social-facebook": 61892,
    "social-flickr": 61893,
    "social-forrst": 61894,
    "social-foursquare": 61895,
    "social-game-center": 61896,
    "social-github": 61897,
    "social-google-plus": 61898,
    "social-hacker-news": 61899,
    "social-hi5": 61900,
    "social-instagram": 61901,
    "social-joomla": 61902,
    "social-lastfm": 61903,
    "social-linkedin": 61904,
    "social-medium": 61905,
    "social-myspace": 61906,
    "social-orkut": 61907,
    "social-path": 61908,
    "social-picasa": 61909,
    "social-pinterest": 61910,
    "social-rdio": 61911,
    "social-reddit": 61912,
    "social-skillshare": 61913,
    "social-skype": 61914,
    "social-smashing-mag": 61915,
    "social-snapchat": 61916,
    "social-spotify": 61917,
    "social-squidoo": 61918,
    "social-stack-overflow": 61919,
    "social-steam": 61920,
    "social-stumbleupon": 61921,
    "social-treehouse": 61922,
    "social-tumblr": 61923,
    "social-twitter": 61924,
    "social-vimeo": 61925,
    "social-windows": 61926,
    "social-xbox": 61927,
    "social-yahoo": 61928,
    "social-yelp": 61929,
    "social-youtube": 61930,
    "social-zerply": 61931,
    "social-zurb": 61932,
    "sound": 61933,
    "star": 61934,
    "stop": 61935,
    "strikethrough": 61936,
    "subscript": 61937,
    "superscript": 61938,
    "tablet-landscape": 61939,
    "tablet-portrait": 61940,
    "target-two": 61941,
    "target": 61942,
    "telephone-accessible": 61943,
    "telephone": 61944,
    "text-color": 61945,
    "thumbnails": 61946,
    "ticket": 61947,
    "torso-business": 61948,
    "torso-female": 61949,
    "torso": 61950,
    "torsos-all-female": 61951,
    "torsos-all": 61952,
    "torsos-female-male": 61953,
    "torsos-male-female": 61954,
    "torsos": 61955,
    "trash": 61956,
    "trees": 61957,
    "trophy": 61958,
    "underline": 61959,
    "universal-access": 61960,
    "unlink": 61961,
    "unlock": 61962,
    "upload-cloud": 61963,
    "upload": 61964,
    "usb": 61965,
    "video": 61966,
    "volume-none": 61967,
    "volume-strike": 61968,
    "volume": 61969,
    "web": 61970,
    "wheelchair": 61971,
    "widget": 61972,
    "wrench": 61973,
    "x-circle": 61974,
    "x": 61975,
    "yen": 61976,
    "zoom-in": 61977,
    "zoom-out": 61978
  };
},606,[],"react-native-vector-icons/glyphmaps/Foundation.json");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  var _MaterialIcons = require(_dependencyMap[1], "./glyphmaps/MaterialIcons.json");

  var _MaterialIcons2 = babelHelpers.interopRequireDefault(_MaterialIcons);

  var iconSet = (0, _createIconSet2.default)(_MaterialIcons2.default, 'Material Icons', 'MaterialIcons.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},607,[494,608],"react-native-vector-icons/MaterialIcons.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    "3d-rotation": 59469,
    "ac-unit": 60219,
    "access-alarm": 57744,
    "access-alarms": 57745,
    "access-time": 57746,
    "accessibility": 59470,
    "accessible": 59668,
    "account-balance": 59471,
    "account-balance-wallet": 59472,
    "account-box": 59473,
    "account-circle": 59475,
    "adb": 58894,
    "add": 57669,
    "add-a-photo": 58425,
    "add-alarm": 57747,
    "add-alert": 57347,
    "add-box": 57670,
    "add-circle": 57671,
    "add-circle-outline": 57672,
    "add-location": 58727,
    "add-shopping-cart": 59476,
    "add-to-photos": 58269,
    "add-to-queue": 57436,
    "adjust": 58270,
    "airline-seat-flat": 58928,
    "airline-seat-flat-angled": 58929,
    "airline-seat-individual-suite": 58930,
    "airline-seat-legroom-extra": 58931,
    "airline-seat-legroom-normal": 58932,
    "airline-seat-legroom-reduced": 58933,
    "airline-seat-recline-extra": 58934,
    "airline-seat-recline-normal": 58935,
    "airplanemode-active": 57749,
    "airplanemode-inactive": 57748,
    "airplay": 57429,
    "airport-shuttle": 60220,
    "alarm": 59477,
    "alarm-add": 59478,
    "alarm-off": 59479,
    "alarm-on": 59480,
    "album": 57369,
    "all-inclusive": 60221,
    "all-out": 59659,
    "android": 59481,
    "announcement": 59482,
    "apps": 58819,
    "archive": 57673,
    "arrow-back": 58820,
    "arrow-downward": 58843,
    "arrow-drop-down": 58821,
    "arrow-drop-down-circle": 58822,
    "arrow-drop-up": 58823,
    "arrow-forward": 58824,
    "arrow-upward": 58840,
    "art-track": 57440,
    "aspect-ratio": 59483,
    "assessment": 59484,
    "assignment": 59485,
    "assignment-ind": 59486,
    "assignment-late": 59487,
    "assignment-return": 59488,
    "assignment-returned": 59489,
    "assignment-turned-in": 59490,
    "assistant": 58271,
    "assistant-photo": 58272,
    "attach-file": 57894,
    "attach-money": 57895,
    "attachment": 58044,
    "audiotrack": 58273,
    "autorenew": 59491,
    "av-timer": 57371,
    "backspace": 57674,
    "backup": 59492,
    "battery-alert": 57756,
    "battery-charging-full": 57763,
    "battery-full": 57764,
    "battery-std": 57765,
    "battery-unknown": 57766,
    "beach-access": 60222,
    "beenhere": 58669,
    "block": 57675,
    "bluetooth": 57767,
    "bluetooth-audio": 58895,
    "bluetooth-connected": 57768,
    "bluetooth-disabled": 57769,
    "bluetooth-searching": 57770,
    "blur-circular": 58274,
    "blur-linear": 58275,
    "blur-off": 58276,
    "blur-on": 58277,
    "book": 59493,
    "bookmark": 59494,
    "bookmark-border": 59495,
    "border-all": 57896,
    "border-bottom": 57897,
    "border-clear": 57898,
    "border-color": 57899,
    "border-horizontal": 57900,
    "border-inner": 57901,
    "border-left": 57902,
    "border-outer": 57903,
    "border-right": 57904,
    "border-style": 57905,
    "border-top": 57906,
    "border-vertical": 57907,
    "branding-watermark": 57451,
    "brightness-1": 58278,
    "brightness-2": 58279,
    "brightness-3": 58280,
    "brightness-4": 58281,
    "brightness-5": 58282,
    "brightness-6": 58283,
    "brightness-7": 58284,
    "brightness-auto": 57771,
    "brightness-high": 57772,
    "brightness-low": 57773,
    "brightness-medium": 57774,
    "broken-image": 58285,
    "brush": 58286,
    "bubble-chart": 59101,
    "bug-report": 59496,
    "build": 59497,
    "burst-mode": 58428,
    "business": 57519,
    "business-center": 60223,
    "cached": 59498,
    "cake": 59369,
    "call": 57520,
    "call-end": 57521,
    "call-made": 57522,
    "call-merge": 57523,
    "call-missed": 57524,
    "call-missed-outgoing": 57572,
    "call-received": 57525,
    "call-split": 57526,
    "call-to-action": 57452,
    "camera": 58287,
    "camera-alt": 58288,
    "camera-enhance": 59644,
    "camera-front": 58289,
    "camera-rear": 58290,
    "camera-roll": 58291,
    "cancel": 58825,
    "card-giftcard": 59638,
    "card-membership": 59639,
    "card-travel": 59640,
    "casino": 60224,
    "cast": 58119,
    "cast-connected": 58120,
    "center-focus-strong": 58292,
    "center-focus-weak": 58293,
    "change-history": 59499,
    "chat": 57527,
    "chat-bubble": 57546,
    "chat-bubble-outline": 57547,
    "check": 58826,
    "check-box": 59444,
    "check-box-outline-blank": 59445,
    "check-circle": 59500,
    "chevron-left": 58827,
    "chevron-right": 58828,
    "child-care": 60225,
    "child-friendly": 60226,
    "chrome-reader-mode": 59501,
    "class": 59502,
    "clear": 57676,
    "clear-all": 57528,
    "close": 58829,
    "closed-caption": 57372,
    "cloud": 58045,
    "cloud-circle": 58046,
    "cloud-done": 58047,
    "cloud-download": 58048,
    "cloud-off": 58049,
    "cloud-queue": 58050,
    "cloud-upload": 58051,
    "code": 59503,
    "collections": 58294,
    "collections-bookmark": 58417,
    "color-lens": 58295,
    "colorize": 58296,
    "comment": 57529,
    "compare": 58297,
    "compare-arrows": 59669,
    "computer": 58122,
    "confirmation-number": 58936,
    "contact-mail": 57552,
    "contact-phone": 57551,
    "contacts": 57530,
    "content-copy": 57677,
    "content-cut": 57678,
    "content-paste": 57679,
    "control-point": 58298,
    "control-point-duplicate": 58299,
    "copyright": 59660,
    "create": 57680,
    "create-new-folder": 58060,
    "credit-card": 59504,
    "crop": 58302,
    "crop-16-9": 58300,
    "crop-3-2": 58301,
    "crop-5-4": 58303,
    "crop-7-5": 58304,
    "crop-din": 58305,
    "crop-free": 58306,
    "crop-landscape": 58307,
    "crop-original": 58308,
    "crop-portrait": 58309,
    "crop-rotate": 58423,
    "crop-square": 58310,
    "dashboard": 59505,
    "data-usage": 57775,
    "date-range": 59670,
    "dehaze": 58311,
    "delete": 59506,
    "delete-forever": 59691,
    "delete-sweep": 57708,
    "description": 59507,
    "desktop-mac": 58123,
    "desktop-windows": 58124,
    "details": 58312,
    "developer-board": 58125,
    "developer-mode": 57776,
    "device-hub": 58165,
    "devices": 57777,
    "devices-other": 58167,
    "dialer-sip": 57531,
    "dialpad": 57532,
    "directions": 58670,
    "directions-bike": 58671,
    "directions-boat": 58674,
    "directions-bus": 58672,
    "directions-car": 58673,
    "directions-railway": 58676,
    "directions-run": 58726,
    "directions-subway": 58675,
    "directions-transit": 58677,
    "directions-walk": 58678,
    "disc-full": 58896,
    "dns": 59509,
    "do-not-disturb": 58898,
    "do-not-disturb-alt": 58897,
    "do-not-disturb-off": 58947,
    "do-not-disturb-on": 58948,
    "dock": 58126,
    "domain": 59374,
    "done": 59510,
    "done-all": 59511,
    "donut-large": 59671,
    "donut-small": 59672,
    "drafts": 57681,
    "drag-handle": 57949,
    "drive-eta": 58899,
    "dvr": 57778,
    "edit": 58313,
    "edit-location": 58728,
    "eject": 59643,
    "email": 57534,
    "enhanced-encryption": 58943,
    "equalizer": 57373,
    "error": 57344,
    "error-outline": 57345,
    "euro-symbol": 59686,
    "ev-station": 58733,
    "event": 59512,
    "event-available": 58900,
    "event-busy": 58901,
    "event-note": 58902,
    "event-seat": 59651,
    "exit-to-app": 59513,
    "expand-less": 58830,
    "expand-more": 58831,
    "explicit": 57374,
    "explore": 59514,
    "exposure": 58314,
    "exposure-neg-1": 58315,
    "exposure-neg-2": 58316,
    "exposure-plus-1": 58317,
    "exposure-plus-2": 58318,
    "exposure-zero": 58319,
    "extension": 59515,
    "face": 59516,
    "fast-forward": 57375,
    "fast-rewind": 57376,
    "favorite": 59517,
    "favorite-border": 59518,
    "featured-play-list": 57453,
    "featured-video": 57454,
    "feedback": 59519,
    "fiber-dvr": 57437,
    "fiber-manual-record": 57441,
    "fiber-new": 57438,
    "fiber-pin": 57450,
    "fiber-smart-record": 57442,
    "file-download": 58052,
    "file-upload": 58054,
    "filter": 58323,
    "filter-1": 58320,
    "filter-2": 58321,
    "filter-3": 58322,
    "filter-4": 58324,
    "filter-5": 58325,
    "filter-6": 58326,
    "filter-7": 58327,
    "filter-8": 58328,
    "filter-9": 58329,
    "filter-9-plus": 58330,
    "filter-b-and-w": 58331,
    "filter-center-focus": 58332,
    "filter-drama": 58333,
    "filter-frames": 58334,
    "filter-hdr": 58335,
    "filter-list": 57682,
    "filter-none": 58336,
    "filter-tilt-shift": 58338,
    "filter-vintage": 58339,
    "find-in-page": 59520,
    "find-replace": 59521,
    "fingerprint": 59661,
    "first-page": 58844,
    "fitness-center": 60227,
    "flag": 57683,
    "flare": 58340,
    "flash-auto": 58341,
    "flash-off": 58342,
    "flash-on": 58343,
    "flight": 58681,
    "flight-land": 59652,
    "flight-takeoff": 59653,
    "flip": 58344,
    "flip-to-back": 59522,
    "flip-to-front": 59523,
    "folder": 58055,
    "folder-open": 58056,
    "folder-shared": 58057,
    "folder-special": 58903,
    "font-download": 57703,
    "format-align-center": 57908,
    "format-align-justify": 57909,
    "format-align-left": 57910,
    "format-align-right": 57911,
    "format-bold": 57912,
    "format-clear": 57913,
    "format-color-fill": 57914,
    "format-color-reset": 57915,
    "format-color-text": 57916,
    "format-indent-decrease": 57917,
    "format-indent-increase": 57918,
    "format-italic": 57919,
    "format-line-spacing": 57920,
    "format-list-bulleted": 57921,
    "format-list-numbered": 57922,
    "format-paint": 57923,
    "format-quote": 57924,
    "format-shapes": 57950,
    "format-size": 57925,
    "format-strikethrough": 57926,
    "format-textdirection-l-to-r": 57927,
    "format-textdirection-r-to-l": 57928,
    "format-underlined": 57929,
    "forum": 57535,
    "forward": 57684,
    "forward-10": 57430,
    "forward-30": 57431,
    "forward-5": 57432,
    "free-breakfast": 60228,
    "fullscreen": 58832,
    "fullscreen-exit": 58833,
    "functions": 57930,
    "g-translate": 59687,
    "gamepad": 58127,
    "games": 57377,
    "gavel": 59662,
    "gesture": 57685,
    "get-app": 59524,
    "gif": 59656,
    "golf-course": 60229,
    "gps-fixed": 57779,
    "gps-not-fixed": 57780,
    "gps-off": 57781,
    "grade": 59525,
    "gradient": 58345,
    "grain": 58346,
    "graphic-eq": 57784,
    "grid-off": 58347,
    "grid-on": 58348,
    "group": 59375,
    "group-add": 59376,
    "group-work": 59526,
    "hd": 57426,
    "hdr-off": 58349,
    "hdr-on": 58350,
    "hdr-strong": 58353,
    "hdr-weak": 58354,
    "headset": 58128,
    "headset-mic": 58129,
    "healing": 58355,
    "hearing": 57379,
    "help": 59527,
    "help-outline": 59645,
    "high-quality": 57380,
    "highlight": 57951,
    "highlight-off": 59528,
    "history": 59529,
    "home": 59530,
    "hot-tub": 60230,
    "hotel": 58682,
    "hourglass-empty": 59531,
    "hourglass-full": 59532,
    "http": 59650,
    "https": 59533,
    "image": 58356,
    "image-aspect-ratio": 58357,
    "import-contacts": 57568,
    "import-export": 57539,
    "important-devices": 59666,
    "inbox": 57686,
    "indeterminate-check-box": 59657,
    "info": 59534,
    "info-outline": 59535,
    "input": 59536,
    "insert-chart": 57931,
    "insert-comment": 57932,
    "insert-drive-file": 57933,
    "insert-emoticon": 57934,
    "insert-invitation": 57935,
    "insert-link": 57936,
    "insert-photo": 57937,
    "invert-colors": 59537,
    "invert-colors-off": 57540,
    "iso": 58358,
    "keyboard": 58130,
    "keyboard-arrow-down": 58131,
    "keyboard-arrow-left": 58132,
    "keyboard-arrow-right": 58133,
    "keyboard-arrow-up": 58134,
    "keyboard-backspace": 58135,
    "keyboard-capslock": 58136,
    "keyboard-hide": 58138,
    "keyboard-return": 58139,
    "keyboard-tab": 58140,
    "keyboard-voice": 58141,
    "kitchen": 60231,
    "label": 59538,
    "label-outline": 59539,
    "landscape": 58359,
    "language": 59540,
    "laptop": 58142,
    "laptop-chromebook": 58143,
    "laptop-mac": 58144,
    "laptop-windows": 58145,
    "last-page": 58845,
    "launch": 59541,
    "layers": 58683,
    "layers-clear": 58684,
    "leak-add": 58360,
    "leak-remove": 58361,
    "lens": 58362,
    "library-add": 57390,
    "library-books": 57391,
    "library-music": 57392,
    "lightbulb-outline": 59663,
    "line-style": 59673,
    "line-weight": 59674,
    "linear-scale": 57952,
    "link": 57687,
    "linked-camera": 58424,
    "list": 59542,
    "live-help": 57542,
    "live-tv": 58937,
    "local-activity": 58687,
    "local-airport": 58685,
    "local-atm": 58686,
    "local-bar": 58688,
    "local-cafe": 58689,
    "local-car-wash": 58690,
    "local-convenience-store": 58691,
    "local-dining": 58710,
    "local-drink": 58692,
    "local-florist": 58693,
    "local-gas-station": 58694,
    "local-grocery-store": 58695,
    "local-hospital": 58696,
    "local-hotel": 58697,
    "local-laundry-service": 58698,
    "local-library": 58699,
    "local-mall": 58700,
    "local-movies": 58701,
    "local-offer": 58702,
    "local-parking": 58703,
    "local-pharmacy": 58704,
    "local-phone": 58705,
    "local-pizza": 58706,
    "local-play": 58707,
    "local-post-office": 58708,
    "local-printshop": 58709,
    "local-see": 58711,
    "local-shipping": 58712,
    "local-taxi": 58713,
    "location-city": 59377,
    "location-disabled": 57782,
    "location-off": 57543,
    "location-on": 57544,
    "location-searching": 57783,
    "lock": 59543,
    "lock-open": 59544,
    "lock-outline": 59545,
    "looks": 58364,
    "looks-3": 58363,
    "looks-4": 58365,
    "looks-5": 58366,
    "looks-6": 58367,
    "looks-one": 58368,
    "looks-two": 58369,
    "loop": 57384,
    "loupe": 58370,
    "low-priority": 57709,
    "loyalty": 59546,
    "mail": 57688,
    "mail-outline": 57569,
    "map": 58715,
    "markunread": 57689,
    "markunread-mailbox": 59547,
    "memory": 58146,
    "menu": 58834,
    "merge-type": 57938,
    "message": 57545,
    "mic": 57385,
    "mic-none": 57386,
    "mic-off": 57387,
    "mms": 58904,
    "mode-comment": 57939,
    "mode-edit": 57940,
    "monetization-on": 57955,
    "money-off": 57948,
    "monochrome-photos": 58371,
    "mood": 59378,
    "mood-bad": 59379,
    "more": 58905,
    "more-horiz": 58835,
    "more-vert": 58836,
    "motorcycle": 59675,
    "mouse": 58147,
    "move-to-inbox": 57704,
    "movie": 57388,
    "movie-creation": 58372,
    "movie-filter": 58426,
    "multiline-chart": 59103,
    "music-note": 58373,
    "music-video": 57443,
    "my-location": 58716,
    "nature": 58374,
    "nature-people": 58375,
    "navigate-before": 58376,
    "navigate-next": 58377,
    "navigation": 58717,
    "near-me": 58729,
    "network-cell": 57785,
    "network-check": 58944,
    "network-locked": 58906,
    "network-wifi": 57786,
    "new-releases": 57393,
    "next-week": 57706,
    "nfc": 57787,
    "no-encryption": 58945,
    "no-sim": 57548,
    "not-interested": 57395,
    "note": 57455,
    "note-add": 59548,
    "notifications": 59380,
    "notifications-active": 59383,
    "notifications-none": 59381,
    "notifications-off": 59382,
    "notifications-paused": 59384,
    "offline-pin": 59658,
    "ondemand-video": 58938,
    "opacity": 59676,
    "open-in-browser": 59549,
    "open-in-new": 59550,
    "open-with": 59551,
    "pages": 59385,
    "pageview": 59552,
    "palette": 58378,
    "pan-tool": 59685,
    "panorama": 58379,
    "panorama-fish-eye": 58380,
    "panorama-horizontal": 58381,
    "panorama-vertical": 58382,
    "panorama-wide-angle": 58383,
    "party-mode": 59386,
    "pause": 57396,
    "pause-circle-filled": 57397,
    "pause-circle-outline": 57398,
    "payment": 59553,
    "people": 59387,
    "people-outline": 59388,
    "perm-camera-mic": 59554,
    "perm-contact-calendar": 59555,
    "perm-data-setting": 59556,
    "perm-device-information": 59557,
    "perm-identity": 59558,
    "perm-media": 59559,
    "perm-phone-msg": 59560,
    "perm-scan-wifi": 59561,
    "person": 59389,
    "person-add": 59390,
    "person-outline": 59391,
    "person-pin": 58714,
    "person-pin-circle": 58730,
    "personal-video": 58939,
    "pets": 59677,
    "phone": 57549,
    "phone-android": 58148,
    "phone-bluetooth-speaker": 58907,
    "phone-forwarded": 58908,
    "phone-in-talk": 58909,
    "phone-iphone": 58149,
    "phone-locked": 58910,
    "phone-missed": 58911,
    "phone-paused": 58912,
    "phonelink": 58150,
    "phonelink-erase": 57563,
    "phonelink-lock": 57564,
    "phonelink-off": 58151,
    "phonelink-ring": 57565,
    "phonelink-setup": 57566,
    "photo": 58384,
    "photo-album": 58385,
    "photo-camera": 58386,
    "photo-filter": 58427,
    "photo-library": 58387,
    "photo-size-select-actual": 58418,
    "photo-size-select-large": 58419,
    "photo-size-select-small": 58420,
    "picture-as-pdf": 58389,
    "picture-in-picture": 59562,
    "picture-in-picture-alt": 59665,
    "pie-chart": 59076,
    "pie-chart-outlined": 59077,
    "pin-drop": 58718,
    "place": 58719,
    "play-arrow": 57399,
    "play-circle-filled": 57400,
    "play-circle-outline": 57401,
    "play-for-work": 59654,
    "playlist-add": 57403,
    "playlist-add-check": 57445,
    "playlist-play": 57439,
    "plus-one": 59392,
    "poll": 59393,
    "polymer": 59563,
    "pool": 60232,
    "portable-wifi-off": 57550,
    "portrait": 58390,
    "power": 58940,
    "power-input": 58166,
    "power-settings-new": 59564,
    "pregnant-woman": 59678,
    "present-to-all": 57567,
    "print": 59565,
    "priority-high": 58949,
    "public": 59403,
    "publish": 57941,
    "query-builder": 59566,
    "question-answer": 59567,
    "queue": 57404,
    "queue-music": 57405,
    "queue-play-next": 57446,
    "radio": 57406,
    "radio-button-checked": 59447,
    "radio-button-unchecked": 59446,
    "rate-review": 58720,
    "receipt": 59568,
    "recent-actors": 57407,
    "record-voice-over": 59679,
    "redeem": 59569,
    "redo": 57690,
    "refresh": 58837,
    "remove": 57691,
    "remove-circle": 57692,
    "remove-circle-outline": 57693,
    "remove-from-queue": 57447,
    "remove-red-eye": 58391,
    "remove-shopping-cart": 59688,
    "reorder": 59646,
    "repeat": 57408,
    "repeat-one": 57409,
    "replay": 57410,
    "replay-10": 57433,
    "replay-30": 57434,
    "replay-5": 57435,
    "reply": 57694,
    "reply-all": 57695,
    "report": 57696,
    "report-problem": 59570,
    "restaurant": 58732,
    "restaurant-menu": 58721,
    "restore": 59571,
    "restore-page": 59689,
    "ring-volume": 57553,
    "room": 59572,
    "room-service": 60233,
    "rotate-90-degrees-ccw": 58392,
    "rotate-left": 58393,
    "rotate-right": 58394,
    "rounded-corner": 59680,
    "router": 58152,
    "rowing": 59681,
    "rss-feed": 57573,
    "rv-hookup": 58946,
    "satellite": 58722,
    "save": 57697,
    "scanner": 58153,
    "schedule": 59573,
    "school": 59404,
    "screen-lock-landscape": 57790,
    "screen-lock-portrait": 57791,
    "screen-lock-rotation": 57792,
    "screen-rotation": 57793,
    "screen-share": 57570,
    "sd-card": 58915,
    "sd-storage": 57794,
    "search": 59574,
    "security": 58154,
    "select-all": 57698,
    "send": 57699,
    "sentiment-dissatisfied": 59409,
    "sentiment-neutral": 59410,
    "sentiment-satisfied": 59411,
    "sentiment-very-dissatisfied": 59412,
    "sentiment-very-satisfied": 59413,
    "settings": 59576,
    "settings-applications": 59577,
    "settings-backup-restore": 59578,
    "settings-bluetooth": 59579,
    "settings-brightness": 59581,
    "settings-cell": 59580,
    "settings-ethernet": 59582,
    "settings-input-antenna": 59583,
    "settings-input-component": 59584,
    "settings-input-composite": 59585,
    "settings-input-hdmi": 59586,
    "settings-input-svideo": 59587,
    "settings-overscan": 59588,
    "settings-phone": 59589,
    "settings-power": 59590,
    "settings-remote": 59591,
    "settings-system-daydream": 57795,
    "settings-voice": 59592,
    "share": 59405,
    "shop": 59593,
    "shop-two": 59594,
    "shopping-basket": 59595,
    "shopping-cart": 59596,
    "short-text": 57953,
    "show-chart": 59105,
    "shuffle": 57411,
    "signal-cellular-4-bar": 57800,
    "signal-cellular-connected-no-internet-4-bar": 57805,
    "signal-cellular-no-sim": 57806,
    "signal-cellular-null": 57807,
    "signal-cellular-off": 57808,
    "signal-wifi-4-bar": 57816,
    "signal-wifi-4-bar-lock": 57817,
    "signal-wifi-off": 57818,
    "sim-card": 58155,
    "sim-card-alert": 58916,
    "skip-next": 57412,
    "skip-previous": 57413,
    "slideshow": 58395,
    "slow-motion-video": 57448,
    "smartphone": 58156,
    "smoke-free": 60234,
    "smoking-rooms": 60235,
    "sms": 58917,
    "sms-failed": 58918,
    "snooze": 57414,
    "sort": 57700,
    "sort-by-alpha": 57427,
    "spa": 60236,
    "space-bar": 57942,
    "speaker": 58157,
    "speaker-group": 58158,
    "speaker-notes": 59597,
    "speaker-notes-off": 59690,
    "speaker-phone": 57554,
    "spellcheck": 59598,
    "star": 59448,
    "star-border": 59450,
    "star-half": 59449,
    "stars": 59600,
    "stay-current-landscape": 57555,
    "stay-current-portrait": 57556,
    "stay-primary-landscape": 57557,
    "stay-primary-portrait": 57558,
    "stop": 57415,
    "stop-screen-share": 57571,
    "storage": 57819,
    "store": 59601,
    "store-mall-directory": 58723,
    "straighten": 58396,
    "streetview": 58734,
    "strikethrough-s": 57943,
    "style": 58397,
    "subdirectory-arrow-left": 58841,
    "subdirectory-arrow-right": 58842,
    "subject": 59602,
    "subscriptions": 57444,
    "subtitles": 57416,
    "subway": 58735,
    "supervisor-account": 59603,
    "surround-sound": 57417,
    "swap-calls": 57559,
    "swap-horiz": 59604,
    "swap-vert": 59605,
    "swap-vertical-circle": 59606,
    "switch-camera": 58398,
    "switch-video": 58399,
    "sync": 58919,
    "sync-disabled": 58920,
    "sync-problem": 58921,
    "system-update": 58922,
    "system-update-alt": 59607,
    "tab": 59608,
    "tab-unselected": 59609,
    "tablet": 58159,
    "tablet-android": 58160,
    "tablet-mac": 58161,
    "tag-faces": 58400,
    "tap-and-play": 58923,
    "terrain": 58724,
    "text-fields": 57954,
    "text-format": 57701,
    "textsms": 57560,
    "texture": 58401,
    "theaters": 59610,
    "thumb-down": 59611,
    "thumb-up": 59612,
    "thumbs-up-down": 59613,
    "time-to-leave": 58924,
    "timelapse": 58402,
    "timeline": 59682,
    "timer": 58405,
    "timer-10": 58403,
    "timer-3": 58404,
    "timer-off": 58406,
    "title": 57956,
    "toc": 59614,
    "today": 59615,
    "toll": 59616,
    "tonality": 58407,
    "touch-app": 59667,
    "toys": 58162,
    "track-changes": 59617,
    "traffic": 58725,
    "train": 58736,
    "tram": 58737,
    "transfer-within-a-station": 58738,
    "transform": 58408,
    "translate": 59618,
    "trending-down": 59619,
    "trending-flat": 59620,
    "trending-up": 59621,
    "tune": 58409,
    "turned-in": 59622,
    "turned-in-not": 59623,
    "tv": 58163,
    "unarchive": 57705,
    "undo": 57702,
    "unfold-less": 58838,
    "unfold-more": 58839,
    "update": 59683,
    "usb": 57824,
    "verified-user": 59624,
    "vertical-align-bottom": 57944,
    "vertical-align-center": 57945,
    "vertical-align-top": 57946,
    "vibration": 58925,
    "video-call": 57456,
    "video-label": 57457,
    "video-library": 57418,
    "videocam": 57419,
    "videocam-off": 57420,
    "videogame-asset": 58168,
    "view-agenda": 59625,
    "view-array": 59626,
    "view-carousel": 59627,
    "view-column": 59628,
    "view-comfy": 58410,
    "view-compact": 58411,
    "view-day": 59629,
    "view-headline": 59630,
    "view-list": 59631,
    "view-module": 59632,
    "view-quilt": 59633,
    "view-stream": 59634,
    "view-week": 59635,
    "vignette": 58421,
    "visibility": 59636,
    "visibility-off": 59637,
    "voice-chat": 58926,
    "voicemail": 57561,
    "volume-down": 57421,
    "volume-mute": 57422,
    "volume-off": 57423,
    "volume-up": 57424,
    "vpn-key": 57562,
    "vpn-lock": 58927,
    "wallpaper": 57788,
    "warning": 57346,
    "watch": 58164,
    "watch-later": 59684,
    "wb-auto": 58412,
    "wb-cloudy": 58413,
    "wb-incandescent": 58414,
    "wb-iridescent": 58422,
    "wb-sunny": 58416,
    "wc": 58941,
    "web": 57425,
    "web-asset": 57449,
    "weekend": 57707,
    "whatshot": 59406,
    "widgets": 57789,
    "wifi": 58942,
    "wifi-lock": 57825,
    "wifi-tethering": 57826,
    "work": 59641,
    "wrap-text": 57947,
    "youtube-searched-for": 59642,
    "zoom-in": 59647,
    "zoom-out": 59648,
    "zoom-out-map": 58731
  };
},608,[],"react-native-vector-icons/glyphmaps/MaterialIcons.json");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  var _MaterialCommunityIcons = require(_dependencyMap[1], "./glyphmaps/MaterialCommunityIcons.json");

  var _MaterialCommunityIcons2 = babelHelpers.interopRequireDefault(_MaterialCommunityIcons);

  var iconSet = (0, _createIconSet2.default)(_MaterialCommunityIcons2.default, 'Material Design Icons', 'MaterialCommunityIcons.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},609,[494,610],"react-native-vector-icons/MaterialCommunityIcons.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    "access-point": 61442,
    "access-point-network": 61443,
    "account": 61444,
    "account-alert": 61445,
    "account-box": 61446,
    "account-box-outline": 61447,
    "account-card-details": 62930,
    "account-check": 61448,
    "account-circle": 61449,
    "account-convert": 61450,
    "account-edit": 63163,
    "account-key": 61451,
    "account-location": 61452,
    "account-minus": 61453,
    "account-multiple": 61454,
    "account-multiple-minus": 62931,
    "account-multiple-outline": 61455,
    "account-multiple-plus": 61456,
    "account-network": 61457,
    "account-off": 61458,
    "account-outline": 61459,
    "account-plus": 61460,
    "account-remove": 61461,
    "account-search": 61462,
    "account-settings": 63024,
    "account-settings-variant": 63025,
    "account-star": 61463,
    "account-switch": 61465,
    "adjust": 61466,
    "air-conditioner": 61467,
    "airballoon": 61468,
    "airplane": 61469,
    "airplane-landing": 62932,
    "airplane-off": 61470,
    "airplane-takeoff": 62933,
    "airplay": 61471,
    "alarm": 61472,
    "alarm-bell": 63373,
    "alarm-check": 61473,
    "alarm-light": 63374,
    "alarm-multiple": 61474,
    "alarm-off": 61475,
    "alarm-plus": 61476,
    "alarm-snooze": 63117,
    "album": 61477,
    "alert": 61478,
    "alert-box": 61479,
    "alert-circle": 61480,
    "alert-circle-outline": 62934,
    "alert-decagram": 63164,
    "alert-octagon": 61481,
    "alert-octagram": 63334,
    "alert-outline": 61482,
    "all-inclusive": 63165,
    "alpha": 61483,
    "alphabetical": 61484,
    "altimeter": 62935,
    "amazon": 61485,
    "amazon-clouddrive": 61486,
    "ambulance": 61487,
    "amplifier": 61488,
    "anchor": 61489,
    "android": 61490,
    "android-debug-bridge": 61491,
    "android-head": 63375,
    "android-studio": 61492,
    "angular": 63153,
    "angularjs": 63166,
    "animation": 62936,
    "apple": 61493,
    "apple-finder": 61494,
    "apple-ios": 61495,
    "apple-keyboard-caps": 63026,
    "apple-keyboard-command": 63027,
    "apple-keyboard-control": 63028,
    "apple-keyboard-option": 63029,
    "apple-keyboard-shift": 63030,
    "apple-mobileme": 61496,
    "apple-safari": 61497,
    "application": 62996,
    "approval": 63376,
    "apps": 61499,
    "archive": 61500,
    "arrange-bring-forward": 61501,
    "arrange-bring-to-front": 61502,
    "arrange-send-backward": 61503,
    "arrange-send-to-back": 61504,
    "arrow-all": 61505,
    "arrow-bottom-left": 61506,
    "arrow-bottom-right": 61507,
    "arrow-collapse": 62997,
    "arrow-collapse-all": 61508,
    "arrow-collapse-down": 63377,
    "arrow-collapse-left": 63378,
    "arrow-collapse-right": 63379,
    "arrow-collapse-up": 63380,
    "arrow-down": 61509,
    "arrow-down-bold": 63277,
    "arrow-down-bold-box": 63278,
    "arrow-down-bold-box-outline": 63279,
    "arrow-down-bold-circle": 61511,
    "arrow-down-bold-circle-outline": 61512,
    "arrow-down-bold-hexagon-outline": 61513,
    "arrow-down-box": 63167,
    "arrow-down-drop-circle": 61514,
    "arrow-down-drop-circle-outline": 61515,
    "arrow-down-thick": 61510,
    "arrow-expand": 62998,
    "arrow-expand-all": 61516,
    "arrow-expand-down": 63381,
    "arrow-expand-left": 63382,
    "arrow-expand-right": 63383,
    "arrow-expand-up": 63384,
    "arrow-left": 61517,
    "arrow-left-bold": 63280,
    "arrow-left-bold-box": 63281,
    "arrow-left-bold-box-outline": 63282,
    "arrow-left-bold-circle": 61519,
    "arrow-left-bold-circle-outline": 61520,
    "arrow-left-bold-hexagon-outline": 61521,
    "arrow-left-box": 63168,
    "arrow-left-drop-circle": 61522,
    "arrow-left-drop-circle-outline": 61523,
    "arrow-left-thick": 61518,
    "arrow-right": 61524,
    "arrow-right-bold": 63283,
    "arrow-right-bold-box": 63284,
    "arrow-right-bold-box-outline": 63285,
    "arrow-right-bold-circle": 61526,
    "arrow-right-bold-circle-outline": 61527,
    "arrow-right-bold-hexagon-outline": 61528,
    "arrow-right-box": 63169,
    "arrow-right-drop-circle": 61529,
    "arrow-right-drop-circle-outline": 61530,
    "arrow-right-thick": 61525,
    "arrow-top-left": 61531,
    "arrow-top-right": 61532,
    "arrow-up": 61533,
    "arrow-up-bold": 63286,
    "arrow-up-bold-box": 63287,
    "arrow-up-bold-box-outline": 63288,
    "arrow-up-bold-circle": 61535,
    "arrow-up-bold-circle-outline": 61536,
    "arrow-up-bold-hexagon-outline": 61537,
    "arrow-up-box": 63170,
    "arrow-up-drop-circle": 61538,
    "arrow-up-drop-circle-outline": 61539,
    "arrow-up-thick": 61534,
    "assistant": 61540,
    "asterisk": 63171,
    "at": 61541,
    "atom": 63335,
    "attachment": 61542,
    "audiobook": 61543,
    "auto-fix": 61544,
    "auto-upload": 61545,
    "autorenew": 61546,
    "av-timer": 61547,
    "baby": 61548,
    "baby-buggy": 63118,
    "backburger": 61549,
    "backspace": 61550,
    "backup-restore": 61551,
    "bandcamp": 63092,
    "bank": 61552,
    "barcode": 61553,
    "barcode-scan": 61554,
    "barley": 61555,
    "barrel": 61556,
    "basecamp": 61557,
    "basket": 61558,
    "basket-fill": 61559,
    "basket-unfill": 61560,
    "battery": 61561,
    "battery-10": 61562,
    "battery-20": 61563,
    "battery-30": 61564,
    "battery-40": 61565,
    "battery-50": 61566,
    "battery-60": 61567,
    "battery-70": 61568,
    "battery-80": 61569,
    "battery-90": 61570,
    "battery-alert": 61571,
    "battery-charging": 61572,
    "battery-charging-100": 61573,
    "battery-charging-20": 61574,
    "battery-charging-30": 61575,
    "battery-charging-40": 61576,
    "battery-charging-60": 61577,
    "battery-charging-80": 61578,
    "battery-charging-90": 61579,
    "battery-minus": 61580,
    "battery-negative": 61581,
    "battery-outline": 61582,
    "battery-plus": 61583,
    "battery-positive": 61584,
    "battery-unknown": 61585,
    "beach": 61586,
    "beaker": 63119,
    "beats": 61591,
    "beer": 61592,
    "behance": 61593,
    "bell": 61594,
    "bell-off": 61595,
    "bell-outline": 61596,
    "bell-plus": 61597,
    "bell-ring": 61598,
    "bell-ring-outline": 61599,
    "bell-sleep": 61600,
    "beta": 61601,
    "bible": 61602,
    "bike": 61603,
    "bing": 61604,
    "binoculars": 61605,
    "bio": 61606,
    "biohazard": 61607,
    "bitbucket": 61608,
    "black-mesa": 61609,
    "blackberry": 61610,
    "blender": 61611,
    "blinds": 61612,
    "block-helper": 61613,
    "blogger": 61614,
    "bluetooth": 61615,
    "bluetooth-audio": 61616,
    "bluetooth-connect": 61617,
    "bluetooth-off": 61618,
    "bluetooth-settings": 61619,
    "bluetooth-transfer": 61620,
    "blur": 61621,
    "blur-linear": 61622,
    "blur-off": 61623,
    "blur-radial": 61624,
    "bomb": 63120,
    "bomb-off": 63172,
    "bone": 61625,
    "book": 61626,
    "book-minus": 62937,
    "book-multiple": 61627,
    "book-multiple-variant": 61628,
    "book-open": 61629,
    "book-open-page-variant": 62938,
    "book-open-variant": 61630,
    "book-plus": 62939,
    "book-secure": 63385,
    "book-unsecure": 63386,
    "book-variant": 61631,
    "bookmark": 61632,
    "bookmark-check": 61633,
    "bookmark-music": 61634,
    "bookmark-outline": 61635,
    "bookmark-plus": 61637,
    "bookmark-plus-outline": 61636,
    "bookmark-remove": 61638,
    "boombox": 62940,
    "bootstrap": 63173,
    "border-all": 61639,
    "border-bottom": 61640,
    "border-color": 61641,
    "border-horizontal": 61642,
    "border-inside": 61643,
    "border-left": 61644,
    "border-none": 61645,
    "border-outside": 61646,
    "border-right": 61647,
    "border-style": 61648,
    "border-top": 61649,
    "border-vertical": 61650,
    "bow-tie": 63095,
    "bowl": 62999,
    "bowling": 61651,
    "box": 61652,
    "box-cutter": 61653,
    "box-shadow": 63031,
    "bridge": 63000,
    "briefcase": 61654,
    "briefcase-check": 61655,
    "briefcase-download": 61656,
    "briefcase-upload": 61657,
    "brightness-1": 61658,
    "brightness-2": 61659,
    "brightness-3": 61660,
    "brightness-4": 61661,
    "brightness-5": 61662,
    "brightness-6": 61663,
    "brightness-7": 61664,
    "brightness-auto": 61665,
    "broom": 61666,
    "brush": 61667,
    "buffer": 63001,
    "bug": 61668,
    "bulletin-board": 61669,
    "bullhorn": 61670,
    "bullseye": 62941,
    "burst-mode": 62942,
    "bus": 61671,
    "bus-articulated-end": 63387,
    "bus-articulated-front": 63388,
    "bus-double-decker": 63389,
    "bus-school": 63390,
    "bus-side": 63391,
    "cached": 61672,
    "cake": 61673,
    "cake-layered": 61674,
    "cake-variant": 61675,
    "calculator": 61676,
    "calendar": 61677,
    "calendar-blank": 61678,
    "calendar-check": 61679,
    "calendar-clock": 61680,
    "calendar-multiple": 61681,
    "calendar-multiple-check": 61682,
    "calendar-plus": 61683,
    "calendar-question": 63121,
    "calendar-range": 63096,
    "calendar-remove": 61684,
    "calendar-text": 61685,
    "calendar-today": 61686,
    "call-made": 61687,
    "call-merge": 61688,
    "call-missed": 61689,
    "call-received": 61690,
    "call-split": 61691,
    "camcorder": 61692,
    "camcorder-box": 61693,
    "camcorder-box-off": 61694,
    "camcorder-off": 61695,
    "camera": 61696,
    "camera-burst": 63122,
    "camera-enhance": 61697,
    "camera-front": 61698,
    "camera-front-variant": 61699,
    "camera-gopro": 63392,
    "camera-iris": 61700,
    "camera-metering-center": 63393,
    "camera-metering-matrix": 63394,
    "camera-metering-partial": 63395,
    "camera-metering-spot": 63396,
    "camera-off": 62943,
    "camera-party-mode": 61701,
    "camera-rear": 61702,
    "camera-rear-variant": 61703,
    "camera-switch": 61704,
    "camera-timer": 61705,
    "cancel": 63289,
    "candle": 62946,
    "candycane": 61706,
    "cannabis": 63397,
    "car": 61707,
    "car-battery": 61708,
    "car-connected": 61709,
    "car-convertable": 63398,
    "car-estate": 63399,
    "car-hatchback": 63400,
    "car-pickup": 63401,
    "car-side": 63402,
    "car-sports": 63403,
    "car-wash": 61710,
    "caravan": 63404,
    "cards": 63032,
    "cards-outline": 63033,
    "cards-playing-outline": 63034,
    "cards-variant": 63174,
    "carrot": 61711,
    "cart": 61712,
    "cart-off": 63083,
    "cart-outline": 61713,
    "cart-plus": 61714,
    "case-sensitive-alt": 61715,
    "cash": 61716,
    "cash-100": 61717,
    "cash-multiple": 61718,
    "cash-usd": 61719,
    "cast": 61720,
    "cast-connected": 61721,
    "cast-off": 63369,
    "castle": 61722,
    "cat": 61723,
    "cctv": 63405,
    "ceiling-light": 63336,
    "cellphone": 61724,
    "cellphone-android": 61725,
    "cellphone-basic": 61726,
    "cellphone-dock": 61727,
    "cellphone-iphone": 61728,
    "cellphone-link": 61729,
    "cellphone-link-off": 61730,
    "cellphone-settings": 61731,
    "certificate": 61732,
    "chair-school": 61733,
    "chart-arc": 61734,
    "chart-areaspline": 61735,
    "chart-bar": 61736,
    "chart-bar-stacked": 63337,
    "chart-bubble": 62947,
    "chart-donut": 63406,
    "chart-donut-variant": 63407,
    "chart-gantt": 63084,
    "chart-histogram": 61737,
    "chart-line": 61738,
    "chart-line-stacked": 63338,
    "chart-line-variant": 63408,
    "chart-pie": 61739,
    "chart-scatterplot-hexbin": 63085,
    "chart-timeline": 63086,
    "check": 61740,
    "check-all": 61741,
    "check-circle": 62944,
    "check-circle-outline": 62945,
    "checkbox-blank": 61742,
    "checkbox-blank-circle": 61743,
    "checkbox-blank-circle-outline": 61744,
    "checkbox-blank-outline": 61745,
    "checkbox-marked": 61746,
    "checkbox-marked-circle": 61747,
    "checkbox-marked-circle-outline": 61748,
    "checkbox-marked-outline": 61749,
    "checkbox-multiple-blank": 61750,
    "checkbox-multiple-blank-circle": 63035,
    "checkbox-multiple-blank-circle-outline": 63036,
    "checkbox-multiple-blank-outline": 61751,
    "checkbox-multiple-marked": 61752,
    "checkbox-multiple-marked-circle": 63037,
    "checkbox-multiple-marked-circle-outline": 63038,
    "checkbox-multiple-marked-outline": 61753,
    "checkerboard": 61754,
    "chemical-weapon": 61755,
    "chevron-double-down": 61756,
    "chevron-double-left": 61757,
    "chevron-double-right": 61758,
    "chevron-double-up": 61759,
    "chevron-down": 61760,
    "chevron-left": 61761,
    "chevron-right": 61762,
    "chevron-up": 61763,
    "chili-hot": 63409,
    "chili-medium": 63410,
    "chili-mild": 63411,
    "chip": 63002,
    "church": 61764,
    "circle": 63332,
    "circle-outline": 63333,
    "cisco-webex": 61765,
    "city": 61766,
    "clipboard": 61767,
    "clipboard-account": 61768,
    "clipboard-alert": 61769,
    "clipboard-arrow-down": 61770,
    "clipboard-arrow-left": 61771,
    "clipboard-check": 61772,
    "clipboard-flow": 63175,
    "clipboard-outline": 61773,
    "clipboard-plus": 63312,
    "clipboard-text": 61774,
    "clippy": 61775,
    "clock": 61776,
    "clock-alert": 62926,
    "clock-end": 61777,
    "clock-fast": 61778,
    "clock-in": 61779,
    "clock-out": 61780,
    "clock-start": 61781,
    "close": 61782,
    "close-box": 61783,
    "close-box-outline": 61784,
    "close-circle": 61785,
    "close-circle-outline": 61786,
    "close-network": 61787,
    "close-octagon": 61788,
    "close-octagon-outline": 61789,
    "close-outline": 63176,
    "closed-caption": 61790,
    "cloud": 61791,
    "cloud-braces": 63412,
    "cloud-check": 61792,
    "cloud-circle": 61793,
    "cloud-download": 61794,
    "cloud-off-outline": 61796,
    "cloud-outline": 61795,
    "cloud-print": 61797,
    "cloud-print-outline": 61798,
    "cloud-sync": 63039,
    "cloud-tags": 63413,
    "cloud-upload": 61799,
    "code-array": 61800,
    "code-braces": 61801,
    "code-brackets": 61802,
    "code-equal": 61803,
    "code-greater-than": 61804,
    "code-greater-than-or-equal": 61805,
    "code-less-than": 61806,
    "code-less-than-or-equal": 61807,
    "code-not-equal": 61808,
    "code-not-equal-variant": 61809,
    "code-parentheses": 61810,
    "code-string": 61811,
    "code-tags": 61812,
    "code-tags-check": 63123,
    "codepen": 61813,
    "coffee": 61814,
    "coffee-outline": 63177,
    "coffee-to-go": 61815,
    "coin": 61816,
    "coins": 63124,
    "collage": 63040,
    "color-helper": 61817,
    "comment": 61818,
    "comment-account": 61819,
    "comment-account-outline": 61820,
    "comment-alert": 61821,
    "comment-alert-outline": 61822,
    "comment-check": 61823,
    "comment-check-outline": 61824,
    "comment-multiple-outline": 61825,
    "comment-outline": 61826,
    "comment-plus-outline": 61827,
    "comment-processing": 61828,
    "comment-processing-outline": 61829,
    "comment-question-outline": 61830,
    "comment-remove-outline": 61831,
    "comment-text": 61832,
    "comment-text-outline": 61833,
    "compare": 61834,
    "compass": 61835,
    "compass-outline": 61836,
    "console": 61837,
    "console-line": 63414,
    "contact-mail": 61838,
    "contacts": 63178,
    "content-copy": 61839,
    "content-cut": 61840,
    "content-duplicate": 61841,
    "content-paste": 61842,
    "content-save": 61843,
    "content-save-all": 61844,
    "content-save-settings": 63003,
    "contrast": 61845,
    "contrast-box": 61846,
    "contrast-circle": 61847,
    "cookie": 61848,
    "copyright": 62950,
    "corn": 63415,
    "counter": 61849,
    "cow": 61850,
    "creation": 61897,
    "credit-card": 61851,
    "credit-card-multiple": 61852,
    "credit-card-off": 62948,
    "credit-card-plus": 63093,
    "credit-card-scan": 61853,
    "crop": 61854,
    "crop-free": 61855,
    "crop-landscape": 61856,
    "crop-portrait": 61857,
    "crop-rotate": 63125,
    "crop-square": 61858,
    "crosshairs": 61859,
    "crosshairs-gps": 61860,
    "crown": 61861,
    "cube": 61862,
    "cube-outline": 61863,
    "cube-send": 61864,
    "cube-unfolded": 61865,
    "cup": 61866,
    "cup-off": 62949,
    "cup-water": 61867,
    "currency-btc": 61868,
    "currency-chf": 63416,
    "currency-cny": 63417,
    "currency-eth": 63418,
    "currency-eur": 61869,
    "currency-gbp": 61870,
    "currency-inr": 61871,
    "currency-jpy": 63419,
    "currency-krw": 63420,
    "currency-ngn": 61872,
    "currency-rub": 61873,
    "currency-sign": 63421,
    "currency-try": 61874,
    "currency-twd": 63422,
    "currency-usd": 61875,
    "currency-usd-off": 63097,
    "cursor-default": 61876,
    "cursor-default-outline": 61877,
    "cursor-move": 61878,
    "cursor-pointer": 61879,
    "cursor-text": 62951,
    "database": 61880,
    "database-minus": 61881,
    "database-plus": 61882,
    "debug-step-into": 61883,
    "debug-step-out": 61884,
    "debug-step-over": 61885,
    "decagram": 63339,
    "decagram-outline": 63340,
    "decimal-decrease": 61886,
    "decimal-increase": 61887,
    "delete": 61888,
    "delete-circle": 63106,
    "delete-empty": 63179,
    "delete-forever": 62952,
    "delete-sweep": 62953,
    "delete-variant": 61889,
    "delta": 61890,
    "deskphone": 61891,
    "desktop-classic": 63423,
    "desktop-mac": 61892,
    "desktop-tower": 61893,
    "details": 61894,
    "developer-board": 63126,
    "deviantart": 61895,
    "dialpad": 63004,
    "diamond": 61896,
    "dice-1": 61898,
    "dice-2": 61899,
    "dice-3": 61900,
    "dice-4": 61901,
    "dice-5": 61902,
    "dice-6": 61903,
    "dice-d10": 63342,
    "dice-d20": 62954,
    "dice-d4": 62955,
    "dice-d6": 62956,
    "dice-d8": 62957,
    "dice-multiple": 63341,
    "dictionary": 63005,
    "dip-switch": 63424,
    "directions": 61904,
    "directions-fork": 63041,
    "discord": 63087,
    "disk": 62958,
    "disk-alert": 61905,
    "disqus": 61906,
    "disqus-outline": 61907,
    "division": 61908,
    "division-box": 61909,
    "dna": 63107,
    "dns": 61910,
    "do-not-disturb": 63127,
    "do-not-disturb-off": 63128,
    "dolby": 63154,
    "domain": 61911,
    "donkey": 63425,
    "dots-horizontal": 61912,
    "dots-horizontal-circle": 63426,
    "dots-vertical": 61913,
    "dots-vertical-circle": 63427,
    "douban": 63129,
    "download": 61914,
    "download-network": 63219,
    "drag": 61915,
    "drag-horizontal": 61916,
    "drag-vertical": 61917,
    "drawing": 61918,
    "drawing-box": 61919,
    "dribbble": 61920,
    "dribbble-box": 61921,
    "drone": 61922,
    "dropbox": 61923,
    "drupal": 61924,
    "duck": 61925,
    "dumbbell": 61926,
    "ear-hearing": 63428,
    "earth": 61927,
    "earth-box": 63180,
    "earth-box-off": 63181,
    "earth-off": 61928,
    "edge": 61929,
    "eject": 61930,
    "elephant": 63429,
    "elevation-decline": 61931,
    "elevation-rise": 61932,
    "elevator": 61933,
    "email": 61934,
    "email-alert": 63182,
    "email-open": 61935,
    "email-open-outline": 62959,
    "email-outline": 61936,
    "email-secure": 61937,
    "email-variant": 62960,
    "emby": 63155,
    "emoticon": 61938,
    "emoticon-cool": 61939,
    "emoticon-dead": 63130,
    "emoticon-devil": 61940,
    "emoticon-excited": 63131,
    "emoticon-happy": 61941,
    "emoticon-neutral": 61942,
    "emoticon-poop": 61943,
    "emoticon-sad": 61944,
    "emoticon-tongue": 61945,
    "engine": 61946,
    "engine-outline": 61947,
    "equal": 61948,
    "equal-box": 61949,
    "eraser": 61950,
    "eraser-variant": 63042,
    "escalator": 61951,
    "ethernet": 61952,
    "ethernet-cable": 61953,
    "ethernet-cable-off": 61954,
    "etsy": 61955,
    "ev-station": 62961,
    "eventbrite": 63430,
    "evernote": 61956,
    "exclamation": 61957,
    "exit-to-app": 61958,
    "export": 61959,
    "eye": 61960,
    "eye-off": 61961,
    "eye-off-outline": 63184,
    "eye-outline": 63183,
    "eyedropper": 61962,
    "eyedropper-variant": 61963,
    "face": 63043,
    "face-profile": 63044,
    "facebook": 61964,
    "facebook-box": 61965,
    "facebook-messenger": 61966,
    "factory": 61967,
    "fan": 61968,
    "fast-forward": 61969,
    "fast-forward-outline": 63185,
    "fax": 61970,
    "feather": 63186,
    "ferry": 61971,
    "file": 61972,
    "file-account": 63290,
    "file-chart": 61973,
    "file-check": 61974,
    "file-cloud": 61975,
    "file-delimited": 61976,
    "file-document": 61977,
    "file-document-box": 61978,
    "file-excel": 61979,
    "file-excel-box": 61980,
    "file-export": 61981,
    "file-find": 61982,
    "file-hidden": 62995,
    "file-image": 61983,
    "file-import": 61984,
    "file-lock": 61985,
    "file-multiple": 61986,
    "file-music": 61987,
    "file-outline": 61988,
    "file-pdf": 61989,
    "file-pdf-box": 61990,
    "file-plus": 63313,
    "file-powerpoint": 61991,
    "file-powerpoint-box": 61992,
    "file-presentation-box": 61993,
    "file-restore": 63088,
    "file-send": 61994,
    "file-tree": 63045,
    "file-video": 61995,
    "file-word": 61996,
    "file-word-box": 61997,
    "file-xml": 61998,
    "film": 61999,
    "filmstrip": 62000,
    "filmstrip-off": 62001,
    "filter": 62002,
    "filter-outline": 62003,
    "filter-remove": 62004,
    "filter-remove-outline": 62005,
    "filter-variant": 62006,
    "find-replace": 63187,
    "fingerprint": 62007,
    "fire": 62008,
    "firefox": 62009,
    "fish": 62010,
    "flag": 62011,
    "flag-checkered": 62012,
    "flag-outline": 62013,
    "flag-outline-variant": 62014,
    "flag-triangle": 62015,
    "flag-variant": 62016,
    "flash": 62017,
    "flash-auto": 62018,
    "flash-off": 62019,
    "flash-outline": 63188,
    "flash-red-eye": 63098,
    "flashlight": 62020,
    "flashlight-off": 62021,
    "flask": 61587,
    "flask-empty": 61588,
    "flask-empty-outline": 61589,
    "flask-outline": 61590,
    "flattr": 62022,
    "flip-to-back": 62023,
    "flip-to-front": 62024,
    "floppy": 62025,
    "flower": 62026,
    "folder": 62027,
    "folder-account": 62028,
    "folder-download": 62029,
    "folder-google-drive": 62030,
    "folder-image": 62031,
    "folder-lock": 62032,
    "folder-lock-open": 62033,
    "folder-move": 62034,
    "folder-multiple": 62035,
    "folder-multiple-image": 62036,
    "folder-multiple-outline": 62037,
    "folder-open": 63343,
    "folder-outline": 62038,
    "folder-plus": 62039,
    "folder-remove": 62040,
    "folder-star": 63132,
    "folder-upload": 62041,
    "font-awesome": 61498,
    "food": 62042,
    "food-apple": 62043,
    "food-croissant": 63431,
    "food-fork-drink": 62962,
    "food-off": 62963,
    "food-variant": 62044,
    "football": 62045,
    "football-australian": 62046,
    "football-helmet": 62047,
    "forklift": 63432,
    "format-align-bottom": 63314,
    "format-align-center": 62048,
    "format-align-justify": 62049,
    "format-align-left": 62050,
    "format-align-middle": 63315,
    "format-align-right": 62051,
    "format-align-top": 63316,
    "format-annotation-plus": 63046,
    "format-bold": 62052,
    "format-clear": 62053,
    "format-color-fill": 62054,
    "format-color-text": 63133,
    "format-float-center": 62055,
    "format-float-left": 62056,
    "format-float-none": 62057,
    "format-float-right": 62058,
    "format-font": 63189,
    "format-header-1": 62059,
    "format-header-2": 62060,
    "format-header-3": 62061,
    "format-header-4": 62062,
    "format-header-5": 62063,
    "format-header-6": 62064,
    "format-header-decrease": 62065,
    "format-header-equal": 62066,
    "format-header-increase": 62067,
    "format-header-pound": 62068,
    "format-horizontal-align-center": 63006,
    "format-horizontal-align-left": 63007,
    "format-horizontal-align-right": 63008,
    "format-indent-decrease": 62069,
    "format-indent-increase": 62070,
    "format-italic": 62071,
    "format-line-spacing": 62072,
    "format-line-style": 62920,
    "format-line-weight": 62921,
    "format-list-bulleted": 62073,
    "format-list-bulleted-type": 62074,
    "format-list-checks": 63317,
    "format-list-numbers": 62075,
    "format-page-break": 63190,
    "format-paint": 62076,
    "format-paragraph": 62077,
    "format-pilcrow": 63191,
    "format-quote-close": 62078,
    "format-quote-open": 63318,
    "format-rotate-90": 63145,
    "format-section": 63134,
    "format-size": 62079,
    "format-strikethrough": 62080,
    "format-strikethrough-variant": 62081,
    "format-subscript": 62082,
    "format-superscript": 62083,
    "format-text": 62084,
    "format-textdirection-l-to-r": 62085,
    "format-textdirection-r-to-l": 62086,
    "format-title": 62964,
    "format-underline": 62087,
    "format-vertical-align-bottom": 63009,
    "format-vertical-align-center": 63010,
    "format-vertical-align-top": 63011,
    "format-wrap-inline": 62088,
    "format-wrap-square": 62089,
    "format-wrap-tight": 62090,
    "format-wrap-top-bottom": 62091,
    "forum": 62092,
    "forward": 62093,
    "foursquare": 62094,
    "fridge": 62095,
    "fridge-filled": 62096,
    "fridge-filled-bottom": 62097,
    "fridge-filled-top": 62098,
    "fuel": 63433,
    "fullscreen": 62099,
    "fullscreen-exit": 62100,
    "function": 62101,
    "gamepad": 62102,
    "gamepad-variant": 62103,
    "garage": 63192,
    "garage-open": 63193,
    "gas-cylinder": 63047,
    "gas-station": 62104,
    "gate": 62105,
    "gauge": 62106,
    "gavel": 62107,
    "gender-female": 62108,
    "gender-male": 62109,
    "gender-male-female": 62110,
    "gender-transgender": 62111,
    "gesture": 63434,
    "gesture-double-tap": 63291,
    "gesture-swipe-down": 63292,
    "gesture-swipe-left": 63293,
    "gesture-swipe-right": 63294,
    "gesture-swipe-up": 63295,
    "gesture-tap": 63296,
    "gesture-two-double-tap": 63297,
    "gesture-two-tap": 63298,
    "ghost": 62112,
    "gift": 62113,
    "git": 62114,
    "github-box": 62115,
    "github-circle": 62116,
    "github-face": 63194,
    "glass-flute": 62117,
    "glass-mug": 62118,
    "glass-stange": 62119,
    "glass-tulip": 62120,
    "glassdoor": 62121,
    "glasses": 62122,
    "gmail": 62123,
    "gnome": 62124,
    "gondola": 63109,
    "google": 62125,
    "google-analytics": 63435,
    "google-assistant": 63436,
    "google-cardboard": 62126,
    "google-chrome": 62127,
    "google-circles": 62128,
    "google-circles-communities": 62129,
    "google-circles-extended": 62130,
    "google-circles-group": 62131,
    "google-controller": 62132,
    "google-controller-off": 62133,
    "google-drive": 62134,
    "google-earth": 62135,
    "google-glass": 62136,
    "google-keep": 63195,
    "google-maps": 62965,
    "google-nearby": 62137,
    "google-pages": 62138,
    "google-photos": 63196,
    "google-physical-web": 62139,
    "google-play": 62140,
    "google-plus": 62141,
    "google-plus-box": 62142,
    "google-translate": 62143,
    "google-wallet": 62144,
    "gradient": 63135,
    "grease-pencil": 63048,
    "grid": 62145,
    "grid-large": 63319,
    "grid-off": 62146,
    "group": 62147,
    "guitar-acoustic": 63344,
    "guitar-electric": 62148,
    "guitar-pick": 62149,
    "guitar-pick-outline": 62150,
    "hackernews": 63012,
    "hamburger": 63108,
    "hand-pointing-right": 62151,
    "hanger": 62152,
    "hangouts": 62153,
    "harddisk": 62154,
    "headphones": 62155,
    "headphones-box": 62156,
    "headphones-off": 63437,
    "headphones-settings": 62157,
    "headset": 62158,
    "headset-dock": 62159,
    "headset-off": 62160,
    "heart": 62161,
    "heart-box": 62162,
    "heart-box-outline": 62163,
    "heart-broken": 62164,
    "heart-half": 63198,
    "heart-half-full": 63197,
    "heart-half-outline": 63199,
    "heart-off": 63320,
    "heart-outline": 62165,
    "heart-pulse": 62966,
    "help": 62166,
    "help-box": 63370,
    "help-circle": 62167,
    "help-circle-outline": 63013,
    "help-network": 63220,
    "hexagon": 62168,
    "hexagon-multiple": 63200,
    "hexagon-outline": 62169,
    "high-definition": 63438,
    "highway": 62967,
    "history": 62170,
    "hololens": 62171,
    "home": 62172,
    "home-assistant": 63439,
    "home-automation": 63440,
    "home-circle": 63441,
    "home-map-marker": 62968,
    "home-modern": 62173,
    "home-outline": 63136,
    "home-variant": 62174,
    "hook": 63201,
    "hook-off": 63202,
    "hops": 62175,
    "hospital": 62176,
    "hospital-building": 62177,
    "hospital-marker": 62178,
    "hotel": 62179,
    "houzz": 62180,
    "houzz-box": 62181,
    "human": 62182,
    "human-child": 62183,
    "human-female": 63049,
    "human-greeting": 63050,
    "human-handsdown": 63051,
    "human-handsup": 63052,
    "human-male": 63053,
    "human-male-female": 62184,
    "human-pregnant": 62927,
    "humble-bundle": 63299,
    "image": 62185,
    "image-album": 62186,
    "image-area": 62187,
    "image-area-close": 62188,
    "image-broken": 62189,
    "image-broken-variant": 62190,
    "image-filter": 62191,
    "image-filter-black-white": 62192,
    "image-filter-center-focus": 62193,
    "image-filter-center-focus-weak": 62194,
    "image-filter-drama": 62195,
    "image-filter-frames": 62196,
    "image-filter-hdr": 62197,
    "image-filter-none": 62198,
    "image-filter-tilt-shift": 62199,
    "image-filter-vintage": 62200,
    "image-multiple": 62201,
    "import": 62202,
    "inbox": 63110,
    "inbox-arrow-down": 62203,
    "inbox-arrow-up": 62417,
    "incognito": 62969,
    "infinity": 63203,
    "information": 62204,
    "information-outline": 62205,
    "information-variant": 63054,
    "instagram": 62206,
    "instapaper": 62207,
    "internet-explorer": 62208,
    "invert-colors": 62209,
    "itunes": 63094,
    "jeepney": 62210,
    "jira": 62211,
    "jsfiddle": 62212,
    "json": 63014,
    "keg": 62213,
    "kettle": 62970,
    "key": 62214,
    "key-change": 62215,
    "key-minus": 62216,
    "key-plus": 62217,
    "key-remove": 62218,
    "key-variant": 62219,
    "keyboard": 62220,
    "keyboard-backspace": 62221,
    "keyboard-caps": 62222,
    "keyboard-close": 62223,
    "keyboard-off": 62224,
    "keyboard-return": 62225,
    "keyboard-tab": 62226,
    "keyboard-variant": 62227,
    "kickstarter": 63300,
    "kodi": 62228,
    "label": 62229,
    "label-outline": 62230,
    "lambda": 63015,
    "lamp": 63156,
    "lan": 62231,
    "lan-connect": 62232,
    "lan-disconnect": 62233,
    "lan-pending": 62234,
    "language-c": 63089,
    "language-cpp": 63090,
    "language-csharp": 62235,
    "language-css3": 62236,
    "language-go": 63442,
    "language-html5": 62237,
    "language-javascript": 62238,
    "language-php": 62239,
    "language-python": 62240,
    "language-python-text": 62241,
    "language-r": 63443,
    "language-swift": 63204,
    "language-typescript": 63205,
    "laptop": 62242,
    "laptop-chromebook": 62243,
    "laptop-mac": 62244,
    "laptop-off": 63206,
    "laptop-windows": 62245,
    "lastfm": 62246,
    "launch": 62247,
    "lava-lamp": 63444,
    "layers": 62248,
    "layers-off": 62249,
    "lead-pencil": 63055,
    "leaf": 62250,
    "led-off": 62251,
    "led-on": 62252,
    "led-outline": 62253,
    "led-strip": 63445,
    "led-variant-off": 62254,
    "led-variant-on": 62255,
    "led-variant-outline": 62256,
    "library": 62257,
    "library-books": 62258,
    "library-music": 62259,
    "library-plus": 62260,
    "lightbulb": 62261,
    "lightbulb-on": 63207,
    "lightbulb-on-outline": 63208,
    "lightbulb-outline": 62262,
    "link": 62263,
    "link-off": 62264,
    "link-variant": 62265,
    "link-variant-off": 62266,
    "linkedin": 62267,
    "linkedin-box": 62268,
    "linux": 62269,
    "loading": 63345,
    "lock": 62270,
    "lock-open": 62271,
    "lock-open-outline": 62272,
    "lock-outline": 62273,
    "lock-pattern": 63209,
    "lock-plus": 62971,
    "lock-reset": 63346,
    "locker": 63446,
    "locker-multiple": 63447,
    "login": 62274,
    "login-variant": 62972,
    "logout": 62275,
    "logout-variant": 62973,
    "looks": 62276,
    "loop": 63210,
    "loupe": 62277,
    "lumx": 62278,
    "magnet": 62279,
    "magnet-on": 62280,
    "magnify": 62281,
    "magnify-minus": 62282,
    "magnify-minus-outline": 63211,
    "magnify-plus": 62283,
    "magnify-plus-outline": 63212,
    "mail-ru": 62284,
    "mailbox": 63213,
    "map": 62285,
    "map-marker": 62286,
    "map-marker-circle": 62287,
    "map-marker-minus": 63056,
    "map-marker-multiple": 62288,
    "map-marker-off": 62289,
    "map-marker-outline": 63448,
    "map-marker-plus": 63057,
    "map-marker-radius": 62290,
    "margin": 62291,
    "markdown": 62292,
    "marker": 63058,
    "marker-check": 62293,
    "martini": 62294,
    "material-ui": 62295,
    "math-compass": 62296,
    "matrix": 63016,
    "maxcdn": 62297,
    "medical-bag": 63214,
    "medium": 62298,
    "memory": 62299,
    "menu": 62300,
    "menu-down": 62301,
    "menu-down-outline": 63157,
    "menu-left": 62302,
    "menu-right": 62303,
    "menu-up": 62304,
    "menu-up-outline": 63158,
    "message": 62305,
    "message-alert": 62306,
    "message-bulleted": 63137,
    "message-bulleted-off": 63138,
    "message-draw": 62307,
    "message-image": 62308,
    "message-outline": 62309,
    "message-plus": 63059,
    "message-processing": 62310,
    "message-reply": 62311,
    "message-reply-text": 62312,
    "message-settings": 63215,
    "message-settings-variant": 63216,
    "message-text": 62313,
    "message-text-outline": 62314,
    "message-video": 62315,
    "meteor": 63017,
    "metronome": 63449,
    "metronome-tick": 63450,
    "micro-sd": 63451,
    "microphone": 62316,
    "microphone-off": 62317,
    "microphone-outline": 62318,
    "microphone-settings": 62319,
    "microphone-variant": 62320,
    "microphone-variant-off": 62321,
    "microscope": 63060,
    "microsoft": 62322,
    "minecraft": 62323,
    "minus": 62324,
    "minus-box": 62325,
    "minus-box-outline": 63217,
    "minus-circle": 62326,
    "minus-circle-outline": 62327,
    "minus-network": 62328,
    "mixcloud": 63018,
    "mixer": 63452,
    "monitor": 62329,
    "monitor-multiple": 62330,
    "more": 62331,
    "motorbike": 62332,
    "mouse": 62333,
    "mouse-off": 62334,
    "mouse-variant": 62335,
    "mouse-variant-off": 62336,
    "move-resize": 63061,
    "move-resize-variant": 63062,
    "movie": 62337,
    "movie-roll": 63453,
    "multiplication": 62338,
    "multiplication-box": 62339,
    "mushroom": 63454,
    "mushroom-outline": 63455,
    "music": 63321,
    "music-box": 62340,
    "music-box-outline": 62341,
    "music-circle": 62342,
    "music-note": 62343,
    "music-note-bluetooth": 62974,
    "music-note-bluetooth-off": 62975,
    "music-note-eighth": 62344,
    "music-note-half": 62345,
    "music-note-off": 62346,
    "music-note-quarter": 62347,
    "music-note-sixteenth": 62348,
    "music-note-whole": 62349,
    "music-off": 63322,
    "nature": 62350,
    "nature-people": 62351,
    "navigation": 62352,
    "near-me": 62925,
    "needle": 62353,
    "nest-protect": 62354,
    "nest-thermostat": 62355,
    "netflix": 63301,
    "network": 63218,
    "new-box": 62356,
    "newspaper": 62357,
    "nfc": 62358,
    "nfc-tap": 62359,
    "nfc-variant": 62360,
    "ninja": 63347,
    "nintendo-switch": 63456,
    "nodejs": 62361,
    "note": 62362,
    "note-multiple": 63159,
    "note-multiple-outline": 63160,
    "note-outline": 62363,
    "note-plus": 62364,
    "note-plus-outline": 62365,
    "note-text": 62366,
    "notification-clear-all": 62367,
    "npm": 63222,
    "nuke": 63139,
    "null": 63457,
    "numeric": 62368,
    "numeric-0-box": 62369,
    "numeric-0-box-multiple-outline": 62370,
    "numeric-0-box-outline": 62371,
    "numeric-1-box": 62372,
    "numeric-1-box-multiple-outline": 62373,
    "numeric-1-box-outline": 62374,
    "numeric-2-box": 62375,
    "numeric-2-box-multiple-outline": 62376,
    "numeric-2-box-outline": 62377,
    "numeric-3-box": 62378,
    "numeric-3-box-multiple-outline": 62379,
    "numeric-3-box-outline": 62380,
    "numeric-4-box": 62381,
    "numeric-4-box-multiple-outline": 62382,
    "numeric-4-box-outline": 62383,
    "numeric-5-box": 62384,
    "numeric-5-box-multiple-outline": 62385,
    "numeric-5-box-outline": 62386,
    "numeric-6-box": 62387,
    "numeric-6-box-multiple-outline": 62388,
    "numeric-6-box-outline": 62389,
    "numeric-7-box": 62390,
    "numeric-7-box-multiple-outline": 62391,
    "numeric-7-box-outline": 62392,
    "numeric-8-box": 62393,
    "numeric-8-box-multiple-outline": 62394,
    "numeric-8-box-outline": 62395,
    "numeric-9-box": 62396,
    "numeric-9-box-multiple-outline": 62397,
    "numeric-9-box-outline": 62398,
    "numeric-9-plus-box": 62399,
    "numeric-9-plus-box-multiple-outline": 62400,
    "numeric-9-plus-box-outline": 62401,
    "nut": 63223,
    "nutrition": 62402,
    "oar": 63099,
    "octagon": 62403,
    "octagon-outline": 62404,
    "octagram": 63224,
    "octagram-outline": 63348,
    "odnoklassniki": 62405,
    "office": 62406,
    "oil": 62407,
    "oil-temperature": 62408,
    "omega": 62409,
    "onedrive": 62410,
    "onenote": 63302,
    "opacity": 62924,
    "open-in-app": 62411,
    "open-in-new": 62412,
    "openid": 62413,
    "opera": 62414,
    "orbit": 61464,
    "ornament": 62415,
    "ornament-variant": 62416,
    "owl": 62418,
    "package": 62419,
    "package-down": 62420,
    "package-up": 62421,
    "package-variant": 62422,
    "package-variant-closed": 62423,
    "page-first": 62976,
    "page-last": 62977,
    "page-layout-body": 63225,
    "page-layout-footer": 63226,
    "page-layout-header": 63227,
    "page-layout-sidebar-left": 63228,
    "page-layout-sidebar-right": 63229,
    "palette": 62424,
    "palette-advanced": 62425,
    "panda": 62426,
    "pandora": 62427,
    "panorama": 62428,
    "panorama-fisheye": 62429,
    "panorama-horizontal": 62430,
    "panorama-vertical": 62431,
    "panorama-wide-angle": 62432,
    "paper-cut-vertical": 62433,
    "paperclip": 62434,
    "parking": 62435,
    "passport": 63458,
    "pause": 62436,
    "pause-circle": 62437,
    "pause-circle-outline": 62438,
    "pause-octagon": 62439,
    "pause-octagon-outline": 62440,
    "paw": 62441,
    "paw-off": 63063,
    "pen": 62442,
    "pencil": 62443,
    "pencil-box": 62444,
    "pencil-box-outline": 62445,
    "pencil-circle": 63230,
    "pencil-circle-outline": 63349,
    "pencil-lock": 62446,
    "pencil-off": 62447,
    "pentagon": 63231,
    "pentagon-outline": 63232,
    "percent": 62448,
    "periodic-table-co2": 63459,
    "periscope": 63303,
    "pharmacy": 62449,
    "phone": 62450,
    "phone-bluetooth": 62451,
    "phone-classic": 62978,
    "phone-forward": 62452,
    "phone-hangup": 62453,
    "phone-in-talk": 62454,
    "phone-incoming": 62455,
    "phone-locked": 62456,
    "phone-log": 62457,
    "phone-minus": 63064,
    "phone-missed": 62458,
    "phone-outgoing": 62459,
    "phone-paused": 62460,
    "phone-plus": 63065,
    "phone-settings": 62461,
    "phone-voip": 62462,
    "pi": 62463,
    "pi-box": 62464,
    "piano": 63100,
    "pig": 62465,
    "pill": 62466,
    "pillar": 63233,
    "pin": 62467,
    "pin-off": 62468,
    "pine-tree": 62469,
    "pine-tree-box": 62470,
    "pinterest": 62471,
    "pinterest-box": 62472,
    "pipe": 63460,
    "pipe-disconnected": 63461,
    "pistol": 63234,
    "pizza": 62473,
    "plane-shield": 63162,
    "play": 62474,
    "play-box-outline": 62475,
    "play-circle": 62476,
    "play-circle-outline": 62477,
    "play-pause": 62478,
    "play-protected-content": 62479,
    "playlist-check": 62919,
    "playlist-minus": 62480,
    "playlist-play": 62481,
    "playlist-plus": 62482,
    "playlist-remove": 62483,
    "playstation": 62484,
    "plex": 63161,
    "plus": 62485,
    "plus-box": 62486,
    "plus-box-outline": 63235,
    "plus-circle": 62487,
    "plus-circle-multiple-outline": 62488,
    "plus-circle-outline": 62489,
    "plus-network": 62490,
    "plus-one": 62491,
    "plus-outline": 63236,
    "pocket": 62492,
    "pokeball": 62493,
    "polaroid": 62494,
    "poll": 62495,
    "poll-box": 62496,
    "polymer": 62497,
    "pool": 62982,
    "popcorn": 62498,
    "pot": 63066,
    "pot-mix": 63067,
    "pound": 62499,
    "pound-box": 62500,
    "power": 62501,
    "power-plug": 63140,
    "power-plug-off": 63141,
    "power-settings": 62502,
    "power-socket": 62503,
    "power-socket-eu": 63462,
    "power-socket-uk": 63463,
    "power-socket-us": 63464,
    "prescription": 63237,
    "presentation": 62504,
    "presentation-play": 62505,
    "printer": 62506,
    "printer-3d": 62507,
    "printer-alert": 62508,
    "printer-settings": 63238,
    "priority-high": 62979,
    "priority-low": 62980,
    "professional-hexagon": 62509,
    "projector": 62510,
    "projector-screen": 62511,
    "publish": 63142,
    "pulse": 62512,
    "puzzle": 62513,
    "qqchat": 62981,
    "qrcode": 62514,
    "qrcode-scan": 62515,
    "quadcopter": 62516,
    "quality-high": 62517,
    "quicktime": 62518,
    "radar": 62519,
    "radiator": 62520,
    "radio": 62521,
    "radio-handheld": 62522,
    "radio-tower": 62523,
    "radioactive": 62524,
    "radiobox-blank": 62525,
    "radiobox-marked": 62526,
    "raspberrypi": 62527,
    "ray-end": 62528,
    "ray-end-arrow": 62529,
    "ray-start": 62530,
    "ray-start-arrow": 62531,
    "ray-start-end": 62532,
    "ray-vertex": 62533,
    "rdio": 62534,
    "react": 63239,
    "read": 62535,
    "readability": 62536,
    "receipt": 62537,
    "record": 62538,
    "record-rec": 62539,
    "recycle": 62540,
    "reddit": 62541,
    "redo": 62542,
    "redo-variant": 62543,
    "refresh": 62544,
    "regex": 62545,
    "relative-scale": 62546,
    "reload": 62547,
    "remote": 62548,
    "rename-box": 62549,
    "reorder-horizontal": 63111,
    "reorder-vertical": 63112,
    "repeat": 62550,
    "repeat-off": 62551,
    "repeat-once": 62552,
    "replay": 62553,
    "reply": 62554,
    "reply-all": 62555,
    "reproduction": 62556,
    "resize-bottom-right": 62557,
    "responsive": 62558,
    "restart": 63240,
    "restore": 63143,
    "rewind": 62559,
    "rewind-outline": 63241,
    "rhombus": 63242,
    "rhombus-outline": 63243,
    "ribbon": 62560,
    "rice": 63465,
    "ring": 63466,
    "road": 62561,
    "road-variant": 62562,
    "robot": 63144,
    "rocket": 62563,
    "roomba": 63244,
    "rotate-3d": 62564,
    "rotate-left": 62565,
    "rotate-left-variant": 62566,
    "rotate-right": 62567,
    "rotate-right-variant": 62568,
    "rounded-corner": 62983,
    "router-wireless": 62569,
    "routes": 62570,
    "rowing": 62984,
    "rss": 62571,
    "rss-box": 62572,
    "ruler": 62573,
    "run": 63245,
    "run-fast": 62574,
    "sale": 62575,
    "sass": 63467,
    "satellite": 62576,
    "satellite-variant": 62577,
    "saxophone": 62985,
    "scale": 62578,
    "scale-balance": 62929,
    "scale-bathroom": 62579,
    "scanner": 63146,
    "school": 62580,
    "screen-rotation": 62581,
    "screen-rotation-lock": 62582,
    "screwdriver": 62583,
    "script": 62584,
    "sd": 62585,
    "seal": 62586,
    "search-web": 63246,
    "seat-flat": 62587,
    "seat-flat-angled": 62588,
    "seat-individual-suite": 62589,
    "seat-legroom-extra": 62590,
    "seat-legroom-normal": 62591,
    "seat-legroom-reduced": 62592,
    "seat-recline-extra": 62593,
    "seat-recline-normal": 62594,
    "security": 62595,
    "security-home": 63113,
    "security-network": 62596,
    "select": 62597,
    "select-all": 62598,
    "select-inverse": 62599,
    "select-off": 62600,
    "selection": 62601,
    "selection-off": 63350,
    "send": 62602,
    "send-secure": 63468,
    "serial-port": 63068,
    "server": 62603,
    "server-minus": 62604,
    "server-network": 62605,
    "server-network-off": 62606,
    "server-off": 62607,
    "server-plus": 62608,
    "server-remove": 62609,
    "server-security": 62610,
    "set-all": 63351,
    "set-center": 63352,
    "set-center-right": 63353,
    "set-left": 63354,
    "set-left-center": 63355,
    "set-left-right": 63356,
    "set-none": 63357,
    "set-right": 63358,
    "settings": 62611,
    "settings-box": 62612,
    "shape-circle-plus": 63069,
    "shape-plus": 62613,
    "shape-polygon-plus": 63070,
    "shape-rectangle-plus": 63071,
    "shape-square-plus": 63072,
    "share": 62614,
    "share-variant": 62615,
    "shield": 62616,
    "shield-half-full": 63359,
    "shield-outline": 62617,
    "shopping": 62618,
    "shopping-music": 62619,
    "shovel": 63247,
    "shovel-off": 63248,
    "shredder": 62620,
    "shuffle": 62621,
    "shuffle-disabled": 62622,
    "shuffle-variant": 62623,
    "sigma": 62624,
    "sigma-lower": 63019,
    "sign-caution": 62625,
    "sign-direction": 63360,
    "sign-text": 63361,
    "signal": 62626,
    "signal-2g": 63249,
    "signal-3g": 63250,
    "signal-4g": 63251,
    "signal-hspa": 63252,
    "signal-hspa-plus": 63253,
    "signal-off": 63362,
    "signal-variant": 62986,
    "silverware": 62627,
    "silverware-fork": 62628,
    "silverware-spoon": 62629,
    "silverware-variant": 62630,
    "sim": 62631,
    "sim-alert": 62632,
    "sim-off": 62633,
    "sitemap": 62634,
    "skip-backward": 62635,
    "skip-forward": 62636,
    "skip-next": 62637,
    "skip-next-circle": 63073,
    "skip-next-circle-outline": 63074,
    "skip-previous": 62638,
    "skip-previous-circle": 63075,
    "skip-previous-circle-outline": 63076,
    "skull": 63115,
    "skype": 62639,
    "skype-business": 62640,
    "slack": 62641,
    "sleep": 62642,
    "sleep-off": 62643,
    "smoking": 62644,
    "smoking-off": 62645,
    "snapchat": 62646,
    "snowflake": 63254,
    "snowman": 62647,
    "soccer": 62648,
    "sofa": 62649,
    "solid": 63116,
    "sort": 62650,
    "sort-alphabetical": 62651,
    "sort-ascending": 62652,
    "sort-descending": 62653,
    "sort-numeric": 62654,
    "sort-variant": 62655,
    "soundcloud": 62656,
    "source-branch": 63020,
    "source-commit": 63255,
    "source-commit-end": 63256,
    "source-commit-end-local": 63257,
    "source-commit-local": 63258,
    "source-commit-next-local": 63259,
    "source-commit-start": 63260,
    "source-commit-start-next-local": 63261,
    "source-fork": 62657,
    "source-merge": 63021,
    "source-pull": 62658,
    "soy-sauce": 63469,
    "speaker": 62659,
    "speaker-off": 62660,
    "speaker-wireless": 63262,
    "speedometer": 62661,
    "spellcheck": 62662,
    "spotify": 62663,
    "spotlight": 62664,
    "spotlight-beam": 62665,
    "spray": 63077,
    "square": 63331,
    "square-inc": 62666,
    "square-inc-cash": 62667,
    "square-outline": 63330,
    "square-root": 63363,
    "stackexchange": 62987,
    "stackoverflow": 62668,
    "stadium": 63263,
    "stairs": 62669,
    "standard-definition": 63470,
    "star": 62670,
    "star-circle": 62671,
    "star-half": 62672,
    "star-off": 62673,
    "star-outline": 62674,
    "steam": 62675,
    "steering": 62676,
    "step-backward": 62677,
    "step-backward-2": 62678,
    "step-forward": 62679,
    "step-forward-2": 62680,
    "stethoscope": 62681,
    "sticker": 62928,
    "sticker-emoji": 63364,
    "stocking": 62682,
    "stop": 62683,
    "stop-circle": 63078,
    "stop-circle-outline": 63079,
    "store": 62684,
    "store-24-hour": 62685,
    "stove": 62686,
    "subdirectory-arrow-left": 62988,
    "subdirectory-arrow-right": 62989,
    "subway": 63147,
    "subway-variant": 62687,
    "summit": 63365,
    "sunglasses": 62688,
    "surround-sound": 62917,
    "surround-sound-2-0": 63471,
    "surround-sound-3-1": 63472,
    "surround-sound-5-1": 63473,
    "surround-sound-7-1": 63474,
    "svg": 63264,
    "swap-horizontal": 62689,
    "swap-vertical": 62690,
    "swim": 62691,
    "switch": 62692,
    "sword": 62693,
    "sword-cross": 63366,
    "sync": 62694,
    "sync-alert": 62695,
    "sync-off": 62696,
    "tab": 62697,
    "tab-plus": 63323,
    "tab-unselected": 62698,
    "table": 62699,
    "table-column-plus-after": 62700,
    "table-column-plus-before": 62701,
    "table-column-remove": 62702,
    "table-column-width": 62703,
    "table-edit": 62704,
    "table-large": 62705,
    "table-row-height": 62706,
    "table-row-plus-after": 62707,
    "table-row-plus-before": 62708,
    "table-row-remove": 62709,
    "tablet": 62710,
    "tablet-android": 62711,
    "tablet-ipad": 62712,
    "taco": 63329,
    "tag": 62713,
    "tag-faces": 62714,
    "tag-heart": 63114,
    "tag-multiple": 62715,
    "tag-outline": 62716,
    "tag-plus": 63265,
    "tag-remove": 63266,
    "tag-text-outline": 62717,
    "target": 62718,
    "taxi": 62719,
    "teamviewer": 62720,
    "telegram": 62721,
    "television": 62722,
    "television-classic": 63475,
    "television-guide": 62723,
    "temperature-celsius": 62724,
    "temperature-fahrenheit": 62725,
    "temperature-kelvin": 62726,
    "tennis": 62727,
    "tent": 62728,
    "terrain": 62729,
    "test-tube": 63080,
    "text-shadow": 63081,
    "text-to-speech": 62730,
    "text-to-speech-off": 62731,
    "textbox": 62990,
    "textbox-password": 63476,
    "texture": 62732,
    "theater": 62733,
    "theme-light-dark": 62734,
    "thermometer": 62735,
    "thermometer-lines": 62736,
    "thought-bubble": 63477,
    "thought-bubble-outline": 63478,
    "thumb-down": 62737,
    "thumb-down-outline": 62738,
    "thumb-up": 62739,
    "thumb-up-outline": 62740,
    "thumbs-up-down": 62741,
    "ticket": 62742,
    "ticket-account": 62743,
    "ticket-confirmation": 62744,
    "ticket-percent": 63267,
    "tie": 62745,
    "tilde": 63268,
    "timelapse": 62746,
    "timer": 62747,
    "timer-10": 62748,
    "timer-3": 62749,
    "timer-off": 62750,
    "timer-sand": 62751,
    "timer-sand-empty": 63148,
    "timer-sand-full": 63371,
    "timetable": 62752,
    "toggle-switch": 62753,
    "toggle-switch-off": 62754,
    "tooltip": 62755,
    "tooltip-edit": 62756,
    "tooltip-image": 62757,
    "tooltip-outline": 62758,
    "tooltip-outline-plus": 62759,
    "tooltip-text": 62760,
    "tooth": 62761,
    "tor": 62762,
    "tower-beach": 63104,
    "tower-fire": 63105,
    "trackpad": 63479,
    "traffic-light": 62763,
    "train": 62764,
    "tram": 62765,
    "transcribe": 62766,
    "transcribe-close": 62767,
    "transfer": 62768,
    "transit-transfer": 63149,
    "translate": 62922,
    "treasure-chest": 63269,
    "tree": 62769,
    "trello": 62770,
    "trending-down": 62771,
    "trending-neutral": 62772,
    "trending-up": 62773,
    "triangle": 62774,
    "triangle-outline": 62775,
    "trophy": 62776,
    "trophy-award": 62777,
    "trophy-outline": 62778,
    "trophy-variant": 62779,
    "trophy-variant-outline": 62780,
    "truck": 62781,
    "truck-delivery": 62782,
    "truck-fast": 63367,
    "truck-trailer": 63270,
    "tshirt-crew": 62783,
    "tshirt-v": 62784,
    "tumblr": 62785,
    "tumblr-reblog": 62786,
    "tune": 63022,
    "tune-vertical": 63082,
    "twitch": 62787,
    "twitter": 62788,
    "twitter-box": 62789,
    "twitter-circle": 62790,
    "twitter-retweet": 62791,
    "uber": 63304,
    "ubuntu": 62792,
    "ultra-high-definition": 63480,
    "umbraco": 62793,
    "umbrella": 62794,
    "umbrella-outline": 62795,
    "undo": 62796,
    "undo-variant": 62797,
    "unfold-less-horizontal": 62798,
    "unfold-less-vertical": 63327,
    "unfold-more-horizontal": 62799,
    "unfold-more-vertical": 63328,
    "ungroup": 62800,
    "unity": 63150,
    "untappd": 62801,
    "update": 63151,
    "upload": 62802,
    "upload-network": 63221,
    "usb": 62803,
    "van-passenger": 63481,
    "van-utility": 63482,
    "vanish": 63483,
    "vector-arrange-above": 62804,
    "vector-arrange-below": 62805,
    "vector-circle": 62806,
    "vector-circle-variant": 62807,
    "vector-combine": 62808,
    "vector-curve": 62809,
    "vector-difference": 62810,
    "vector-difference-ab": 62811,
    "vector-difference-ba": 62812,
    "vector-intersection": 62813,
    "vector-line": 62814,
    "vector-point": 62815,
    "vector-polygon": 62816,
    "vector-polyline": 62817,
    "vector-radius": 63305,
    "vector-rectangle": 62918,
    "vector-selection": 62818,
    "vector-square": 61441,
    "vector-triangle": 62819,
    "vector-union": 62820,
    "verified": 62821,
    "vibrate": 62822,
    "video": 62823,
    "video-3d": 63484,
    "video-off": 62824,
    "video-switch": 62825,
    "view-agenda": 62826,
    "view-array": 62827,
    "view-carousel": 62828,
    "view-column": 62829,
    "view-dashboard": 62830,
    "view-day": 62831,
    "view-grid": 62832,
    "view-headline": 62833,
    "view-list": 62834,
    "view-module": 62835,
    "view-parallel": 63271,
    "view-quilt": 62836,
    "view-sequential": 63272,
    "view-stream": 62837,
    "view-week": 62838,
    "vimeo": 62839,
    "vine": 62840,
    "violin": 62991,
    "visualstudio": 62992,
    "vk": 62841,
    "vk-box": 62842,
    "vk-circle": 62843,
    "vlc": 62844,
    "voice": 62923,
    "voicemail": 62845,
    "volume-high": 62846,
    "volume-low": 62847,
    "volume-medium": 62848,
    "volume-minus": 63325,
    "volume-mute": 63326,
    "volume-off": 62849,
    "volume-plus": 63324,
    "vpn": 62850,
    "walk": 62851,
    "wall": 63485,
    "wallet": 62852,
    "wallet-giftcard": 62853,
    "wallet-membership": 62854,
    "wallet-travel": 62855,
    "wan": 62856,
    "washing-machine": 63273,
    "watch": 62857,
    "watch-export": 62858,
    "watch-import": 62859,
    "watch-vibrate": 63152,
    "water": 62860,
    "water-off": 62861,
    "water-percent": 62862,
    "water-pump": 62863,
    "watermark": 62994,
    "waves": 63372,
    "weather-cloudy": 62864,
    "weather-fog": 62865,
    "weather-hail": 62866,
    "weather-lightning": 62867,
    "weather-lightning-rainy": 63101,
    "weather-night": 62868,
    "weather-partlycloudy": 62869,
    "weather-pouring": 62870,
    "weather-rainy": 62871,
    "weather-snowy": 62872,
    "weather-snowy-rainy": 63102,
    "weather-sunny": 62873,
    "weather-sunset": 62874,
    "weather-sunset-down": 62875,
    "weather-sunset-up": 62876,
    "weather-windy": 62877,
    "weather-windy-variant": 62878,
    "web": 62879,
    "webcam": 62880,
    "webhook": 63023,
    "webpack": 63274,
    "wechat": 62993,
    "weight": 62881,
    "weight-kilogram": 62882,
    "whatsapp": 62883,
    "wheelchair-accessibility": 62884,
    "white-balance-auto": 62885,
    "white-balance-incandescent": 62886,
    "white-balance-iridescent": 62887,
    "white-balance-sunny": 62888,
    "widgets": 63275,
    "wifi": 62889,
    "wifi-off": 62890,
    "wii": 62891,
    "wiiu": 63276,
    "wikipedia": 62892,
    "window-close": 62893,
    "window-closed": 62894,
    "window-maximize": 62895,
    "window-minimize": 62896,
    "window-open": 62897,
    "window-restore": 62898,
    "windows": 62899,
    "wordpress": 62900,
    "worker": 62901,
    "wrap": 62902,
    "wrench": 62903,
    "wunderlist": 62904,
    "xaml": 63091,
    "xbox": 62905,
    "xbox-controller": 62906,
    "xbox-controller-battery-alert": 63306,
    "xbox-controller-battery-empty": 63307,
    "xbox-controller-battery-full": 63308,
    "xbox-controller-battery-low": 63309,
    "xbox-controller-battery-medium": 63310,
    "xbox-controller-battery-unknown": 63311,
    "xbox-controller-off": 62907,
    "xda": 62908,
    "xing": 62909,
    "xing-box": 62910,
    "xing-circle": 62911,
    "xml": 62912,
    "xmpp": 63486,
    "yammer": 63368,
    "yeast": 62913,
    "yelp": 62914,
    "yin-yang": 63103,
    "youtube-play": 62915,
    "zip-box": 62916,
    "blank": 63116
  };
},610,[],"react-native-vector-icons/glyphmaps/MaterialCommunityIcons.json");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  var _Octicons = require(_dependencyMap[1], "./glyphmaps/Octicons.json");

  var _Octicons2 = babelHelpers.interopRequireDefault(_Octicons);

  var iconSet = (0, _createIconSet2.default)(_Octicons2.default, 'Octicons', 'Octicons.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},611,[494,612],"react-native-vector-icons/Octicons.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    "alert": 61696,
    "arrow-down": 61697,
    "arrow-left": 61698,
    "arrow-right": 61699,
    "arrow-small-down": 61700,
    "arrow-small-left": 61701,
    "arrow-small-right": 61702,
    "arrow-small-up": 61703,
    "arrow-up": 61704,
    "beaker": 61705,
    "bell": 61706,
    "bold": 61707,
    "book": 61708,
    "bookmark": 61709,
    "briefcase": 61710,
    "broadcast": 61711,
    "browser": 61712,
    "bug": 61713,
    "calendar": 61714,
    "check": 61715,
    "checklist": 61716,
    "chevron-down": 61717,
    "chevron-left": 61718,
    "chevron-right": 61719,
    "chevron-up": 61720,
    "circle-slash": 61721,
    "circuit-board": 61722,
    "clippy": 61723,
    "clock": 61724,
    "cloud-download": 61725,
    "cloud-upload": 61726,
    "code": 61727,
    "comment": 61728,
    "comment-discussion": 61729,
    "credit-card": 61730,
    "dash": 61731,
    "dashboard": 61732,
    "database": 61733,
    "desktop-download": 61734,
    "device-camera": 61735,
    "device-camera-video": 61736,
    "device-desktop": 61737,
    "device-mobile": 61738,
    "diff": 61739,
    "diff-added": 61740,
    "diff-ignored": 61741,
    "diff-modified": 61742,
    "diff-removed": 61743,
    "diff-renamed": 61744,
    "ellipsis": 61745,
    "eye": 61746,
    "file": 61747,
    "file-binary": 61748,
    "file-code": 61749,
    "file-directory": 61750,
    "file-media": 61751,
    "file-pdf": 61752,
    "file-submodule": 61753,
    "file-symlink-directory": 61754,
    "file-symlink-file": 61755,
    "file-text": 61756,
    "file-zip": 61757,
    "flame": 61758,
    "fold": 61759,
    "gear": 61760,
    "gift": 61761,
    "gist": 61762,
    "gist-secret": 61763,
    "git-branch": 61764,
    "git-commit": 61765,
    "git-compare": 61766,
    "git-merge": 61767,
    "git-pull-request": 61768,
    "globe": 61769,
    "grabber": 61770,
    "graph": 61771,
    "heart": 61772,
    "history": 61773,
    "home": 61774,
    "horizontal-rule": 61775,
    "hubot": 61776,
    "inbox": 61777,
    "info": 61778,
    "issue-closed": 61779,
    "issue-opened": 61780,
    "issue-reopened": 61781,
    "italic": 61782,
    "jersey": 61783,
    "kebab-horizontal": 61784,
    "kebab-vertical": 61785,
    "key": 61786,
    "keyboard": 61787,
    "law": 61788,
    "light-bulb": 61789,
    "link": 61790,
    "link-external": 61791,
    "list-ordered": 61792,
    "list-unordered": 61793,
    "location": 61794,
    "lock": 61795,
    "logo-gist": 61796,
    "logo-github": 61797,
    "mail": 61798,
    "mail-read": 61799,
    "mail-reply": 61800,
    "mark-github": 61801,
    "markdown": 61802,
    "megaphone": 61803,
    "mention": 61804,
    "milestone": 61805,
    "mirror": 61806,
    "mortar-board": 61807,
    "mute": 61808,
    "no-newline": 61809,
    "note": 61810,
    "octoface": 61811,
    "organization": 61812,
    "package": 61813,
    "paintcan": 61814,
    "pencil": 61815,
    "person": 61816,
    "pin": 61817,
    "plug": 61818,
    "plus": 61819,
    "plus-small": 61820,
    "primitive-dot": 61821,
    "primitive-square": 61822,
    "project": 61823,
    "pulse": 61824,
    "question": 61825,
    "quote": 61826,
    "radio-tower": 61827,
    "reply": 61828,
    "repo": 61829,
    "repo-clone": 61830,
    "repo-force-push": 61831,
    "repo-forked": 61832,
    "repo-pull": 61833,
    "repo-push": 61834,
    "rocket": 61835,
    "rss": 61836,
    "ruby": 61837,
    "screen-full": 61838,
    "screen-normal": 61839,
    "search": 61840,
    "server": 61841,
    "settings": 61842,
    "shield": 61843,
    "sign-in": 61844,
    "sign-out": 61845,
    "smiley": 61846,
    "squirrel": 61847,
    "star": 61848,
    "stop": 61849,
    "sync": 61850,
    "tag": 61851,
    "tasklist": 61852,
    "telescope": 61853,
    "terminal": 61854,
    "text-size": 61855,
    "three-bars": 61856,
    "thumbsdown": 61857,
    "thumbsup": 61858,
    "tools": 61859,
    "trashcan": 61860,
    "triangle-down": 61861,
    "triangle-left": 61862,
    "triangle-right": 61863,
    "triangle-up": 61864,
    "unfold": 61865,
    "unmute": 61866,
    "unverified": 61867,
    "verified": 61868,
    "versions": 61869,
    "watch": 61870,
    "x": 61871,
    "zap": 61872
  };
},612,[],"react-native-vector-icons/glyphmaps/Octicons.json");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  var _Zocial = require(_dependencyMap[1], "./glyphmaps/Zocial.json");

  var _Zocial2 = babelHelpers.interopRequireDefault(_Zocial);

  var iconSet = (0, _createIconSet2.default)(_Zocial2.default, 'zocial', 'Zocial.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},613,[494,614],"react-native-vector-icons/Zocial.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    "acrobat": 61696,
    "amazon": 61697,
    "android": 61698,
    "angellist": 61699,
    "aol": 61700,
    "appnet": 61701,
    "appstore": 61702,
    "bitbucket": 61703,
    "bitcoin": 61704,
    "blogger": 61705,
    "buffer": 61706,
    "cal": 61707,
    "call": 61708,
    "cart": 61709,
    "chrome": 61710,
    "cloudapp": 61711,
    "creativecommons": 61712,
    "delicious": 61713,
    "digg": 61714,
    "disqus": 61715,
    "dribbble": 61716,
    "dropbox": 61717,
    "drupal": 61718,
    "dwolla": 61720,
    "email": 61721,
    "eventasaurus": 61722,
    "eventbrite": 61723,
    "eventful": 61724,
    "evernote": 61725,
    "facebook": 61726,
    "fivehundredpx": 61727,
    "flattr": 61728,
    "flickr": 61729,
    "forrst": 61730,
    "foursquare": 61731,
    "github": 61732,
    "gmail": 61733,
    "google": 61734,
    "googleplay": 61735,
    "googleplus": 61736,
    "gowalla": 61737,
    "grooveshark": 61738,
    "guest": 61739,
    "html5": 61740,
    "ie": 61741,
    "instagram": 61742,
    "instapaper": 61743,
    "intensedebate": 61744,
    "itunes": 61745,
    "klout": 61746,
    "lanyrd": 61747,
    "lastfm": 61748,
    "lego": 61749,
    "linkedin": 61750,
    "lkdto": 61751,
    "logmein": 61752,
    "macstore": 61753,
    "meetup": 61754,
    "myspace": 61755,
    "ninetyninedesigns": 61756,
    "openid": 61757,
    "opentable": 61758,
    "paypal": 61759,
    "persona": 61796,
    "pinboard": 61760,
    "pinterest": 61761,
    "plancast": 61762,
    "plurk": 61763,
    "pocket": 61764,
    "podcast": 61765,
    "posterous": 61766,
    "print": 61767,
    "quora": 61768,
    "reddit": 61769,
    "rss": 61770,
    "scribd": 61771,
    "skype": 61772,
    "smashing": 61773,
    "songkick": 61774,
    "soundcloud": 61775,
    "spotify": 61776,
    "stackoverflow": 61777,
    "statusnet": 61778,
    "steam": 61779,
    "stripe": 61780,
    "stumbleupon": 61781,
    "tumblr": 61782,
    "twitter": 61783,
    "viadeo": 61784,
    "vimeo": 61785,
    "vk": 61786,
    "weibo": 61787,
    "wikipedia": 61788,
    "windows": 61789,
    "wordpress": 61790,
    "xing": 61791,
    "yahoo": 61792,
    "ycombinator": 61793,
    "yelp": 61794,
    "youtube": 61795
  };
},614,[],"react-native-vector-icons/glyphmaps/Zocial.json");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  var _SimpleLineIcons = require(_dependencyMap[1], "./glyphmaps/SimpleLineIcons.json");

  var _SimpleLineIcons2 = babelHelpers.interopRequireDefault(_SimpleLineIcons);

  var iconSet = (0, _createIconSet2.default)(_SimpleLineIcons2.default, 'simple-line-icons', 'SimpleLineIcons.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},615,[494,616],"react-native-vector-icons/SimpleLineIcons.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    "user": 57349,
    "people": 57345,
    "user-female": 57344,
    "user-follow": 57346,
    "user-following": 57347,
    "user-unfollow": 57348,
    "login": 57446,
    "logout": 57445,
    "emotsmile": 57377,
    "phone": 58880,
    "call-end": 57416,
    "call-in": 57415,
    "call-out": 57414,
    "map": 57395,
    "location-pin": 57494,
    "direction": 57410,
    "directions": 57409,
    "compass": 57413,
    "layers": 57396,
    "menu": 58881,
    "list": 57447,
    "options-vertical": 58882,
    "options": 58883,
    "arrow-down": 58884,
    "arrow-left": 58885,
    "arrow-right": 58886,
    "arrow-up": 58887,
    "arrow-up-circle": 57464,
    "arrow-left-circle": 57466,
    "arrow-right-circle": 57465,
    "arrow-down-circle": 57467,
    "check": 57472,
    "clock": 57473,
    "plus": 57493,
    "minus": 58901,
    "close": 57474,
    "event": 58905,
    "exclamation": 58903,
    "organization": 58902,
    "trophy": 57350,
    "screen-smartphone": 57360,
    "screen-desktop": 57361,
    "plane": 57362,
    "notebook": 57363,
    "mustache": 57364,
    "mouse": 57365,
    "magnet": 57366,
    "energy": 57376,
    "disc": 57378,
    "cursor": 57454,
    "cursor-move": 57379,
    "crop": 57380,
    "chemistry": 57382,
    "speedometer": 57351,
    "shield": 57358,
    "screen-tablet": 57359,
    "magic-wand": 57367,
    "hourglass": 57368,
    "graduation": 57369,
    "ghost": 57370,
    "game-controller": 57371,
    "fire": 57372,
    "eyeglass": 57373,
    "envelope-open": 57374,
    "envelope-letter": 57375,
    "bell": 57383,
    "badge": 57384,
    "anchor": 57385,
    "wallet": 57386,
    "vector": 57387,
    "speech": 57388,
    "puzzle": 57389,
    "printer": 57390,
    "present": 57391,
    "playlist": 57392,
    "pin": 57393,
    "picture": 57394,
    "handbag": 57397,
    "globe-alt": 57398,
    "globe": 57399,
    "folder-alt": 57401,
    "folder": 57481,
    "film": 57402,
    "feed": 57403,
    "drop": 57406,
    "drawer": 57407,
    "docs": 57408,
    "doc": 57477,
    "diamond": 57411,
    "cup": 57412,
    "calculator": 57417,
    "bubbles": 57418,
    "briefcase": 57419,
    "book-open": 57420,
    "basket-loaded": 57421,
    "basket": 57422,
    "bag": 57423,
    "action-undo": 57424,
    "action-redo": 57425,
    "wrench": 57426,
    "umbrella": 57427,
    "trash": 57428,
    "tag": 57429,
    "support": 57430,
    "frame": 57400,
    "size-fullscreen": 57431,
    "size-actual": 57432,
    "shuffle": 57433,
    "share-alt": 57434,
    "share": 57435,
    "rocket": 57436,
    "question": 57437,
    "pie-chart": 57438,
    "pencil": 57439,
    "note": 57440,
    "loop": 57444,
    "home": 57449,
    "grid": 57450,
    "graph": 57451,
    "microphone": 57443,
    "music-tone-alt": 57441,
    "music-tone": 57442,
    "earphones-alt": 57404,
    "earphones": 57405,
    "equalizer": 57452,
    "like": 57448,
    "dislike": 57453,
    "control-start": 57455,
    "control-rewind": 57456,
    "control-play": 57457,
    "control-pause": 57458,
    "control-forward": 57459,
    "control-end": 57460,
    "volume-1": 57503,
    "volume-2": 57504,
    "volume-off": 57505,
    "calendar": 57461,
    "bulb": 57462,
    "chart": 57463,
    "ban": 57468,
    "bubble": 57469,
    "camrecorder": 57470,
    "camera": 57471,
    "cloud-download": 57475,
    "cloud-upload": 57476,
    "envelope": 57478,
    "eye": 57479,
    "flag": 57480,
    "heart": 57482,
    "info": 57483,
    "key": 57484,
    "link": 57485,
    "lock": 57486,
    "lock-open": 57487,
    "magnifier": 57488,
    "magnifier-add": 57489,
    "magnifier-remove": 57490,
    "paper-clip": 57491,
    "paper-plane": 57492,
    "power": 57495,
    "refresh": 57496,
    "reload": 57497,
    "settings": 57498,
    "star": 57499,
    "symbol-female": 57500,
    "symbol-male": 57501,
    "target": 57502,
    "credit-card": 57381,
    "paypal": 58888,
    "social-tumblr": 57354,
    "social-twitter": 57353,
    "social-facebook": 57355,
    "social-instagram": 58889,
    "social-linkedin": 58890,
    "social-pinterest": 58891,
    "social-github": 58892,
    "social-google": 58893,
    "social-reddit": 58894,
    "social-skype": 58895,
    "social-dribbble": 57357,
    "social-behance": 58896,
    "social-foursqare": 58897,
    "social-soundcloud": 58898,
    "social-spotify": 58899,
    "social-stumbleupon": 58900,
    "social-youtube": 57352,
    "social-dropbox": 57356,
    "social-vkontakte": 58904,
    "social-steam": 58912
  };
},616,[],"react-native-vector-icons/glyphmaps/SimpleLineIcons.json");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  var _EvilIcons = require(_dependencyMap[1], "./glyphmaps/EvilIcons.json");

  var _EvilIcons2 = babelHelpers.interopRequireDefault(_EvilIcons);

  var iconSet = (0, _createIconSet2.default)(_EvilIcons2.default, 'EvilIcons', 'EvilIcons.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},617,[494,618],"react-native-vector-icons/EvilIcons.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    "archive": 61696,
    "arrow-down": 61697,
    "arrow-left": 61698,
    "arrow-right": 61699,
    "arrow-up": 61700,
    "bell": 61701,
    "calendar": 61702,
    "camera": 61703,
    "cart": 61704,
    "chart": 61705,
    "check": 61706,
    "chevron-down": 61707,
    "chevron-left": 61708,
    "chevron-right": 61709,
    "chevron-up": 61710,
    "clock": 61711,
    "close": 61712,
    "close-o": 61713,
    "comment": 61714,
    "credit-card": 61715,
    "envelope": 61716,
    "exclamation": 61717,
    "external-link": 61718,
    "eye": 61719,
    "gear": 61720,
    "heart": 61721,
    "image": 61722,
    "like": 61723,
    "link": 61724,
    "location": 61725,
    "lock": 61726,
    "minus": 61727,
    "navicon": 61728,
    "paperclip": 61729,
    "pencil": 61730,
    "play": 61731,
    "plus": 61732,
    "pointer": 61733,
    "question": 61734,
    "redo": 61735,
    "refresh": 61736,
    "retweet": 61737,
    "sc-facebook": 61738,
    "sc-github": 61739,
    "sc-google-plus": 61740,
    "sc-instagram": 61741,
    "sc-linkedin": 61742,
    "sc-odnoklassniki": 61743,
    "sc-pinterest": 61744,
    "sc-skype": 61745,
    "sc-soundcloud": 61746,
    "sc-telegram": 61747,
    "sc-tumblr": 61748,
    "sc-twitter": 61749,
    "sc-vimeo": 61750,
    "sc-vk": 61751,
    "sc-youtube": 61752,
    "search": 61753,
    "share-apple": 61754,
    "share-google": 61755,
    "spinner": 61756,
    "spinner-2": 61757,
    "spinner-3": 61758,
    "star": 61759,
    "tag": 61760,
    "trash": 61761,
    "trophy": 61762,
    "undo": 61763,
    "unlock": 61764,
    "user": 61765
  };
},618,[],"react-native-vector-icons/glyphmaps/EvilIcons.json");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Icon = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Icon/index.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _IconNB = require(_dependencyMap[4], "../IconNB");

  var _NBIcons = require(_dependencyMap[5], "./NBIcons.json");

  var _NBIcons2 = _interopRequireDefault(_NBIcons);

  var _platform = require(_dependencyMap[6], "./../../theme/variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  var _lodash = require(_dependencyMap[7], "lodash");

  var _lodash2 = _interopRequireDefault(_lodash);

  var _mapPropsToStyleNames = require(_dependencyMap[8], "../../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Icon = function (_Component) {
    _inherits(Icon, _Component);

    function Icon() {
      _classCallCheck(this, Icon);

      return _possibleConstructorReturn(this, (Icon.__proto__ || Object.getPrototypeOf(Icon)).apply(this, arguments));
    }

    _createClass(Icon, [{
      key: "getName",
      value: function getName() {
        var variables = this.context.theme ? this.context.theme["@@shoutem.theme/themeStyle"].variables : _platform2.default;
        var platformStyle = variables.platformStyle;
        var platform = variables.platform;

        if (variables.iconFamily === "Ionicons") {
          if (typeof _NBIcons2.default[this.props.name] !== "object") {
            return this.props.name;
          } else if (typeof _NBIcons2.default[this.props.name] === "object") {
            var name = void 0;

            if (platform === "ios" && platformStyle !== "material") {
              name = this.props.active ? _NBIcons2.default[this.props.name].ios.active : _NBIcons2.default[this.props.name].ios.default;
            } else {
              name = this.props.active ? _NBIcons2.default[this.props.name].android.active : _NBIcons2.default[this.props.name].android.default;
            }

            return name;
          }
        } else {
          return this.props.name;
        }
      }
    }, {
      key: "getIconName",
      value: function getIconName() {
        if (_reactNative.Platform.OS === "ios") {
          if (this.props.ios) {
            return this.props.ios;
          } else {
            return this.props.active ? _NBIcons2.default[this.props.name].ios.active : _NBIcons2.default[this.props.name].ios.default;
          }
        } else if (this.props.android) {
          return this.props.android;
        } else {
          return this.props.active ? _NBIcons2.default[this.props.name].android.active : _NBIcons2.default[this.props.name].android.default;
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        if (this.props.ios && this.props.android) {
          return _react2.default.createElement(_IconNB.IconNB, _extends({
            ref: function ref(c) {
              return _this2._root = c;
            }
          }, this.props, {
            name: _reactNative.Platform.OS === "ios" ? this.props.ios : this.props.android,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 58
            }
          }));
        } else if (this.props.name && (this.props.android || this.props.ios)) {
          return _react2.default.createElement(_IconNB.IconNB, _extends({
            ref: function ref(c) {
              return _this2._root = c;
            }
          }, this.props, {
            name: this.getIconName(),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 65
            }
          }));
        } else {
          return _react2.default.createElement(_IconNB.IconNB, _extends({
            ref: function ref(c) {
              return _this2._root = c;
            }
          }, this.props, {
            name: this.getName(),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 67
            }
          }));
        }
      }
    }]);

    return Icon;
  }(_react.Component);

  Icon.contextTypes = {
    theme: _propTypes2.default.object
  };
  Icon.propTypes = _extends({}, _IconNB.IconNB.propTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
    name: _propTypes2.default.string,
    ios: _propTypes2.default.string,
    android: _propTypes2.default.string,
    active: _propTypes2.default.bool
  });
  var StyledIcon = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Icon", {}, _mapPropsToStyleNames2.default)(Icon);
  exports.Icon = StyledIcon;
},619,[108,127,12,404,492,620,426,407,482],"native-base/dist/src/basic/Icon/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    "add": {
      "android": {
        "default": "md-add",
        "active": "md-add"
      },
      "ios": {
        "default": "ios-add-outline",
        "active": "ios-add"
      }
    },
    "add-circle": {
      "android": {
        "default": "md-add-circle",
        "active": "md-add-circle"
      },
      "ios": {
        "default": "ios-add-circle-outline",
        "active": "ios-add-circle"
      }
    },
    "alarm": {
      "android": {
        "default": "md-alarm",
        "active": "md-alarm"
      },
      "ios": {
        "default": "ios-alarm-outline",
        "active": "ios-alarm"
      }
    },
    "albums": {
      "android": {
        "default": "md-albums",
        "active": "md-albums"
      },
      "ios": {
        "default": "ios-albums-outline",
        "active": "ios-albums"
      }
    },
    "alert": {
      "android": {
        "default": "md-alert",
        "active": "md-alert"
      },
      "ios": {
        "default": "ios-alert-outline",
        "active": "ios-alert"
      }
    },
    "american-football": {
      "android": {
        "default": "md-american-football",
        "active": "md-american-football"
      },
      "ios": {
        "default": "ios-american-football-outline",
        "active": "ios-american-football"
      }
    },
    "analytics": {
      "android": {
        "default": "md-analytics",
        "active": "md-analytics"
      },
      "ios": {
        "default": "ios-analytics-outline",
        "active": "ios-analytics"
      }
    },
    "aperture": {
      "android": {
        "default": "md-aperture",
        "active": "md-aperture"
      },
      "ios": {
        "default": "ios-aperture-outline",
        "active": "ios-aperture"
      }
    },
    "apps": {
      "android": {
        "default": "md-apps",
        "active": "md-apps"
      },
      "ios": {
        "default": "ios-apps-outline",
        "active": "ios-apps"
      }
    },
    "appstore": {
      "android": {
        "default": "md-appstore",
        "active": "md-appstore"
      },
      "ios": {
        "default": "ios-appstore-outline",
        "active": "ios-apps"
      }
    },
    "archive": {
      "android": {
        "default": "md-archive",
        "active": "md-archive"
      },
      "ios": {
        "default": "ios-archive-outline",
        "active": "ios-archive"
      }
    },
    "arrow-back": {
      "android": {
        "default": "md-arrow-back",
        "active": "md-arrow-back"
      },
      "ios": {
        "default": "ios-arrow-back-outline",
        "active": "ios-arrow-back"
      }
    },
    "arrow-down": {
      "android": {
        "default": "md-arrow-down",
        "active": "md-arrow-down"
      },
      "ios": {
        "default": "ios-arrow-down-outline",
        "active": "ios-arrow-down"
      }
    },
    "arrow-dropdown": {
      "android": {
        "default": "md-arrow-dropdown",
        "active": "md-arrow-dropdown"
      },
      "ios": {
        "default": "ios-arrow-dropdown-outline",
        "active": "ios-arrow-dropdown"
      }
    },
    "arrow-dropdown-circle": {
      "android": {
        "default": "md-arrow-dropdown-circle",
        "active": "md-arrow-dropdown-circle"
      },
      "ios": {
        "default": "ios-arrow-dropdown-circle-outline",
        "active": "ios-arrow-dropdown-circle"
      }
    },
    "arrow-dropleft": {
      "android": {
        "default": "md-arrow-dropleft",
        "active": "md-arrow-dropleft"
      },
      "ios": {
        "default": "ios-arrow-dropleft-outline",
        "active": "ios-arrow-dropleft"
      }
    },
    "arrow-dropleft-circle": {
      "android": {
        "default": "md-arrow-dropleft-circle",
        "active": "md-arrow-dropleft-circle"
      },
      "ios": {
        "default": "ios-arrow-dropleft-circle-outline",
        "active": "ios-arrow-dropleft-circle"
      }
    },
    "arrow-dropright": {
      "android": {
        "default": "md-arrow-dropright",
        "active": "md-arrow-dropright"
      },
      "ios": {
        "default": "ios-arrow-dropright-outline",
        "active": "ios-arrow-dropright"
      }
    },
    "arrow-dropright-circle": {
      "android": {
        "default": "md-arrow-dropright-circle",
        "active": "md-arrow-dropright-circle"
      },
      "ios": {
        "default": "ios-arrow-dropright-circle-outline",
        "active": "ios-arrow-dropright-circle"
      }
    },
    "arrow-dropup": {
      "android": {
        "default": "md-arrow-dropup",
        "active": "md-arrow-dropup"
      },
      "ios": {
        "default": "ios-arrow-dropup-outline",
        "active": "ios-arrow-dropup"
      }
    },
    "arrow-dropup-circle": {
      "android": {
        "default": "md-arrow-dropup-circle",
        "active": "md-arrow-dropup-circle"
      },
      "ios": {
        "default": "ios-arrow-dropup-circle-outline",
        "active": "ios-arrow-dropup-circle"
      }
    },
    "arrow-forward": {
      "android": {
        "default": "md-arrow-forward",
        "active": "md-arrow-forward"
      },
      "ios": {
        "default": "ios-arrow-forward-outline",
        "active": "ios-arrow-forward"
      }
    },
    "arrow-round-back": {
      "android": {
        "default": "md-arrow-round-back",
        "active": "md-arrow-round-back"
      },
      "ios": {
        "default": "ios-arrow-round-back-outline",
        "active": "ios-arrow-round-back"
      }
    },
    "arrow-round-down": {
      "android": {
        "default": "md-arrow-round-down",
        "active": "md-arrow-round-down"
      },
      "ios": {
        "default": "ios-arrow-round-down-outline",
        "active": "ios-arrow-round-down"
      }
    },
    "arrow-round-forward": {
      "android": {
        "default": "md-arrow-round-forward",
        "active": "md-arrow-round-forward"
      },
      "ios": {
        "default": "ios-arrow-round-forward-outline",
        "active": "ios-arrow-round-forward"
      }
    },
    "arrow-round-up": {
      "android": {
        "default": "md-arrow-round-up",
        "active": "md-arrow-round-up"
      },
      "ios": {
        "default": "ios-arrow-round-up-outline",
        "active": "ios-arrow-round-up"
      }
    },
    "arrow-up": {
      "android": {
        "default": "md-arrow-up",
        "active": "md-arrow-up"
      },
      "ios": {
        "default": "ios-arrow-up-outline",
        "active": "ios-arrow-up"
      }
    },
    "at": {
      "android": {
        "default": "md-at",
        "active": "md-at"
      },
      "ios": {
        "default": "ios-at-outline",
        "active": "ios-at"
      }
    },
    "attach": {
      "android": {
        "default": "md-attach",
        "active": "md-attach"
      },
      "ios": {
        "default": "ios-attach-outline",
        "active": "ios-attach"
      }
    },
    "backspace": {
      "android": {
        "default": "md-backspace",
        "active": "md-backspace"
      },
      "ios": {
        "default": "ios-backspace-outline",
        "active": "ios-backspace"
      }
    },
    "barcode": {
      "android": {
        "default": "md-barcode",
        "active": "md-barcode"
      },
      "ios": {
        "default": "ios-barcode-outline",
        "active": "ios-barcode"
      }
    },
    "baseball": {
      "android": {
        "default": "md-baseball",
        "active": "md-baseball"
      },
      "ios": {
        "default": "ios-baseball-outline",
        "active": "ios-baseball"
      }
    },
    "basket": {
      "android": {
        "default": "md-basket",
        "active": "md-basket"
      },
      "ios": {
        "default": "ios-basket-outline",
        "active": "ios-basket"
      }
    },
    "basketball": {
      "android": {
        "default": "md-basketball",
        "active": "md-basketball"
      },
      "ios": {
        "default": "ios-basketball-outline",
        "active": "ios-basketball"
      }
    },
    "battery-charging": {
      "android": {
        "default": "md-battery-charging",
        "active": "md-battery-charging"
      },
      "ios": {
        "default": "ios-battery-charging-outline",
        "active": "ios-battery-charging"
      }
    },
    "battery-dead": {
      "android": {
        "default": "md-battery-dead",
        "active": "md-battery-dead"
      },
      "ios": {
        "default": "ios-battery-dead-outline",
        "active": "ios-battery-dead"
      }
    },
    "battery-full": {
      "android": {
        "default": "md-battery-full",
        "active": "md-battery-full"
      },
      "ios": {
        "default": "ios-battery-full-outline",
        "active": "ios-battery-full"
      }
    },
    "beaker": {
      "android": {
        "default": "md-beaker",
        "active": "md-beaker"
      },
      "ios": {
        "default": "ios-beaker-outline",
        "active": "ios-beaker"
      }
    },
    "beer": {
      "android": {
        "default": "md-beer",
        "active": "md-beer"
      },
      "ios": {
        "default": "ios-beer-outline",
        "active": "ios-beer"
      }
    },
    "bicycle": {
      "android": {
        "default": "md-bicycle",
        "active": "md-bicycle"
      },
      "ios": {
        "default": "ios-bicycle-outline",
        "active": "ios-bicycle"
      }
    },
    "bluetooth": {
      "android": {
        "default": "md-bluetooth",
        "active": "md-bluetooth"
      },
      "ios": {
        "default": "ios-bluetooth-outline",
        "active": "ios-bluetooth"
      }
    },
    "boat": {
      "android": {
        "default": "md-boat",
        "active": "md-boat"
      },
      "ios": {
        "default": "ios-boat-outline",
        "active": "ios-boat"
      }
    },
    "body": {
      "android": {
        "default": "md-body",
        "active": "md-body"
      },
      "ios": {
        "default": "ios-body-outline",
        "active": "ios-body"
      }
    },
    "bonfire": {
      "android": {
        "default": "md-bonfire",
        "active": "md-bonfire"
      },
      "ios": {
        "default": "ios-bonfire-outline",
        "active": "ios-bonfire"
      }
    },
    "book": {
      "android": {
        "default": "md-book",
        "active": "md-book"
      },
      "ios": {
        "default": "ios-book-outline",
        "active": "ios-book"
      }
    },
    "bookmark": {
      "android": {
        "default": "md-bookmark",
        "active": "md-bookmark"
      },
      "ios": {
        "default": "ios-bookmark-outline",
        "active": "ios-bookmark"
      }
    },
    "bookmarks": {
      "android": {
        "default": "md-bookmarks",
        "active": "md-bookmarks"
      },
      "ios": {
        "default": "ios-bookmarks-outline",
        "active": "ios-bookmarks"
      }
    },
    "bowtie": {
      "android": {
        "default": "md-bowtie",
        "active": "md-bowtie"
      },
      "ios": {
        "default": "ios-bowtie-outline",
        "active": "ios-bowtie"
      }
    },
    "briefcase": {
      "android": {
        "default": "md-briefcase",
        "active": "md-briefcase"
      },
      "ios": {
        "default": "ios-briefcase-outline",
        "active": "ios-briefcase"
      }
    },
    "browsers": {
      "android": {
        "default": "md-browsers",
        "active": "md-browsers"
      },
      "ios": {
        "default": "ios-browsers-outline",
        "active": "ios-browsers"
      }
    },
    "brush": {
      "android": {
        "default": "md-brush",
        "active": "md-brush"
      },
      "ios": {
        "default": "ios-brush-outline",
        "active": "ios-brush"
      }
    },
    "bug": {
      "android": {
        "default": "md-bug",
        "active": "md-bug"
      },
      "ios": {
        "default": "ios-bug-outline",
        "active": "ios-bug"
      }
    },
    "build": {
      "android": {
        "default": "md-build",
        "active": "md-build"
      },
      "ios": {
        "default": "ios-build-outline",
        "active": "ios-build"
      }
    },
    "bulb": {
      "android": {
        "default": "md-bulb",
        "active": "md-bulb"
      },
      "ios": {
        "default": "ios-bulb-outline",
        "active": "ios-bulb"
      }
    },
    "bus": {
      "android": {
        "default": "md-bus",
        "active": "md-bus"
      },
      "ios": {
        "default": "ios-bus-outline",
        "active": "ios-bus"
      }
    },
    "cafe": {
      "android": {
        "default": "md-cafe",
        "active": "md-cafe"
      },
      "ios": {
        "default": "ios-cafe-outline",
        "active": "ios-cafe"
      }
    },
    "calculator": {
      "android": {
        "default": "md-calculator",
        "active": "md-calculator"
      },
      "ios": {
        "default": "ios-calculator-outline",
        "active": "ios-calculator"
      }
    },
    "calendar": {
      "android": {
        "default": "md-calendar",
        "active": "md-calendar"
      },
      "ios": {
        "default": "ios-calendar-outline",
        "active": "ios-calendar"
      }
    },
    "call": {
      "android": {
        "default": "md-call",
        "active": "md-call"
      },
      "ios": {
        "default": "ios-call-outline",
        "active": "ios-call"
      }
    },
    "camera": {
      "android": {
        "default": "md-camera",
        "active": "md-camera"
      },
      "ios": {
        "default": "ios-camera-outline",
        "active": "ios-camera"
      }
    },
    "car": {
      "android": {
        "default": "md-car",
        "active": "md-car"
      },
      "ios": {
        "default": "ios-car-outline",
        "active": "ios-car"
      }
    },
    "card": {
      "android": {
        "default": "md-card",
        "active": "md-card"
      },
      "ios": {
        "default": "ios-card-outline",
        "active": "ios-card"
      }
    },
    "cart": {
      "android": {
        "default": "md-cart",
        "active": "md-cart"
      },
      "ios": {
        "default": "ios-cart-outline",
        "active": "ios-cart"
      }
    },
    "cash": {
      "android": {
        "default": "md-cash",
        "active": "md-cash"
      },
      "ios": {
        "default": "ios-cash-outline",
        "active": "ios-cash"
      }
    },
    "chatboxes": {
      "android": {
        "default": "md-chatboxes",
        "active": "md-chatboxes"
      },
      "ios": {
        "default": "ios-chatboxes-outline",
        "active": "ios-chatboxes"
      }
    },
    "chatbubbles": {
      "android": {
        "default": "md-chatbubbles",
        "active": "md-chatbubbles"
      },
      "ios": {
        "default": "ios-chatbubbles-outline",
        "active": "ios-chatbubbles"
      }
    },
    "checkbox": {
      "android": {
        "default": "md-checkbox-outline",
        "active": "md-checkbox"
      },
      "ios": {
        "default": "ios-checkbox-outline",
        "active": "ios-checkbox"
      }
    },
    "checkmark": {
      "android": {
        "default": "md-checkmark",
        "active": "md-checkmark"
      },
      "ios": {
        "default": "ios-checkmark-outline",
        "active": "ios-checkmark"
      }
    },
    "checkmark-circle": {
      "android": {
        "default": "md-checkmark-circle-outline",
        "active": "md-checkmark-circle"
      },
      "ios": {
        "default": "ios-checkmark-circle-outline",
        "active": "ios-checkmark-circle"
      }
    },
    "clipboard": {
      "android": {
        "default": "md-clipboard",
        "active": "md-clipboard"
      },
      "ios": {
        "default": "ios-clipboard-outline",
        "active": "ios-clipboard"
      }
    },
    "clock": {
      "android": {
        "default": "md-clock",
        "active": "md-clock"
      },
      "ios": {
        "default": "ios-clock-outline",
        "active": "ios-clock"
      }
    },
    "close": {
      "android": {
        "default": "md-close",
        "active": "md-close"
      },
      "ios": {
        "default": "ios-close-outline",
        "active": "ios-close"
      }
    },
    "close-circle": {
      "android": {
        "default": "md-close-circle",
        "active": "md-close-circle"
      },
      "ios": {
        "default": "ios-close-circle-outline",
        "active": "ios-close-circle"
      }
    },
    "cloud": {
      "android": {
        "default": "md-cloud",
        "active": "md-cloud"
      },
      "ios": {
        "default": "ios-cloud-outline",
        "active": "ios-cloud"
      }
    },
    "cloud-circle": {
      "android": {
        "default": "md-cloud-circle",
        "active": "md-cloud-circle"
      },
      "ios": {
        "default": "ios-cloud-circle-outline",
        "active": "ios-cloud-circle"
      }
    },
    "cloud-done": {
      "android": {
        "default": "md-cloud-done",
        "active": "md-cloud-done"
      },
      "ios": {
        "default": "ios-cloud-done-outline",
        "active": "ios-cloud-done"
      }
    },
    "cloud-download": {
      "android": {
        "default": "md-cloud-download",
        "active": "md-cloud-download"
      },
      "ios": {
        "default": "ios-cloud-download-outline",
        "active": "ios-cloud-download"
      }
    },
    "cloud-outline": {
      "android": {
        "default": "md-cloud-outline",
        "active": "md-cloud-outline"
      },
      "ios": {
        "default": "ios-cloud-outline-outline",
        "active": "ios-cloud-outline"
      }
    },
    "cloud-upload": {
      "android": {
        "default": "md-cloud-upload",
        "active": "md-cloud-upload"
      },
      "ios": {
        "default": "ios-cloud-upload-outline",
        "active": "ios-cloud-upload"
      }
    },
    "cloudy": {
      "android": {
        "default": "md-cloudy",
        "active": "md-cloudy"
      },
      "ios": {
        "default": "ios-cloudy-outline",
        "active": "ios-cloudy"
      }
    },
    "cloudy-night": {
      "android": {
        "default": "md-cloudy-night",
        "active": "md-cloudy-night"
      },
      "ios": {
        "default": "ios-cloudy-night-outline",
        "active": "ios-cloudy-night"
      }
    },
    "code": {
      "android": {
        "default": "md-code",
        "active": "md-code"
      },
      "ios": {
        "default": "ios-code-outline",
        "active": "ios-code"
      }
    },
    "code-download": {
      "android": {
        "default": "md-code-download",
        "active": "md-code-download"
      },
      "ios": {
        "default": "ios-code-download-outline",
        "active": "ios-code-download"
      }
    },
    "code-working": {
      "android": {
        "default": "md-code-working",
        "active": "md-code-working"
      },
      "ios": {
        "default": "ios-code-working-outline",
        "active": "ios-code-working"
      }
    },
    "cog": {
      "android": {
        "default": "md-cog",
        "active": "md-cog"
      },
      "ios": {
        "default": "ios-cog-outline",
        "active": "ios-cog"
      }
    },
    "color-fill": {
      "android": {
        "default": "md-color-fill",
        "active": "md-color-fill"
      },
      "ios": {
        "default": "ios-color-fill-outline",
        "active": "ios-color-fill"
      }
    },
    "color-filter": {
      "android": {
        "default": "md-color-filter",
        "active": "md-color-filter"
      },
      "ios": {
        "default": "ios-color-filter-outline",
        "active": "ios-color-filter"
      }
    },
    "color-palette": {
      "android": {
        "default": "md-color-palette",
        "active": "md-color-palette"
      },
      "ios": {
        "default": "ios-color-palette-outline",
        "active": "ios-color-palette"
      }
    },
    "color-wand": {
      "android": {
        "default": "md-color-wand",
        "active": "md-color-wand"
      },
      "ios": {
        "default": "ios-color-wand-outline",
        "active": "ios-color-wand"
      }
    },
    "compass": {
      "android": {
        "default": "md-compass",
        "active": "md-compass"
      },
      "ios": {
        "default": "ios-compass-outline",
        "active": "ios-compass"
      }
    },
    "construct": {
      "android": {
        "default": "md-construct",
        "active": "md-construct"
      },
      "ios": {
        "default": "ios-construct-outline",
        "active": "ios-construct"
      }
    },
    "contact": {
      "android": {
        "default": "md-contact",
        "active": "md-contact"
      },
      "ios": {
        "default": "ios-contact-outline",
        "active": "ios-contact"
      }
    },
    "contacts": {
      "android": {
        "default": "md-contacts",
        "active": "md-contacts"
      },
      "ios": {
        "default": "ios-contacts-outline",
        "active": "ios-contacts"
      }
    },
    "contract": {
      "android": {
        "default": "md-contract",
        "active": "md-contract"
      },
      "ios": {
        "default": "ios-contract-outline",
        "active": "ios-contract"
      }
    },
    "contrast": {
      "android": {
        "default": "md-contrast",
        "active": "md-contrast"
      },
      "ios": {
        "default": "ios-contrast-outline",
        "active": "ios-contrast"
      }
    },
    "copy": {
      "android": {
        "default": "md-copy",
        "active": "md-copy"
      },
      "ios": {
        "default": "ios-copy-outline",
        "active": "ios-copy"
      }
    },
    "create": {
      "android": {
        "default": "md-create",
        "active": "md-create"
      },
      "ios": {
        "default": "ios-create-outline",
        "active": "ios-create"
      }
    },
    "crop": {
      "android": {
        "default": "md-crop",
        "active": "md-crop"
      },
      "ios": {
        "default": "ios-crop-outline",
        "active": "ios-crop"
      }
    },
    "cube": {
      "android": {
        "default": "md-cube",
        "active": "md-cube"
      },
      "ios": {
        "default": "ios-cube-outline",
        "active": "ios-cube"
      }
    },
    "cut": {
      "android": {
        "default": "md-cut",
        "active": "md-cut"
      },
      "ios": {
        "default": "ios-cut-outline",
        "active": "ios-cut"
      }
    },
    "desktop": {
      "android": {
        "default": "md-desktop",
        "active": "md-desktop"
      },
      "ios": {
        "default": "ios-desktop-outline",
        "active": "ios-desktop"
      }
    },
    "disc": {
      "android": {
        "default": "md-disc",
        "active": "md-disc"
      },
      "ios": {
        "default": "ios-disc-outline",
        "active": "ios-disc"
      }
    },
    "document": {
      "android": {
        "default": "md-document",
        "active": "md-document"
      },
      "ios": {
        "default": "ios-document-outline",
        "active": "ios-document"
      }
    },
    "done-all": {
      "android": {
        "default": "md-done-all",
        "active": "md-done-all"
      },
      "ios": {
        "default": "ios-done-all-outline",
        "active": "ios-done-all"
      }
    },
    "download": {
      "android": {
        "default": "md-download",
        "active": "md-download"
      },
      "ios": {
        "default": "ios-download-outline",
        "active": "ios-download"
      }
    },
    "easel": {
      "android": {
        "default": "md-easel",
        "active": "md-easel"
      },
      "ios": {
        "default": "ios-easel-outline",
        "active": "ios-easel"
      }
    },
    "egg": {
      "android": {
        "default": "md-egg",
        "active": "md-egg"
      },
      "ios": {
        "default": "ios-egg-outline",
        "active": "ios-egg"
      }
    },
    "exit": {
      "android": {
        "default": "md-exit",
        "active": "md-exit"
      },
      "ios": {
        "default": "ios-exit-outline",
        "active": "ios-exit"
      }
    },
    "expand": {
      "android": {
        "default": "md-expand",
        "active": "md-expand"
      },
      "ios": {
        "default": "ios-expand-outline",
        "active": "ios-expand"
      }
    },
    "eye": {
      "android": {
        "default": "md-eye",
        "active": "md-eye"
      },
      "ios": {
        "default": "ios-eye-outline",
        "active": "ios-eye"
      }
    },
    "eye-off": {
      "android": {
        "default": "md-eye-off",
        "active": "md-eye-off"
      },
      "ios": {
        "default": "ios-eye-off-outline",
        "active": "ios-eye-off"
      }
    },
    "fastforward": {
      "android": {
        "default": "md-fastforward",
        "active": "md-fastforward"
      },
      "ios": {
        "default": "ios-fastforward-outline",
        "active": "ios-fastforward"
      }
    },
    "female": {
      "android": {
        "default": "md-female",
        "active": "md-female"
      },
      "ios": {
        "default": "ios-female-outline",
        "active": "ios-female"
      }
    },
    "filing": {
      "android": {
        "default": "md-filing",
        "active": "md-filing"
      },
      "ios": {
        "default": "ios-filing-outline",
        "active": "ios-filing"
      }
    },
    "film": {
      "android": {
        "default": "md-film",
        "active": "md-film"
      },
      "ios": {
        "default": "ios-film-outline",
        "active": "ios-film"
      }
    },
    "finger-print": {
      "android": {
        "default": "md-finger-print",
        "active": "md-finger-print"
      },
      "ios": {
        "default": "ios-finger-print-outline",
        "active": "ios-finger-print"
      }
    },
    "flag": {
      "android": {
        "default": "md-flag",
        "active": "md-flag"
      },
      "ios": {
        "default": "ios-flag-outline",
        "active": "ios-flag"
      }
    },
    "flame": {
      "android": {
        "default": "md-flame",
        "active": "md-flame"
      },
      "ios": {
        "default": "ios-flame-outline",
        "active": "ios-flame"
      }
    },
    "flash": {
      "android": {
        "default": "md-flash",
        "active": "md-flash"
      },
      "ios": {
        "default": "ios-flash-outline",
        "active": "ios-flash"
      }
    },
    "flask": {
      "android": {
        "default": "md-flask",
        "active": "md-flask"
      },
      "ios": {
        "default": "ios-flask-outline",
        "active": "ios-flask"
      }
    },
    "flower": {
      "android": {
        "default": "md-flower",
        "active": "md-flower"
      },
      "ios": {
        "default": "ios-flower-outline",
        "active": "ios-flower"
      }
    },
    "folder": {
      "android": {
        "default": "md-folder",
        "active": "md-folder"
      },
      "ios": {
        "default": "ios-folder-outline",
        "active": "ios-folder"
      }
    },
    "folder-open": {
      "android": {
        "default": "md-folder-open",
        "active": "md-folder-open"
      },
      "ios": {
        "default": "ios-folder-open-outline",
        "active": "ios-folder-open"
      }
    },
    "football": {
      "android": {
        "default": "md-football",
        "active": "md-football"
      },
      "ios": {
        "default": "ios-football-outline",
        "active": "ios-football"
      }
    },
    "funnel": {
      "android": {
        "default": "md-funnel",
        "active": "md-funnel"
      },
      "ios": {
        "default": "ios-funnel-outline",
        "active": "ios-funnel"
      }
    },
    "game-controller-a": {
      "android": {
        "default": "md-game-controller-a",
        "active": "md-game-controller-a"
      },
      "ios": {
        "default": "ios-game-controller-a-outline",
        "active": "ios-game-controller-a"
      }
    },
    "game-controller-b": {
      "android": {
        "default": "md-game-controller-b",
        "active": "md-game-controller-b"
      },
      "ios": {
        "default": "ios-game-controller-b-outline",
        "active": "ios-game-controller-b"
      }
    },
    "git-branch": {
      "android": {
        "default": "md-git-branch",
        "active": "md-git-branch"
      },
      "ios": {
        "default": "ios-git-branch-outline",
        "active": "ios-git-branch"
      }
    },
    "git-commit": {
      "android": {
        "default": "md-git-commit",
        "active": "md-git-commit"
      },
      "ios": {
        "default": "ios-git-commit-outline",
        "active": "ios-git-commit"
      }
    },
    "git-merge": {
      "android": {
        "default": "md-git-merge",
        "active": "md-git-merge"
      },
      "ios": {
        "default": "ios-git-merge-outline",
        "active": "ios-git-merge"
      }
    },
    "git-compare": {
      "android": {
        "default": "md-git-compare",
        "active": "md-git-compare"
      },
      "ios": {
        "default": "ios-git-compare-outline",
        "active": "ios-git-compare"
      }
    },
    "git-network": {
      "android": {
        "default": "md-git-network",
        "active": "md-git-network"
      },
      "ios": {
        "default": "ios-git-network-outline",
        "active": "ios-git-network"
      }
    },
    "git-pull-request": {
      "android": {
        "default": "md-git-pull-request",
        "active": "md-git-pull-request"
      },
      "ios": {
        "default": "ios-git-pull-request-outline",
        "active": "ios-git-pull-request"
      }
    },
    "glasses": {
      "android": {
        "default": "md-glasses",
        "active": "md-glasses"
      },
      "ios": {
        "default": "ios-glasses-outline",
        "active": "ios-glasses"
      }
    },
    "globe": {
      "android": {
        "default": "md-globe",
        "active": "md-globe"
      },
      "ios": {
        "default": "ios-globe-outline",
        "active": "ios-globe"
      }
    },
    "grid": {
      "android": {
        "default": "md-grid",
        "active": "md-grid"
      },
      "ios": {
        "default": "ios-grid-outline",
        "active": "ios-grid"
      }
    },
    "hammer": {
      "android": {
        "default": "md-hammer",
        "active": "md-hammer"
      },
      "ios": {
        "default": "ios-hammer-outline",
        "active": "ios-hammer"
      }
    },
    "hand": {
      "android": {
        "default": "md-hand",
        "active": "md-hand"
      },
      "ios": {
        "default": "ios-hand-outline",
        "active": "ios-hand"
      }
    },
    "headset": {
      "android": {
        "default": "md-headset",
        "active": "md-headset"
      },
      "ios": {
        "default": "ios-headset-outline",
        "active": "ios-headset"
      }
    },
    "heart": {
      "android": {
        "default": "md-heart",
        "active": "md-heart"
      },
      "ios": {
        "default": "ios-heart-outline",
        "active": "ios-heart"
      }
    },
    "happy": {
      "android": {
        "default": "md-happy",
        "active": "md-happy"
      },
      "ios": {
        "default": "ios-happy-outline",
        "active": "ios-happy"
      }
    },
    "help": {
      "android": {
        "default": "md-help",
        "active": "md-help"
      },
      "ios": {
        "default": "ios-help-outline",
        "active": "ios-help"
      }
    },
    "help-buoy": {
      "android": {
        "default": "md-help-buoy",
        "active": "md-help-buoy"
      },
      "ios": {
        "default": "ios-help-buoy-outline",
        "active": "ios-help-buoy"
      }
    },
    "help-circle": {
      "android": {
        "default": "md-help-circle",
        "active": "md-help-circle"
      },
      "ios": {
        "default": "ios-help-circle-outline",
        "active": "ios-help-circle"
      }
    },
    "home": {
      "android": {
        "default": "md-home",
        "active": "md-home"
      },
      "ios": {
        "default": "ios-home-outline",
        "active": "ios-home"
      }
    },
    "ice-cream": {
      "android": {
        "default": "md-ice-cream",
        "active": "md-ice-cream"
      },
      "ios": {
        "default": "ios-ice-cream-outline",
        "active": "ios-ice-cream"
      }
    },
    "image": {
      "android": {
        "default": "md-image",
        "active": "md-image"
      },
      "ios": {
        "default": "ios-image-outline",
        "active": "ios-image"
      }
    },
    "images": {
      "android": {
        "default": "md-images",
        "active": "md-images"
      },
      "ios": {
        "default": "ios-images-outline",
        "active": "ios-images"
      }
    },
    "infinite": {
      "android": {
        "default": "md-infinite",
        "active": "md-infinite"
      },
      "ios": {
        "default": "ios-infinite-outline",
        "active": "ios-infinite"
      }
    },
    "information": {
      "android": {
        "default": "md-information",
        "active": "md-information"
      },
      "ios": {
        "default": "ios-information-outline",
        "active": "ios-information"
      }
    },
    "information-circle": {
      "android": {
        "default": "md-information-circle",
        "active": "md-information-circle"
      },
      "ios": {
        "default": "ios-information-circle-outline",
        "active": "ios-information-circle"
      }
    },
    "ionic": {
      "android": {
        "default": "md-ionic",
        "active": "md-ionic"
      },
      "ios": {
        "default": "ios-ionic-outline",
        "active": "ios-ionic"
      }
    },
    "ionitron": {
      "android": {
        "default": "md-ionitron",
        "active": "md-ionitron"
      },
      "ios": {
        "default": "ios-ionitron-outline",
        "active": "ios-ionitron"
      }
    },
    "jet": {
      "android": {
        "default": "md-jet",
        "active": "md-jet"
      },
      "ios": {
        "default": "ios-jet-outline",
        "active": "ios-jet"
      }
    },
    "key": {
      "android": {
        "default": "md-key",
        "active": "md-key"
      },
      "ios": {
        "default": "ios-key-outline",
        "active": "ios-key"
      }
    },
    "keypad": {
      "android": {
        "default": "md-keypad",
        "active": "md-keypad"
      },
      "ios": {
        "default": "ios-keypad-outline",
        "active": "ios-keypad"
      }
    },
    "laptop": {
      "android": {
        "default": "md-laptop",
        "active": "md-laptop"
      },
      "ios": {
        "default": "ios-laptop-outline",
        "active": "ios-laptop"
      }
    },
    "leaf": {
      "android": {
        "default": "md-leaf",
        "active": "md-leaf"
      },
      "ios": {
        "default": "ios-leaf-outline",
        "active": "ios-leaf"
      }
    },
    "link": {
      "android": {
        "default": "md-link",
        "active": "md-link"
      },
      "ios": {
        "default": "ios-link-outline",
        "active": "ios-link"
      }
    },
    "list": {
      "android": {
        "default": "md-list",
        "active": "md-list"
      },
      "ios": {
        "default": "ios-list-outline",
        "active": "ios-list"
      }
    },
    "list-box": {
      "android": {
        "default": "md-list-box",
        "active": "md-list-box"
      },
      "ios": {
        "default": "ios-list-box-outline",
        "active": "ios-list-box"
      }
    },
    "locate": {
      "android": {
        "default": "md-locate",
        "active": "md-locate"
      },
      "ios": {
        "default": "ios-locate-outline",
        "active": "ios-locate"
      }
    },
    "lock": {
      "android": {
        "default": "md-lock",
        "active": "md-lock"
      },
      "ios": {
        "default": "ios-lock-outline",
        "active": "ios-lock"
      }
    },
    "log-in": {
      "android": {
        "default": "md-log-in",
        "active": "md-log-in"
      },
      "ios": {
        "default": "ios-log-in-outline",
        "active": "ios-log-in"
      }
    },
    "log-out": {
      "android": {
        "default": "md-log-out",
        "active": "md-log-out"
      },
      "ios": {
        "default": "ios-log-out-outline",
        "active": "ios-log-out"
      }
    },
    "magnet": {
      "android": {
        "default": "md-magnet",
        "active": "md-magnet"
      },
      "ios": {
        "default": "ios-magnet-outline",
        "active": "ios-magnet"
      }
    },
    "mail": {
      "android": {
        "default": "md-mail",
        "active": "md-mail"
      },
      "ios": {
        "default": "ios-mail-outline",
        "active": "ios-mail"
      }
    },
    "mail-open": {
      "android": {
        "default": "md-mail-open",
        "active": "md-mail-open"
      },
      "ios": {
        "default": "ios-mail-open-outline",
        "active": "ios-mail-open"
      }
    },
    "male": {
      "android": {
        "default": "md-male",
        "active": "md-male"
      },
      "ios": {
        "default": "ios-male-outline",
        "active": "ios-male"
      }
    },
    "man": {
      "android": {
        "default": "md-man",
        "active": "md-man"
      },
      "ios": {
        "default": "ios-man-outline",
        "active": "ios-man"
      }
    },
    "map": {
      "android": {
        "default": "md-map",
        "active": "md-map"
      },
      "ios": {
        "default": "ios-map-outline",
        "active": "ios-map"
      }
    },
    "medal": {
      "android": {
        "default": "md-medal",
        "active": "md-medal"
      },
      "ios": {
        "default": "ios-medal-outline",
        "active": "ios-medal"
      }
    },
    "medical": {
      "android": {
        "default": "md-medical",
        "active": "md-medical"
      },
      "ios": {
        "default": "ios-medical-outline",
        "active": "ios-medical"
      }
    },
    "medkit": {
      "android": {
        "default": "md-medkit",
        "active": "md-medkit"
      },
      "ios": {
        "default": "ios-medkit-outline",
        "active": "ios-medkit"
      }
    },
    "megaphone": {
      "android": {
        "default": "md-megaphone",
        "active": "md-megaphone"
      },
      "ios": {
        "default": "ios-megaphone-outline",
        "active": "ios-megaphone"
      }
    },
    "menu": {
      "android": {
        "default": "md-menu",
        "active": "md-menu"
      },
      "ios": {
        "default": "ios-menu-outline",
        "active": "ios-menu"
      }
    },
    "mic": {
      "android": {
        "default": "md-mic",
        "active": "md-mic"
      },
      "ios": {
        "default": "ios-mic-outline",
        "active": "ios-mic"
      }
    },
    "mic-off": {
      "android": {
        "default": "md-mic-off",
        "active": "md-mic-off"
      },
      "ios": {
        "default": "ios-mic-off-outline",
        "active": "ios-mic-off"
      }
    },
    "microphone": {
      "android": {
        "default": "md-microphone",
        "active": "md-microphone"
      },
      "ios": {
        "default": "ios-microphone-outline",
        "active": "ios-microphone"
      }
    },
    "moon": {
      "android": {
        "default": "md-moon",
        "active": "md-moon"
      },
      "ios": {
        "default": "ios-moon-outline",
        "active": "ios-moon"
      }
    },
    "more": {
      "android": {
        "default": "md-more",
        "active": "md-more"
      },
      "ios": {
        "default": "ios-more-outline",
        "active": "ios-more"
      }
    },
    "move": {
      "android": {
        "default": "md-move",
        "active": "md-move"
      },
      "ios": {
        "default": "ios-move-outline",
        "active": "ios-move"
      }
    },
    "musical-note": {
      "android": {
        "default": "md-musical-note",
        "active": "md-musical-note"
      },
      "ios": {
        "default": "ios-musical-note-outline",
        "active": "ios-musical-note"
      }
    },
    "musical-notes": {
      "android": {
        "default": "md-musical-notes",
        "active": "md-musical-notes"
      },
      "ios": {
        "default": "ios-musical-notes-outline",
        "active": "ios-musical-notes"
      }
    },
    "navigate": {
      "android": {
        "default": "md-navigate",
        "active": "md-navigate"
      },
      "ios": {
        "default": "ios-navigate-outline",
        "active": "ios-navigate"
      }
    },
    "no-smoking": {
      "android": {
        "default": "md-no-smoking",
        "active": "md-no-smoking"
      },
      "ios": {
        "default": "ios-no-smoking-outline",
        "active": "ios-no-smoking"
      }
    },
    "notifications": {
      "android": {
        "default": "md-notifications-outline",
        "active": "md-notifications"
      },
      "ios": {
        "default": "ios-notifications-outline",
        "active": "ios-notifications"
      }
    },
    "notifications-off": {
      "android": {
        "default": "md-notifications-off",
        "active": "md-notifications-off"
      },
      "ios": {
        "default": "ios-notifications-off-outline",
        "active": "ios-notifications-off"
      }
    },
    "nuclear": {
      "android": {
        "default": "md-nuclear",
        "active": "md-nuclear"
      },
      "ios": {
        "default": "ios-nuclear-outline",
        "active": "ios-nuclear"
      }
    },
    "nutrition": {
      "android": {
        "default": "md-nutrition",
        "active": "md-nutrition"
      },
      "ios": {
        "default": "ios-nutrition-outline",
        "active": "ios-nutrition"
      }
    },
    "open": {
      "android": {
        "default": "md-open",
        "active": "md-open"
      },
      "ios": {
        "default": "ios-open-outline",
        "active": "ios-open"
      }
    },
    "options": {
      "android": {
        "default": "md-options",
        "active": "md-options"
      },
      "ios": {
        "default": "ios-options-outline",
        "active": "ios-options"
      }
    },
    "outlet": {
      "android": {
        "default": "md-outlet",
        "active": "md-outlet"
      },
      "ios": {
        "default": "ios-outlet-outline",
        "active": "ios-outlet"
      }
    },
    "paper": {
      "android": {
        "default": "md-paper",
        "active": "md-paper"
      },
      "ios": {
        "default": "ios-paper-outline",
        "active": "ios-paper"
      }
    },
    "paper-plane": {
      "android": {
        "default": "md-paper-plane",
        "active": "md-paper-plane"
      },
      "ios": {
        "default": "ios-paper-plane-outline",
        "active": "ios-paper-plane"
      }
    },
    "partly-sunny": {
      "android": {
        "default": "md-partly-sunny",
        "active": "md-partly-sunny"
      },
      "ios": {
        "default": "ios-partly-sunny-outline",
        "active": "ios-partly-sunny"
      }
    },
    "pause": {
      "android": {
        "default": "md-pause",
        "active": "md-pause"
      },
      "ios": {
        "default": "ios-pause-outline",
        "active": "ios-pause"
      }
    },
    "paw": {
      "android": {
        "default": "md-paw",
        "active": "md-paw"
      },
      "ios": {
        "default": "ios-paw-outline",
        "active": "ios-paw"
      }
    },
    "people": {
      "android": {
        "default": "md-people",
        "active": "md-people"
      },
      "ios": {
        "default": "ios-people-outline",
        "active": "ios-people"
      }
    },
    "person": {
      "android": {
        "default": "md-person",
        "active": "md-person"
      },
      "ios": {
        "default": "ios-person-outline",
        "active": "ios-person"
      }
    },
    "person-add": {
      "android": {
        "default": "md-person-add",
        "active": "md-person-add"
      },
      "ios": {
        "default": "ios-person-add-outline",
        "active": "ios-person-add"
      }
    },
    "phone-landscape": {
      "android": {
        "default": "md-phone-landscape",
        "active": "md-phone-landscape"
      },
      "ios": {
        "default": "ios-phone-landscape-outline",
        "active": "ios-phone-landscape"
      }
    },
    "phone-portrait": {
      "android": {
        "default": "md-phone-portrait",
        "active": "md-phone-portrait"
      },
      "ios": {
        "default": "ios-phone-portrait-outline",
        "active": "ios-phone-portrait"
      }
    },
    "photos": {
      "android": {
        "default": "md-photos",
        "active": "md-photos"
      },
      "ios": {
        "default": "ios-photos-outline",
        "active": "ios-photos"
      }
    },
    "pie": {
      "android": {
        "default": "md-pie",
        "active": "md-pie"
      },
      "ios": {
        "default": "ios-pie-outline",
        "active": "ios-pie"
      }
    },
    "pin": {
      "android": {
        "default": "md-pin",
        "active": "md-pin"
      },
      "ios": {
        "default": "ios-pin-outline",
        "active": "ios-pin"
      }
    },
    "pint": {
      "android": {
        "default": "md-pint",
        "active": "md-pint"
      },
      "ios": {
        "default": "ios-pint-outline",
        "active": "ios-pint"
      }
    },
    "pizza": {
      "android": {
        "default": "md-pizza",
        "active": "md-pizza"
      },
      "ios": {
        "default": "ios-pizza-outline",
        "active": "ios-pizza"
      }
    },
    "plane": {
      "android": {
        "default": "md-plane",
        "active": "md-plane"
      },
      "ios": {
        "default": "ios-plane-outline",
        "active": "ios-plane"
      }
    },
    "planet": {
      "android": {
        "default": "md-planet",
        "active": "md-planet"
      },
      "ios": {
        "default": "ios-planet-outline",
        "active": "ios-planet"
      }
    },
    "play": {
      "android": {
        "default": "md-play",
        "active": "md-play"
      },
      "ios": {
        "default": "ios-play-outline",
        "active": "ios-play"
      }
    },
    "podium": {
      "android": {
        "default": "md-podium",
        "active": "md-podium"
      },
      "ios": {
        "default": "ios-podium-outline",
        "active": "ios-podium"
      }
    },
    "power": {
      "android": {
        "default": "md-power",
        "active": "md-power"
      },
      "ios": {
        "default": "ios-power-outline",
        "active": "ios-power"
      }
    },
    "pricetag": {
      "android": {
        "default": "md-pricetag",
        "active": "md-pricetag"
      },
      "ios": {
        "default": "ios-pricetag-outline",
        "active": "ios-pricetag"
      }
    },
    "pricetags": {
      "android": {
        "default": "md-pricetags",
        "active": "md-pricetags"
      },
      "ios": {
        "default": "ios-pricetags-outline",
        "active": "ios-pricetags"
      }
    },
    "print": {
      "android": {
        "default": "md-print",
        "active": "md-print"
      },
      "ios": {
        "default": "ios-print-outline",
        "active": "ios-print"
      }
    },
    "pulse": {
      "android": {
        "default": "md-pulse",
        "active": "md-pulse"
      },
      "ios": {
        "default": "ios-pulse-outline",
        "active": "ios-pulse"
      }
    },
    "qr-scanner": {
      "android": {
        "default": "md-qr-scanner",
        "active": "md-qr-scanner"
      },
      "ios": {
        "default": "ios-qr-scanner-outline",
        "active": "ios-qr-scanner"
      }
    },
    "quote": {
      "android": {
        "default": "md-quote",
        "active": "md-quote"
      },
      "ios": {
        "default": "ios-quote-outline",
        "active": "ios-quote"
      }
    },
    "radio": {
      "android": {
        "default": "md-radio",
        "active": "md-radio"
      },
      "ios": {
        "default": "ios-radio-outline",
        "active": "ios-radio"
      }
    },
    "radio-button-off": {
      "android": {
        "default": "md-radio-button-off",
        "active": "md-radio-button-off"
      },
      "ios": {
        "default": "ios-radio-button-off-outline",
        "active": "ios-radio-button-off"
      }
    },
    "radio-button-on": {
      "android": {
        "default": "md-radio-button-on",
        "active": "md-radio-button-on"
      },
      "ios": {
        "default": "ios-radio-button-on-outline",
        "active": "ios-radio-button-on"
      }
    },
    "rainy": {
      "android": {
        "default": "md-rainy",
        "active": "md-rainy"
      },
      "ios": {
        "default": "ios-rainy-outline",
        "active": "ios-rainy"
      }
    },
    "recording": {
      "android": {
        "default": "md-recording",
        "active": "md-recording"
      },
      "ios": {
        "default": "ios-recording-outline",
        "active": "ios-recording"
      }
    },
    "redo": {
      "android": {
        "default": "md-redo",
        "active": "md-redo"
      },
      "ios": {
        "default": "ios-redo-outline",
        "active": "ios-redo"
      }
    },
    "refresh": {
      "android": {
        "default": "md-refresh",
        "active": "md-refresh"
      },
      "ios": {
        "default": "ios-refresh-outline",
        "active": "ios-refresh"
      }
    },
    "remove": {
      "android": {
        "default": "md-remove",
        "active": "md-remove"
      },
      "ios": {
        "default": "ios-remove-outline",
        "active": "ios-remove"
      }
    },
    "remove-circle": {
      "android": {
        "default": "md-remove-circle",
        "active": "md-remove-circle"
      },
      "ios": {
        "default": "ios-remove-circle-outline",
        "active": "ios-remove-circle"
      }
    },
    "reorder": {
      "android": {
        "default": "md-reorder",
        "active": "md-reorder"
      },
      "ios": {
        "default": "ios-reorder-outline",
        "active": "ios-reorder"
      }
    },
    "repeat": {
      "android": {
        "default": "md-repeat",
        "active": "md-repeat"
      },
      "ios": {
        "default": "ios-repeat-outline",
        "active": "ios-repeat"
      }
    },
    "resize": {
      "android": {
        "default": "md-resize",
        "active": "md-resize"
      },
      "ios": {
        "default": "ios-resize-outline",
        "active": "ios-resize"
      }
    },
    "restaurant": {
      "android": {
        "default": "md-restaurant",
        "active": "md-restaurant"
      },
      "ios": {
        "default": "ios-restaurant-outline",
        "active": "ios-restaurant"
      }
    },
    "return-left": {
      "android": {
        "default": "md-return-left",
        "active": "md-return-left"
      },
      "ios": {
        "default": "ios-return-left-outline",
        "active": "ios-return-left"
      }
    },
    "return-right": {
      "android": {
        "default": "md-return-right",
        "active": "md-return-right"
      },
      "ios": {
        "default": "ios-return-right-outline",
        "active": "ios-return-right"
      }
    },
    "reverse-camera": {
      "android": {
        "default": "md-reverse-camera",
        "active": "md-reverse-camera"
      },
      "ios": {
        "default": "ios-reverse-camera-outline",
        "active": "ios-reverse-camera"
      }
    },
    "rewind": {
      "android": {
        "default": "md-rewind",
        "active": "md-rewind"
      },
      "ios": {
        "default": "ios-rewind-outline",
        "active": "ios-rewind"
      }
    },
    "ribbon": {
      "android": {
        "default": "md-ribbon",
        "active": "md-ribbon"
      },
      "ios": {
        "default": "ios-ribbon-outline",
        "active": "ios-ribbon"
      }
    },
    "rose": {
      "android": {
        "default": "md-rose",
        "active": "md-rose"
      },
      "ios": {
        "default": "ios-rose-outline",
        "active": "ios-rose"
      }
    },
    "sad": {
      "android": {
        "default": "md-sad",
        "active": "md-sad"
      },
      "ios": {
        "default": "ios-sad-outline",
        "active": "ios-sad"
      }
    },
    "school": {
      "android": {
        "default": "md-school",
        "active": "md-school"
      },
      "ios": {
        "default": "ios-school-outline",
        "active": "ios-school"
      }
    },
    "search": {
      "android": {
        "default": "md-search",
        "active": "md-search"
      },
      "ios": {
        "default": "ios-search-outline",
        "active": "ios-search"
      }
    },
    "send": {
      "android": {
        "default": "md-send",
        "active": "md-send"
      },
      "ios": {
        "default": "ios-send-outline",
        "active": "ios-send"
      }
    },
    "settings": {
      "android": {
        "default": "md-settings",
        "active": "md-settings"
      },
      "ios": {
        "default": "ios-settings-outline",
        "active": "ios-settings"
      }
    },
    "share": {
      "android": {
        "default": "md-share",
        "active": "md-share"
      },
      "ios": {
        "default": "ios-share-outline",
        "active": "ios-share"
      }
    },
    "share-all": {
      "android": {
        "default": "md-share-all",
        "active": "md-share-all"
      },
      "ios": {
        "default": "ios-share-all-outline",
        "active": "ios-share-all"
      }
    },
    "shirt": {
      "android": {
        "default": "md-shirt",
        "active": "md-shirt"
      },
      "ios": {
        "default": "ios-shirt-outline",
        "active": "ios-shirt"
      }
    },
    "shuffle": {
      "android": {
        "default": "md-shuffle",
        "active": "md-shuffle"
      },
      "ios": {
        "default": "ios-shuffle-outline",
        "active": "ios-shuffle"
      }
    },
    "skip-backward": {
      "android": {
        "default": "md-skip-backward",
        "active": "md-skip-backward"
      },
      "ios": {
        "default": "ios-skip-backward-outline",
        "active": "ios-skip-backward"
      }
    },
    "skip-forward": {
      "android": {
        "default": "md-skip-forward",
        "active": "md-skip-forward"
      },
      "ios": {
        "default": "ios-skip-forward-outline",
        "active": "ios-skip-forward"
      }
    },
    "snow": {
      "android": {
        "default": "md-snow",
        "active": "md-snow"
      },
      "ios": {
        "default": "ios-snow-outline",
        "active": "ios-snow"
      }
    },
    "speedometer": {
      "android": {
        "default": "md-speedometer",
        "active": "md-speedometer"
      },
      "ios": {
        "default": "ios-speedometer-outline",
        "active": "ios-speedometer"
      }
    },
    "square": {
      "android": {
        "default": "md-square-outline",
        "active": "md-square"
      },
      "ios": {
        "default": "ios-square-outline",
        "active": "ios-square"
      }
    },
    "star": {
      "android": {
        "default": "md-star-outline",
        "active": "md-star"
      },
      "ios": {
        "default": "ios-star-outline",
        "active": "ios-star"
      }
    },
    "star-half": {
      "android": {
        "default": "md-star-half",
        "active": "md-star-half"
      },
      "ios": {
        "default": "ios-star-half-outline",
        "active": "ios-star-half"
      }
    },
    "stats": {
      "android": {
        "default": "md-stats",
        "active": "md-stats"
      },
      "ios": {
        "default": "ios-stats-outline",
        "active": "ios-stats"
      }
    },
    "stopwatch": {
      "android": {
        "default": "md-stopwatch",
        "active": "md-stopwatch"
      },
      "ios": {
        "default": "ios-stopwatch-outline",
        "active": "ios-stopwatch"
      }
    },
    "subway": {
      "android": {
        "default": "md-subway",
        "active": "md-subway"
      },
      "ios": {
        "default": "ios-subway-outline",
        "active": "ios-subway"
      }
    },
    "sunny": {
      "android": {
        "default": "md-sunny",
        "active": "md-sunny"
      },
      "ios": {
        "default": "ios-sunny-outline",
        "active": "ios-sunny"
      }
    },
    "swap": {
      "android": {
        "default": "md-swap",
        "active": "md-swap"
      },
      "ios": {
        "default": "ios-swap-outline",
        "active": "ios-swap"
      }
    },
    "switch": {
      "android": {
        "default": "md-switch",
        "active": "md-switch"
      },
      "ios": {
        "default": "ios-switch-outline",
        "active": "ios-switch"
      }
    },
    "sync": {
      "android": {
        "default": "md-sync",
        "active": "md-sync"
      },
      "ios": {
        "default": "ios-sync-outline",
        "active": "ios-sync"
      }
    },
    "tablet-landscape": {
      "android": {
        "default": "md-tablet-landscape",
        "active": "md-tablet-landscape"
      },
      "ios": {
        "default": "ios-tablet-landscape-outline",
        "active": "ios-tablet-landscape"
      }
    },
    "tablet-portrait": {
      "android": {
        "default": "md-tablet-portrait",
        "active": "md-tablet-portrait"
      },
      "ios": {
        "default": "ios-tablet-portrait-outline",
        "active": "ios-tablet-portrait"
      }
    },
    "tennisball": {
      "android": {
        "default": "md-tennisball",
        "active": "md-tennisball"
      },
      "ios": {
        "default": "ios-tennisball-outline",
        "active": "ios-tennisball"
      }
    },
    "text": {
      "android": {
        "default": "md-text",
        "active": "md-text"
      },
      "ios": {
        "default": "ios-text-outline",
        "active": "ios-text"
      }
    },
    "thermometer": {
      "android": {
        "default": "md-thermometer",
        "active": "md-thermometer"
      },
      "ios": {
        "default": "ios-thermometer-outline",
        "active": "ios-thermometer"
      }
    },
    "thumbs-down": {
      "android": {
        "default": "md-thumbs-down",
        "active": "md-thumbs-down"
      },
      "ios": {
        "default": "ios-thumbs-down-outline",
        "active": "ios-thumbs-down"
      }
    },
    "thumbs-up": {
      "android": {
        "default": "md-thumbs-up",
        "active": "md-thumbs-up"
      },
      "ios": {
        "default": "ios-thumbs-up-outline",
        "active": "ios-thumbs-up"
      }
    },
    "thunderstorm": {
      "android": {
        "default": "md-thunderstorm",
        "active": "md-thunderstorm"
      },
      "ios": {
        "default": "ios-thunderstorm-outline",
        "active": "ios-thunderstorm"
      }
    },
    "time": {
      "android": {
        "default": "md-time",
        "active": "md-time"
      },
      "ios": {
        "default": "ios-time-outline",
        "active": "ios-time"
      }
    },
    "timer": {
      "android": {
        "default": "md-timer",
        "active": "md-timer"
      },
      "ios": {
        "default": "ios-timer-outline",
        "active": "ios-timer"
      }
    },
    "train": {
      "android": {
        "default": "md-train",
        "active": "md-train"
      },
      "ios": {
        "default": "ios-train-outline",
        "active": "ios-train"
      }
    },
    "transgender": {
      "android": {
        "default": "md-transgender",
        "active": "md-transgender"
      },
      "ios": {
        "default": "ios-transgender-outline",
        "active": "ios-transgender"
      }
    },
    "trash": {
      "android": {
        "default": "md-trash",
        "active": "md-trash"
      },
      "ios": {
        "default": "ios-trash-outline",
        "active": "ios-trash"
      }
    },
    "trending-down": {
      "android": {
        "default": "md-trending-down",
        "active": "md-trending-down"
      },
      "ios": {
        "default": "ios-trending-down-outline",
        "active": "ios-trending-down"
      }
    },
    "trending-up": {
      "android": {
        "default": "md-trending-up",
        "active": "md-trending-up"
      },
      "ios": {
        "default": "ios-trending-up-outline",
        "active": "ios-trending-up"
      }
    },
    "trophy": {
      "android": {
        "default": "md-trophy",
        "active": "md-trophy"
      },
      "ios": {
        "default": "ios-trophy-outline",
        "active": "ios-trophy"
      }
    },
    "umbrella": {
      "android": {
        "default": "md-umbrella",
        "active": "md-umbrella"
      },
      "ios": {
        "default": "ios-umbrella-outline",
        "active": "ios-umbrella"
      }
    },
    "undo": {
      "android": {
        "default": "md-undo",
        "active": "md-undo"
      },
      "ios": {
        "default": "ios-undo-outline",
        "active": "ios-undo"
      }
    },
    "unlock": {
      "android": {
        "default": "md-unlock",
        "active": "md-unlock"
      },
      "ios": {
        "default": "ios-unlock-outline",
        "active": "ios-unlock"
      }
    },
    "videocam": {
      "android": {
        "default": "md-videocam",
        "active": "md-videocam"
      },
      "ios": {
        "default": "ios-videocam-outline",
        "active": "ios-videocam"
      }
    },
    "volume-down": {
      "android": {
        "default": "md-volume-down",
        "active": "md-volume-down"
      },
      "ios": {
        "default": "ios-volume-down-outline",
        "active": "ios-volume-down"
      }
    },
    "volume-up": {
      "android": {
        "default": "md-volume-up",
        "active": "md-volume-up"
      },
      "ios": {
        "default": "ios-volume-up-outline",
        "active": "ios-volume-up"
      }
    },
    "volume-mute": {
      "android": {
        "default": "md-volume-mute",
        "active": "md-volume-mute"
      },
      "ios": {
        "default": "ios-volume-mute-outline",
        "active": "ios-volume-mute"
      }
    },
    "volume-off": {
      "android": {
        "default": "md-volume-off",
        "active": "md-volume-off"
      },
      "ios": {
        "default": "ios-volume-off-outline",
        "active": "ios-volume-off"
      }
    },
    "walk": {
      "android": {
        "default": "md-walk",
        "active": "md-walk"
      },
      "ios": {
        "default": "ios-walk-outline",
        "active": "ios-walk"
      }
    },
    "warning": {
      "android": {
        "default": "md-warning",
        "active": "md-warning"
      },
      "ios": {
        "default": "ios-warning-outline",
        "active": "ios-warning"
      }
    },
    "watch": {
      "android": {
        "default": "md-watch",
        "active": "md-watch"
      },
      "ios": {
        "default": "ios-watch-outline",
        "active": "ios-watch"
      }
    },
    "water": {
      "android": {
        "default": "md-water",
        "active": "md-water"
      },
      "ios": {
        "default": "ios-water-outline",
        "active": "ios-water"
      }
    },
    "wifi": {
      "android": {
        "default": "md-wifi",
        "active": "md-wifi"
      },
      "ios": {
        "default": "ios-wifi-outline",
        "active": "ios-wifi"
      }
    },
    "wine": {
      "android": {
        "default": "md-wine",
        "active": "md-wine"
      },
      "ios": {
        "default": "ios-wine-outline",
        "active": "ios-wine"
      }
    },
    "woman": {
      "android": {
        "default": "md-woman",
        "active": "md-woman"
      },
      "ios": {
        "default": "ios-woman-outline",
        "active": "ios-woman"
      }
    }
  };
},620,[],"native-base/dist/src/basic/Icon/NBIcons.json");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Header = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Header.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  var _platform = require(_dependencyMap[5], "../theme/variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  var _lodash = require(_dependencyMap[6], "lodash");

  var _lodash2 = _interopRequireDefault(_lodash);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Header = function (_Component) {
    _inherits(Header, _Component);

    function Header() {
      _classCallCheck(this, Header);

      return _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).apply(this, arguments));
    }

    _createClass(Header, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var variables = this.context.theme ? this.context.theme["@@shoutem.theme/themeStyle"].variables : _platform2.default;
        var platformStyle = variables.platformStyle;
        return _react2.default.createElement(_reactNative.View, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 21
          }
        }, _react2.default.createElement(_reactNative.StatusBar, {
          backgroundColor: this.props.androidStatusBarColor ? this.props.androidStatusBarColor : variables.statusBarColor,
          barStyle: this.props.iosBarStyle ? this.props.iosBarStyle : platformStyle === "material" ? "light-content" : variables.iosStatusbar,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 22
          }
        }), _react2.default.createElement(_reactNative.View, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 36
          }
        })));
      }
    }]);

    return Header;
  }(_react.Component);

  Header.contextTypes = {
    theme: _propTypes2.default.object
  };
  Header.propTypes = _extends({}, _reactNative.ViewPropTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
    searchBar: _propTypes2.default.bool,
    rounded: _propTypes2.default.bool
  });
  var StyledHeader = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Header", {}, _mapPropsToStyleNames2.default)(Header);
  exports.Header = StyledHeader;
},621,[108,127,12,404,482,426,407],"native-base/dist/src/basic/Header.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.InputGroup = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/InputGroup.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _platform = require(_dependencyMap[3], "../theme/variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  var _nativeBaseShoutemTheme = require(_dependencyMap[4], "native-base-shoutem-theme");

  var _computeProps = require(_dependencyMap[5], "../Utils/computeProps");

  var _computeProps2 = _interopRequireDefault(_computeProps);

  var _mapPropsToStyleNames = require(_dependencyMap[6], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var InputGroup = function (_Component) {
    _inherits(InputGroup, _Component);

    function InputGroup() {
      _classCallCheck(this, InputGroup);

      return _possibleConstructorReturn(this, (InputGroup.__proto__ || Object.getPrototypeOf(InputGroup)).apply(this, arguments));
    }

    _createClass(InputGroup, [{
      key: "getInitialStyle",
      value: function getInitialStyle() {
        return {
          roundedInputGroup: {
            borderWidth: this.props.rounded ? 1 : undefined,
            borderRadius: this.props.rounded ? _platform2.default.inputGroupRoundedBorderRadius : undefined
          }
        };
      }
    }, {
      key: "prepareRootProps",
      value: function prepareRootProps() {
        var defaultProps = {
          style: this.getInitialStyle().roundedInputGroup
        };
        return (0, _computeProps2.default)(this.props, defaultProps);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.View, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.prepareRootProps(), {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 31
          }
        }), this.props.children);
      }
    }]);

    return InputGroup;
  }(_react.Component);

  InputGroup.propTypes = _extends({}, _reactNative.ViewPropTypes, {
    regular: _propTypes2.default.bool,
    underline: _propTypes2.default.bool,
    rounded: _propTypes2.default.bool,
    success: _propTypes2.default.bool,
    error: _propTypes2.default.bool,
    disabled: _propTypes2.default.bool
  });
  var StyledInputGroup = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.InputGroup", {}, _mapPropsToStyleNames2.default)(InputGroup);
  exports.InputGroup = StyledInputGroup;
},622,[108,127,12,426,404,489,482],"native-base/dist/src/basic/InputGroup.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Input = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Input.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _platform = require(_dependencyMap[4], "../theme/variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  var _mapPropsToStyleNames = require(_dependencyMap[5], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  var _NativeBaseComponent2 = require(_dependencyMap[6], "./Base/NativeBaseComponent");

  var _NativeBaseComponent3 = _interopRequireDefault(_NativeBaseComponent2);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Input = function (_NativeBaseComponent) {
    _inherits(Input, _NativeBaseComponent);

    function Input() {
      _classCallCheck(this, Input);

      return _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).apply(this, arguments));
    }

    _createClass(Input, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.TextInput, _extends({
          ref: function ref(c) {
            _this2._textInput = c;
            _this2._root = c;
          },
          editable: this.props.disabled ? false : true
        }, this.props, {
          placeholderTextColor: this.props.placeholderTextColor ? this.props.placeholderTextColor : _platform2.default.inputColorPlaceholder,
          underlineColorAndroid: "rgba(0,0,0,0)",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 12
          }
        }));
      }
    }]);

    return Input;
  }(_NativeBaseComponent3.default);

  Input.propTypes = _extends({}, _reactNative.TextInput.propTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  var StyledInput = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Input", {}, _mapPropsToStyleNames2.default)(Input);
  exports.Input = StyledInput;
},623,[108,127,12,404,426,482,624],"native-base/dist/src/basic/Input.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var NativeBaseComponent = function (_Component) {
    _inherits(NativeBaseComponent, _Component);

    function NativeBaseComponent() {
      _classCallCheck(this, NativeBaseComponent);

      return _possibleConstructorReturn(this, (NativeBaseComponent.__proto__ || Object.getPrototypeOf(NativeBaseComponent)).apply(this, arguments));
    }

    _createClass(NativeBaseComponent, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          theme: this.props.theme ? this.props.theme : this.context.theme
        };
      }
    }, {
      key: "getContextForegroundColor",
      value: function getContextForegroundColor() {
        return this.context.foregroundColor;
      }
    }]);

    return NativeBaseComponent;
  }(_react.Component);

  NativeBaseComponent.contextTypes = {
    theme: _propTypes2.default.object,
    foregroundColor: _propTypes2.default.string
  };
  NativeBaseComponent.propTypes = {
    theme: _propTypes2.default.object,
    foregroundColor: _propTypes2.default.string
  };
  NativeBaseComponent.childContextTypes = {
    theme: _propTypes2.default.object,
    foregroundColor: _propTypes2.default.string
  };
  exports.default = NativeBaseComponent;
},624,[108,127],"native-base/dist/src/basic/Base/NativeBaseComponent.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Title = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Title.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Title = function (_Component) {
    _inherits(Title, _Component);

    function Title() {
      _classCallCheck(this, Title);

      return _possibleConstructorReturn(this, (Title.__proto__ || Object.getPrototypeOf(Title)).apply(this, arguments));
    }

    _createClass(Title, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.Text, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          },
          numberOfLines: 1
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 9
          }
        }));
      }
    }]);

    return Title;
  }(_react.Component);

  Title.propTypes = _extends({}, _reactNative.Text.propTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  var StyledTitle = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Title", {}, _mapPropsToStyleNames2.default)(Title);
  exports.Title = StyledTitle;
},625,[108,127,12,404,482],"native-base/dist/src/basic/Title.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Fab = undefined;
  var _jsxFileName = "src/basic/Fab.js";

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _computeProps = require(_dependencyMap[2], "../Utils/computeProps");

  var _computeProps2 = _interopRequireDefault(_computeProps);

  var _reactNative = require(_dependencyMap[3], "react-native");

  var _Icon = require(_dependencyMap[4], "./Icon");

  var _IconNB = require(_dependencyMap[5], "./IconNB");

  var _Button = require(_dependencyMap[6], "./Button");

  var _platform = require(_dependencyMap[7], "./../theme/variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  var _lodash = require(_dependencyMap[8], "lodash");

  var _lodash2 = _interopRequireDefault(_lodash);

  var _mapPropsToStyleNames = require(_dependencyMap[9], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  var _nativeBaseShoutemTheme = require(_dependencyMap[10], "native-base-shoutem-theme");

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var _Dimensions$get = _reactNative.Dimensions.get("window"),
      height = _Dimensions$get.height,
      width = _Dimensions$get.width;

  var AnimatedFab = _reactNative.Animated.createAnimatedComponent(_Button.Button);

  var Fab = function (_Component) {
    _inherits(Fab, _Component);

    function Fab(props) {
      _classCallCheck(this, Fab);

      var _this = _possibleConstructorReturn(this, (Fab.__proto__ || Object.getPrototypeOf(Fab)).call(this, props));

      _this.containerHeight = new _reactNative.Animated.Value(56);
      _this.containerWidth = new _reactNative.Animated.Value(0);
      _this.buttonScale = new _reactNative.Animated.Value(0);
      _this.state = {
        buttons: undefined,
        active: false
      };
      return _this;
    }

    _createClass(Fab, [{
      key: "fabTopValue",
      value: function fabTopValue(pos) {
        if (pos === "topLeft") {
          return {
            top: 20,
            bottom: undefined,
            left: 20,
            right: undefined
          };
        } else if (pos === "bottomRight") {
          return {
            top: undefined,
            bottom: 20,
            left: undefined,
            right: 20
          };
        } else if (pos === "bottomLeft") {
          return {
            top: undefined,
            bottom: 20,
            left: 20,
            right: undefined
          };
        } else if (pos === "topRight") {
          return {
            top: 20,
            bottom: undefined,
            left: undefined,
            right: 20
          };
        }
      }
    }, {
      key: "fabOtherBtns",
      value: function fabOtherBtns(direction, i) {
        if (direction === "up") {
          return {
            top: undefined,
            bottom: this.props.active === false ? _reactNative.Platform.OS === "ios" ? 50 : 5 : i * 50 + 65,
            left: 8,
            right: 0
          };
        } else if (direction === "left") {
          return {
            top: 8,
            bottom: 0,
            left: this.props.active === false ? _reactNative.Platform.OS === "ios" ? 8 : 8 : -(i * 50 + 58),
            right: 0
          };
        } else if (direction === "down") {
          return {
            top: this.props.active === false ? _reactNative.Platform.OS === "ios" ? 50 : 8 : i * 50 + 73,
            bottom: 0,
            left: 8,
            right: 0
          };
        } else if (direction === "right") {
          return {
            top: 8,
            bottom: 0,
            left: this.props.active === false ? _reactNative.Platform.OS === "ios" ? 50 : 8 : i * 50 + 73,
            right: 0
          };
        }
      }
    }, {
      key: "getInitialStyle",
      value: function getInitialStyle(iconStyle) {
        return {
          fab: {
            height: 56,
            width: 56,
            borderRadius: 28,
            elevation: 4,
            shadowColor: "#000",
            shadowOffset: {
              width: 0,
              height: 2
            },
            shadowOpacity: 0.4,
            justifyContent: "center",
            alignItems: "center",
            shadowRadius: 2,
            position: "absolute",
            bottom: 0,
            backgroundColor: "blue"
          },
          container: {
            position: "absolute",
            top: this.props.position ? this.fabTopValue(this.props.position).top : undefined,
            bottom: this.props.position ? this.fabTopValue(this.props.position).bottom : 20,
            right: this.props.position ? this.fabTopValue(this.props.position).right : 20,
            left: this.props.position ? this.fabTopValue(this.props.position).left : undefined,
            width: 56,
            height: this.containerHeight,
            flexDirection: this.props.direction ? this.props.direction == "left || right" ? "row" : "column" : "column",
            alignItems: "center"
          },
          iconStyle: _extends({
            color: "#fff",
            fontSize: 24,
            lineHeight: _reactNative.Platform.OS == "ios" ? 27 : undefined
          }, iconStyle),
          buttonStyle: {
            position: "absolute",
            height: 40,
            width: 40,
            left: 7,
            borderRadius: 20,
            transform: this.state.active ? [{
              scale: new _reactNative.Animated.Value(1)
            }] : [{
              scale: this.buttonScale
            }],
            marginBottom: 10,
            backgroundColor: "blue"
          }
        };
      }
    }, {
      key: "getContainerStyle",
      value: function getContainerStyle() {
        return _lodash2.default.merge(this.getInitialStyle().container, this.props.containerStyle);
      }
    }, {
      key: "prepareFabProps",
      value: function prepareFabProps() {
        var defaultProps = {
          style: this.getInitialStyle().fab
        };

        var incomingProps = _lodash2.default.clone(this.props);

        delete incomingProps.onPress;
        return (0, _computeProps2.default)(incomingProps, defaultProps);
      }
    }, {
      key: "getOtherButtonStyle",
      value: function getOtherButtonStyle(child, i) {
        var type = {
          top: this.props.direction ? this.fabOtherBtns(this.props.direction, i).top : undefined,
          left: this.props.direction ? this.fabOtherBtns(this.props.direction, i).left : 8,
          right: this.props.direction ? this.fabOtherBtns(this.props.direction, i).right : 0,
          bottom: this.props.direction ? this.fabOtherBtns(this.props.direction, i).bottom : this.props.active === false ? _reactNative.Platform.OS === "ios" ? 8 : 8 : i * 50 + 50
        };
        return _lodash2.default.merge(this.getInitialStyle().buttonStyle, child.props.style, type);
      }
    }, {
      key: "prepareButtonProps",
      value: function prepareButtonProps(child) {
        var inp = _lodash2.default.clone(child.props);

        delete inp.style;
        var defaultProps = {};
        return (0, _computeProps2.default)(inp, defaultProps);
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        var childrenArray = _react2.default.Children.toArray(this.props.children);

        var icon = _lodash2.default.remove(childrenArray, function (item) {
          if (item.type.displayName === "Styled(Button)") {
            return true;
          }
        });

        this.setState({
          buttons: icon.length
        });
        this.activeTimer = setTimeout(function () {
          _this2.setState({
            active: _this2.props.active
          });
        }, 0);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.activeTimer) {
          clearTimeout(this.activeTimer);
        }
      }
    }, {
      key: "renderFab",
      value: function renderFab() {
        var childrenArray = _react2.default.Children.toArray(this.props.children);

        var icon = _lodash2.default.remove(childrenArray, function (item) {
          if (item.type.displayName === "Styled(Button)") {
            return true;
          }
        });

        return _react2.default.cloneElement(childrenArray[0], {
          style: this.getInitialStyle(childrenArray[0].props.style).iconStyle
        });
      }
    }, {
      key: "renderButtons",
      value: function renderButtons() {
        var _this3 = this;

        var childrenArray = _react2.default.Children.toArray(this.props.children);

        var newChildren = [];
        {
          childrenArray.slice(1).map(function (child, i) {
            newChildren.push(_react2.default.createElement(AnimatedFab, _extends({
              style: _this3.getOtherButtonStyle(child, i)
            }, _this3.prepareButtonProps(child, i), {
              fabButton: true,
              key: i,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 276
              }
            }), child.props.children));
          });
        }
        return newChildren;
      }
    }, {
      key: "upAnimate",
      value: function upAnimate() {
        if (!this.props.active) {
          _reactNative.Animated.spring(this.containerHeight, {
            toValue: this.state.buttons * 51.3 + 56
          }).start();

          _reactNative.Animated.spring(this.buttonScale, {
            toValue: 1
          }).start();
        } else {
          this.setState({
            active: false
          });

          _reactNative.Animated.spring(this.containerHeight, {
            toValue: 56
          }).start();

          _reactNative.Animated.spring(this.buttonScale, {
            toValue: 0
          }).start();
        }
      }
    }, {
      key: "leftAnimate",
      value: function leftAnimate() {
        if (!this.props.active) {
          _reactNative.Animated.spring(this.containerWidth, {
            toValue: this.state.buttons * 51.3 + 56
          }).start();

          _reactNative.Animated.spring(this.buttonScale, {
            toValue: 1
          }).start();
        } else {
          this.setState({
            active: false
          });

          _reactNative.Animated.spring(this.containerHeight, {
            toValue: 56
          }).start();

          _reactNative.Animated.spring(this.buttonScale, {
            toValue: 0
          }).start();
        }
      }
    }, {
      key: "rightAnimate",
      value: function rightAnimate() {
        if (!this.props.active) {
          _reactNative.Animated.spring(this.containerWidth, {
            toValue: this.state.buttons * 51.3 + 56
          }).start();

          _reactNative.Animated.spring(this.buttonScale, {
            toValue: 1
          }).start();
        } else {
          this.setState({
            active: false
          });

          _reactNative.Animated.spring(this.containerHeight, {
            toValue: 56
          }).start();

          _reactNative.Animated.spring(this.buttonScale, {
            toValue: 0
          }).start();
        }
      }
    }, {
      key: "downAnimate",
      value: function downAnimate() {
        if (!this.props.active) {
          _reactNative.Animated.spring(this.containerHeight, {
            toValue: 56
          }).start();

          _reactNative.Animated.spring(this.buttonScale, {
            toValue: 1
          }).start();
        } else {
          this.setState({
            active: false
          });

          _reactNative.Animated.spring(this.containerHeight, {
            toValue: 56
          }).start();

          _reactNative.Animated.spring(this.buttonScale, {
            toValue: 0
          }).start();
        }
      }
    }, {
      key: "_animate",
      value: function _animate() {
        var _props = this.props,
            direction = _props.direction,
            position = _props.position;

        if (this.props.direction) {
          if (this.props.direction === "up") {
            this.upAnimate();
          } else if (this.props.direction === "left") {
            this.leftAnimate();
          } else if (this.props.direction === "right") {
            this.rightAnimate();
          } else if (this.props.direction === "down") {
            this.downAnimate();
          }
        } else {
          this.upAnimate();
        }
      }
    }, {
      key: "fabOnPress",
      value: function fabOnPress() {
        var _this4 = this;

        if (this.props.onPress) {
          this.props.onPress();

          this._animate();

          this.activeTimer = setTimeout(function () {
            _this4.setState({
              active: _this4.props.active
            });
          }, 100);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this5 = this;

        var active = this.props.active;
        return _react2.default.createElement(_reactNative.Animated.View, {
          style: this.getContainerStyle(),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 421
          }
        }, this.renderButtons(), _reactNative.Platform.OS === "ios" || _platform2.default.androidRipple === false || _reactNative.Platform["Version"] <= 21 ? _react2.default.createElement(_reactNative.TouchableOpacity, _extends({
          onPress: function onPress() {
            return _this5.fabOnPress();
          }
        }, this.prepareFabProps(), {
          activeOpacity: 1,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 426
          }
        }), this.renderFab()) : _react2.default.createElement(_reactNative.TouchableNativeFeedback, _extends({
          onPress: function onPress() {
            return _this5.fabOnPress();
          }
        }, this.prepareFabProps(), {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 434
          }
        }), _react2.default.createElement(_reactNative.View, {
          style: [this.getInitialStyle().fab, this.props.style],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 438
          }
        }, this.renderFab())));
      }
    }]);

    return Fab;
  }(_react.Component);

  var StyledFab = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Fab", {}, _mapPropsToStyleNames2.default)(Fab);
  exports.Fab = StyledFab;
},626,[108,127,489,12,619,492,488,426,407,482,404],"native-base/dist/src/basic/Fab.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Badge = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Badge.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _platform = require(_dependencyMap[4], "../theme/variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  var _mapPropsToStyleNames = require(_dependencyMap[5], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Badge = function (_Component) {
    _inherits(Badge, _Component);

    function Badge() {
      _classCallCheck(this, Badge);

      return _possibleConstructorReturn(this, (Badge.__proto__ || Object.getPrototypeOf(Badge)).apply(this, arguments));
    }

    _createClass(Badge, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.View, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 12
          }
        }), this.props.children);
      }
    }]);

    return Badge;
  }(_react.Component);

  Badge.propTypes = _extends({}, _reactNative.ViewPropTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  var StyledBadge = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Badge", {}, _mapPropsToStyleNames2.default)(Badge);
  exports.Badge = StyledBadge;
},627,[108,127,12,404,426,482],"native-base/dist/src/basic/Badge.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CheckBox = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Checkbox.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _Ionicons = require(_dependencyMap[3], "react-native-vector-icons/Ionicons");

  var _Ionicons2 = _interopRequireDefault(_Ionicons);

  var _nativeBaseShoutemTheme = require(_dependencyMap[4], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[5], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  var _platform = require(_dependencyMap[6], "../theme/variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  var _lodash = require(_dependencyMap[7], "lodash");

  var _lodash2 = _interopRequireDefault(_lodash);

  var _computeProps = require(_dependencyMap[8], "../Utils/computeProps");

  var _computeProps2 = _interopRequireDefault(_computeProps);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var CheckBox = function (_Component) {
    _inherits(CheckBox, _Component);

    function CheckBox() {
      _classCallCheck(this, CheckBox);

      return _possibleConstructorReturn(this, (CheckBox.__proto__ || Object.getPrototypeOf(CheckBox)).apply(this, arguments));
    }

    _createClass(CheckBox, [{
      key: "getInitialStyle",
      value: function getInitialStyle(variables) {
        return {
          checkStyle: {
            borderColor: this.props.color ? this.props.color : variables.checkboxBgColor,
            backgroundColor: this.props.checked === true ? this.props.color ? this.props.color : variables.checkboxBgColor : "transparent"
          }
        };
      }
    }, {
      key: "prepareRootProps",
      value: function prepareRootProps(variables) {
        var defaultProps = {
          style: this.getInitialStyle(variables).checkStyle
        };
        return (0, _computeProps2.default)(this.props, defaultProps);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var variables = this.context.theme ? this.context.theme["@@shoutem.theme/themeStyle"].variables : _platform2.default;
        var platformStyle = variables.platformStyle;
        var platform = variables.platform;
        return _react2.default.createElement(_reactNative.TouchableOpacity, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.prepareRootProps(variables), {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 40
          }
        }), _react2.default.createElement(_Ionicons2.default, {
          style: {
            color: this.props.checked === true ? variables.checkboxTickColor : "transparent",
            fontSize: variables.CheckboxFontSize,
            lineHeight: variables.CheckboxIconSize
          },
          name: platform === "ios" && platformStyle !== "material" ? "ios-checkmark-outline" : "md-checkmark",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 41
          }
        }));
      }
    }]);

    return CheckBox;
  }(_react.Component);

  CheckBox.contextTypes = {
    theme: _propTypes2.default.object
  };
  CheckBox.propTypes = _extends({}, _reactNative.TouchableOpacity.propTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
    checked: _propTypes2.default.bool,
    onPress: _propTypes2.default.func
  });
  var StyledCheckBox = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.CheckBox", {}, _mapPropsToStyleNames2.default)(CheckBox);
  exports.CheckBox = StyledCheckBox;
},628,[108,127,12,493,404,482,426,407,489],"native-base/dist/src/basic/Checkbox.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Radio = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Radio.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _Ionicons = require(_dependencyMap[4], "react-native-vector-icons/Ionicons");

  var _Ionicons2 = _interopRequireDefault(_Ionicons);

  var _mapPropsToStyleNames = require(_dependencyMap[5], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  var _platform = require(_dependencyMap[6], "../theme/variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  var _computeProps = require(_dependencyMap[7], "../Utils/computeProps");

  var _computeProps2 = _interopRequireDefault(_computeProps);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Radio = function (_Component) {
    _inherits(Radio, _Component);

    function Radio() {
      _classCallCheck(this, Radio);

      return _possibleConstructorReturn(this, (Radio.__proto__ || Object.getPrototypeOf(Radio)).apply(this, arguments));
    }

    _createClass(Radio, [{
      key: "prepareRootProps",
      value: function prepareRootProps() {
        var defaultProps = {
          standardStyle: false
        };
        return (0, _computeProps2.default)(this.props, defaultProps);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var variables = this.context.theme ? this.context.theme["@@shoutem.theme/themeStyle"].variables : _platform2.default;
        var platformStyle = variables.platformStyle;
        var platform = variables.platform;
        return _react2.default.createElement(_reactNative.TouchableOpacity, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.prepareRootProps(), {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 28
          }
        }), _reactNative.Platform.OS === "ios" && !this.props.standardStyle ? this.props.selected && _react2.default.createElement(_Ionicons2.default, {
          style: {
            color: variables.radioColor,
            lineHeight: 25,
            height: 20,
            fontSize: variables.radioBtnSize
          },
          name: "ios-checkmark",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 31
          }
        }) : _react2.default.createElement(_Ionicons2.default, {
          style: {
            color: _reactNative.Platform.OS === "ios" ? this.props.selected ? variables.radioColor : undefined : this.props.selected ? variables.radioSelectedColorAndroid : undefined,
            lineHeight: variables.radioBtnLineHeight,
            fontSize: variables.radioBtnSize
          },
          name: _reactNative.Platform.OS === "ios" ? this.props.selected ? "ios-radio-button-on" : "ios-radio-button-off" : this.props.selected ? "md-radio-button-on" : "md-radio-button-off",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 40
          }
        }));
      }
    }]);

    return Radio;
  }(_react.Component);

  Radio.contextTypes = {
    theme: _propTypes2.default.object
  };
  Radio.propTypes = _extends({}, _reactNative.TouchableOpacity.propTypes, {
    selected: _propTypes2.default.bool,
    standardStyle: _propTypes2.default.bool
  });
  var StyledRadio = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Radio", {}, _mapPropsToStyleNames2.default)(Radio);
  exports.Radio = StyledRadio;
},629,[108,127,12,404,493,482,426,489],"native-base/dist/src/basic/Radio.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Thumbnail = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Thumbnail.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _computeProps = require(_dependencyMap[4], "../Utils/computeProps");

  var _computeProps2 = _interopRequireDefault(_computeProps);

  var _mapPropsToStyleNames = require(_dependencyMap[5], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Thumbnail = function (_Component) {
    _inherits(Thumbnail, _Component);

    function Thumbnail() {
      _classCallCheck(this, Thumbnail);

      return _possibleConstructorReturn(this, (Thumbnail.__proto__ || Object.getPrototypeOf(Thumbnail)).apply(this, arguments));
    }

    _createClass(Thumbnail, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.Image, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 10
          }
        }));
      }
    }]);

    return Thumbnail;
  }(_react.Component);

  Thumbnail.propTypes = _extends({}, _reactNative.Image.propTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
    square: _propTypes2.default.bool,
    circular: _propTypes2.default.bool,
    size: _propTypes2.default.number
  });
  var StyledThumbnail = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Thumbnail", {}, _mapPropsToStyleNames2.default)(Thumbnail);
  exports.Thumbnail = StyledThumbnail;
},630,[108,127,12,404,489,482],"native-base/dist/src/basic/Thumbnail.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Card = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Card.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Card = function (_Component) {
    _inherits(Card, _Component);

    function Card() {
      _classCallCheck(this, Card);

      return _possibleConstructorReturn(this, (Card.__proto__ || Object.getPrototypeOf(Card)).apply(this, arguments));
    }

    _createClass(Card, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        if (this.props.dataArray && this.props.renderRow) {
          var ds = new _reactNative.ListView.DataSource({
            rowHasChanged: function rowHasChanged(r1, r2) {
              return r1 !== r2;
            }
          });
          var dataSource = ds.cloneWithRows(this.props.dataArray);
          return _react2.default.createElement(_reactNative.ListView, _extends({}, this.props, {
            enableEmptySections: true,
            dataSource: dataSource,
            renderRow: this.props.renderRow,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 16
            }
          }));
        }

        return _react2.default.createElement(_reactNative.View, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 25
          }
        }), this.props.children);
      }
    }]);

    return Card;
  }(_react.Component);

  Card.propTypes = _extends({}, _reactNative.ViewPropTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
    dataArray: _propTypes2.default.array,
    renderRow: _propTypes2.default.func
  });
  var StyledCard = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Card", {}, _mapPropsToStyleNames2.default)(Card);
  exports.Card = StyledCard;
},631,[108,127,12,404,482],"native-base/dist/src/basic/Card.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CardItem = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/CardItem.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var CardItem = function (_Component) {
    _inherits(CardItem, _Component);

    function CardItem() {
      _classCallCheck(this, CardItem);

      return _possibleConstructorReturn(this, (CardItem.__proto__ || Object.getPrototypeOf(CardItem)).apply(this, arguments));
    }

    _createClass(CardItem, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        if (this.props.button) {
          return _react2.default.createElement(_reactNative.TouchableOpacity, _extends({
            ref: function ref(c) {
              return _this2._root = c;
            },
            activeOpacity: 0.2
          }, this.props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 12
            }
          }), this.props.children);
        } else {
          return _react2.default.createElement(_reactNative.View, _extends({
            ref: function ref(c) {
              return _this2._root = c;
            }
          }, this.props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 22
            }
          }), this.props.children);
        }
      }
    }]);

    return CardItem;
  }(_react.Component);

  CardItem.propTypes = _extends({}, _reactNative.TouchableOpacity.propTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
    header: _propTypes2.default.bool,
    cardBody: _propTypes2.default.bool,
    footer: _propTypes2.default.bool,
    button: _propTypes2.default.bool
  });
  var StyledCardItem = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.CardItem", {}, _mapPropsToStyleNames2.default)(CardItem);
  exports.CardItem = StyledCardItem;
},632,[108,127,12,404,482],"native-base/dist/src/basic/CardItem.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.H1 = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/H1.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var H1 = function (_Component) {
    _inherits(H1, _Component);

    function H1() {
      _classCallCheck(this, H1);

      return _possibleConstructorReturn(this, (H1.__proto__ || Object.getPrototypeOf(H1)).apply(this, arguments));
    }

    _createClass(H1, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.Text, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 10
          }
        }));
      }
    }]);

    return H1;
  }(_react.Component);

  var childrenType = function childrenType(props, propName, component) {
    var error = void 0;
    var prop = props[propName];

    _react2.default.Children.forEach(prop, function (child) {
      if (typeof child !== "string" && typeof child !== "number") {
        error = new Error(component + " should have only string or number");
      }
    });

    return error;
  };

  H1.propTypes = _extends({}, _reactNative.Text.propTypes, {
    children: childrenType,
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  var StyledH1 = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.H1", {}, _mapPropsToStyleNames2.default)(H1);
  exports.H1 = StyledH1;
},633,[108,127,12,404,482],"native-base/dist/src/basic/H1.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.H2 = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/H2.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var H2 = function (_Component) {
    _inherits(H2, _Component);

    function H2() {
      _classCallCheck(this, H2);

      return _possibleConstructorReturn(this, (H2.__proto__ || Object.getPrototypeOf(H2)).apply(this, arguments));
    }

    _createClass(H2, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.Text, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 10
          }
        }));
      }
    }]);

    return H2;
  }(_react.Component);

  var childrenType = function childrenType(props, propName, component) {
    var error = void 0;
    var prop = props[propName];

    _react2.default.Children.forEach(prop, function (child) {
      if (typeof child !== "string" && typeof child !== "number") {
        error = new Error(component + " should have only string or number");
      }
    });

    return error;
  };

  H2.propTypes = _extends({}, _reactNative.Text.propTypes, {
    children: childrenType,
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  var StyledH2 = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.H2", {}, _mapPropsToStyleNames2.default)(H2);
  exports.H2 = StyledH2;
},634,[108,127,12,404,482],"native-base/dist/src/basic/H2.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.H3 = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/H3.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var H3 = function (_Component) {
    _inherits(H3, _Component);

    function H3() {
      _classCallCheck(this, H3);

      return _possibleConstructorReturn(this, (H3.__proto__ || Object.getPrototypeOf(H3)).apply(this, arguments));
    }

    _createClass(H3, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.Text, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 10
          }
        }));
      }
    }]);

    return H3;
  }(_react.Component);

  var childrenType = function childrenType(props, propName, component) {
    var error = void 0;
    var prop = props[propName];

    _react2.default.Children.forEach(prop, function (child) {
      if (typeof child !== "string" && typeof child !== "number") {
        error = new Error(component + " should have only string or number");
      }
    });

    return error;
  };

  H3.propTypes = _extends({}, _reactNative.Text.propTypes, {
    children: childrenType,
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  var StyledH3 = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.H3", {}, _mapPropsToStyleNames2.default)(H3);
  exports.H3 = StyledH3;
},635,[108,127,12,404,482],"native-base/dist/src/basic/H3.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Spinner = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Spinner.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _platform = require(_dependencyMap[4], "../theme/variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  var _mapPropsToStyleNames = require(_dependencyMap[5], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Spinner = function (_Component) {
    _inherits(Spinner, _Component);

    function Spinner() {
      _classCallCheck(this, Spinner);

      return _possibleConstructorReturn(this, (Spinner.__proto__ || Object.getPrototypeOf(Spinner)).apply(this, arguments));
    }

    _createClass(Spinner, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var variables = this.context.theme ? this.context.theme["@@shoutem.theme/themeStyle"].variables : _platform2.default;
        return _react2.default.createElement(_reactNative.ActivityIndicator, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          color: this.props.color ? this.props.color : this.props.inverse ? variables.inverseSpinnerColor : variables.defaultSpinnerColor,
          size: this.props.size ? this.props.size : "large",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 16
          }
        }));
      }
    }]);

    return Spinner;
  }(_react.Component);

  Spinner.contextTypes = {
    theme: _propTypes2.default.object
  };
  Spinner.propTypes = _extends({}, _reactNative.ActivityIndicator.propTypes, {
    color: _propTypes2.default.string,
    inverse: _propTypes2.default.bool
  });
  var StyledSpinner = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Spinner", {}, _mapPropsToStyleNames2.default)(Spinner);
  exports.Spinner = StyledSpinner;
},636,[108,127,12,404,426,482],"native-base/dist/src/basic/Spinner.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Switch = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Switch.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Switch = function (_Component) {
    _inherits(Switch, _Component);

    function Switch() {
      _classCallCheck(this, Switch);

      return _possibleConstructorReturn(this, (Switch.__proto__ || Object.getPrototypeOf(Switch)).apply(this, arguments));
    }

    _createClass(Switch, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.Switch, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 10
          }
        }));
      }
    }]);

    return Switch;
  }(_react.Component);

  Switch.propTypes = _extends({}, Switch.propTypes);
  var StyledSwitch = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Switch", {}, _mapPropsToStyleNames2.default)(Switch);
  exports.Switch = StyledSwitch;
},637,[108,127,12,404,482],"native-base/dist/src/basic/Switch.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Container = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Container.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _Utils = require(_dependencyMap[3], "../Utils");

  var _nativeBaseShoutemTheme = require(_dependencyMap[4], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[5], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  var _ToastContainer = require(_dependencyMap[6], "./ToastContainer");

  var _Actionsheet = require(_dependencyMap[7], "./Actionsheet");

  var _Text = require(_dependencyMap[8], "./Text");

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Container = function (_Component) {
    _inherits(Container, _Component);

    function Container() {
      _classCallCheck(this, Container);

      return _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));
    }

    _createClass(Container, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.View, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 15
          }
        }), this.props.children);
      }
    }]);

    return Container;
  }(_react.Component);

  Container.propTypes = _extends({}, _Utils.ViewPropTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  var StyledContainer = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Container", {}, _mapPropsToStyleNames2.default)(Container);
  exports.Container = StyledContainer;
},638,[108,127,12,639,404,482,641,643,481],"native-base/dist/src/basic/Container.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ViewPropTypes = exports.InteractionManager = undefined;

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _interactionManager = require(_dependencyMap[1], "./interactionManager");

  var _interactionManager2 = _interopRequireDefault(_interactionManager);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.InteractionManager = _interactionManager2.default;
  exports.ViewPropTypes = _reactNative.ViewPropTypes;
},639,[12,640],"native-base/dist/src/Utils/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _reactNative = require(_dependencyMap[0], "react-native");

  exports.default = _extends({}, _reactNative.InteractionManager, {
    runAfterInteractions: function runAfterInteractions(f) {
      var called = false;
      var timeout = setTimeout(function () {
        called = true;
        f();
      }, 10);

      _reactNative.InteractionManager.runAfterInteractions(function () {
        if (called) return;
        clearTimeout(timeout);
        f();
      });
    }
  });
},640,[12],"native-base/dist/src/Utils/interactionManager.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ToastContainer = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/ToastContainer.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _Text = require(_dependencyMap[4], "./Text");

  var _Button = require(_dependencyMap[5], "./Button");

  var _View = require(_dependencyMap[6], "./View");

  var _Toast = require(_dependencyMap[7], "./Toast");

  var _mapPropsToStyleNames = require(_dependencyMap[8], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _objectWithoutProperties(obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var ToastContainer = function (_Component) {
    _inherits(ToastContainer, _Component);

    function ToastContainer(props) {
      _classCallCheck(this, ToastContainer);

      var _this = _possibleConstructorReturn(this, (ToastContainer.__proto__ || Object.getPrototypeOf(ToastContainer)).call(this, props));

      _this.state = {
        modalVisible: false,
        fadeAnim: new _reactNative.Animated.Value(0)
      };
      return _this;
    }

    _createClass(ToastContainer, [{
      key: "getToastStyle",
      value: function getToastStyle() {
        return {
          position: "absolute",
          opacity: this.state.fadeAnim,
          width: "100%",
          elevation: 9,
          paddingHorizontal: _reactNative.Platform.OS === "ios" ? 20 : 0,
          top: this.state.position === "top" ? this.getTop() : undefined,
          bottom: this.state.position === "bottom" ? this.getTop() : undefined
        };
      }
    }, {
      key: "getTop",
      value: function getTop() {
        if (_reactNative.Platform.OS === "ios") {
          return 30;
        } else {
          return 0;
        }
      }
    }, {
      key: "getButtonText",
      value: function getButtonText(buttonText) {
        if (buttonText) {
          if (buttonText.trim().length === 0) {
            return undefined;
          } else return buttonText;
        }

        return undefined;
      }
    }, {
      key: "showToast",
      value: function showToast(_ref) {
        var _this2 = this;

        var config = _ref.config;
        this.setState({
          modalVisible: true,
          text: config.text,
          buttonText: this.getButtonText(config.buttonText),
          type: config.type,
          position: config.position ? config.position : "bottom",
          supportedOrientations: config.supportedOrientations,
          style: config.style,
          buttonTextStyle: config.buttonTextStyle,
          buttonStyle: config.buttonStyle,
          textStyle: config.textStyle,
          onClose: config.onClose
        });

        if (this.closeTimeout) {
          clearTimeout(this.closeTimeout);
        }

        if (config.duration > 0) {
          this.closeTimeout = setTimeout(function () {
            _reactNative.Animated.timing(_this2.state.fadeAnim, {
              toValue: 0,
              duration: 200
            }).start();

            setTimeout(_this2.closeModal.bind(_this2), 500);
          }, config.duration);
        } else {
          this.closeTimeout = setTimeout(function () {
            _reactNative.Animated.timing(_this2.state.fadeAnim, {
              toValue: 0,
              duration: 200
            }).start();

            setTimeout(_this2.closeModal.bind(_this2), 500);
          }, 1500);
        }

        _reactNative.Animated.timing(this.state.fadeAnim, {
          toValue: 1,
          duration: 200
        }).start();
      }
    }, {
      key: "closeModal",
      value: function closeModal() {
        this.setState({
          modalVisible: false
        });
        var onClose = this.state.onClose;

        if (onClose && typeof onClose === "function") {
          onClose();
        }
      }
    }, {
      key: "closeToast",
      value: function closeToast() {
        _reactNative.Animated.timing(this.state.fadeAnim, {
          toValue: 0,
          duration: 200
        }).start();

        setTimeout(this.closeModal.bind(this), 500);
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        if (this.state.modalVisible) {
          return _react2.default.createElement(_reactNative.Animated.View, {
            style: this.getToastStyle(),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 108
            }
          }, _react2.default.createElement(_Toast.Toast, {
            style: this.state.style,
            danger: this.state.type == "danger" ? true : false,
            success: this.state.type == "success" ? true : false,
            warning: this.state.type == "warning" ? true : false,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 109
            }
          }, _react2.default.createElement(_Text.Text, {
            style: this.state.textStyle,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 115
            }
          }, this.state.text), this.state.buttonText && _react2.default.createElement(_Button.Button, {
            style: this.state.buttonStyle,
            onPress: function onPress() {
              return _this3.closeToast();
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 117
            }
          }, _react2.default.createElement(_Text.Text, {
            style: this.state.buttonTextStyle,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 121
            }
          }, this.state.buttonText))));
        } else return null;
      }
    }], [{
      key: "show",
      value: function show(_ref2) {
        var config = _objectWithoutProperties(_ref2, []);

        this.toastInstance._root.showToast({
          config: config
        });
      }
    }]);

    return ToastContainer;
  }(_react.Component);

  ToastContainer.propTypes = _extends({}, _reactNative.ViewPropTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  var StyledToastContainer = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.ToastContainer", {}, _mapPropsToStyleNames2.default)(ToastContainer);
  exports.ToastContainer = StyledToastContainer;
},641,[108,127,12,404,481,488,487,642,482],"native-base/dist/src/basic/ToastContainer.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Toast = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Toast.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Toast = function (_Component) {
    _inherits(Toast, _Component);

    function Toast() {
      _classCallCheck(this, Toast);

      return _possibleConstructorReturn(this, (Toast.__proto__ || Object.getPrototypeOf(Toast)).apply(this, arguments));
    }

    _createClass(Toast, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.View, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 9
          }
        }));
      }
    }]);

    return Toast;
  }(_react.Component);

  Toast.propTypes = _extends({}, _reactNative.ViewPropTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  var StyledToast = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Toast", {}, _mapPropsToStyleNames2.default)(Toast);
  exports.Toast = StyledToast;
},642,[108,127,12,404,482],"native-base/dist/src/basic/Toast.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ActionSheetContainer = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Actionsheet.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _Text = require(_dependencyMap[4], "./Text");

  var _Button = require(_dependencyMap[5], "./Button");

  var _View = require(_dependencyMap[6], "./View");

  var _Icon = require(_dependencyMap[7], "./Icon");

  var _Left = require(_dependencyMap[8], "./Left");

  var _Right = require(_dependencyMap[9], "./Right");

  var _Body = require(_dependencyMap[10], "./Body");

  var _ListItem = require(_dependencyMap[11], "./ListItem");

  var _mapPropsToStyleNames = require(_dependencyMap[12], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var ActionSheetContainer = function (_Component) {
    _inherits(ActionSheetContainer, _Component);

    function ActionSheetContainer(props) {
      _classCallCheck(this, ActionSheetContainer);

      var _this = _possibleConstructorReturn(this, (ActionSheetContainer.__proto__ || Object.getPrototypeOf(ActionSheetContainer)).call(this, props));

      _this.state = {
        modalVisible: false,
        items: []
      };
      return _this;
    }

    _createClass(ActionSheetContainer, [{
      key: "showActionSheet",
      value: function showActionSheet(config, callback) {
        if (_reactNative.Platform.OS === "ios") {
          if (typeof config.options[0] == "object") {
            var options = config.options;
            var filtered = options.map(function (item) {
              return item.text;
            });
            config.options = filtered;

            _reactNative.ActionSheetIOS.showActionSheetWithOptions(config, callback);
          } else {
            _reactNative.ActionSheetIOS.showActionSheetWithOptions(config, callback);
          }
        } else {
          this.setState({
            items: config.options,
            title: config.title,
            message: config.message,
            destructiveButtonIndex: config.destructiveButtonIndex,
            cancelButtonIndex: config.cancelButtonIndex,
            modalVisible: true,
            callback: callback
          });
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        if (!this.props.autoHide && this.props.duration) {
          console.warn("It's not recommended to set autoHide false with duration");
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.Modal, {
          animationType: "fade",
          transparent: true,
          visible: this.state.modalVisible,
          onRequestClose: function onRequestClose() {
            _this2.state.callback(_this2.state.cancelButtonIndex);

            _this2.setState({
              modalVisible: false
            });
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 66
          }
        }, _react2.default.createElement(_reactNative.TouchableOpacity, {
          activeOpacity: 1,
          onPress: function onPress() {
            _this2.state.callback(_this2.state.cancelButtonIndex);

            _this2.setState({
              modalVisible: false
            });
          },
          style: {
            backgroundColor: "rgba(0,0,0,0.4)",
            flex: 1,
            justifyContent: "flex-end"
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 75
          }
        }, _react2.default.createElement(_reactNative.TouchableOpacity, {
          activeOpacity: 1,
          style: {
            backgroundColor: "#fff",
            height: this.state.length * 80,
            padding: 15,
            elevation: 4
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 87
          }
        }, _react2.default.createElement(_Text.Text, {
          style: {
            color: "#757575"
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 96
          }
        }, this.state.title), _react2.default.createElement(_reactNative.FlatList, {
          style: {
            marginHorizontal: -15,
            marginTop: 15
          },
          data: this.state.items,
          keyExtractor: function keyExtractor(item, index) {
            return index;
          },
          renderItem: function renderItem(_ref) {
            var index = _ref.index,
                item = _ref.item;
            return typeof _this2.state.items[0] === "string" ? _react2.default.createElement(_ListItem.ListItem, {
              onPress: function onPress() {
                _this2.state.callback(parseInt(index));

                _this2.setState({
                  modalVisible: false
                });
              },
              style: {
                borderColor: "transparent"
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 103
              }
            }, _react2.default.createElement(_Text.Text, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 109
              }
            }, item)) : _react2.default.createElement(_ListItem.ListItem, {
              onPress: function onPress() {
                _this2.state.callback(parseInt(index));

                _this2.setState({
                  modalVisible: false
                });
              },
              style: {
                borderColor: "transparent"
              },
              icon: true,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 112
              }
            }, _react2.default.createElement(_Left.Left, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 120
              }
            }, _react2.default.createElement(_Icon.Icon, {
              name: item.icon,
              style: {
                color: item.iconColor ? item.iconColor : undefined
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 121
              }
            })), _react2.default.createElement(_Body.Body, {
              style: {
                borderColor: "transparent"
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 128
              }
            }, _react2.default.createElement(_Text.Text, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 129
              }
            }, item.text)), _react2.default.createElement(_Right.Right, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 131
              }
            }));
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 97
          }
        }))));
      }
    }], [{
      key: "show",
      value: function show(config, callback) {
        this.actionsheetInstance._root.showActionSheet(config, callback);
      }
    }]);

    return ActionSheetContainer;
  }(_react.Component);

  ActionSheetContainer.propTypes = _extends({}, _reactNative.ViewPropTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  var StyledActionSheetContainer = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.ActionSheetContainer", {}, _mapPropsToStyleNames2.default)(ActionSheetContainer);
  exports.ActionSheetContainer = StyledActionSheetContainer;
},643,[108,127,12,404,481,488,487,619,483,484,485,486,482],"native-base/dist/src/basic/Actionsheet.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Root = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Root.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _propTypes = require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  var _ToastContainer = require(_dependencyMap[5], "./ToastContainer");

  var _Actionsheet = require(_dependencyMap[6], "./Actionsheet");

  var _Text = require(_dependencyMap[7], "./Text");

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Root = function (_Component) {
    _inherits(Root, _Component);

    function Root() {
      _classCallCheck(this, Root);

      return _possibleConstructorReturn(this, (Root.__proto__ || Object.getPrototypeOf(Root)).apply(this, arguments));
    }

    _createClass(Root, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.View, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          style: {
            flex: 1
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 13
          }
        }), this.props.children, _react2.default.createElement(_ToastContainer.ToastContainer, {
          ref: function ref(c) {
            if (!_ToastContainer.ToastContainer.toastInstance) _ToastContainer.ToastContainer.toastInstance = c;
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 15
          }
        }), _react2.default.createElement(_Actionsheet.ActionSheetContainer, {
          ref: function ref(c) {
            if (!_Actionsheet.ActionSheetContainer.actionsheetInstance) _Actionsheet.ActionSheetContainer.actionsheetInstance = c;
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 20
          }
        }));
      }
    }]);

    return Root;
  }(_react.Component);

  Root.propTypes = _extends({}, _reactNative.ViewPropTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  var StyledRoot = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Root", {}, _mapPropsToStyleNames2.default)(Root);
  exports.Root = StyledRoot;
},644,[108,12,127,404,482,641,643,481],"native-base/dist/src/basic/Root.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Content = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Content.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNativeKeyboardAwareScrollView = require(_dependencyMap[2], "react-native-keyboard-aware-scroll-view");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Content = function (_Component) {
    _inherits(Content, _Component);

    function Content() {
      _classCallCheck(this, Content);

      return _possibleConstructorReturn(this, (Content.__proto__ || Object.getPrototypeOf(Content)).apply(this, arguments));
    }

    _createClass(Content, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNativeKeyboardAwareScrollView.KeyboardAwareScrollView, _extends({
          automaticallyAdjustContentInsets: false,
          resetScrollToCoords: this.props.disableKBDismissScroll ? null : {
            x: 0,
            y: 0
          },
          keyboardShouldPersistTaps: this.props.keyboardShouldPersistTaps ? this.props.keyboardShouldPersistTaps : 'handled',
          ref: function ref(c) {
            _this2._scrollview = c;
            _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 10
          }
        }), this.props.children);
      }
    }]);

    return Content;
  }(_react.Component);

  Content.propTypes = {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
    padder: _propTypes2.default.bool,
    disableKBDismissScroll: _propTypes2.default.bool,
    enableResetScrollToCoords: _propTypes2.default.bool,
    keyboardShouldPersistTaps: _propTypes2.default.string
  };
  var StyledContent = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Content", {}, _mapPropsToStyleNames2.default)(Content);
  exports.Content = StyledContent;
},645,[108,127,646,404,482],"native-base/dist/src/basic/Content.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.KeyboardAwareScrollView = exports.KeyboardAwareFlatList = exports.KeyboardAwareListView = exports.listenToKeyboardEvents = undefined;

  var _KeyboardAwareHOC = require(_dependencyMap[0], "./lib/KeyboardAwareHOC");

  var _KeyboardAwareHOC2 = babelHelpers.interopRequireDefault(_KeyboardAwareHOC);

  var _KeyboardAwareScrollView = require(_dependencyMap[1], "./lib/KeyboardAwareScrollView");

  var _KeyboardAwareScrollView2 = babelHelpers.interopRequireDefault(_KeyboardAwareScrollView);

  var _KeyboardAwareListView = require(_dependencyMap[2], "./lib/KeyboardAwareListView");

  var _KeyboardAwareListView2 = babelHelpers.interopRequireDefault(_KeyboardAwareListView);

  var _KeyboardAwareFlatList = require(_dependencyMap[3], "./lib/KeyboardAwareFlatList");

  var _KeyboardAwareFlatList2 = babelHelpers.interopRequireDefault(_KeyboardAwareFlatList);

  exports.listenToKeyboardEvents = _KeyboardAwareHOC2.default;
  exports.KeyboardAwareListView = _KeyboardAwareListView2.default;
  exports.KeyboardAwareFlatList = _KeyboardAwareFlatList2.default;
  exports.KeyboardAwareScrollView = _KeyboardAwareScrollView2.default;
},646,[647,649,650,651],"react-native-keyboard-aware-scroll-view/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-keyboard-aware-scroll-view/lib/KeyboardAwareHOC.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _reactNative2 = babelHelpers.interopRequireDefault(_reactNative);

  var _reactNativeIphoneXHelper = require(_dependencyMap[3], "react-native-iphone-x-helper");

  var _KAM_DEFAULT_TAB_BAR_HEIGHT = (0, _reactNativeIphoneXHelper.isIphoneX)() ? 83 : 49;

  var _KAM_KEYBOARD_OPENING_TIME = 250;
  var _KAM_EXTRA_HEIGHT = 75;

  function listenToKeyboardEvents(ScrollableComponent) {
    var _class, _temp, _initialiseProps;

    return _temp = _class = function (_React$Component) {
      babelHelpers.inherits(_class, _React$Component);

      function _class(props) {
        babelHelpers.classCallCheck(this, _class);

        var _this = babelHelpers.possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props));

        _initialiseProps.call(_this);

        _this.keyboardWillShowEvent = undefined;
        _this.keyboardWillHideEvent = undefined;
        _this.position = {
          x: 0,
          y: 0
        };
        _this.defaultResetScrollToCoords = null;
        var keyboardSpace = props.viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT : 0;
        _this.state = {
          keyboardSpace: keyboardSpace
        };
        return _this;
      }

      babelHelpers.createClass(_class, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.mountedComponent = true;

          if (_reactNative.Platform.OS === 'ios') {
            this.keyboardWillShowEvent = _reactNative.Keyboard.addListener('keyboardWillShow', this._updateKeyboardSpace);
            this.keyboardWillHideEvent = _reactNative.Keyboard.addListener('keyboardWillHide', this._resetKeyboardSpace);
          } else if (_reactNative.Platform.OS === 'android' && this.props.enableOnAndroid) {
            this.keyboardWillShowEvent = _reactNative.Keyboard.addListener('keyboardDidShow', this._updateKeyboardSpace);
            this.keyboardWillHideEvent = _reactNative.Keyboard.addListener('keyboardDidHide', this._resetKeyboardSpace);
          }
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
          if (nextProps.viewIsInsideTabBar !== this.props.viewIsInsideTabBar) {
            var _keyboardSpace = nextProps.viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT : 0;

            if (this.state.keyboardSpace !== _keyboardSpace) {
              this.setState({
                keyboardSpace: _keyboardSpace
              });
            }
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.mountedComponent = false;
          this.keyboardWillShowEvent && this.keyboardWillShowEvent.remove();
          this.keyboardWillHideEvent && this.keyboardWillHideEvent.remove();
        }
      }, {
        key: "render",
        value: function render() {
          var _props = this.props,
              enableOnAndroid = _props.enableOnAndroid,
              contentContainerStyle = _props.contentContainerStyle;
          var newContentContainerStyle = void 0;

          if (_reactNative.Platform.OS === 'android' && enableOnAndroid) {
            newContentContainerStyle = [].concat(contentContainerStyle).concat({
              paddingBottom: ((contentContainerStyle || {}).paddingBottom || 0) + this.state.keyboardSpace
            });
          }

          return _react2.default.createElement(ScrollableComponent, babelHelpers.extends({
            ref: this._handleRef,
            keyboardDismissMode: "interactive",
            contentInset: {
              bottom: this.state.keyboardSpace
            },
            automaticallyAdjustContentInsets: false,
            showsVerticalScrollIndicator: true,
            scrollEventThrottle: 1
          }, this.props, {
            contentContainerStyle: newContentContainerStyle || contentContainerStyle,
            keyboardSpace: this.state.keyboardSpace,
            getScrollResponder: this.getScrollResponder,
            scrollToPosition: this.scrollToPosition,
            scrollToEnd: this.scrollToEnd,
            scrollForExtraHeightOnAndroid: this.scrollForExtraHeightOnAndroid,
            scrollToFocusedInput: this.scrollToFocusedInput,
            resetKeyboardSpace: this._resetKeyboardSpace,
            handleOnScroll: this._handleOnScroll,
            onScroll: this._onScroll,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 329
            }
          }));
        }
      }]);
      return _class;
    }(_react2.default.Component), _class.propTypes = {
      viewIsInsideTabBar: _propTypes2.default.bool,
      resetScrollToCoords: _propTypes2.default.shape({
        x: _propTypes2.default.number.isRequired,
        y: _propTypes2.default.number.isRequired
      }),
      enableResetScrollToCoords: _propTypes2.default.bool,
      enableAutoAutomaticScroll: _propTypes2.default.bool,
      extraHeight: _propTypes2.default.number,
      extraScrollHeight: _propTypes2.default.number,
      keyboardOpeningTime: _propTypes2.default.number,
      onScroll: _propTypes2.default.func,
      contentContainerStyle: _propTypes2.default.any,
      enableOnAndroid: _propTypes2.default.bool,
      innerRef: _propTypes2.default.func
    }, _class.defaultProps = {
      enableAutoAutomaticScroll: true,
      extraHeight: _KAM_EXTRA_HEIGHT,
      extraScrollHeight: 0,
      enableResetScrollToCoords: true,
      keyboardOpeningTime: _KAM_KEYBOARD_OPENING_TIME,
      viewIsInsideTabBar: false
    }, _initialiseProps = function _initialiseProps() {
      var _this2 = this;

      this.getScrollResponder = function () {
        return _this2._rnkasv_keyboardView && _this2._rnkasv_keyboardView.getScrollResponder();
      };

      this.scrollToPosition = function (x, y) {
        var animated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

        var responder = _this2.getScrollResponder();

        responder && responder.scrollResponderScrollTo({
          x: x,
          y: y,
          animated: animated
        });
      };

      this.scrollToEnd = function () {
        var animated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        var responder = _this2.getScrollResponder();

        responder && responder.scrollResponderScrollToEnd({
          animated: animated
        });
      };

      this.scrollForExtraHeightOnAndroid = function (extraHeight) {
        _this2.scrollToPosition(0, _this2.position.y + extraHeight, true);
      };

      this.scrollToFocusedInput = function (reactNode, extraHeight, keyboardOpeningTime) {
        if (extraHeight === undefined) {
          extraHeight = _this2.props.extraHeight || 0;
        }

        if (keyboardOpeningTime === undefined) {
          keyboardOpeningTime = _this2.props.keyboardOpeningTime || 0;
        }

        setTimeout(function () {
          if (!_this2.mountedComponent) {
            return;
          }

          var responder = _this2.getScrollResponder();

          responder && responder.scrollResponderScrollNativeHandleToKeyboard(reactNode, extraHeight, true);
        }, keyboardOpeningTime);
      };

      this._updateKeyboardSpace = function (frames) {
        var keyboardSpace = frames.endCoordinates.height + _this2.props.extraScrollHeight;

        if (_this2.props.viewIsInsideTabBar) {
          keyboardSpace -= _KAM_DEFAULT_TAB_BAR_HEIGHT;
        }

        _this2.setState({
          keyboardSpace: keyboardSpace
        });

        if (_this2.props.enableAutoAutomaticScroll) {
          var currentlyFocusedField = _reactNative.TextInput.State.currentlyFocusedField();

          var responder = _this2.getScrollResponder();

          if (!currentlyFocusedField || !responder) {
            return;
          }

          _reactNative.UIManager.viewIsDescendantOf(currentlyFocusedField, responder.getInnerViewNode(), function (isAncestor) {
            if (isAncestor) {
              _reactNative.UIManager.measureInWindow(currentlyFocusedField, function (x, y, width, height) {
                var textInputBottomPosition = y + height;
                var keyboardPosition = frames.endCoordinates.screenY;
                var totalExtraHeight = _this2.props.extraScrollHeight + _this2.props.extraHeight;

                if (_reactNative.Platform.OS === 'ios') {
                  if (textInputBottomPosition > keyboardPosition - totalExtraHeight) {
                    _this2._scrollToFocusedInputWithNodeHandle(currentlyFocusedField);
                  }
                } else {
                  if (textInputBottomPosition > keyboardPosition) {
                    keyboardSpace = keyboardSpace - (textInputBottomPosition - keyboardPosition);

                    _this2.setState({
                      keyboardSpace: keyboardSpace
                    });

                    _this2.scrollForExtraHeightOnAndroid(totalExtraHeight);
                  } else if (textInputBottomPosition > keyboardPosition - totalExtraHeight) {
                    _this2.scrollForExtraHeightOnAndroid(totalExtraHeight - (keyboardPosition - textInputBottomPosition));
                  }
                }
              });
            }
          });
        }

        if (!_this2.resetCoords) {
          if (!_this2.defaultResetScrollToCoords) {
            _this2.defaultResetScrollToCoords = _this2.position;
          }
        }
      };

      this._resetKeyboardSpace = function () {
        var keyboardSpace = _this2.props.viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT + _this2.props.extraScrollHeight || 0 : _this2.props.extraScrollHeight || 0;

        _this2.setState({
          keyboardSpace: keyboardSpace
        });

        if (_this2.props.enableResetScrollToCoords === false) {
          _this2.defaultResetScrollToCoords = null;
          return;
        } else if (_this2.resetCoords) {
          _this2.scrollToPosition(_this2.resetCoords.x, _this2.resetCoords.y, true);
        } else {
          if (_this2.defaultResetScrollToCoords) {
            _this2.scrollToPosition(_this2.defaultResetScrollToCoords.x, _this2.defaultResetScrollToCoords.y, true);

            _this2.defaultResetScrollToCoords = null;
          } else {
            _this2.scrollToPosition(0, 0, true);
          }
        }
      };

      this._scrollToFocusedInputWithNodeHandle = function (nodeID, extraHeight, keyboardOpeningTime) {
        if (extraHeight === undefined) {
          extraHeight = _this2.props.extraHeight;
        }

        var reactNode = _reactNative2.default.findNodeHandle(nodeID);

        _this2.scrollToFocusedInput(reactNode, extraHeight + _this2.props.extraScrollHeight, keyboardOpeningTime !== undefined ? keyboardOpeningTime : _this2.props.keyboardOpeningTime || 0);
      };

      this._handleOnScroll = function (e) {
        _this2.position = e.nativeEvent.contentOffset;
      };

      this._handleRef = function (ref) {
        _this2._rnkasv_keyboardView = ref;

        if (_this2.props.innerRef) {
          _this2.props.innerRef(_this2._rnkasv_keyboardView);
        }
      };

      this._onScroll = function (e) {
        _this2._handleOnScroll(e);

        _this2.props.onScroll && _this2.props.onScroll(e);
      };
    }, _temp;
  }

  exports.default = listenToKeyboardEvents;
},647,[108,127,12,648],"react-native-keyboard-aware-scroll-view/lib/KeyboardAwareHOC.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.isIphoneX = isIphoneX;
    exports.ifIphoneX = ifIphoneX;

    var _reactNative = require(_dependencyMap[0], "react-native");

    function isIphoneX() {
        var dimen = _reactNative.Dimensions.get('window');

        return _reactNative.Platform.OS === 'ios' && !_reactNative.Platform.isPad && !_reactNative.Platform.isTVOS && (dimen.height === 812 || dimen.width === 812);
    }

    function ifIphoneX(iphoneXStyle, regularStyle) {
        if (isIphoneX()) {
            return iphoneXStyle;
        }

        return regularStyle;
    }
},648,[12],"react-native-iphone-x-helper/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _KeyboardAwareHOC = require(_dependencyMap[1], "./KeyboardAwareHOC");

  var _KeyboardAwareHOC2 = babelHelpers.interopRequireDefault(_KeyboardAwareHOC);

  exports.default = (0, _KeyboardAwareHOC2.default)(_reactNative.ScrollView);
},649,[12,647],"react-native-keyboard-aware-scroll-view/lib/KeyboardAwareScrollView.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _KeyboardAwareHOC = require(_dependencyMap[1], "./KeyboardAwareHOC");

  var _KeyboardAwareHOC2 = babelHelpers.interopRequireDefault(_KeyboardAwareHOC);

  exports.default = (0, _KeyboardAwareHOC2.default)(_reactNative.ListView);
},650,[12,647],"react-native-keyboard-aware-scroll-view/lib/KeyboardAwareListView.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _KeyboardAwareHOC = require(_dependencyMap[1], "./KeyboardAwareHOC");

  var _KeyboardAwareHOC2 = babelHelpers.interopRequireDefault(_KeyboardAwareHOC);

  exports.default = (0, _KeyboardAwareHOC2.default)(_reactNative.FlatList);
},651,[12,647],"react-native-keyboard-aware-scroll-view/lib/KeyboardAwareFlatList.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Footer = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Footer.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _lodash = require(_dependencyMap[3], "lodash");

  var _lodash2 = _interopRequireDefault(_lodash);

  var _nativeBaseShoutemTheme = require(_dependencyMap[4], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[5], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Footer = function (_Component) {
    _inherits(Footer, _Component);

    function Footer() {
      _classCallCheck(this, Footer);

      return _possibleConstructorReturn(this, (Footer.__proto__ || Object.getPrototypeOf(Footer)).apply(this, arguments));
    }

    _createClass(Footer, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.View, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 10
          }
        }));
      }
    }]);

    return Footer;
  }(_react.Component);

  Footer.propTypes = _extends({}, _reactNative.ViewPropTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  var StyledFooter = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Footer", {}, _mapPropsToStyleNames2.default)(Footer);
  exports.Footer = StyledFooter;
},652,[108,127,12,407,404,482],"native-base/dist/src/basic/Footer.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FooterTab = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/FooterTab.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var FooterTab = function (_Component) {
    _inherits(FooterTab, _Component);

    function FooterTab() {
      _classCallCheck(this, FooterTab);

      return _possibleConstructorReturn(this, (FooterTab.__proto__ || Object.getPrototypeOf(FooterTab)).apply(this, arguments));
    }

    _createClass(FooterTab, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.View, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 11
          }
        }), this.props.children);
      }
    }]);

    return FooterTab;
  }(_react.Component);

  FooterTab.propTypes = _extends({}, _reactNative.ViewPropTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  var StyledFooterTab = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.FooterTab", {}, _mapPropsToStyleNames2.default)(FooterTab);
  exports.FooterTab = StyledFooterTab;
},653,[108,127,12,404,482],"native-base/dist/src/basic/FooterTab.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Form = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Form.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Form = function (_Component) {
    _inherits(Form, _Component);

    function Form() {
      _classCallCheck(this, Form);

      return _possibleConstructorReturn(this, (Form.__proto__ || Object.getPrototypeOf(Form)).apply(this, arguments));
    }

    _createClass(Form, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.View, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 10
          }
        }));
      }
    }]);

    return Form;
  }(_react.Component);

  Form.propTypes = _extends({}, _reactNative.ViewPropTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  var StyledForm = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Form", {}, _mapPropsToStyleNames2.default)(Form);
  exports.Form = StyledForm;
},654,[108,127,12,404,482],"native-base/dist/src/basic/Form.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PickerNB = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Picker.android.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _createReactClass = require(_dependencyMap[2], "create-react-class");

  var _createReactClass2 = _interopRequireDefault(_createReactClass);

  var _reactNative = require(_dependencyMap[3], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[4], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[5], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var PickerNB = function (_Component) {
    _inherits(PickerNB, _Component);

    function PickerNB() {
      _classCallCheck(this, PickerNB);

      return _possibleConstructorReturn(this, (PickerNB.__proto__ || Object.getPrototypeOf(PickerNB)).apply(this, arguments));
    }

    _createClass(PickerNB, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.Picker, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 11
          }
        }), this.props.children);
      }
    }]);

    return PickerNB;
  }(_react.Component);

  exports.default = PickerNB;
  PickerNB.Item = (0, _createReactClass2.default)({
    displayName: "Item",
    render: function render() {
      return _react2.default.createElement(_reactNative.Picker.Item, _extends({}, this.props(), {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 20
        }
      }));
    }
  });
  PickerNB.propTypes = _extends({}, _reactNative.Picker.propTypes);
  var StyledPickerNB = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.PickerNB", {}, _mapPropsToStyleNames2.default)(PickerNB);
  exports.PickerNB = StyledPickerNB;
},655,[108,127,172,12,404,482],"native-base/dist/src/basic/Picker.android.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.List = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/List.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[2], "native-base-shoutem-theme");

  var _SwipeRow = require(_dependencyMap[3], "./SwipeRow");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var List = function (_Component) {
    _inherits(List, _Component);

    function List(props) {
      _classCallCheck(this, List);

      var _this = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, props));

      _this._rows = {};
      _this.openCellId = null;

      if (props.dataArray && props.renderRow) {
        var rowHasChanged = props.rowHasChanged || function (r1, r2) {
          return r1 !== r2;
        };

        var ds = new _reactNative.ListView.DataSource({
          rowHasChanged: rowHasChanged
        });
        _this.state = {
          dataSource: ds.cloneWithRows(props.dataArray)
        };
      } else {
        _this.state = {};
      }

      return _this;
    }

    _createClass(List, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        if (this.state.dataSource) {
          this.setState({
            dataSource: this.state.dataSource.cloneWithRows(nextProps.dataArray)
          });
        }
      }
    }, {
      key: "renderChildren",
      value: function renderChildren() {
        var childrenArray = _react2.default.Children.map(this.props.children, function (child) {
          return child;
        });

        return childrenArray;
      }
    }, {
      key: "setScrollEnabled",
      value: function setScrollEnabled(enable) {
        this._listView.setNativeProps({
          scrollEnabled: enable
        });
      }
    }, {
      key: "safeCloseOpenRow",
      value: function safeCloseOpenRow() {
        if (this._rows[this.openCellId]._root) {
          this._rows[this.openCellId]._root.closeRow();
        }
      }
    }, {
      key: "rowSwipeGestureBegan",
      value: function rowSwipeGestureBegan(id) {
        if (this.props.closeOnRowBeginSwipe && this.openCellId && this.openCellId !== id) {
          this.safeCloseOpenRow();
        }
      }
    }, {
      key: "onRowOpen",
      value: function onRowOpen(secId, rowId, rowMap) {
        var cellIdentifier = "" + secId + rowId;

        if (this.openCellId && this.openCellId !== cellIdentifier) {
          this.safeCloseOpenRow();
        }

        this.openCellId = cellIdentifier;
        this.props.onRowOpen && this.props.onRowOpen(secId, rowId, rowMap);
      }
    }, {
      key: "onRowPress",
      value: function onRowPress(id) {
        if (this.openCellId) {
          if (this.props.closeOnRowPress) {
            this.safeCloseOpenRow();
            this.openCellId = null;
          }
        }
      }
    }, {
      key: "closeRow",
      value: function closeRow(id) {
        if (this.openCellId) {
          if (this.props.closeOnRowPress) {
            this.safeCloseOpenRow();
            this.openCellId = null;
          }
        }
      }
    }, {
      key: "onScroll",
      value: function onScroll(e) {
        if (this.openCellId) {
          if (this.props.closeOnScroll) {
            this.safeCloseOpenRow();
            this.openCellId = null;
          }
        }

        this.props.onScroll && this.props.onScroll(e);
      }
    }, {
      key: "setRefs",
      value: function setRefs(ref) {
        this._listView = ref;
        this.props.listViewRef && this.props.listViewRef(ref);
      }
    }, {
      key: "renderRow",
      value: function renderRow(rowData, secId, rowId, rowMap) {
        var _this2 = this;

        var previewRowId = this.props.dataSource && this.props.dataSource.getRowIDForFlatIndex(this.props.previewRowIndex || 0);
        return _react2.default.createElement(_SwipeRow.SwipeRow, {
          list: true,
          ref: function ref(row) {
            return _this2._rows["" + secId + rowId] = row;
          },
          swipeGestureBegan: function swipeGestureBegan(_) {
            return _this2.rowSwipeGestureBegan("" + secId + rowId);
          },
          onRowOpen: function onRowOpen(_) {
            return _this2.onRowOpen(secId, rowId, _this2._rows);
          },
          onRowDidOpen: function onRowDidOpen(_) {
            return _this2.props.onRowDidOpen && _this2.props.onRowDidOpen(secId, rowId, _this2._rows);
          },
          onRowClose: function onRowClose(_) {
            return _this2.props.onRowClose && _this2.props.onRowClose(secId, rowId, _this2._rows);
          },
          onRowDidClose: function onRowDidClose(_) {
            return _this2.props.onRowDidClose && _this2.props.onRowDidClose(secId, rowId, _this2._rows);
          },
          onRowPress: function onRowPress(_) {
            return _this2.onRowPress("" + secId + rowId);
          },
          closeRow: function closeRow(_) {
            return _this2.closeRow("" + secId + rowId);
          },
          setScrollEnabled: function setScrollEnabled(enable) {
            return _this2.setScrollEnabled(enable);
          },
          leftOpenValue: this.props.leftOpenValue,
          rightOpenValue: this.props.rightOpenValue,
          closeOnRowPress: this.props.closeOnRowPress,
          disableLeftSwipe: this.props.disableLeftSwipe,
          disableRightSwipe: this.props.disableRightSwipe,
          stopLeftSwipe: this.props.stopLeftSwipe,
          stopRightSwipe: this.props.stopRightSwipe,
          recalculateHiddenLayout: this.props.recalculateHiddenLayout,
          style: this.props.swipeRowStyle,
          preview: (this.props.previewFirstRow || this.props.previewRowIndex) && rowId === previewRowId,
          previewDuration: this.props.previewDuration,
          previewOpenValue: this.props.previewOpenValue,
          tension: this.props.tension,
          friction: this.props.friction,
          directionalDistanceChangeThreshold: this.props.directionalDistanceChangeThreshold,
          swipeToOpenPercent: this.props.swipeToOpenPercent,
          left: this.props.renderLeftHiddenRow && this.props.renderLeftHiddenRow(rowData, secId, rowId, this._rows),
          right: this.props.renderRightHiddenRow && this.props.renderRightHiddenRow(rowData, secId, rowId, this._rows),
          body: this.props.renderRow && this.props.renderRow(rowData, secId, rowId, this._rows),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 120
          }
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        if (this.props.renderLeftHiddenRow || this.props.renderRightHiddenRow) {
          return _react2.default.createElement(_reactNative.ListView, _extends({}, this.props, {
            ref: function ref(_ref) {
              _this3.setRefs(_ref);

              _this3._root = _ref;
            },
            enableEmptySections: true,
            onScroll: function onScroll(e) {
              return _this3.onScroll(e);
            },
            renderRow: function renderRow(rowData, secId, rowId) {
              return _this3.renderRow(rowData, secId, rowId, _this3._rows);
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 179
            }
          }));
        } else if (this.state.dataSource) {
          return _react2.default.createElement(_reactNative.ListView, _extends({}, this.props, {
            ref: function ref(_ref2) {
              return _this3._root = _ref2;
            },
            enableEmptySections: true,
            dataSource: this.state.dataSource,
            renderRow: this.props.renderRow,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 194
            }
          }));
        }

        return _react2.default.createElement(_reactNative.View, _extends({
          ref: function ref(c) {
            return _this3._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 204
          }
        }), this.renderChildren());
      }
    }]);

    return List;
  }(_react.Component);

  List.defaultProps = {
    leftOpenValue: 0,
    rightOpenValue: 0,
    closeOnRowBeginSwipe: false,
    closeOnScroll: true,
    closeOnRowPress: true,
    disableLeftSwipe: false,
    disableRightSwipe: false,
    recalculateHiddenLayout: false,
    previewFirstRow: false,
    directionalDistanceChangeThreshold: 2,
    swipeToOpenPercent: 50
  };
  var StyledList = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.List", {}, _mapPropsToStyleNames2.default)(List);
  exports.List = StyledList;
},656,[108,12,404,480,482],"native-base/dist/src/basic/List.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Separator = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Separator.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Separator = function (_Component) {
    _inherits(Separator, _Component);

    function Separator() {
      _classCallCheck(this, Separator);

      return _possibleConstructorReturn(this, (Separator.__proto__ || Object.getPrototypeOf(Separator)).apply(this, arguments));
    }

    _createClass(Separator, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.View, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 10
          }
        }));
      }
    }]);

    return Separator;
  }(_react.Component);

  Separator.propTypes = _extends({}, _reactNative.ViewPropTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  var StyledSeparator = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Separator", {}, _mapPropsToStyleNames2.default)(Separator);
  exports.Separator = StyledSeparator;
},657,[108,127,12,404,482],"native-base/dist/src/basic/Separator.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DeckSwiper = undefined;
  var _jsxFileName = "src/basic/DeckSwiper.js";

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _clamp = require(_dependencyMap[3], "clamp");

  var _clamp2 = _interopRequireDefault(_clamp);

  var _nativeBaseShoutemTheme = require(_dependencyMap[4], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[5], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var SWIPE_THRESHOLD = 120;

  var DeckSwiper = function (_Component) {
    _inherits(DeckSwiper, _Component);

    function DeckSwiper(props) {
      _classCallCheck(this, DeckSwiper);

      var _this = _possibleConstructorReturn(this, (DeckSwiper.__proto__ || Object.getPrototypeOf(DeckSwiper)).call(this, props));

      _this.state = {
        pan: new _reactNative.Animated.ValueXY(),
        pan2: new _reactNative.Animated.ValueXY(),
        enter: new _reactNative.Animated.Value(0.8),
        selectedItem: _this.props.dataSource[0],
        selectedItem2: _this.props.dataSource[1],
        card1Top: true,
        card2Top: false,
        fadeAnim: new _reactNative.Animated.Value(0.8),
        looping: typeof _this.props.looping === "undefined" ? true : _this.props.looping,
        disabled: _this.props.dataSource.length === 0,
        lastCard: _this.props.dataSource.length === 1
      };
      return _this;
    }

    _createClass(DeckSwiper, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(_ref) {
        var dataSource = _ref.dataSource;

        if (dataSource.length !== this.props.dataSource.length) {
          if (dataSource.length <= 1) {
            this.setState(_extends({}, this.state, {
              selectedItem: dataSource[0],
              selectedItem2: undefined,
              disabled: dataSource.length === 0,
              lastCard: dataSource.length === 1
            }));
            return;
          }

          var visibleIndex = dataSource.indexOf(this.state.selectedItem);
          var currentIndex = visibleIndex < 0 ? visibleIndex + 1 : visibleIndex;
          var nextIndex = currentIndex + 1 === dataSource.length ? 0 : currentIndex + 1;
          this.setState({
            selectedItem: dataSource[currentIndex],
            selectedItem2: dataSource[nextIndex]
          });
        }
      }
    }, {
      key: "getInitialStyle",
      value: function getInitialStyle() {
        return {
          topCard: {
            position: "absolute",
            top: 0,
            right: 0,
            left: 0
          }
        };
      }
    }, {
      key: "findNextIndexes",
      value: function findNextIndexes(currentIndex) {
        var newIdx = currentIndex + 1;
        var newIdx2 = currentIndex + 2;

        if (newIdx2 > this.props.dataSource.length - 1 && newIdx === this.props.dataSource.length - 1) {
          return [newIdx, 0];
        } else if (newIdx > this.props.dataSource.length - 1) {
          return [0, 1];
        }

        return [newIdx, newIdx2];
      }
    }, {
      key: "selectNext",
      value: function selectNext() {
        var _this2 = this;

        var dataSource = this.props.dataSource;
        var currentIndex = dataSource.indexOf(this.state.selectedItem);

        if (!this.state.looping) {
          if (currentIndex === dataSource.length - 1) {
            return this.setState({
              disabled: true
            });
          } else if (currentIndex === dataSource.length - 2) {
            return setTimeout(function () {
              _this2.setState({
                selectedItem: dataSource[currentIndex + 1]
              });

              setTimeout(function () {
                _this2.setState({
                  lastCard: true
                });
              }, 350);
            }, 50);
          }
        }

        var nextIndexes = this.findNextIndexes(currentIndex);
        setTimeout(function () {
          _this2.setState({
            selectedItem: _this2.props.dataSource[nextIndexes[0]]
          });

          setTimeout(function () {
            _this2.setState({
              selectedItem2: _this2.props.dataSource[nextIndexes[1]]
            });
          }, 350);
        }, 50);
      }
    }, {
      key: "swipeRight",
      value: function swipeRight() {
        var _this3 = this;

        if (this.props.onSwiping) this.props.onSwiping("right");
        setTimeout(function () {
          _reactNative.Animated.timing(_this3.state.fadeAnim, {
            toValue: 1
          }).start();

          _reactNative.Animated.spring(_this3.state.enter, {
            toValue: 1,
            friction: 7
          }).start();

          _this3.selectNext();

          _reactNative.Animated.decay(_this3.state.pan, {
            velocity: {
              x: 8,
              y: 1
            },
            deceleration: 0.98
          }).start(_this3._resetState.bind(_this3));
        }, 300);
      }
    }, {
      key: "swipeLeft",
      value: function swipeLeft() {
        var _this4 = this;

        if (this.props.onSwiping) this.props.onSwiping("left");
        setTimeout(function () {
          _reactNative.Animated.timing(_this4.state.fadeAnim, {
            toValue: 1
          }).start();

          _reactNative.Animated.spring(_this4.state.enter, {
            toValue: 1,
            friction: 7
          }).start();

          _this4.selectNext();

          _reactNative.Animated.decay(_this4.state.pan, {
            velocity: {
              x: -8,
              y: 1
            },
            deceleration: 0.98
          }).start(_this4._resetState.bind(_this4));
        }, 300);
      }
    }, {
      key: "componentWillMount",
      value: function componentWillMount() {
        var _this5 = this;

        this._panResponder = _reactNative.PanResponder.create({
          onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture() {
            return true;
          },
          onMoveShouldSetPanResponderCapture: function onMoveShouldSetPanResponderCapture(evt, gestureState) {
            return Math.abs(gestureState.dx) > 5;
          },
          onPanResponderGrant: function onPanResponderGrant(e, gestureState) {
            _this5.state.pan.setOffset({
              x: _this5.state.pan.x._value,
              y: _this5.state.pan.y._value
            });

            _this5.state.pan.setValue({
              x: 0,
              y: 0
            });
          },
          onPanResponderMove: function onPanResponderMove(e, gestureState) {
            if (gestureState.dx > 20) {
              if (_this5.props.onSwiping) _this5.props.onSwiping("right", gestureState.dx);
            } else if (gestureState.dx < -20) {
              if (_this5.props.onSwiping) _this5.props.onSwiping("left", gestureState.dx);
            }

            var val = Math.abs(gestureState.dx * 0.0013);
            var opa = Math.abs(gestureState.dx * 0.0022);

            if (val > 0.2) {
              val = 0.2;
            }

            _reactNative.Animated.timing(_this5.state.fadeAnim, {
              toValue: 0.8 + val
            }).start();

            _reactNative.Animated.spring(_this5.state.enter, {
              toValue: 0.8 + val,
              friction: 7
            }).start();

            _reactNative.Animated.event([null, {
              dx: _this5.state.pan.x
            }])(e, gestureState);
          },
          onPanResponderRelease: function onPanResponderRelease(e, _ref2) {
            var vx = _ref2.vx,
                vy = _ref2.vy;
            if (_this5.props.onSwiping) _this5.props.onSwiping(null);
            var velocity = void 0;

            if (vx >= 0) {
              velocity = (0, _clamp2.default)(vx, 4.5, 10);
            } else if (vx < 0) {
              velocity = (0, _clamp2.default)(vx * -1, 4.5, 10) * -1;
            }

            if (Math.abs(_this5.state.pan.x._value) > SWIPE_THRESHOLD) {
              if (velocity > 0) {
                _this5.props.onSwipeRight ? _this5.props.onSwipeRight(_this5.state.selectedItem) : undefined;

                _this5.selectNext();
              } else {
                _this5.props.onSwipeLeft ? _this5.props.onSwipeLeft(_this5.state.selectedItem) : undefined;

                _this5.selectNext();
              }

              _reactNative.Animated.decay(_this5.state.pan, {
                velocity: {
                  x: velocity,
                  y: vy
                },
                deceleration: 0.98
              }).start(_this5._resetState.bind(_this5));
            } else {
              _reactNative.Animated.spring(_this5.state.pan, {
                toValue: {
                  x: 0,
                  y: 0
                },
                friction: 4
              }).start();
            }
          }
        });
      }
    }, {
      key: "_resetState",
      value: function _resetState() {
        this.state.pan.setValue({
          x: 0,
          y: 0
        });
        this.state.enter.setValue(0.8);
        this.state.fadeAnim.setValue(0.8);
        this.setState({
          card1Top: !this.state.card1Top,
          card2Top: !this.state.card2Top
        });
        if (this.props.onSwiping) this.props.onSwiping(null);
      }
    }, {
      key: "getCardStyles",
      value: function getCardStyles() {
        var _state = this.state,
            pan = _state.pan,
            pan2 = _state.pan2,
            enter = _state.enter;
        var _ref3 = [pan.x, pan.y],
            translateX = _ref3[0],
            translateY = _ref3[1];
        var rotate = pan.x.interpolate({
          inputRange: [-700, 0, 700],
          outputRange: ["-10deg", "0deg", "10deg"]
        });
        var opacity = pan.x.interpolate({
          inputRange: [-320, 0, 320],
          outputRange: [0.9, 1, 0.9]
        });
        var scale = enter;
        var animatedCardStyles = {
          transform: [{
            translateX: translateX
          }, {
            translateY: translateY
          }, {
            rotate: rotate
          }],
          opacity: opacity
        };
        var animatedCardStyles2 = {
          transform: [{
            scale: scale
          }]
        };
        return [animatedCardStyles, animatedCardStyles2];
      }
    }, {
      key: "render",
      value: function render() {
        if (this.state.disabled) {
          return _react2.default.createElement(_reactNative.View, {
            style: {
              position: "relative",
              flexDirection: "column"
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 258
            }
          }, _react2.default.createElement(_reactNative.View, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 259
            }
          }, this.props.renderEmpty && this.props.renderEmpty()));
        } else if (this.state.lastCard) {
          return _react2.default.createElement(_reactNative.View, {
            style: {
              position: "relative",
              flexDirection: "column"
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 265
            }
          }, this.state.selectedItem === undefined ? _react2.default.createElement(_reactNative.View, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 267
            }
          }) : _react2.default.createElement(_reactNative.View, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 269
            }
          }, _react2.default.createElement(_reactNative.Animated.View, _extends({
            style: [this.getCardStyles()[1], this.getInitialStyle().topCard, {
              opacity: this.state.fadeAnim
            }]
          }, this._panResponder.panHandlers, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 270
            }
          }), this.props.renderEmpty && this.props.renderEmpty()), _react2.default.createElement(_reactNative.Animated.View, _extends({
            style: [this.getCardStyles()[0], this.getInitialStyle().topCard]
          }, this._panResponder.panHandlers, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 280
            }
          }), this.props.renderItem(this.state.selectedItem))));
        }

        return _react2.default.createElement(_reactNative.View, {
          style: {
            position: "relative",
            flexDirection: "column"
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 295
          }
        }, this.state.selectedItem === undefined ? _react2.default.createElement(_reactNative.View, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 297
          }
        }) : _react2.default.createElement(_reactNative.View, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 299
          }
        }, _react2.default.createElement(_reactNative.Animated.View, _extends({
          style: [this.getCardStyles()[1], this.getInitialStyle().topCard, {
            opacity: this.state.fadeAnim
          }]
        }, this._panResponder.panHandlers, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 300
          }
        }), this.props.renderBottom ? this.props.renderBottom(this.state.selectedItem2) : this.props.renderItem(this.state.selectedItem2)), _react2.default.createElement(_reactNative.Animated.View, _extends({
          style: [this.getCardStyles()[0], this.getInitialStyle().topCard]
        }, this._panResponder.panHandlers, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 312
          }
        }), this.props.renderTop ? this.props.renderTop(this.state.selectedItem) : this.props.renderItem(this.state.selectedItem))));
      }
    }]);

    return DeckSwiper;
  }(_react.Component);

  DeckSwiper.propTypes = _extends({}, _reactNative.ViewPropTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
    dataSource: _propTypes2.default.array
  });
  var StyledDeckSwiper = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.DeckSwiper", {}, _mapPropsToStyleNames2.default)(DeckSwiper);
  exports.DeckSwiper = StyledDeckSwiper;
},658,[108,127,12,345,404,482],"native-base/dist/src/basic/DeckSwiper.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Item = undefined;
  var _jsxFileName = "src/basic/Item.js";

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _Input = require(_dependencyMap[3], "./Input");

  var _Label = require(_dependencyMap[4], "./Label");

  var _Icon = require(_dependencyMap[5], "./Icon");

  var _nativeBaseShoutemTheme = require(_dependencyMap[6], "native-base-shoutem-theme");

  var _platform = require(_dependencyMap[7], "../theme/variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  var _computeProps = require(_dependencyMap[8], "../Utils/computeProps");

  var _computeProps2 = _interopRequireDefault(_computeProps);

  var _mapPropsToStyleNames = require(_dependencyMap[9], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  var _lodash = require(_dependencyMap[10], "lodash");

  var _lodash2 = _interopRequireDefault(_lodash);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Item = function (_Component) {
    _inherits(Item, _Component);

    function Item(props) {
      _classCallCheck(this, Item);

      var _this = _possibleConstructorReturn(this, (Item.__proto__ || Object.getPrototypeOf(Item)).call(this, props));

      _this.state = {
        text: "",
        topAnim: new _reactNative.Animated.Value(18),
        opacAnim: new _reactNative.Animated.Value(1)
      };
      return _this;
    }

    _createClass(Item, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.props.floatingLabel) {
          if (this.inputProps && this.inputProps.value) {
            this.setState({
              isFocused: true
            });
            this.floatUp(-16);
          }

          if (this.inputProps && this.inputProps.getRef) this.inputProps.getRef(this._inputRef);
        }
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        var _this2 = this;

        var childrenArray = _react2.default.Children.toArray(nextProps.children);

        var inputProps = {};

        _lodash2.default.remove(childrenArray, function (item) {
          if (item.type.displayName === "Styled(Input)") {
            inputProps = item.props;
            _this2.inputProps = item.props;
            return item;
          }
        });

        if (this.props.floatingLabel) {
          if (this.inputProps && this.inputProps.value) {
            this.setState({
              isFocused: true
            });
            this.floatUp(-16);
          }

          if (this.inputProps && this.inputProps.getRef) this.inputProps.getRef(this._inputRef);
        }
      }
    }, {
      key: "floatBack",
      value: function floatBack() {
        _reactNative.Animated.timing(this.state.topAnim, {
          toValue: 18,
          duration: 150
        }).start();

        _reactNative.Animated.timing(this.state.opacAnim, {
          toValue: 1,
          duration: 150
        }).start();
      }
    }, {
      key: "floatUp",
      value: function floatUp(e) {
        _reactNative.Animated.timing(this.state.topAnim, {
          toValue: e || -22,
          duration: 150
        }).start();

        _reactNative.Animated.timing(this.state.opacAnim, {
          toValue: 0.7,
          duration: 150
        }).start();
      }
    }, {
      key: "renderLabel",
      value: function renderLabel(label, labelProps) {
        var newLabel = [];

        if (this.props.floatingLabel) {
          if (this.state.isFocused) {
            newLabel.push(_react2.default.createElement(_Label.Label, _extends({}, labelProps, {
              key: "newFLabel",
              float: true,
              style: _extends({
                fontSize: 15,
                lineHeight: 30
              }, labelProps.style)
            })));
            this.floatUp(-16);
          } else {
            newLabel.push(label);
            this.floatBack();
          }
        } else {
          newLabel.push(_react2.default.createElement(_Label.Label, _extends({}, labelProps, {
            key: "newLabel"
          })));
        }

        return newLabel;
      }
    }, {
      key: "renderChildren",
      value: function renderChildren() {
        var _this3 = this;

        var newChildren = [];

        var childrenArray = _react2.default.Children.toArray(this.props.children);

        var label = [];
        var labelProps = {};
        label = _lodash2.default.remove(childrenArray, function (item) {
          if (item.type === _Label.Label) {
            labelProps = item.props;
            return item;
          }
        });
        var input = [];
        var inputProps = {};
        input = _lodash2.default.remove(childrenArray, function (item) {
          if (item.type === _Input.Input) {
            inputProps = item.props;
            _this3.inputProps = item.props;
            return item;
          }
        });
        var icon = [];
        var iconProps = {};
        icon = _lodash2.default.remove(childrenArray, function (item) {
          if (item.type === _Icon.Icon) {
            iconProps = item.props;
            return item;
          }
        });

        if (this.props.floatingLabel && icon.length) {
          newChildren.push(_react2.default.createElement(_Icon.Icon, _extends({
            key: "i1"
          }, iconProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 139
            }
          })));
          newChildren.push(_react2.default.createElement(_reactNative.Animated.View, {
            key: "float",
            style: {
              position: "absolute",
              left: this.props.last ? 22 : 22,
              right: 0,
              top: this.state.topAnim,
              opacity: this.state.opacAnim,
              paddingTop: _reactNative.Platform.OS === "ios" ? undefined : undefined,
              paddingBottom: _reactNative.Platform.OS === "ios" ? undefined : 12
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 141
            }
          }, _react2.default.createElement(_Label.Label, _extends({}, labelProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 153
            }
          }), this.renderLabel(label, labelProps))));
          newChildren.push(_react2.default.createElement(_Input.Input, _extends({
            key: "l2"
          }, inputProps, {
            onFocus: function onFocus() {
              _this3.setState({
                isFocused: true
              });

              inputProps.onFocus && inputProps.onFocus();
            },
            onBlur: function onBlur() {
              inputProps.value ? _this3.setState({
                isFocused: true
              }) : !_this3.state.text.length && _this3.setState({
                isFocused: false
              });
              inputProps.onBlur && inputProps.onBlur();
            },
            onChangeText: function onChangeText(text) {
              _this3.setState({
                text: text
              });

              inputProps.onChangeText && inputProps.onChangeText(text);
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 157
            }
          })));
        } else if (this.props.floatingLabel) {
          newChildren.push(_react2.default.createElement(_reactNative.Animated.View, {
            key: "float",
            style: {
              position: "absolute",
              left: this.props.last ? 15 : 0,
              right: 0,
              top: this.state.topAnim,
              opacity: this.state.opacAnim,
              paddingTop: _reactNative.Platform.OS === "ios" ? undefined : undefined,
              paddingBottom: _reactNative.Platform.OS === "ios" ? undefined : 12
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 180
            }
          }, _react2.default.createElement(_Label.Label, _extends({}, labelProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 192
            }
          }), this.renderLabel(label, labelProps))));
          newChildren.push(_react2.default.createElement(_Input.Input, _extends({
            ref: function ref(c) {
              return _this3._inputRef = c;
            },
            value: this.state.text,
            key: "l2"
          }, inputProps, {
            onFocus: function onFocus() {
              _this3.setState({
                isFocused: true
              });

              inputProps.onFocus && inputProps.onFocus();
            },
            onBlur: function onBlur() {
              inputProps.value ? _this3.setState({
                isFocused: true
              }) : !_this3.state.text.length && _this3.setState({
                isFocused: false
              });
              inputProps.onBlur && inputProps.onBlur();
            },
            onChangeText: function onChangeText(text) {
              _this3.setState({
                text: text
              });

              inputProps.onChangeText && inputProps.onChangeText(text);
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 196
            }
          })));
        } else if (this.props.stackedLabel && icon.length) {
          newChildren.push(_react2.default.createElement(_reactNative.View, {
            key: "s",
            style: {
              flexDirection: "row",
              flex: 1,
              width: _platform2.default.deviceWidth - 15
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 221
            }
          }, _react2.default.createElement(_Icon.Icon, _extends({
            key: "s1"
          }, iconProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 229
            }
          })), _react2.default.createElement(_reactNative.View, {
            style: {
              flexDirection: "column"
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 230
            }
          }, _react2.default.createElement(_Label.Label, _extends({
            key: "s2"
          }, labelProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 231
            }
          })), _react2.default.createElement(_Input.Input, _extends({
            key: "s3"
          }, inputProps, {
            style: {
              width: _platform2.default.deviceWidth - 40
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 232
            }
          })))));
        } else {
          return this.props.children;
        }

        return newChildren;
      }
    }, {
      key: "getInitialStyle",
      value: function getInitialStyle() {
        return {
          roundedInputGroup: {
            borderWidth: this.props.rounded ? _platform2.default.borderWidth * 2 : undefined,
            borderRadius: this.props.rounded ? _platform2.default.inputGroupRoundedBorderRadius : undefined
          }
        };
      }
    }, {
      key: "prepareRootProps",
      value: function prepareRootProps() {
        var defaultProps = {
          style: this.getInitialStyle().roundedInputGroup
        };
        return (0, _computeProps2.default)(this.props, defaultProps);
      }
    }, {
      key: "render",
      value: function render() {
        var _this4 = this;

        return _react2.default.createElement(_reactNative.TouchableOpacity, _extends({
          ref: function ref(c) {
            return _this4._root = c;
          }
        }, this.prepareRootProps(), {
          activeOpacity: 1,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 265
          }
        }), this.renderChildren());
      }
    }]);

    return Item;
  }(_react.Component);

  var childrenType = function childrenType(props, propName, component) {
    var error = void 0;
    var prop = props[propName];

    if (!props.children.length) {
      error = new Error(component + " should have both Label and Input components");
    } else if (props.children[0].type.displayName !== "Styled(Label)" || props.children[1].type.displayName !== "Styled(Input)") {
      error = new Error(component + " should have Label and Input components only");
    }

    return error;
  };

  Item.propTypes = _extends({}, _reactNative.TouchableOpacity.propTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
    inlineLabel: _propTypes2.default.bool,
    floatingLabel: _propTypes2.default.bool,
    stackedLabel: _propTypes2.default.bool,
    fixedLabel: _propTypes2.default.bool,
    success: _propTypes2.default.bool,
    error: _propTypes2.default.bool
  });
  var StyledItem = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Item", {}, _mapPropsToStyleNames2.default)(Item);
  exports.Item = StyledItem;
},659,[108,127,12,623,660,619,404,426,489,482,407],"native-base/dist/src/basic/Item.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Label = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Label.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Label = function (_Component) {
    _inherits(Label, _Component);

    function Label() {
      _classCallCheck(this, Label);

      return _possibleConstructorReturn(this, (Label.__proto__ || Object.getPrototypeOf(Label)).apply(this, arguments));
    }

    _createClass(Label, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.Text, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 10
          }
        }));
      }
    }]);

    return Label;
  }(_react.Component);

  Label.propTypes = _extends({}, _reactNative.Text.propTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  var StyledLabel = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Label", {}, _mapPropsToStyleNames2.default)(Label);
  exports.Label = StyledLabel;
},660,[108,127,12,404,482],"native-base/dist/src/basic/Label.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Segment = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Segment.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Segment = function (_Component) {
    _inherits(Segment, _Component);

    function Segment() {
      _classCallCheck(this, Segment);

      return _possibleConstructorReturn(this, (Segment.__proto__ || Object.getPrototypeOf(Segment)).apply(this, arguments));
    }

    _createClass(Segment, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.View, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 9
          }
        }));
      }
    }]);

    return Segment;
  }(_react.Component);

  Segment.propTypes = _extends({}, _reactNative.ViewPropTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  var StyledSegment = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Segment", {}, _mapPropsToStyleNames2.default)(Segment);
  exports.Segment = StyledSegment;
},661,[108,127,12,404,482],"native-base/dist/src/basic/Segment.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Textarea = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Textarea.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _platform = require(_dependencyMap[4], "../theme/variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  var _computeProps = require(_dependencyMap[5], "../Utils/computeProps");

  var _computeProps2 = _interopRequireDefault(_computeProps);

  var _mapPropsToStyleNames = require(_dependencyMap[6], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Textarea = function (_Component) {
    _inherits(Textarea, _Component);

    function Textarea() {
      _classCallCheck(this, Textarea);

      return _possibleConstructorReturn(this, (Textarea.__proto__ || Object.getPrototypeOf(Textarea)).apply(this, arguments));
    }

    _createClass(Textarea, [{
      key: "getStyle",
      value: function getStyle() {
        return {
          textarea: {
            height: this.props.rowSpan ? this.props.rowSpan * 25 : 60
          }
        };
      }
    }, {
      key: "prepareRootProps",
      value: function prepareRootProps() {
        var defaultProps = {
          style: this.getStyle().textarea
        };
        return (0, _computeProps2.default)(this.props, defaultProps);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.TextInput, _extends({
          ref: function ref(c) {
            _this2._textInput = c;
            _this2._root = c;
          }
        }, this.prepareRootProps(), {
          multiline: true,
          placeholderTextColor: this.props.placeholderTextColor ? this.props.placeholderTextColor : _platform2.default.inputColorPlaceholder,
          underlineColorAndroid: "rgba(0,0,0,0)",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 26
          }
        }));
      }
    }]);

    return Textarea;
  }(_react.Component);

  Textarea.propTypes = _extends({}, _reactNative.TextInput.propTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
    rowSpan: _propTypes2.default.number,
    bordered: _propTypes2.default.bool,
    underline: _propTypes2.default.bool
  });
  var StyledTextarea = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Textarea", {}, _mapPropsToStyleNames2.default)(Textarea);
  exports.Textarea = StyledTextarea;
},662,[108,127,12,404,426,489,482],"native-base/dist/src/basic/Textarea.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Tab = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Tab.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Tab = function (_Component) {
    _inherits(Tab, _Component);

    function Tab() {
      _classCallCheck(this, Tab);

      return _possibleConstructorReturn(this, (Tab.__proto__ || Object.getPrototypeOf(Tab)).apply(this, arguments));
    }

    _createClass(Tab, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.View, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 11
          }
        }), this.props.children);
      }
    }]);

    return Tab;
  }(_react.Component);

  Tab.propTypes = _extends({}, _reactNative.ViewPropTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  var StyledTab = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Tab", {}, _mapPropsToStyleNames2.default)(Tab);
  exports.Tab = StyledTab;
},663,[108,127,12,404,482],"native-base/dist/src/basic/Tab.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Tabs/index.js";

  var _propTypes = require(_dependencyMap[0], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _createReactClass = require(_dependencyMap[1], "create-react-class");

  var _createReactClass2 = _interopRequireDefault(_createReactClass);

  var _Utils = require(_dependencyMap[2], "../../Utils");

  var _lodash = require(_dependencyMap[3], "lodash");

  var _lodash2 = _interopRequireDefault(_lodash);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  var React = require(_dependencyMap[4], "react");

  var Component = React.Component;

  var ReactNative = require(_dependencyMap[5], "react-native");

  var Dimensions = ReactNative.Dimensions,
      View = ReactNative.View,
      Animated = ReactNative.Animated,
      ScrollView = ReactNative.ScrollView,
      StyleSheet = ReactNative.StyleSheet,
      Platform = ReactNative.Platform;

  var TimerMixin = require(_dependencyMap[6], "react-timer-mixin");

  var SceneComponent = require(_dependencyMap[7], "./SceneComponent");

  var _require = require(_dependencyMap[8], "./DefaultTabBar"),
      DefaultTabBar = _require.DefaultTabBar;

  var _require2 = require(_dependencyMap[9], "./ScrollableTabBar"),
      ScrollableTabBar = _require2.ScrollableTabBar;

  var ScrollableTabView = (0, _createReactClass2.default)({
    displayName: "ScrollableTabView",
    mixins: [TimerMixin],
    statics: {
      DefaultTabBar: DefaultTabBar,
      ScrollableTabBar: ScrollableTabBar
    },
    propTypes: {
      tabBarPosition: _propTypes2.default.oneOf(["top", "bottom", "overlayTop", "overlayBottom"]),
      initialPage: _propTypes2.default.number,
      page: _propTypes2.default.number,
      onChangeTab: _propTypes2.default.func,
      onScroll: _propTypes2.default.func,
      renderTabBar: _propTypes2.default.any,
      style: _Utils.ViewPropTypes.style,
      contentProps: _propTypes2.default.object,
      scrollWithoutAnimation: _propTypes2.default.bool,
      locked: _propTypes2.default.bool,
      prerenderingSiblingsNumber: _propTypes2.default.number
    },
    getDefaultProps: function getDefaultProps() {
      return {
        tabBarPosition: "top",
        initialPage: 0,
        page: -1,
        onChangeTab: function onChangeTab() {},
        onScroll: function onScroll() {},
        contentProps: {},
        scrollWithoutAnimation: false,
        locked: false,
        prerenderingSiblingsNumber: 0
      };
    },
    getInitialState: function getInitialState() {
      return {
        currentPage: this.props.initialPage,
        scrollValue: new Animated.Value(this.props.initialPage),
        containerWidth: Dimensions.get("window").width,
        sceneKeys: this.newSceneKeys({
          currentPage: this.props.initialPage
        })
      };
    },
    componentDidMount: function componentDidMount() {
      var _this = this;

      var scrollFn = function scrollFn() {
        if (_this.scrollView) {
          _this.state.scrollValue.setValue(_this.props.initialPage);
        }
      };

      _Utils.InteractionManager.runAfterInteractions(scrollFn);
    },
    componentWillReceiveProps: function componentWillReceiveProps(props) {
      if (props.children !== this.props.children) {
        this.updateSceneKeys({
          page: this.state.currentPage,
          children: props.children
        });
      }

      if (props.page >= 0 && props.page !== this.state.currentPage) {
        this.goToPage(props.page);
      }
    },
    goToPage: function goToPage(pageNumber) {
      var offset = pageNumber * this.state.containerWidth;

      if (this.scrollView) {
        this.scrollView.scrollTo({
          x: offset,
          y: 0,
          animated: !this.props.scrollWithoutAnimation
        });
      }

      var currentPage = this.state.currentPage;
      this.updateSceneKeys({
        page: pageNumber,
        callback: this._onChangeTab.bind(this, currentPage, pageNumber)
      });
    },
    renderTabBar: function renderTabBar(props) {
      if (this.props.renderTabBar === false) {
        return null;
      } else if (this.props.renderTabBar) {
        return React.cloneElement(this.props.renderTabBar(props), props);
      } else {
        return React.createElement(DefaultTabBar, _extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 111
          }
        }));
      }
    },
    updateSceneKeys: function updateSceneKeys(_ref) {
      var page = _ref.page,
          _ref$children = _ref.children,
          children = _ref$children === undefined ? this.props.children : _ref$children,
          _ref$callback = _ref.callback,
          callback = _ref$callback === undefined ? function () {} : _ref$callback;
      var newKeys = this.newSceneKeys({
        previousKeys: this.state.sceneKeys,
        currentPage: page,
        children: children
      });
      this.setState({
        currentPage: page,
        sceneKeys: newKeys
      }, callback);
    },
    newSceneKeys: function newSceneKeys(_ref2) {
      var _this2 = this;

      var _ref2$previousKeys = _ref2.previousKeys,
          previousKeys = _ref2$previousKeys === undefined ? [] : _ref2$previousKeys,
          _ref2$currentPage = _ref2.currentPage,
          currentPage = _ref2$currentPage === undefined ? 0 : _ref2$currentPage,
          _ref2$children = _ref2.children,
          children = _ref2$children === undefined ? this.props.children : _ref2$children;
      var newKeys = [];

      this._children(children).forEach(function (child, idx) {
        var key = _this2._makeSceneKey(child, idx);

        if (_this2._keyExists(previousKeys, key) || _this2._shouldRenderSceneKey(idx, currentPage)) {
          newKeys.push(key);
        }
      });

      return newKeys;
    },
    _shouldRenderSceneKey: function _shouldRenderSceneKey(idx, currentPageKey) {
      var numOfSibling = this.props.prerenderingSiblingsNumber;
      return idx < currentPageKey + numOfSibling + 1 && idx > currentPageKey - numOfSibling - 1;
    },
    _keyExists: function _keyExists(sceneKeys, key) {
      return sceneKeys.find(function (sceneKey) {
        return key === sceneKey;
      });
    },
    _makeSceneKey: function _makeSceneKey(child, idx) {
      return child.props.heading + "_" + idx;
    },
    renderScrollableContent: function renderScrollableContent() {
      var _this3 = this;

      var scenes = this._composeScenes();

      return React.createElement(ScrollView, _extends({
        horizontal: true,
        pagingEnabled: true,
        automaticallyAdjustContentInsets: false,
        contentOffset: {
          x: this.props.initialPage * this.state.containerWidth
        },
        ref: function ref(scrollView) {
          _this3.scrollView = scrollView;
        },
        onScroll: function onScroll(e) {
          var offsetX = e.nativeEvent.contentOffset.x;

          _this3._updateScrollValue(offsetX / _this3.state.containerWidth);
        },
        onMomentumScrollBegin: this._onMomentumScrollBeginAndEnd,
        onMomentumScrollEnd: this._onMomentumScrollBeginAndEnd,
        scrollEventThrottle: 16,
        scrollsToTop: false,
        showsHorizontalScrollIndicator: false,
        scrollEnabled: !this.props.locked,
        directionalLockEnabled: true,
        alwaysBounceVertical: false,
        keyboardDismissMode: "on-drag"
      }, this.props.contentProps, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 151
        }
      }), scenes);
    },
    _composeScenes: function _composeScenes() {
      var _this4 = this;

      return this._children().map(function (child, idx) {
        var key = _this4._makeSceneKey(child, idx);

        return React.createElement(SceneComponent, {
          key: child.key,
          shouldUpdated: _this4._shouldRenderSceneKey(idx, _this4.state.currentPage),
          style: {
            width: _this4.state.containerWidth
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 185
          }
        }, _this4._keyExists(_this4.state.sceneKeys, key) ? child : React.createElement(View, {
          heading: child.props.heading,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 193
          }
        }));
      });
    },
    _onMomentumScrollBeginAndEnd: function _onMomentumScrollBeginAndEnd(e) {
      var offsetX = e.nativeEvent.contentOffset.x;
      var page = Math.round(offsetX / this.state.containerWidth);

      if (this.state.currentPage !== page) {
        this._updateSelectedPage(page);
      }
    },
    _updateSelectedPage: function _updateSelectedPage(nextPage) {
      var localNextPage = nextPage;

      if (typeof localNextPage === "object") {
        localNextPage = nextPage.nativeEvent.position;
      }

      var currentPage = this.state.currentPage;
      this.updateSceneKeys({
        page: localNextPage,
        callback: this._onChangeTab.bind(this, currentPage, localNextPage)
      });
    },
    _onChangeTab: function _onChangeTab(prevPage, currentPage) {
      this.props.onChangeTab({
        i: currentPage,
        ref: this._children()[currentPage],
        from: prevPage
      });
    },
    _updateScrollValue: function _updateScrollValue(value) {
      this.state.scrollValue.setValue(value);
      this.props.onScroll(value);
    },
    _handleLayout: function _handleLayout(e) {
      var _this5 = this;

      var width = e.nativeEvent.layout.width;

      if (Math.round(width) !== Math.round(this.state.containerWidth)) {
        this.setState({
          containerWidth: width
        });
        this.requestAnimationFrame(function () {
          _this5.goToPage(_this5.state.currentPage);
        });
      }
    },
    _children: function _children() {
      var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.children;
      return React.Children.map(children, function (child) {
        return child;
      });
    },
    render: function render() {
      var overlayTabs = this.props.tabBarPosition === "overlayTop" || this.props.tabBarPosition === "overlayBottom";
      var tabBarProps = {
        goToPage: this.goToPage,
        tabs: this._children().map(function (child) {
          return child.props.heading;
        }),
        tabStyle: this._children().map(function (child) {
          return child.props.tabStyle;
        }),
        activeTabStyle: this._children().map(function (child) {
          return child.props.activeTabStyle;
        }),
        textStyle: this._children().map(function (child) {
          return child.props.textStyle;
        }),
        activeTextStyle: this._children().map(function (child) {
          return child.props.activeTextStyle;
        }),
        tabHeaderStyle: this._children().map(function (child) {
          return _lodash2.default.get(child.props.heading.props, "style", undefined);
        }),
        activeTab: this.state.currentPage,
        scrollValue: this.state.scrollValue,
        containerWidth: this.state.containerWidth
      };

      if (this.props.tabBarBackgroundColor) {
        tabBarProps.backgroundColor = this.props.tabBarBackgroundColor;
      }

      if (this.props.tabBarActiveTextColor) {
        tabBarProps.activeTextColor = this.props.tabBarActiveTextColor;
      }

      if (this.props.tabBarInactiveTextColor) {
        tabBarProps.inactiveTextColor = this.props.tabBarInactiveTextColor;
      }

      if (this.props.tabBarTextStyle) {
        tabBarProps.textStyle = this.props.tabBarTextStyle;
      }

      if (this.props.tabBarUnderlineStyle) {
        tabBarProps.underlineStyle = this.props.tabBarUnderlineStyle;
      }

      if (this.props.tabContainerStyle) {
        tabBarProps.tabContainerStyle = this.props.tabContainerStyle;
      }

      if (overlayTabs) {
        var _tabBarProps$style;

        tabBarProps.style = (_tabBarProps$style = {
          position: "absolute",
          left: 0,
          right: 0
        }, _defineProperty(_tabBarProps$style, this.props.tabBarPosition === "overlayTop" ? "top" : "bottom", 0), _defineProperty(_tabBarProps$style, "backgroundColor", "rgba(255, 255, 255, 0.7)"), _tabBarProps$style);
      }

      return React.createElement(View, {
        style: [styles.container, this.props.style],
        onLayout: this._handleLayout,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 296
        }
      }, (this.props.tabBarPosition === "top" || this.props.tabBarPosition === "overlayTop") && this.renderTabBar(tabBarProps), this.renderScrollableContent(), (this.props.tabBarPosition === "bottom" || this.props.tabBarPosition === "overlayBottom") && this.renderTabBar(tabBarProps));
    }
  });
  exports.default = ScrollableTabView;
  var styles = StyleSheet.create({
    container: {
      flex: 1
    },
    scrollableContentAndroid: {
      flex: 1
    }
  });
},664,[127,172,639,407,108,12,191,665,667,669],"native-base/dist/src/basic/Tabs/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Tabs/SceneComponent.js";

  function _objectWithoutProperties(obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  }

  var React = require(_dependencyMap[0], "react");

  var ReactNative = require(_dependencyMap[1], "react-native");

  var Component = React.Component;
  var View = ReactNative.View,
      StyleSheet = ReactNative.StyleSheet;

  var StaticContainer = require(_dependencyMap[2], "./StaticContainer");

  var SceneComponent = function SceneComponent(Props) {
    var shouldUpdated = Props.shouldUpdated,
        props = _objectWithoutProperties(Props, ["shouldUpdated"]);

    return React.createElement(View, _extends({}, props, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 11
      }
    }), React.createElement(StaticContainer, {
      shouldUpdate: shouldUpdated,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 12
      }
    }, props.children));
  };

  module.exports = SceneComponent;
},665,[108,12,666],"native-base/dist/src/basic/Tabs/SceneComponent.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var React = require(_dependencyMap[0], "react");

  var StaticContainer = function (_React$Component) {
    _inherits(StaticContainer, _React$Component);

    function StaticContainer() {
      _classCallCheck(this, StaticContainer);

      return _possibleConstructorReturn(this, (StaticContainer.__proto__ || Object.getPrototypeOf(StaticContainer)).apply(this, arguments));
    }

    _createClass(StaticContainer, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps) {
        return !!nextProps.shouldUpdate;
      }
    }, {
      key: "render",
      value: function render() {
        var child = this.props.children;

        if (child === null || child === false) {
          return null;
        }

        return React.Children.only(child);
      }
    }]);

    return StaticContainer;
  }(React.Component);

  module.exports = StaticContainer;
},666,[108],"native-base/dist/src/basic/Tabs/StaticContainer.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DefaultTabBar = undefined;
  var _jsxFileName = "src/basic/Tabs/DefaultTabBar.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _createReactClass = require(_dependencyMap[2], "create-react-class");

  var _createReactClass2 = _interopRequireDefault(_createReactClass);

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  var _platform = require(_dependencyMap[5], "./../../theme/variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  var _index = require(_dependencyMap[6], "./../../index");

  var _lodash = require(_dependencyMap[7], "lodash");

  var _lodash2 = _interopRequireDefault(_lodash);

  var _Utils = require(_dependencyMap[8], "../../Utils");

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var ReactNative = require(_dependencyMap[9], "react-native");

  var StyleSheet = ReactNative.StyleSheet,
      View = ReactNative.View,
      Animated = ReactNative.Animated,
      Platform = ReactNative.Platform;

  var Button = require(_dependencyMap[10], "./Button");

  var DefaultTabBar = (0, _createReactClass2.default)({
    displayName: "DefaultTabBar",
    propTypes: {
      goToPage: _propTypes2.default.func,
      activeTab: _propTypes2.default.number,
      tabs: _propTypes2.default.array,
      backgroundColor: _propTypes2.default.string,
      activeTextColor: _propTypes2.default.string,
      inactiveTextColor: _propTypes2.default.string,
      tabStyle: _Utils.ViewPropTypes.style,
      renderTab: _propTypes2.default.func,
      underlineStyle: _Utils.ViewPropTypes.style,
      tabContainerStyle: _Utils.ViewPropTypes.style
    },
    contextTypes: {
      theme: _propTypes2.default.object
    },
    getDefaultProps: function getDefaultProps() {
      return {
        activeTextColor: _platform2.default.topTabBarActiveTextColor,
        inactiveTextColor: _platform2.default.topTabBarTextColor,
        backgroundColor: null
      };
    },
    renderTabOption: function renderTabOption(name, page) {},
    renderTab: function renderTab(name, page, isTabActive, onPressHandler, tabStyle, activeTabStyle, textStyle, activeTextStyle, tabHeaderStyle) {
      var headerContent = typeof name !== "string" ? name.props.children : undefined;
      var _props = this.props,
          activeTextColor = _props.activeTextColor,
          inactiveTextColor = _props.inactiveTextColor;
      var textColor = isTabActive ? activeTextColor : inactiveTextColor;
      var fontWeight = isTabActive ? "bold" : "normal";

      if (typeof name === "string") {
        return _react2.default.createElement(Button, {
          style: {
            flex: 1
          },
          key: name,
          onPress: function onPress() {
            return onPressHandler(page);
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 59
          }
        }, _react2.default.createElement(_index.TabHeading, {
          style: isTabActive ? activeTabStyle : tabStyle,
          active: isTabActive,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 60
          }
        }, _react2.default.createElement(_index.Text, {
          style: isTabActive ? activeTextStyle : textStyle,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 61
          }
        }, name)));
      } else {
        return _react2.default.createElement(Button, {
          style: {
            flex: 1
          },
          key: _lodash2.default.random(1.2, 5.2),
          onPress: function onPress() {
            return onPressHandler(page);
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 67
          }
        }, _react2.default.createElement(_index.TabHeading, {
          style: tabHeaderStyle,
          active: isTabActive,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 68
          }
        }, headerContent));
      }
    },
    render: function render() {
      var _this = this;

      var variables = this.context.theme ? this.context.theme["@@shoutem.theme/themeStyle"].variables : _platform2.default;
      var platformStyle = variables.platformStyle;
      var containerWidth = this.props.containerWidth;
      var numberOfTabs = this.props.tabs.length;
      var tabUnderlineStyle = {
        position: "absolute",
        width: containerWidth / numberOfTabs,
        height: 4,
        backgroundColor: variables.topTabBarActiveBorderColor,
        bottom: 0
      };
      var left = this.props.scrollValue.interpolate({
        inputRange: [0, 1],
        outputRange: [0, containerWidth / numberOfTabs]
      });
      return _react2.default.createElement(_index.TabContainer, {
        style: this.props.tabContainerStyle ? this.props.tabContainerStyle : {},
        __source: {
          fileName: _jsxFileName,
          lineNumber: 96
        }
      }, this.props.tabs.map(function (name, page) {
        var isTabActive = _this.props.activeTab === page;
        var renderTab = _this.props.renderTab || _this.renderTab;
        return renderTab(name, page, isTabActive, _this.props.goToPage, _this.props.tabStyle[page], _this.props.activeTabStyle[page], _this.props.textStyle[page], _this.props.activeTextStyle[page], _this.props.tabHeaderStyle[page]);
      }), _react2.default.createElement(Animated.View, {
        style: [tabUnderlineStyle, {
          left: left
        }, this.props.underlineStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 112
        }
      }));
    }
  });
  var StyledTab = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.DefaultTabBar", {}, _mapPropsToStyleNames2.default)(DefaultTabBar);
  exports.DefaultTabBar = StyledTab;
},667,[108,127,172,404,482,426,403,407,639,12,668],"native-base/dist/src/basic/Tabs/DefaultTabBar.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Tabs/Button.android.js";

  var React = require(_dependencyMap[0], "react");

  var ReactNative = require(_dependencyMap[1], "react-native");

  var TouchableNativeFeedback = ReactNative.TouchableNativeFeedback,
      View = ReactNative.View;

  var Button = function Button(props) {
    return React.createElement(TouchableNativeFeedback, _extends({
      delayPressIn: 0
    }, props, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 7
      }
    }), props.children);
  };

  module.exports = Button;
},668,[108,12],"native-base/dist/src/basic/Tabs/Button.android.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ScrollableTab = undefined;
  var _jsxFileName = "src/basic/Tabs/ScrollableTabBar.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _createReactClass = require(_dependencyMap[2], "create-react-class");

  var _createReactClass2 = _interopRequireDefault(_createReactClass);

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  var _platform = require(_dependencyMap[5], "./../../theme/variables/platform");

  var _platform2 = _interopRequireDefault(_platform);

  var _index = require(_dependencyMap[6], "./../../index");

  var _lodash = require(_dependencyMap[7], "lodash");

  var _lodash2 = _interopRequireDefault(_lodash);

  var _Utils = require(_dependencyMap[8], "../../Utils");

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var ReactNative = require(_dependencyMap[9], "react-native");

  var View = ReactNative.View,
      Animated = ReactNative.Animated,
      StyleSheet = ReactNative.StyleSheet,
      ScrollView = ReactNative.ScrollView,
      Platform = ReactNative.Platform,
      Dimensions = ReactNative.Dimensions;

  var Button = require(_dependencyMap[10], "./Button");

  var WINDOW_WIDTH = Dimensions.get("window").width;
  var ScrollableTabBar = (0, _createReactClass2.default)({
    displayName: "ScrollableTabBar",
    propTypes: {
      goToPage: _propTypes2.default.func,
      activeTab: _propTypes2.default.number,
      tabs: _propTypes2.default.array,
      backgroundColor: _propTypes2.default.string,
      activeTextColor: _propTypes2.default.string,
      inactiveTextColor: _propTypes2.default.string,
      scrollOffset: _propTypes2.default.number,
      style: _Utils.ViewPropTypes.style,
      tabStyle: _Utils.ViewPropTypes.style,
      tabsContainerStyle: _Utils.ViewPropTypes.style,
      renderTab: _propTypes2.default.func,
      underlineStyle: _Utils.ViewPropTypes.style,
      onScroll: _propTypes2.default.func
    },
    contextTypes: {
      theme: _propTypes2.default.object
    },
    getDefaultProps: function getDefaultProps() {
      return {
        scrollOffset: 52,
        activeTextColor: "navy",
        inactiveTextColor: "black",
        backgroundColor: null,
        style: {},
        tabStyle: {},
        tabsContainerStyle: {},
        underlineStyle: {}
      };
    },
    getInitialState: function getInitialState() {
      this._tabsMeasurements = [];
      return {
        _leftTabUnderline: new Animated.Value(0),
        _widthTabUnderline: new Animated.Value(0),
        _containerWidth: null
      };
    },
    componentDidMount: function componentDidMount() {
      this.props.scrollValue.addListener(this.updateView);
    },
    updateView: function updateView(offset) {
      var position = Math.floor(offset.value);
      var pageOffset = offset.value % 1;
      var tabCount = this.props.tabs.length;
      var lastTabPosition = tabCount - 1;

      if (tabCount === 0 || offset.value < 0 || offset.value > lastTabPosition) {
        return;
      }

      if (this.necessarilyMeasurementsCompleted(position, position === lastTabPosition)) {
        this.updateTabPanel(position, pageOffset);
        this.updateTabUnderline(position, pageOffset, tabCount);
      }
    },
    necessarilyMeasurementsCompleted: function necessarilyMeasurementsCompleted(position, isLastTab) {
      return this._tabsMeasurements[position] && (isLastTab || this._tabsMeasurements[position + 1]) && this._tabContainerMeasurements && this._containerMeasurements;
    },
    updateTabPanel: function updateTabPanel(position, pageOffset) {
      var containerWidth = this._containerMeasurements.width;
      var tabWidth = this._tabsMeasurements[position].width;
      var nextTabMeasurements = this._tabsMeasurements[position + 1];
      var nextTabWidth = nextTabMeasurements && nextTabMeasurements.width || 0;
      var tabOffset = this._tabsMeasurements[position].left;
      var absolutePageOffset = pageOffset * tabWidth;
      var newScrollX = tabOffset + absolutePageOffset;
      newScrollX -= (containerWidth - (1 - pageOffset) * tabWidth - pageOffset * nextTabWidth) / 2;
      newScrollX = newScrollX >= 0 ? newScrollX : 0;

      if (Platform.OS === "android") {
        this._scrollView.scrollTo({
          x: newScrollX,
          y: 0,
          animated: false
        });
      } else {
        var rightBoundScroll = this._tabContainerMeasurements.width - this._containerMeasurements.width;
        newScrollX = newScrollX > rightBoundScroll ? rightBoundScroll : newScrollX;

        this._scrollView.scrollTo({
          x: newScrollX,
          y: 0,
          animated: false
        });
      }
    },
    updateTabUnderline: function updateTabUnderline(position, pageOffset, tabCount) {
      var lineLeft = this._tabsMeasurements[position].left;
      var lineRight = this._tabsMeasurements[position].right;

      if (position < tabCount - 1) {
        var nextTabLeft = this._tabsMeasurements[position + 1].left;
        var nextTabRight = this._tabsMeasurements[position + 1].right;
        var newLineLeft = pageOffset * nextTabLeft + (1 - pageOffset) * lineLeft;
        var newLineRight = pageOffset * nextTabRight + (1 - pageOffset) * lineRight;

        this.state._leftTabUnderline.setValue(newLineLeft);

        this.state._widthTabUnderline.setValue(newLineRight - newLineLeft);
      } else {
        this.state._leftTabUnderline.setValue(lineLeft);

        this.state._widthTabUnderline.setValue(lineRight - lineLeft);
      }
    },
    renderTab: function renderTab(name, page, isTabActive, onPressHandler, onLayoutHandler, tabStyle, activeTabStyle, textStyle, activeTextStyle, tabHeaderStyle) {
      var headerContent = typeof name !== "string" ? name.props.children : undefined;
      var _props = this.props,
          activeTextColor = _props.activeTextColor,
          inactiveTextColor = _props.inactiveTextColor;
      var textColor = isTabActive ? activeTextColor : inactiveTextColor;
      var fontWeight = isTabActive ? "bold" : "normal";

      if (typeof name === "string") {
        return _react2.default.createElement(Button, {
          key: name + "_" + page,
          onPress: function onPress() {
            return onPressHandler(page);
          },
          onLayout: onLayoutHandler,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 147
          }
        }, _react2.default.createElement(_index.TabHeading, {
          scrollable: true,
          style: isTabActive ? activeTabStyle : tabStyle,
          active: isTabActive,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 148
          }
        }, _react2.default.createElement(_index.Text, {
          style: isTabActive ? activeTextStyle : textStyle,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 149
          }
        }, name)));
      } else {
        return _react2.default.createElement(Button, {
          key: _lodash2.default.random(1.2, 5.2),
          onPress: function onPress() {
            return onPressHandler(page);
          },
          onLayout: onLayoutHandler,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 157
          }
        }, _react2.default.createElement(_index.TabHeading, {
          scrollable: true,
          style: tabHeaderStyle,
          active: isTabActive,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 158
          }
        }, headerContent));
      }
    },
    measureTab: function measureTab(page, event) {
      var _event$nativeEvent$la = event.nativeEvent.layout,
          x = _event$nativeEvent$la.x,
          width = _event$nativeEvent$la.width,
          height = _event$nativeEvent$la.height;
      this._tabsMeasurements[page] = {
        left: x,
        right: x + width,
        width: width,
        height: height
      };
      this.updateView({
        value: this.props.scrollValue._value
      });
    },
    render: function render() {
      var _this = this;

      var variables = this.context.theme ? this.context.theme["@@shoutem.theme/themeStyle"].variables : _platform2.default;
      var tabUnderlineStyle = {
        position: "absolute",
        height: 4,
        backgroundColor: variables.topTabBarActiveBorderColor,
        bottom: 0
      };
      var dynamicTabUnderline = {
        left: this.state._leftTabUnderline,
        width: this.state._widthTabUnderline
      };
      return _react2.default.createElement(View, {
        style: [styles.container, {
          backgroundColor: this.props.backgroundColor
        }, this.props.style],
        onLayout: this.onContainerLayout,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 187
        }
      }, _react2.default.createElement(ScrollView, {
        automaticallyAdjustContentInsets: false,
        ref: function ref(scrollView) {
          _this._scrollView = scrollView;
        },
        horizontal: true,
        showsHorizontalScrollIndicator: false,
        showsVerticalScrollIndicator: false,
        directionalLockEnabled: true,
        onScroll: this.props.onScroll,
        bounces: false,
        scrollsToTop: false,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 191
        }
      }, _react2.default.createElement(View, {
        style: [styles.tabs, {
          width: this.state._containerWidth
        }, this.props.tabsContainerStyle],
        ref: "tabContainer",
        onLayout: this.onTabContainerLayout,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 204
        }
      }, this.props.tabs.map(function (name, page) {
        var isTabActive = _this.props.activeTab === page;
        var renderTab = _this.props.renderTab || _this.renderTab;
        return renderTab(name, page, isTabActive, _this.props.goToPage, _this.measureTab.bind(_this, page), _this.props.tabStyle[page], _this.props.activeTabStyle[page], _this.props.textStyle[page], _this.props.activeTextStyle[page], _this.props.tabHeaderStyle[page]);
      }), _react2.default.createElement(Animated.View, {
        style: [tabUnderlineStyle, dynamicTabUnderline, this.props.underlineStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 225
        }
      }))));
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
      if (!_lodash2.default.isEqual(this.props.tabs, nextProps.tabs) && this.state._containerWidth) {
        this.setState({
          _containerWidth: null
        });
      }
    },
    onTabContainerLayout: function onTabContainerLayout(e) {
      this._tabContainerMeasurements = e.nativeEvent.layout;
      var width = this._tabContainerMeasurements.width;

      if (width < WINDOW_WIDTH) {
        width = WINDOW_WIDTH;
      }

      this.setState({
        _containerWidth: width
      });
      this.updateView({
        value: this.props.scrollValue._value
      });
    },
    onContainerLayout: function onContainerLayout(e) {
      this._containerMeasurements = e.nativeEvent.layout;
      this.updateView({
        value: this.props.scrollValue._value
      });
    }
  });
  var StyledTab = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.ScrollableTab", {}, _mapPropsToStyleNames2.default)(ScrollableTabBar);
  exports.ScrollableTab = StyledTab;
  var styles = StyleSheet.create({
    tab: {
      height: 49,
      alignItems: "center",
      justifyContent: "center",
      paddingLeft: 20,
      paddingRight: 20
    },
    container: {
      height: 50,
      borderWidth: 1,
      borderTopWidth: 0,
      borderLeftWidth: 0,
      borderRightWidth: 0,
      borderColor: "#ccc"
    },
    tabs: {
      flexDirection: "row",
      justifyContent: "space-around"
    }
  });
},669,[108,127,172,404,482,426,403,407,639,12,668],"native-base/dist/src/basic/Tabs/ScrollableTabBar.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Subtitle = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = "src/basic/Subtitle.js";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _nativeBaseShoutemTheme = require(_dependencyMap[3], "native-base-shoutem-theme");

  var _mapPropsToStyleNames = require(_dependencyMap[4], "../Utils/mapPropsToStyleNames");

  var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Subtitle = function (_Component) {
    _inherits(Subtitle, _Component);

    function Subtitle() {
      _classCallCheck(this, Subtitle);

      return _possibleConstructorReturn(this, (Subtitle.__proto__ || Object.getPrototypeOf(Subtitle)).apply(this, arguments));
    }

    _createClass(Subtitle, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_reactNative.Text, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          }
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 9
          }
        }));
      }
    }]);

    return Subtitle;
  }(_react.Component);

  Subtitle.propTypes = _extends({}, _reactNative.Text.propTypes, {
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  });
  var StyledSubtitle = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Subtitle", {}, _mapPropsToStyleNames2.default)(Subtitle);
  exports.Subtitle = StyledSubtitle;
},670,[108,127,12,404,482],"native-base/dist/src/basic/Subtitle.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var events = {};
    var hOP = events.hasOwnProperty;
    exports.default = {
        subscribe: function subscribe(event, listener) {
            if (!hOP.call(events, event)) events[event] = [];
            var index = events[event].push(listener) - 1;
            return {
                remove: function remove() {
                    delete events[event][index];
                }
            };
        },
        publish: function publish(event, args) {
            if (!hOP.call(events, event)) return;
            events[event].forEach(function (fn) {
                fn(args);
            });
        }
    };
},671,[],"syncapp-mobile/utils/events.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/screens/ListPhones.js";

    var _react = require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = require(_dependencyMap[1], "react-native");

    var _reactNativeElements = require(_dependencyMap[2], "react-native-elements");

    var _nativeBase = require(_dependencyMap[3], "native-base");

    var _reactNativeSqliteStorage = require(_dependencyMap[4], "react-native-sqlite-storage");

    var _reactNativeSqliteStorage2 = babelHelpers.interopRequireDefault(_reactNativeSqliteStorage);

    var _events = require(_dependencyMap[5], "../utils/events");

    var _events2 = babelHelpers.interopRequireDefault(_events);

    var ListPhonesScreen = function (_Component) {
        babelHelpers.inherits(ListPhonesScreen, _Component);

        function ListPhonesScreen(props) {
            babelHelpers.classCallCheck(this, ListPhonesScreen);

            var _this = babelHelpers.possibleConstructorReturn(this, (ListPhonesScreen.__proto__ || Object.getPrototypeOf(ListPhonesScreen)).call(this, props));

            var params = props.navigation.state.params;
            _this.state = {
                customer: params ? params.customer : null,
                phones: []
            };
            return _this;
        }

        babelHelpers.createClass(ListPhonesScreen, [{
            key: "componentDidMount",
            value: function componentDidMount() {
                var _this2 = this;

                this.select();
                this.refreshEventNumbers = _events2.default.subscribe('RefreshNumbers', function () {
                    return _this2.select();
                });
            }
        }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                this.refreshEventNumbers.remove();
            }
        }, {
            key: "delete",
            value: function _delete(phone) {
                var db = _reactNativeSqliteStorage2.default.openDatabase('syncapp', '1.0', 'SyncApp Database', 200000, this.openCB, this.errorCB);

                db.executeSql('DELETE FROM phone WHERE id = ?', [phone.id]);
                this.select();
            }
        }, {
            key: "select",
            value: function select() {
                var _this3 = this;

                var db = _reactNativeSqliteStorage2.default.openDatabase('syncapp', '1.0', 'SyncApp Database', 200000, this.openCB, this.errorCB);

                db.transaction(function (tx) {
                    tx.executeSql('SELECT * FROM phone WHERE customer_id = ?;', [_this3.state.customer.id], function (tx, results) {
                        var len = results.rows.length;

                        _this3.setState({
                            phones: []
                        });

                        for (var i = 0; i < len; i++) {
                            var row = results.rows.item(i);

                            var joined = _this3.state.phones.concat(row);

                            _this3.setState({
                                phones: joined
                            });
                        }
                    });
                });
            }
        }, {
            key: "errorCB",
            value: function errorCB(err) {
                console.log("SQLite3 Error: " + err);
            }
        }, {
            key: "openCB",
            value: function openCB() {
                console.log("Database OPENED");
            }
        }, {
            key: "render",
            value: function render() {
                var _this4 = this;

                return _react2.default.createElement(
                    _nativeBase.Container,
                    {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 79
                        }
                    },
                    _react2.default.createElement(
                        _nativeBase.Header,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 80
                            }
                        },
                        _react2.default.createElement(
                            _nativeBase.Left,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 81
                                }
                            },
                            _react2.default.createElement(
                                _nativeBase.Button,
                                {
                                    transparent: true,
                                    onPress: function onPress() {
                                        return _this4.props.navigation.goBack();
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 82
                                    }
                                },
                                _react2.default.createElement(_reactNativeElements.Icon, {
                                    name: "arrow-back",
                                    color: "white",
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 83
                                    }
                                })
                            )
                        ),
                        _react2.default.createElement(
                            _nativeBase.Body,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 86
                                }
                            },
                            _react2.default.createElement(
                                _nativeBase.Title,
                                {
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 87
                                    }
                                },
                                this.state.customer.name
                            )
                        ),
                        _react2.default.createElement(
                            _nativeBase.Right,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 89
                                }
                            },
                            _react2.default.createElement(
                                _nativeBase.Button,
                                {
                                    transparent: true,
                                    onPress: function onPress() {
                                        return _this4.props.navigation.navigate('RegisterPhones', {
                                            customer: _this4.state.customer
                                        });
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 90
                                    }
                                },
                                _react2.default.createElement(_reactNativeElements.Icon, {
                                    name: "phone-plus",
                                    type: "material-community",
                                    color: "white",
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 91
                                    }
                                })
                            )
                        )
                    ),
                    _react2.default.createElement(_nativeBase.List, {
                        dataArray: this.state.phones,
                        renderRow: function renderRow(phone) {
                            return _react2.default.createElement(
                                _nativeBase.ListItem,
                                {
                                    onLongPress: function onLongPress() {
                                        return _reactNative.Alert.alert('Atenção!', 'Escolha uma ação a ser executada:', [{
                                            text: 'Cancelar',
                                            onPress: function onPress() {
                                                return console.log('Foi negado uma ação!');
                                            }
                                        }, {
                                            text: 'Apagar',
                                            onPress: function onPress() {
                                                _this4.delete(phone);
                                            }
                                        }, {
                                            text: 'Atualizar',
                                            onPress: function onPress() {
                                                _this4.props.navigation.navigate('UpdatePhone', {
                                                    phone: phone,
                                                    name: _this4.state.customer.name
                                                });
                                            }
                                        }], {
                                            cancelable: false
                                        });
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 97
                                    }
                                },
                                _react2.default.createElement(
                                    _nativeBase.Text,
                                    {
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 119
                                        }
                                    },
                                    phone.number
                                )
                            );
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 95
                        }
                    })
                );
            }
        }]);
        return ListPhonesScreen;
    }(_react.Component);

    exports.default = ListPhonesScreen;
},672,[108,12,673,403,400,671],"syncapp-mobile/screens/ListPhones.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Header = exports.Rating = exports.Avatar = exports.Slider = exports.Tile = exports.normalize = exports.registerCustomIconType = exports.getIconType = exports.colors = exports.Icon = exports.SearchBar = exports.CheckBox = exports.Divider = exports.Text = exports.SocialIcon = exports.PricingCard = exports.ListItem = exports.List = exports.FormValidationMessage = exports.FormLabel = exports.FormInput = exports.Card = exports.ButtonGroup = exports.Button = exports.Badge = undefined;

  var _Button = require(_dependencyMap[0], "./buttons/Button");

  var _Button2 = babelHelpers.interopRequireDefault(_Button);

  var _Icon = require(_dependencyMap[1], "./icons/Icon");

  var _Icon2 = babelHelpers.interopRequireDefault(_Icon);

  var _List = require(_dependencyMap[2], "./list/List");

  var _List2 = babelHelpers.interopRequireDefault(_List);

  var _ListItem = require(_dependencyMap[3], "./list/ListItem");

  var _ListItem2 = babelHelpers.interopRequireDefault(_ListItem);

  var _SocialIcon = require(_dependencyMap[4], "./social/SocialIcon");

  var _SocialIcon2 = babelHelpers.interopRequireDefault(_SocialIcon);

  var _badge = require(_dependencyMap[5], "./badge/badge");

  var _badge2 = babelHelpers.interopRequireDefault(_badge);

  var _CheckBox = require(_dependencyMap[6], "./checkbox/CheckBox");

  var _CheckBox2 = babelHelpers.interopRequireDefault(_CheckBox);

  var _Divider = require(_dependencyMap[7], "./divider/Divider");

  var _Divider2 = babelHelpers.interopRequireDefault(_Divider);

  var _Slider = require(_dependencyMap[8], "./slider/Slider");

  var _Slider2 = babelHelpers.interopRequireDefault(_Slider);

  var _ButtonGroup = require(_dependencyMap[9], "./buttons/ButtonGroup");

  var _ButtonGroup2 = babelHelpers.interopRequireDefault(_ButtonGroup);

  var _Card = require(_dependencyMap[10], "./card/Card");

  var _Card2 = babelHelpers.interopRequireDefault(_Card);

  var _Tile = require(_dependencyMap[11], "./tile/Tile");

  var _Tile2 = babelHelpers.interopRequireDefault(_Tile);

  var _Avatar = require(_dependencyMap[12], "./avatar/Avatar");

  var _Avatar2 = babelHelpers.interopRequireDefault(_Avatar);

  var _Rating = require(_dependencyMap[13], "./rating/Rating");

  var _Rating2 = babelHelpers.interopRequireDefault(_Rating);

  var _Header = require(_dependencyMap[14], "./header/Header");

  var _Header2 = babelHelpers.interopRequireDefault(_Header);

  var _PricingCard = require(_dependencyMap[15], "./pricing/PricingCard");

  var _PricingCard2 = babelHelpers.interopRequireDefault(_PricingCard);

  var _FormInput = require(_dependencyMap[16], "./form/FormInput");

  var _FormInput2 = babelHelpers.interopRequireDefault(_FormInput);

  var _FormLabel = require(_dependencyMap[17], "./form/FormLabel");

  var _FormLabel2 = babelHelpers.interopRequireDefault(_FormLabel);

  var _FormValidationMessage = require(_dependencyMap[18], "./form/FormValidationMessage");

  var _FormValidationMessage2 = babelHelpers.interopRequireDefault(_FormValidationMessage);

  var _Search = require(_dependencyMap[19], "./input/Search");

  var _Search2 = babelHelpers.interopRequireDefault(_Search);

  var _Text = require(_dependencyMap[20], "./text/Text");

  var _Text2 = babelHelpers.interopRequireDefault(_Text);

  var _colors = require(_dependencyMap[21], "./config/colors");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var _getIconType = require(_dependencyMap[22], "./helpers/getIconType");

  var _getIconType2 = babelHelpers.interopRequireDefault(_getIconType);

  var _normalizeText = require(_dependencyMap[23], "./helpers/normalizeText");

  var _normalizeText2 = babelHelpers.interopRequireDefault(_normalizeText);

  exports.Badge = _badge2.default;
  exports.Button = _Button2.default;
  exports.ButtonGroup = _ButtonGroup2.default;
  exports.Card = _Card2.default;
  exports.FormInput = _FormInput2.default;
  exports.FormLabel = _FormLabel2.default;
  exports.FormValidationMessage = _FormValidationMessage2.default;
  exports.List = _List2.default;
  exports.ListItem = _ListItem2.default;
  exports.PricingCard = _PricingCard2.default;
  exports.SocialIcon = _SocialIcon2.default;
  exports.Text = _Text2.default;
  exports.Divider = _Divider2.default;
  exports.CheckBox = _CheckBox2.default;
  exports.SearchBar = _Search2.default;
  exports.Icon = _Icon2.default;
  exports.colors = _colors2.default;
  exports.getIconType = _getIconType2.default;
  exports.registerCustomIconType = _getIconType.registerCustomIconType;
  exports.normalize = _normalizeText2.default;
  exports.Tile = _Tile2.default;
  exports.Slider = _Slider2.default;
  exports.Avatar = _Avatar2.default;
  exports.Rating = _Rating2.default;
  exports.Header = _Header2.default;
},673,[674,708,709,710,713,712,714,715,716,717,718,720,711,722,728,733,734,735,736,737,676,675,686,678],"react-native-elements/src/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-elements/src/buttons/Button.js";

  var _propTypes = require(_dependencyMap[0], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = require(_dependencyMap[1], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _colors = require(_dependencyMap[3], "../config/colors");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var _Text = require(_dependencyMap[4], "../text/Text");

  var _Text2 = babelHelpers.interopRequireDefault(_Text);

  var _MaterialIcons = require(_dependencyMap[5], "react-native-vector-icons/MaterialIcons");

  var _MaterialIcons2 = babelHelpers.interopRequireDefault(_MaterialIcons);

  var _getIconType = require(_dependencyMap[6], "../helpers/getIconType");

  var _getIconType2 = babelHelpers.interopRequireDefault(_getIconType);

  var _normalizeText = require(_dependencyMap[7], "../helpers/normalizeText");

  var _normalizeText2 = babelHelpers.interopRequireDefault(_normalizeText);

  var _ViewPropTypes = require(_dependencyMap[8], "../config/ViewPropTypes");

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var log = function log() {
    console.log('please attach method to this component');
  };

  var Button = function Button(props) {
    var disabled = props.disabled,
        loading = props.loading,
        loadingRight = props.loadingRight,
        activityIndicatorStyle = props.activityIndicatorStyle,
        buttonStyle = props.buttonStyle,
        borderRadius = props.borderRadius,
        title = props.title,
        onPress = props.onPress,
        icon = props.icon,
        iconComponent = props.iconComponent,
        secondary = props.secondary,
        secondary2 = props.secondary2,
        secondary3 = props.secondary3,
        primary1 = props.primary1,
        primary2 = props.primary2,
        backgroundColor = props.backgroundColor,
        color = props.color,
        fontSize = props.fontSize,
        underlayColor = props.underlayColor,
        raised = props.raised,
        textStyle = props.textStyle,
        large = props.large,
        iconRight = props.iconRight,
        fontWeight = props.fontWeight,
        disabledStyle = props.disabledStyle,
        disabledTextStyle = props.disabledTextStyle,
        fontFamily = props.fontFamily,
        containerViewStyle = props.containerViewStyle,
        rounded = props.rounded,
        outline = props.outline,
        transparent = props.transparent,
        textNumberOfLines = props.textNumberOfLines,
        textEllipsizeMode = props.textEllipsizeMode,
        allowFontScaling = props.allowFontScaling,
        attributes = babelHelpers.objectWithoutProperties(props, ["disabled", "loading", "loadingRight", "activityIndicatorStyle", "buttonStyle", "borderRadius", "title", "onPress", "icon", "iconComponent", "secondary", "secondary2", "secondary3", "primary1", "primary2", "backgroundColor", "color", "fontSize", "underlayColor", "raised", "textStyle", "large", "iconRight", "fontWeight", "disabledStyle", "disabledTextStyle", "fontFamily", "containerViewStyle", "rounded", "outline", "transparent", "textNumberOfLines", "textEllipsizeMode", "allowFontScaling"]);
    var Component = props.Component,
        rightIcon = props.rightIcon,
        leftIcon = props.leftIcon;
    var leftIconElement = void 0;

    if (!leftIcon && icon) {
      leftIcon = icon;
    }

    if (leftIcon) {
      var Icon = void 0;

      if (iconComponent) {
        Icon = iconComponent;
      } else if (!leftIcon.type) {
        Icon = _MaterialIcons2.default;
      } else {
        Icon = (0, _getIconType2.default)(leftIcon.type);
      }

      leftIconElement = _react2.default.createElement(Icon, babelHelpers.extends({}, leftIcon, {
        color: leftIcon.color || 'white',
        size: leftIcon.size || (large ? 26 : 18),
        style: [styles.icon, leftIcon.style && leftIcon.style],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 77
        }
      }));
    }

    var rightIconElement = void 0;

    if (iconRight || rightIcon) {
      if (!rightIcon) {
        rightIcon = iconRight;
      }

      var _Icon = void 0;

      if (iconComponent) {
        _Icon = iconComponent;
      } else if (!rightIcon.type) {
        _Icon = _MaterialIcons2.default;
      } else {
        _Icon = (0, _getIconType2.default)(rightIcon.type);
      }

      rightIconElement = _react2.default.createElement(_Icon, babelHelpers.extends({}, rightIcon, {
        color: rightIcon.color || 'white',
        size: rightIcon.size || (large ? 26 : 18),
        style: [styles.iconRight, rightIcon.style && rightIcon.style],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 99
        }
      }));
    }

    var loadingElement = void 0;

    if (loading) {
      loadingElement = _react2.default.createElement(_reactNative.ActivityIndicator, {
        animating: true,
        style: [styles.activityIndicatorStyle, activityIndicatorStyle],
        color: color || 'white',
        size: large && 'large' || 'small',
        __source: {
          fileName: _jsxFileName,
          lineNumber: 110
        }
      });
    }

    if (!Component && _reactNative.Platform.OS === 'ios') {
      Component = _reactNative.TouchableHighlight;
    }

    if (!Component && _reactNative.Platform.OS === 'android') {
      Component = _reactNative.TouchableNativeFeedback;
    }

    if (!Component) {
      Component = _reactNative.TouchableHighlight;
    }

    if (_reactNative.Platform.OS === 'android' && borderRadius && !attributes.background) {
      if (_reactNative.Platform.Version >= 21) {
        attributes.background = _reactNative.TouchableNativeFeedback.Ripple('ThemeAttrAndroid', true);
      } else {
        attributes.background = _reactNative.TouchableNativeFeedback.SelectableBackground();
      }
    }

    var baseFont = {
      color: textStyle && textStyle.color || color || stylesObject.text.color,
      size: textStyle && textStyle.fontSize || fontSize || !large && stylesObject.smallFont.fontSize || stylesObject.text.fontSize
    };
    var textOptions = {};

    if (textNumberOfLines) {
      textOptions.numberOfLines = textNumberOfLines;

      if (textEllipsizeMode) {
        textOptions.ellipsizeMode = textEllipsizeMode;
      }
    }

    return _react2.default.createElement(
      _reactNative.View,
      {
        style: [styles.container, raised && styles.raised, containerViewStyle, borderRadius && {
          borderRadius: borderRadius
        }],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 157
        }
      },
      _react2.default.createElement(
        Component,
        babelHelpers.extends({}, attributes, {
          underlayColor: underlayColor || 'transparent',
          onPress: onPress || log,
          disabled: disabled || false,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 165
          }
        }),
        _react2.default.createElement(
          _reactNative.View,
          {
            pointerEvents: "box-only",
            style: [styles.button, secondary && {
              backgroundColor: _colors2.default.secondary
            }, secondary2 && {
              backgroundColor: _colors2.default.secondary2
            }, secondary3 && {
              backgroundColor: _colors2.default.secondary3
            }, primary1 && {
              backgroundColor: _colors2.default.primary1
            }, primary2 && {
              backgroundColor: _colors2.default.primary2
            }, backgroundColor && {
              backgroundColor: backgroundColor
            }, borderRadius && {
              borderRadius: borderRadius
            }, !large && styles.small, rounded && {
              borderRadius: baseFont.size * 3.8,
              paddingHorizontal: !large ? stylesObject.small.padding * 1.5 : stylesObject.button.padding * 1.5
            }, outline && {
              borderWidth: 1,
              backgroundColor: 'transparent',
              borderColor: baseFont.color
            }, transparent && {
              borderWidth: 0,
              backgroundColor: 'transparent'
            }, buttonStyle && buttonStyle, disabled && {
              backgroundColor: _colors2.default.disabled
            }, disabled && disabledStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 171
            }
          },
          icon && !iconRight || leftIconElement ? leftIconElement : null,
          loading && !loadingRight && loadingElement,
          _react2.default.createElement(
            _Text2.default,
            babelHelpers.extends({
              style: [styles.text, color && {
                color: color
              }, !large && styles.smallFont, fontSize && {
                fontSize: fontSize
              }, textStyle && textStyle, fontWeight && {
                fontWeight: fontWeight
              }, fontFamily && {
                fontFamily: fontFamily
              }, disabled && disabledTextStyle]
            }, textOptions, {
              allowFontScaling: allowFontScaling,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 205
              }
            }),
            title
          ),
          loading && loadingRight && loadingElement,
          icon && iconRight || rightIconElement ? rightIconElement : null
        )
      )
    );
  };

  Button.propTypes = {
    buttonStyle: _ViewPropTypes2.default.style,
    title: _propTypes2.default.string,
    onPress: _propTypes2.default.any,
    icon: _propTypes2.default.object,
    leftIcon: _propTypes2.default.object,
    rightIcon: _propTypes2.default.object,
    iconRight: _propTypes2.default.object,
    iconComponent: _propTypes2.default.any,
    secondary: _propTypes2.default.bool,
    secondary2: _propTypes2.default.bool,
    secondary3: _propTypes2.default.bool,
    primary1: _propTypes2.default.bool,
    primary2: _propTypes2.default.bool,
    backgroundColor: _propTypes2.default.string,
    color: _propTypes2.default.string,
    fontSize: _propTypes2.default.any,
    underlayColor: _propTypes2.default.string,
    raised: _propTypes2.default.bool,
    textStyle: _reactNative.Text.propTypes.style,
    disabled: _propTypes2.default.bool,
    loading: _propTypes2.default.bool,
    activityIndicatorStyle: _ViewPropTypes2.default.style,
    loadingRight: _propTypes2.default.bool,
    Component: _propTypes2.default.any,
    borderRadius: _propTypes2.default.number,
    large: _propTypes2.default.bool,
    fontWeight: _propTypes2.default.string,
    disabledStyle: _ViewPropTypes2.default.style,
    disabledTextStyle: _reactNative.Text.propTypes.style,
    fontFamily: _propTypes2.default.string,
    containerViewStyle: _ViewPropTypes2.default.style,
    rounded: _propTypes2.default.bool,
    outline: _propTypes2.default.bool,
    transparent: _propTypes2.default.bool,
    allowFontScaling: _propTypes2.default.bool,
    textNumberOfLines: _propTypes2.default.number,
    textEllipsizeMode: _propTypes2.default.string
  };
  var stylesObject = {
    container: {
      marginLeft: 15,
      marginRight: 15
    },
    button: {
      padding: 19,
      backgroundColor: _colors2.default.primary,
      justifyContent: 'center',
      alignItems: 'center',
      flexDirection: 'row'
    },
    text: {
      color: 'white',
      fontSize: (0, _normalizeText2.default)(16)
    },
    icon: {
      marginRight: 10
    },
    iconRight: {
      marginLeft: 10
    },
    small: {
      padding: 12
    },
    smallFont: {
      fontSize: (0, _normalizeText2.default)(14)
    },
    activityIndicatorStyle: {
      marginHorizontal: 10,
      height: 0
    },
    raised: babelHelpers.extends({}, _reactNative.Platform.select({
      ios: {
        shadowColor: 'rgba(0,0,0, .4)',
        shadowOffset: {
          height: 1,
          width: 1
        },
        shadowOpacity: 1,
        shadowRadius: 1
      },
      android: {
        backgroundColor: '#fff',
        elevation: 2
      }
    }))
  };

  var styles = _reactNative.StyleSheet.create(stylesObject);

  exports.default = Button;
},674,[127,108,12,675,676,679,686,678,707],"react-native-elements/src/buttons/Button.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    primary: '#9E9E9E',
    primary1: '#4d86f7',
    primary2: '#6296f9',
    secondary: '#8F0CE8',
    secondary2: '#00B233',
    secondary3: '#00FF48',
    grey0: '#393e42',
    grey1: '#43484d',
    grey2: '#5e6977',
    grey3: '#86939e',
    grey4: '#bdc6cf',
    grey5: '#e1e8ee',
    dkGreyBg: '#232323',
    greyOutline: '#bbb',
    searchBg: '#303337',
    disabled: '#dadee0',
    white: '#ffffff',
    error: '#ff190c'
  };
},675,[],"react-native-elements/src/config/colors.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-elements/src/text/Text.js";

  var _propTypes = require(_dependencyMap[0], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = require(_dependencyMap[1], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _fonts = require(_dependencyMap[3], "../config/fonts");

  var _fonts2 = babelHelpers.interopRequireDefault(_fonts);

  var _normalizeText = require(_dependencyMap[4], "../helpers/normalizeText");

  var _normalizeText2 = babelHelpers.interopRequireDefault(_normalizeText);

  var styles = _reactNative.StyleSheet.create({
    text: babelHelpers.extends({}, _reactNative.Platform.select({
      android: babelHelpers.extends({}, _fonts2.default.android.regular)
    })),
    bold: babelHelpers.extends({}, _reactNative.Platform.select({
      android: babelHelpers.extends({}, _fonts2.default.android.bold)
    }))
  });

  var TextElement = function TextElement(props) {
    var style = props.style,
        children = props.children,
        h1 = props.h1,
        h2 = props.h2,
        h3 = props.h3,
        h4 = props.h4,
        fontFamily = props.fontFamily,
        rest = babelHelpers.objectWithoutProperties(props, ["style", "children", "h1", "h2", "h3", "h4", "fontFamily"]);
    return _react2.default.createElement(
      _reactNative.Text,
      babelHelpers.extends({
        style: [styles.text, h1 && {
          fontSize: (0, _normalizeText2.default)(40)
        }, h2 && {
          fontSize: (0, _normalizeText2.default)(34)
        }, h3 && {
          fontSize: (0, _normalizeText2.default)(28)
        }, h4 && {
          fontSize: (0, _normalizeText2.default)(22)
        }, h1 && styles.bold, h2 && styles.bold, h3 && styles.bold, h4 && styles.bold, fontFamily && {
          fontFamily: fontFamily
        }, style && style]
      }, rest, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 28
        }
      }),
      children
    );
  };

  TextElement.propTypes = {
    style: _propTypes2.default.any,
    h1: _propTypes2.default.bool,
    h2: _propTypes2.default.bool,
    h3: _propTypes2.default.bool,
    h4: _propTypes2.default.bool,
    fontFamily: _propTypes2.default.string,
    children: _propTypes2.default.any
  };
  exports.default = TextElement;
},676,[127,108,12,677,678],"react-native-elements/src/text/Text.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    ios: {},
    android: {
      regular: {
        fontFamily: 'sans-serif'
      },
      light: {
        fontFamily: 'sans-serif-light'
      },
      condensed: {
        fontFamily: 'sans-serif-condensed'
      },
      condensed_light: {
        fontFamily: 'sans-serif-condensed',
        fontWeight: 'light'
      },
      black: {
        fontFamily: 'sans-serif',
        fontWeight: 'bold'
      },
      thin: {
        fontFamily: 'sans-serif-thin'
      },
      medium: {
        fontFamily: 'sans-serif-medium'
      },
      bold: {
        fontFamily: 'sans-serif',
        fontWeight: 'bold'
      }
    }
  };
},677,[],"react-native-elements/src/config/fonts.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var React = require(_dependencyMap[0], 'react-native');

  var PixelRatio = React.PixelRatio,
      Dimensions = React.Dimensions;
  var pixelRatio = PixelRatio.get();
  var deviceHeight = Dimensions.get('window').height;
  var deviceWidth = Dimensions.get('window').width;

  var normalize = function normalize(size) {
    if (pixelRatio >= 2 && pixelRatio < 3) {
      if (deviceWidth < 360) {
        return size * 0.95;
      }

      if (deviceHeight < 667) {
        return size;
      } else if (deviceHeight >= 667 && deviceHeight <= 735) {
        return size * 1.15;
      }

      return size * 1.25;
    } else if (pixelRatio >= 3 && pixelRatio < 3.5) {
      if (deviceWidth <= 360) {
        return size;
      }

      if (deviceHeight < 667) {
        return size * 1.15;
      }

      if (deviceHeight >= 667 && deviceHeight <= 735) {
        return size * 1.2;
      }

      return size * 1.27;
    } else if (pixelRatio >= 3.5) {
      if (deviceWidth <= 360) {
        return size;
      }

      if (deviceHeight < 667) {
        return size * 1.2;
      }

      if (deviceHeight >= 667 && deviceHeight <= 735) {
        return size * 1.25;
      }

      return size * 1.4;
    } else return size;
  };

  module.exports = normalize;
},678,[12],"react-native-elements/src/helpers/normalizeText.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  var _MaterialIcons = require(_dependencyMap[1], "./glyphmaps/MaterialIcons.json");

  var _MaterialIcons2 = babelHelpers.interopRequireDefault(_MaterialIcons);

  var iconSet = (0, _createIconSet2.default)(_MaterialIcons2.default, 'Material Icons', 'MaterialIcons.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},679,[680,685],"react-native-vector-icons/MaterialIcons.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-vector-icons/lib/create-icon-set.js";
  exports.default = createIconSet;

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "./react-native");

  var _iconButton = require(_dependencyMap[3], "./icon-button");

  var _iconButton2 = babelHelpers.interopRequireDefault(_iconButton);

  var _tabBarItemIos = require(_dependencyMap[4], "./tab-bar-item-ios");

  var _tabBarItemIos2 = babelHelpers.interopRequireDefault(_tabBarItemIos);

  var _toolbarAndroid = require(_dependencyMap[5], "./toolbar-android");

  var _toolbarAndroid2 = babelHelpers.interopRequireDefault(_toolbarAndroid);

  var NativeIconAPI = _reactNative.NativeModules.RNVectorIconsManager || _reactNative.NativeModules.RNVectorIconsModule;
  var DEFAULT_ICON_SIZE = 12;
  var DEFAULT_ICON_COLOR = 'black';

  function createIconSet(glyphMap, fontFamily, fontFile) {
    var fontReference = fontFamily;

    if (_reactNative.Platform.OS === 'android' && fontFile) {
      fontReference = fontFile.replace(/\.(otf|ttf)$/, '');
    }

    if (_reactNative.Platform.OS === 'windows' && fontFile) {
      fontReference = "Assets/" + fontFile + "#" + fontFamily;
    }

    var IconNamePropType = _propTypes2.default.oneOf(Object.keys(glyphMap));

    var Icon = function (_PureComponent) {
      babelHelpers.inherits(Icon, _PureComponent);

      function Icon() {
        var _ref;

        var _temp, _this, _ret;

        babelHelpers.classCallCheck(this, Icon);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = Icon.__proto__ || Object.getPrototypeOf(Icon)).call.apply(_ref, [this].concat(args))), _this), _this.root = null, _this.handleRef = function (ref) {
          _this.root = ref;
        }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
      }

      babelHelpers.createClass(Icon, [{
        key: "setNativeProps",
        value: function setNativeProps(nativeProps) {
          if (this.root) {
            this.root.setNativeProps(nativeProps);
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _props = this.props,
              name = _props.name,
              size = _props.size,
              color = _props.color,
              style = _props.style,
              props = babelHelpers.objectWithoutProperties(_props, ["name", "size", "color", "style"]);
          var glyph = name ? glyphMap[name] || '?' : '';

          if (typeof glyph === 'number') {
            glyph = String.fromCharCode(glyph);
          }

          var styleDefaults = {
            fontSize: size,
            color: color
          };
          var styleOverrides = {
            fontFamily: fontReference,
            fontWeight: 'normal',
            fontStyle: 'normal'
          };
          props.style = [styleDefaults, style, styleOverrides];
          props.ref = this.handleRef;
          return _react2.default.createElement(
            _reactNative.Text,
            babelHelpers.extends({}, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 82
              }
            }),
            glyph,
            this.props.children
          );
        }
      }]);
      return Icon;
    }(_react.PureComponent);

    Icon.propTypes = {
      name: IconNamePropType,
      size: _propTypes2.default.number,
      color: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
      children: _propTypes2.default.node,
      style: _propTypes2.default.any
    };
    Icon.defaultProps = {
      size: DEFAULT_ICON_SIZE,
      allowFontScaling: false
    };
    var imageSourceCache = {};

    function ensureNativeModuleAvailable() {
      if (!NativeIconAPI) {
        if (_reactNative.Platform.OS === 'android') {
          throw new Error('RNVectorIconsModule not available, did you properly integrate the module? Try running `react-native link react-native-vector-icons` and recompiling.');
        }

        throw new Error('RNVectorIconsManager not available, did you add the library to your project and link with libRNVectorIcons.a? Try running `react-native link react-native-vector-icons` and recompiling.');
      }
    }

    function getImageSource(name) {
      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;
      var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;
      ensureNativeModuleAvailable();
      var glyph = glyphMap[name] || '?';

      if (typeof glyph === 'number') {
        glyph = String.fromCharCode(glyph);
      }

      var processedColor = (0, _reactNative.processColor)(color);
      var cacheKey = glyph + ":" + size + ":" + processedColor;

      var scale = _reactNative.PixelRatio.get();

      return new Promise(function (resolve, reject) {
        var cached = imageSourceCache[cacheKey];

        if (typeof cached !== 'undefined') {
          if (!cached || cached instanceof Error) {
            reject(cached);
          } else {
            resolve({
              uri: cached,
              scale: scale
            });
          }
        } else {
          NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor, function (err, image) {
            var error = typeof err === 'string' ? new Error(err) : err;
            imageSourceCache[cacheKey] = image || error || false;

            if (!error && image) {
              resolve({
                uri: image,
                scale: scale
              });
            } else {
              reject(error);
            }
          });
        }
      });
    }

    function loadFont() {
      var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : fontFile;

      if (_reactNative.Platform.OS === 'ios') {
        ensureNativeModuleAvailable();

        if (!file) {
          return Promise.reject(new Error('Unable to load font, because no file was specified. '));
        }

        return NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI, babelHelpers.toConsumableArray(file.split('.')));
      }

      return Promise.resolve();
    }

    Icon.Button = (0, _iconButton2.default)(Icon);
    Icon.TabBarItem = (0, _tabBarItemIos2.default)(IconNamePropType, getImageSource);
    Icon.TabBarItemIOS = Icon.TabBarItem;
    Icon.ToolbarAndroid = (0, _toolbarAndroid2.default)(IconNamePropType, getImageSource);
    Icon.getImageSource = getImageSource;
    Icon.loadFont = loadFont;
    return Icon;
  }
},680,[108,127,681,682,683,684],"react-native-vector-icons/lib/create-icon-set.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  Object.keys(_reactNative).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _reactNative[key];
      }
    });
  });
},681,[12],"react-native-vector-icons/lib/react-native.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-vector-icons/lib/icon-button.js";
  exports.default = createIconButtonComponent;

  var _isString = require(_dependencyMap[0], "lodash/isString");

  var _isString2 = babelHelpers.interopRequireDefault(_isString);

  var _omit = require(_dependencyMap[1], "lodash/omit");

  var _omit2 = babelHelpers.interopRequireDefault(_omit);

  var _pick = require(_dependencyMap[2], "lodash/pick");

  var _pick2 = babelHelpers.interopRequireDefault(_pick);

  var _react = require(_dependencyMap[3], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[4], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[5], "./react-native");

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row',
      justifyContent: 'flex-start',
      alignItems: 'center',
      padding: 8
    },
    touchable: {
      overflow: 'hidden'
    },
    icon: {
      marginRight: 10
    },
    text: {
      fontWeight: '600',
      backgroundColor: 'transparent'
    }
  });

  var IOS7_BLUE = '#007AFF';

  function createIconButtonComponent(Icon) {
    var _class, _temp;

    return _temp = _class = function (_PureComponent) {
      babelHelpers.inherits(IconButton, _PureComponent);

      function IconButton() {
        babelHelpers.classCallCheck(this, IconButton);
        return babelHelpers.possibleConstructorReturn(this, (IconButton.__proto__ || Object.getPrototypeOf(IconButton)).apply(this, arguments));
      }

      babelHelpers.createClass(IconButton, [{
        key: "render",
        value: function render() {
          var _props = this.props,
              style = _props.style,
              iconStyle = _props.iconStyle,
              children = _props.children,
              restProps = babelHelpers.objectWithoutProperties(_props, ["style", "iconStyle", "children"]);
          var iconProps = (0, _pick2.default)(restProps, Object.keys(_reactNative.Text.propTypes), 'style', 'name', 'size', 'color');
          var touchableProps = (0, _pick2.default)(restProps, Object.keys(_reactNative.TouchableHighlight.propTypes));
          var props = (0, _omit2.default)(restProps, Object.keys(iconProps), Object.keys(touchableProps), 'iconStyle', 'borderRadius', 'backgroundColor');
          iconProps.style = iconStyle ? [styles.icon, iconStyle] : styles.icon;
          var colorStyle = (0, _pick2.default)(this.props, 'color');
          var blockStyle = (0, _pick2.default)(this.props, 'backgroundColor', 'borderRadius');
          return _react2.default.createElement(
            _reactNative.TouchableHighlight,
            babelHelpers.extends({
              style: [styles.touchable, blockStyle]
            }, touchableProps, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 80
              }
            }),
            _react2.default.createElement(
              _reactNative.View,
              babelHelpers.extends({
                style: [styles.container, blockStyle, style]
              }, props, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 84
                }
              }),
              _react2.default.createElement(Icon, babelHelpers.extends({}, iconProps, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 85
                }
              })),
              (0, _isString2.default)(children) ? _react2.default.createElement(
                _reactNative.Text,
                {
                  style: [styles.text, colorStyle],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 87
                  }
                },
                children
              ) : children
            )
          );
        }
      }]);
      return IconButton;
    }(_react.PureComponent), _class.propTypes = {
      backgroundColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
      borderRadius: _propTypes2.default.number,
      color: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
      size: _propTypes2.default.number,
      iconStyle: _propTypes2.default.any,
      style: _propTypes2.default.any,
      children: _propTypes2.default.node
    }, _class.defaultProps = {
      backgroundColor: IOS7_BLUE,
      borderRadius: 5,
      color: 'white',
      size: 20
    }, _temp;
  }
},682,[497,500,569,108,127,681],"react-native-vector-icons/lib/icon-button.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-vector-icons/lib/tab-bar-item-ios.js";
  exports.default = createTabBarItemIOSComponent;

  var _isEqual = require(_dependencyMap[0], "lodash/isEqual");

  var _isEqual2 = babelHelpers.interopRequireDefault(_isEqual);

  var _pick = require(_dependencyMap[1], "lodash/pick");

  var _pick2 = babelHelpers.interopRequireDefault(_pick);

  var _react = require(_dependencyMap[2], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[3], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[4], "./react-native");

  function createTabBarItemIOSComponent(IconNamePropType, getImageSource) {
    var _class, _temp;

    return _temp = _class = function (_PureComponent) {
      babelHelpers.inherits(TabBarItemIOS, _PureComponent);

      function TabBarItemIOS() {
        babelHelpers.classCallCheck(this, TabBarItemIOS);
        return babelHelpers.possibleConstructorReturn(this, (TabBarItemIOS.__proto__ || Object.getPrototypeOf(TabBarItemIOS)).apply(this, arguments));
      }

      babelHelpers.createClass(TabBarItemIOS, [{
        key: "componentWillMount",
        value: function componentWillMount() {
          this.updateIconSources(this.props);
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
          var keys = Object.keys(TabBarItemIOS.propTypes);

          if (!(0, _isEqual2.default)((0, _pick2.default)(nextProps, keys), (0, _pick2.default)(this.props, keys))) {
            this.updateIconSources(nextProps);
          }
        }
      }, {
        key: "updateIconSources",
        value: function updateIconSources(props) {
          var _this2 = this;

          if (props.iconName) {
            getImageSource(props.iconName, props.iconSize, props.iconColor).then(function (icon) {
              return _this2.setState({
                icon: icon
              });
            });
          }

          if (props.selectedIconName || props.selectedIconColor) {
            var selectedIconName = props.selectedIconName || props.iconName;
            var selectedIconColor = props.selectedIconColor || props.iconColor;
            getImageSource(selectedIconName, props.iconSize, selectedIconColor).then(function (selectedIcon) {
              return _this2.setState({
                selectedIcon: selectedIcon
              });
            });
          }
        }
      }, {
        key: "render",
        value: function render() {
          return _react2.default.createElement(_reactNative.TabBarIOS.Item, babelHelpers.extends({}, this.props, this.state, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 59
            }
          }));
        }
      }]);
      return TabBarItemIOS;
    }(_react.PureComponent), _class.propTypes = {
      iconName: IconNamePropType.isRequired,
      selectedIconName: IconNamePropType,
      iconSize: _propTypes2.default.number,
      iconColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
      selectedIconColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
    }, _class.defaultProps = {
      iconSize: 30
    }, _temp;
  }
},683,[571,569,108,127,681],"react-native-vector-icons/lib/tab-bar-item-ios.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-vector-icons/lib/toolbar-android.js";
  exports.default = createToolbarAndroidComponent;

  var _isEqual = require(_dependencyMap[0], "lodash/isEqual");

  var _isEqual2 = babelHelpers.interopRequireDefault(_isEqual);

  var _pick = require(_dependencyMap[1], "lodash/pick");

  var _pick2 = babelHelpers.interopRequireDefault(_pick);

  var _react = require(_dependencyMap[2], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[3], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[4], "./react-native");

  function createToolbarAndroidComponent(IconNamePropType, getImageSource) {
    var _class, _temp;

    return _temp = _class = function (_PureComponent) {
      babelHelpers.inherits(IconToolbarAndroid, _PureComponent);

      function IconToolbarAndroid() {
        babelHelpers.classCallCheck(this, IconToolbarAndroid);
        return babelHelpers.possibleConstructorReturn(this, (IconToolbarAndroid.__proto__ || Object.getPrototypeOf(IconToolbarAndroid)).apply(this, arguments));
      }

      babelHelpers.createClass(IconToolbarAndroid, [{
        key: "componentWillMount",
        value: function componentWillMount() {
          this.updateIconSources(this.props);
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
          var _this2 = this;

          var keys = Object.keys(IconToolbarAndroid.propTypes);

          if (!(0, _isEqual2.default)((0, _pick2.default)(nextProps, keys), (0, _pick2.default)(this.props, keys))) {
            var stateToEvict = {};

            if (!nextProps.logoName) {
              stateToEvict.logo = undefined;
            }

            if (!nextProps.navIconName) {
              stateToEvict.navIcon = undefined;
            }

            if (!nextProps.overflowIconName) {
              stateToEvict.overflowIcon = undefined;
            }

            if (this.state && Object.keys(stateToEvict).length) {
              this.setState(stateToEvict, function () {
                return _this2.updateIconSources(nextProps);
              });
            } else {
              this.updateIconSources(nextProps);
            }
          }
        }
      }, {
        key: "updateIconSources",
        value: function updateIconSources(props) {
          var _this3 = this;

          var size = props.iconSize;
          var color = props.iconColor || props.titleColor;

          if (props.logoName) {
            getImageSource(props.logoName, size, color).then(function (logo) {
              return _this3.setState({
                logo: logo
              });
            });
          }

          if (props.navIconName) {
            getImageSource(props.navIconName, size, color).then(function (navIcon) {
              return _this3.setState({
                navIcon: navIcon
              });
            });
          }

          if (props.overflowIconName) {
            getImageSource(props.overflowIconName, size, color).then(function (overflowIcon) {
              return _this3.setState({
                overflowIcon: overflowIcon
              });
            });
          }

          Promise.all((props.actions || []).map(function (action) {
            if (action.iconName) {
              return getImageSource(action.iconName, action.iconSize || size, action.iconColor || color).then(function (icon) {
                return babelHelpers.extends({}, action, {
                  icon: icon
                });
              });
            }

            return Promise.resolve(action);
          })).then(function (actions) {
            return _this3.setState({
              actions: actions
            });
          });
        }
      }, {
        key: "render",
        value: function render() {
          return _react2.default.createElement(_reactNative.ToolbarAndroid, babelHelpers.extends({}, this.props, this.state, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 94
            }
          }));
        }
      }]);
      return IconToolbarAndroid;
    }(_react.PureComponent), _class.propTypes = {
      logoName: IconNamePropType,
      navIconName: IconNamePropType,
      overflowIconName: IconNamePropType,
      actions: _propTypes2.default.arrayOf(_propTypes2.default.shape({
        title: _propTypes2.default.string.isRequired,
        iconName: IconNamePropType,
        iconSize: _propTypes2.default.number,
        iconColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
        show: _propTypes2.default.oneOf(['always', 'ifRoom', 'never']),
        showWithText: _propTypes2.default.bool
      })),
      iconSize: _propTypes2.default.number,
      iconColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
    }, _class.defaultProps = {
      iconSize: 24
    }, _temp;
  }
},684,[571,569,108,127,681],"react-native-vector-icons/lib/toolbar-android.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    "3d-rotation": 59469,
    "ac-unit": 60219,
    "access-alarm": 57744,
    "access-alarms": 57745,
    "access-time": 57746,
    "accessibility": 59470,
    "accessible": 59668,
    "account-balance": 59471,
    "account-balance-wallet": 59472,
    "account-box": 59473,
    "account-circle": 59475,
    "adb": 58894,
    "add": 57669,
    "add-a-photo": 58425,
    "add-alarm": 57747,
    "add-alert": 57347,
    "add-box": 57670,
    "add-circle": 57671,
    "add-circle-outline": 57672,
    "add-location": 58727,
    "add-shopping-cart": 59476,
    "add-to-photos": 58269,
    "add-to-queue": 57436,
    "adjust": 58270,
    "airline-seat-flat": 58928,
    "airline-seat-flat-angled": 58929,
    "airline-seat-individual-suite": 58930,
    "airline-seat-legroom-extra": 58931,
    "airline-seat-legroom-normal": 58932,
    "airline-seat-legroom-reduced": 58933,
    "airline-seat-recline-extra": 58934,
    "airline-seat-recline-normal": 58935,
    "airplanemode-active": 57749,
    "airplanemode-inactive": 57748,
    "airplay": 57429,
    "airport-shuttle": 60220,
    "alarm": 59477,
    "alarm-add": 59478,
    "alarm-off": 59479,
    "alarm-on": 59480,
    "album": 57369,
    "all-inclusive": 60221,
    "all-out": 59659,
    "android": 59481,
    "announcement": 59482,
    "apps": 58819,
    "archive": 57673,
    "arrow-back": 58820,
    "arrow-downward": 58843,
    "arrow-drop-down": 58821,
    "arrow-drop-down-circle": 58822,
    "arrow-drop-up": 58823,
    "arrow-forward": 58824,
    "arrow-upward": 58840,
    "art-track": 57440,
    "aspect-ratio": 59483,
    "assessment": 59484,
    "assignment": 59485,
    "assignment-ind": 59486,
    "assignment-late": 59487,
    "assignment-return": 59488,
    "assignment-returned": 59489,
    "assignment-turned-in": 59490,
    "assistant": 58271,
    "assistant-photo": 58272,
    "attach-file": 57894,
    "attach-money": 57895,
    "attachment": 58044,
    "audiotrack": 58273,
    "autorenew": 59491,
    "av-timer": 57371,
    "backspace": 57674,
    "backup": 59492,
    "battery-alert": 57756,
    "battery-charging-full": 57763,
    "battery-full": 57764,
    "battery-std": 57765,
    "battery-unknown": 57766,
    "beach-access": 60222,
    "beenhere": 58669,
    "block": 57675,
    "bluetooth": 57767,
    "bluetooth-audio": 58895,
    "bluetooth-connected": 57768,
    "bluetooth-disabled": 57769,
    "bluetooth-searching": 57770,
    "blur-circular": 58274,
    "blur-linear": 58275,
    "blur-off": 58276,
    "blur-on": 58277,
    "book": 59493,
    "bookmark": 59494,
    "bookmark-border": 59495,
    "border-all": 57896,
    "border-bottom": 57897,
    "border-clear": 57898,
    "border-color": 57899,
    "border-horizontal": 57900,
    "border-inner": 57901,
    "border-left": 57902,
    "border-outer": 57903,
    "border-right": 57904,
    "border-style": 57905,
    "border-top": 57906,
    "border-vertical": 57907,
    "branding-watermark": 57451,
    "brightness-1": 58278,
    "brightness-2": 58279,
    "brightness-3": 58280,
    "brightness-4": 58281,
    "brightness-5": 58282,
    "brightness-6": 58283,
    "brightness-7": 58284,
    "brightness-auto": 57771,
    "brightness-high": 57772,
    "brightness-low": 57773,
    "brightness-medium": 57774,
    "broken-image": 58285,
    "brush": 58286,
    "bubble-chart": 59101,
    "bug-report": 59496,
    "build": 59497,
    "burst-mode": 58428,
    "business": 57519,
    "business-center": 60223,
    "cached": 59498,
    "cake": 59369,
    "call": 57520,
    "call-end": 57521,
    "call-made": 57522,
    "call-merge": 57523,
    "call-missed": 57524,
    "call-missed-outgoing": 57572,
    "call-received": 57525,
    "call-split": 57526,
    "call-to-action": 57452,
    "camera": 58287,
    "camera-alt": 58288,
    "camera-enhance": 59644,
    "camera-front": 58289,
    "camera-rear": 58290,
    "camera-roll": 58291,
    "cancel": 58825,
    "card-giftcard": 59638,
    "card-membership": 59639,
    "card-travel": 59640,
    "casino": 60224,
    "cast": 58119,
    "cast-connected": 58120,
    "center-focus-strong": 58292,
    "center-focus-weak": 58293,
    "change-history": 59499,
    "chat": 57527,
    "chat-bubble": 57546,
    "chat-bubble-outline": 57547,
    "check": 58826,
    "check-box": 59444,
    "check-box-outline-blank": 59445,
    "check-circle": 59500,
    "chevron-left": 58827,
    "chevron-right": 58828,
    "child-care": 60225,
    "child-friendly": 60226,
    "chrome-reader-mode": 59501,
    "class": 59502,
    "clear": 57676,
    "clear-all": 57528,
    "close": 58829,
    "closed-caption": 57372,
    "cloud": 58045,
    "cloud-circle": 58046,
    "cloud-done": 58047,
    "cloud-download": 58048,
    "cloud-off": 58049,
    "cloud-queue": 58050,
    "cloud-upload": 58051,
    "code": 59503,
    "collections": 58294,
    "collections-bookmark": 58417,
    "color-lens": 58295,
    "colorize": 58296,
    "comment": 57529,
    "compare": 58297,
    "compare-arrows": 59669,
    "computer": 58122,
    "confirmation-number": 58936,
    "contact-mail": 57552,
    "contact-phone": 57551,
    "contacts": 57530,
    "content-copy": 57677,
    "content-cut": 57678,
    "content-paste": 57679,
    "control-point": 58298,
    "control-point-duplicate": 58299,
    "copyright": 59660,
    "create": 57680,
    "create-new-folder": 58060,
    "credit-card": 59504,
    "crop": 58302,
    "crop-16-9": 58300,
    "crop-3-2": 58301,
    "crop-5-4": 58303,
    "crop-7-5": 58304,
    "crop-din": 58305,
    "crop-free": 58306,
    "crop-landscape": 58307,
    "crop-original": 58308,
    "crop-portrait": 58309,
    "crop-rotate": 58423,
    "crop-square": 58310,
    "dashboard": 59505,
    "data-usage": 57775,
    "date-range": 59670,
    "dehaze": 58311,
    "delete": 59506,
    "delete-forever": 59691,
    "delete-sweep": 57708,
    "description": 59507,
    "desktop-mac": 58123,
    "desktop-windows": 58124,
    "details": 58312,
    "developer-board": 58125,
    "developer-mode": 57776,
    "device-hub": 58165,
    "devices": 57777,
    "devices-other": 58167,
    "dialer-sip": 57531,
    "dialpad": 57532,
    "directions": 58670,
    "directions-bike": 58671,
    "directions-boat": 58674,
    "directions-bus": 58672,
    "directions-car": 58673,
    "directions-railway": 58676,
    "directions-run": 58726,
    "directions-subway": 58675,
    "directions-transit": 58677,
    "directions-walk": 58678,
    "disc-full": 58896,
    "dns": 59509,
    "do-not-disturb": 58898,
    "do-not-disturb-alt": 58897,
    "do-not-disturb-off": 58947,
    "do-not-disturb-on": 58948,
    "dock": 58126,
    "domain": 59374,
    "done": 59510,
    "done-all": 59511,
    "donut-large": 59671,
    "donut-small": 59672,
    "drafts": 57681,
    "drag-handle": 57949,
    "drive-eta": 58899,
    "dvr": 57778,
    "edit": 58313,
    "edit-location": 58728,
    "eject": 59643,
    "email": 57534,
    "enhanced-encryption": 58943,
    "equalizer": 57373,
    "error": 57344,
    "error-outline": 57345,
    "euro-symbol": 59686,
    "ev-station": 58733,
    "event": 59512,
    "event-available": 58900,
    "event-busy": 58901,
    "event-note": 58902,
    "event-seat": 59651,
    "exit-to-app": 59513,
    "expand-less": 58830,
    "expand-more": 58831,
    "explicit": 57374,
    "explore": 59514,
    "exposure": 58314,
    "exposure-neg-1": 58315,
    "exposure-neg-2": 58316,
    "exposure-plus-1": 58317,
    "exposure-plus-2": 58318,
    "exposure-zero": 58319,
    "extension": 59515,
    "face": 59516,
    "fast-forward": 57375,
    "fast-rewind": 57376,
    "favorite": 59517,
    "favorite-border": 59518,
    "featured-play-list": 57453,
    "featured-video": 57454,
    "feedback": 59519,
    "fiber-dvr": 57437,
    "fiber-manual-record": 57441,
    "fiber-new": 57438,
    "fiber-pin": 57450,
    "fiber-smart-record": 57442,
    "file-download": 58052,
    "file-upload": 58054,
    "filter": 58323,
    "filter-1": 58320,
    "filter-2": 58321,
    "filter-3": 58322,
    "filter-4": 58324,
    "filter-5": 58325,
    "filter-6": 58326,
    "filter-7": 58327,
    "filter-8": 58328,
    "filter-9": 58329,
    "filter-9-plus": 58330,
    "filter-b-and-w": 58331,
    "filter-center-focus": 58332,
    "filter-drama": 58333,
    "filter-frames": 58334,
    "filter-hdr": 58335,
    "filter-list": 57682,
    "filter-none": 58336,
    "filter-tilt-shift": 58338,
    "filter-vintage": 58339,
    "find-in-page": 59520,
    "find-replace": 59521,
    "fingerprint": 59661,
    "first-page": 58844,
    "fitness-center": 60227,
    "flag": 57683,
    "flare": 58340,
    "flash-auto": 58341,
    "flash-off": 58342,
    "flash-on": 58343,
    "flight": 58681,
    "flight-land": 59652,
    "flight-takeoff": 59653,
    "flip": 58344,
    "flip-to-back": 59522,
    "flip-to-front": 59523,
    "folder": 58055,
    "folder-open": 58056,
    "folder-shared": 58057,
    "folder-special": 58903,
    "font-download": 57703,
    "format-align-center": 57908,
    "format-align-justify": 57909,
    "format-align-left": 57910,
    "format-align-right": 57911,
    "format-bold": 57912,
    "format-clear": 57913,
    "format-color-fill": 57914,
    "format-color-reset": 57915,
    "format-color-text": 57916,
    "format-indent-decrease": 57917,
    "format-indent-increase": 57918,
    "format-italic": 57919,
    "format-line-spacing": 57920,
    "format-list-bulleted": 57921,
    "format-list-numbered": 57922,
    "format-paint": 57923,
    "format-quote": 57924,
    "format-shapes": 57950,
    "format-size": 57925,
    "format-strikethrough": 57926,
    "format-textdirection-l-to-r": 57927,
    "format-textdirection-r-to-l": 57928,
    "format-underlined": 57929,
    "forum": 57535,
    "forward": 57684,
    "forward-10": 57430,
    "forward-30": 57431,
    "forward-5": 57432,
    "free-breakfast": 60228,
    "fullscreen": 58832,
    "fullscreen-exit": 58833,
    "functions": 57930,
    "g-translate": 59687,
    "gamepad": 58127,
    "games": 57377,
    "gavel": 59662,
    "gesture": 57685,
    "get-app": 59524,
    "gif": 59656,
    "golf-course": 60229,
    "gps-fixed": 57779,
    "gps-not-fixed": 57780,
    "gps-off": 57781,
    "grade": 59525,
    "gradient": 58345,
    "grain": 58346,
    "graphic-eq": 57784,
    "grid-off": 58347,
    "grid-on": 58348,
    "group": 59375,
    "group-add": 59376,
    "group-work": 59526,
    "hd": 57426,
    "hdr-off": 58349,
    "hdr-on": 58350,
    "hdr-strong": 58353,
    "hdr-weak": 58354,
    "headset": 58128,
    "headset-mic": 58129,
    "healing": 58355,
    "hearing": 57379,
    "help": 59527,
    "help-outline": 59645,
    "high-quality": 57380,
    "highlight": 57951,
    "highlight-off": 59528,
    "history": 59529,
    "home": 59530,
    "hot-tub": 60230,
    "hotel": 58682,
    "hourglass-empty": 59531,
    "hourglass-full": 59532,
    "http": 59650,
    "https": 59533,
    "image": 58356,
    "image-aspect-ratio": 58357,
    "import-contacts": 57568,
    "import-export": 57539,
    "important-devices": 59666,
    "inbox": 57686,
    "indeterminate-check-box": 59657,
    "info": 59534,
    "info-outline": 59535,
    "input": 59536,
    "insert-chart": 57931,
    "insert-comment": 57932,
    "insert-drive-file": 57933,
    "insert-emoticon": 57934,
    "insert-invitation": 57935,
    "insert-link": 57936,
    "insert-photo": 57937,
    "invert-colors": 59537,
    "invert-colors-off": 57540,
    "iso": 58358,
    "keyboard": 58130,
    "keyboard-arrow-down": 58131,
    "keyboard-arrow-left": 58132,
    "keyboard-arrow-right": 58133,
    "keyboard-arrow-up": 58134,
    "keyboard-backspace": 58135,
    "keyboard-capslock": 58136,
    "keyboard-hide": 58138,
    "keyboard-return": 58139,
    "keyboard-tab": 58140,
    "keyboard-voice": 58141,
    "kitchen": 60231,
    "label": 59538,
    "label-outline": 59539,
    "landscape": 58359,
    "language": 59540,
    "laptop": 58142,
    "laptop-chromebook": 58143,
    "laptop-mac": 58144,
    "laptop-windows": 58145,
    "last-page": 58845,
    "launch": 59541,
    "layers": 58683,
    "layers-clear": 58684,
    "leak-add": 58360,
    "leak-remove": 58361,
    "lens": 58362,
    "library-add": 57390,
    "library-books": 57391,
    "library-music": 57392,
    "lightbulb-outline": 59663,
    "line-style": 59673,
    "line-weight": 59674,
    "linear-scale": 57952,
    "link": 57687,
    "linked-camera": 58424,
    "list": 59542,
    "live-help": 57542,
    "live-tv": 58937,
    "local-activity": 58687,
    "local-airport": 58685,
    "local-atm": 58686,
    "local-bar": 58688,
    "local-cafe": 58689,
    "local-car-wash": 58690,
    "local-convenience-store": 58691,
    "local-dining": 58710,
    "local-drink": 58692,
    "local-florist": 58693,
    "local-gas-station": 58694,
    "local-grocery-store": 58695,
    "local-hospital": 58696,
    "local-hotel": 58697,
    "local-laundry-service": 58698,
    "local-library": 58699,
    "local-mall": 58700,
    "local-movies": 58701,
    "local-offer": 58702,
    "local-parking": 58703,
    "local-pharmacy": 58704,
    "local-phone": 58705,
    "local-pizza": 58706,
    "local-play": 58707,
    "local-post-office": 58708,
    "local-printshop": 58709,
    "local-see": 58711,
    "local-shipping": 58712,
    "local-taxi": 58713,
    "location-city": 59377,
    "location-disabled": 57782,
    "location-off": 57543,
    "location-on": 57544,
    "location-searching": 57783,
    "lock": 59543,
    "lock-open": 59544,
    "lock-outline": 59545,
    "looks": 58364,
    "looks-3": 58363,
    "looks-4": 58365,
    "looks-5": 58366,
    "looks-6": 58367,
    "looks-one": 58368,
    "looks-two": 58369,
    "loop": 57384,
    "loupe": 58370,
    "low-priority": 57709,
    "loyalty": 59546,
    "mail": 57688,
    "mail-outline": 57569,
    "map": 58715,
    "markunread": 57689,
    "markunread-mailbox": 59547,
    "memory": 58146,
    "menu": 58834,
    "merge-type": 57938,
    "message": 57545,
    "mic": 57385,
    "mic-none": 57386,
    "mic-off": 57387,
    "mms": 58904,
    "mode-comment": 57939,
    "mode-edit": 57940,
    "monetization-on": 57955,
    "money-off": 57948,
    "monochrome-photos": 58371,
    "mood": 59378,
    "mood-bad": 59379,
    "more": 58905,
    "more-horiz": 58835,
    "more-vert": 58836,
    "motorcycle": 59675,
    "mouse": 58147,
    "move-to-inbox": 57704,
    "movie": 57388,
    "movie-creation": 58372,
    "movie-filter": 58426,
    "multiline-chart": 59103,
    "music-note": 58373,
    "music-video": 57443,
    "my-location": 58716,
    "nature": 58374,
    "nature-people": 58375,
    "navigate-before": 58376,
    "navigate-next": 58377,
    "navigation": 58717,
    "near-me": 58729,
    "network-cell": 57785,
    "network-check": 58944,
    "network-locked": 58906,
    "network-wifi": 57786,
    "new-releases": 57393,
    "next-week": 57706,
    "nfc": 57787,
    "no-encryption": 58945,
    "no-sim": 57548,
    "not-interested": 57395,
    "note": 57455,
    "note-add": 59548,
    "notifications": 59380,
    "notifications-active": 59383,
    "notifications-none": 59381,
    "notifications-off": 59382,
    "notifications-paused": 59384,
    "offline-pin": 59658,
    "ondemand-video": 58938,
    "opacity": 59676,
    "open-in-browser": 59549,
    "open-in-new": 59550,
    "open-with": 59551,
    "pages": 59385,
    "pageview": 59552,
    "palette": 58378,
    "pan-tool": 59685,
    "panorama": 58379,
    "panorama-fish-eye": 58380,
    "panorama-horizontal": 58381,
    "panorama-vertical": 58382,
    "panorama-wide-angle": 58383,
    "party-mode": 59386,
    "pause": 57396,
    "pause-circle-filled": 57397,
    "pause-circle-outline": 57398,
    "payment": 59553,
    "people": 59387,
    "people-outline": 59388,
    "perm-camera-mic": 59554,
    "perm-contact-calendar": 59555,
    "perm-data-setting": 59556,
    "perm-device-information": 59557,
    "perm-identity": 59558,
    "perm-media": 59559,
    "perm-phone-msg": 59560,
    "perm-scan-wifi": 59561,
    "person": 59389,
    "person-add": 59390,
    "person-outline": 59391,
    "person-pin": 58714,
    "person-pin-circle": 58730,
    "personal-video": 58939,
    "pets": 59677,
    "phone": 57549,
    "phone-android": 58148,
    "phone-bluetooth-speaker": 58907,
    "phone-forwarded": 58908,
    "phone-in-talk": 58909,
    "phone-iphone": 58149,
    "phone-locked": 58910,
    "phone-missed": 58911,
    "phone-paused": 58912,
    "phonelink": 58150,
    "phonelink-erase": 57563,
    "phonelink-lock": 57564,
    "phonelink-off": 58151,
    "phonelink-ring": 57565,
    "phonelink-setup": 57566,
    "photo": 58384,
    "photo-album": 58385,
    "photo-camera": 58386,
    "photo-filter": 58427,
    "photo-library": 58387,
    "photo-size-select-actual": 58418,
    "photo-size-select-large": 58419,
    "photo-size-select-small": 58420,
    "picture-as-pdf": 58389,
    "picture-in-picture": 59562,
    "picture-in-picture-alt": 59665,
    "pie-chart": 59076,
    "pie-chart-outlined": 59077,
    "pin-drop": 58718,
    "place": 58719,
    "play-arrow": 57399,
    "play-circle-filled": 57400,
    "play-circle-outline": 57401,
    "play-for-work": 59654,
    "playlist-add": 57403,
    "playlist-add-check": 57445,
    "playlist-play": 57439,
    "plus-one": 59392,
    "poll": 59393,
    "polymer": 59563,
    "pool": 60232,
    "portable-wifi-off": 57550,
    "portrait": 58390,
    "power": 58940,
    "power-input": 58166,
    "power-settings-new": 59564,
    "pregnant-woman": 59678,
    "present-to-all": 57567,
    "print": 59565,
    "priority-high": 58949,
    "public": 59403,
    "publish": 57941,
    "query-builder": 59566,
    "question-answer": 59567,
    "queue": 57404,
    "queue-music": 57405,
    "queue-play-next": 57446,
    "radio": 57406,
    "radio-button-checked": 59447,
    "radio-button-unchecked": 59446,
    "rate-review": 58720,
    "receipt": 59568,
    "recent-actors": 57407,
    "record-voice-over": 59679,
    "redeem": 59569,
    "redo": 57690,
    "refresh": 58837,
    "remove": 57691,
    "remove-circle": 57692,
    "remove-circle-outline": 57693,
    "remove-from-queue": 57447,
    "remove-red-eye": 58391,
    "remove-shopping-cart": 59688,
    "reorder": 59646,
    "repeat": 57408,
    "repeat-one": 57409,
    "replay": 57410,
    "replay-10": 57433,
    "replay-30": 57434,
    "replay-5": 57435,
    "reply": 57694,
    "reply-all": 57695,
    "report": 57696,
    "report-problem": 59570,
    "restaurant": 58732,
    "restaurant-menu": 58721,
    "restore": 59571,
    "restore-page": 59689,
    "ring-volume": 57553,
    "room": 59572,
    "room-service": 60233,
    "rotate-90-degrees-ccw": 58392,
    "rotate-left": 58393,
    "rotate-right": 58394,
    "rounded-corner": 59680,
    "router": 58152,
    "rowing": 59681,
    "rss-feed": 57573,
    "rv-hookup": 58946,
    "satellite": 58722,
    "save": 57697,
    "scanner": 58153,
    "schedule": 59573,
    "school": 59404,
    "screen-lock-landscape": 57790,
    "screen-lock-portrait": 57791,
    "screen-lock-rotation": 57792,
    "screen-rotation": 57793,
    "screen-share": 57570,
    "sd-card": 58915,
    "sd-storage": 57794,
    "search": 59574,
    "security": 58154,
    "select-all": 57698,
    "send": 57699,
    "sentiment-dissatisfied": 59409,
    "sentiment-neutral": 59410,
    "sentiment-satisfied": 59411,
    "sentiment-very-dissatisfied": 59412,
    "sentiment-very-satisfied": 59413,
    "settings": 59576,
    "settings-applications": 59577,
    "settings-backup-restore": 59578,
    "settings-bluetooth": 59579,
    "settings-brightness": 59581,
    "settings-cell": 59580,
    "settings-ethernet": 59582,
    "settings-input-antenna": 59583,
    "settings-input-component": 59584,
    "settings-input-composite": 59585,
    "settings-input-hdmi": 59586,
    "settings-input-svideo": 59587,
    "settings-overscan": 59588,
    "settings-phone": 59589,
    "settings-power": 59590,
    "settings-remote": 59591,
    "settings-system-daydream": 57795,
    "settings-voice": 59592,
    "share": 59405,
    "shop": 59593,
    "shop-two": 59594,
    "shopping-basket": 59595,
    "shopping-cart": 59596,
    "short-text": 57953,
    "show-chart": 59105,
    "shuffle": 57411,
    "signal-cellular-4-bar": 57800,
    "signal-cellular-connected-no-internet-4-bar": 57805,
    "signal-cellular-no-sim": 57806,
    "signal-cellular-null": 57807,
    "signal-cellular-off": 57808,
    "signal-wifi-4-bar": 57816,
    "signal-wifi-4-bar-lock": 57817,
    "signal-wifi-off": 57818,
    "sim-card": 58155,
    "sim-card-alert": 58916,
    "skip-next": 57412,
    "skip-previous": 57413,
    "slideshow": 58395,
    "slow-motion-video": 57448,
    "smartphone": 58156,
    "smoke-free": 60234,
    "smoking-rooms": 60235,
    "sms": 58917,
    "sms-failed": 58918,
    "snooze": 57414,
    "sort": 57700,
    "sort-by-alpha": 57427,
    "spa": 60236,
    "space-bar": 57942,
    "speaker": 58157,
    "speaker-group": 58158,
    "speaker-notes": 59597,
    "speaker-notes-off": 59690,
    "speaker-phone": 57554,
    "spellcheck": 59598,
    "star": 59448,
    "star-border": 59450,
    "star-half": 59449,
    "stars": 59600,
    "stay-current-landscape": 57555,
    "stay-current-portrait": 57556,
    "stay-primary-landscape": 57557,
    "stay-primary-portrait": 57558,
    "stop": 57415,
    "stop-screen-share": 57571,
    "storage": 57819,
    "store": 59601,
    "store-mall-directory": 58723,
    "straighten": 58396,
    "streetview": 58734,
    "strikethrough-s": 57943,
    "style": 58397,
    "subdirectory-arrow-left": 58841,
    "subdirectory-arrow-right": 58842,
    "subject": 59602,
    "subscriptions": 57444,
    "subtitles": 57416,
    "subway": 58735,
    "supervisor-account": 59603,
    "surround-sound": 57417,
    "swap-calls": 57559,
    "swap-horiz": 59604,
    "swap-vert": 59605,
    "swap-vertical-circle": 59606,
    "switch-camera": 58398,
    "switch-video": 58399,
    "sync": 58919,
    "sync-disabled": 58920,
    "sync-problem": 58921,
    "system-update": 58922,
    "system-update-alt": 59607,
    "tab": 59608,
    "tab-unselected": 59609,
    "tablet": 58159,
    "tablet-android": 58160,
    "tablet-mac": 58161,
    "tag-faces": 58400,
    "tap-and-play": 58923,
    "terrain": 58724,
    "text-fields": 57954,
    "text-format": 57701,
    "textsms": 57560,
    "texture": 58401,
    "theaters": 59610,
    "thumb-down": 59611,
    "thumb-up": 59612,
    "thumbs-up-down": 59613,
    "time-to-leave": 58924,
    "timelapse": 58402,
    "timeline": 59682,
    "timer": 58405,
    "timer-10": 58403,
    "timer-3": 58404,
    "timer-off": 58406,
    "title": 57956,
    "toc": 59614,
    "today": 59615,
    "toll": 59616,
    "tonality": 58407,
    "touch-app": 59667,
    "toys": 58162,
    "track-changes": 59617,
    "traffic": 58725,
    "train": 58736,
    "tram": 58737,
    "transfer-within-a-station": 58738,
    "transform": 58408,
    "translate": 59618,
    "trending-down": 59619,
    "trending-flat": 59620,
    "trending-up": 59621,
    "tune": 58409,
    "turned-in": 59622,
    "turned-in-not": 59623,
    "tv": 58163,
    "unarchive": 57705,
    "undo": 57702,
    "unfold-less": 58838,
    "unfold-more": 58839,
    "update": 59683,
    "usb": 57824,
    "verified-user": 59624,
    "vertical-align-bottom": 57944,
    "vertical-align-center": 57945,
    "vertical-align-top": 57946,
    "vibration": 58925,
    "video-call": 57456,
    "video-label": 57457,
    "video-library": 57418,
    "videocam": 57419,
    "videocam-off": 57420,
    "videogame-asset": 58168,
    "view-agenda": 59625,
    "view-array": 59626,
    "view-carousel": 59627,
    "view-column": 59628,
    "view-comfy": 58410,
    "view-compact": 58411,
    "view-day": 59629,
    "view-headline": 59630,
    "view-list": 59631,
    "view-module": 59632,
    "view-quilt": 59633,
    "view-stream": 59634,
    "view-week": 59635,
    "vignette": 58421,
    "visibility": 59636,
    "visibility-off": 59637,
    "voice-chat": 58926,
    "voicemail": 57561,
    "volume-down": 57421,
    "volume-mute": 57422,
    "volume-off": 57423,
    "volume-up": 57424,
    "vpn-key": 57562,
    "vpn-lock": 58927,
    "wallpaper": 57788,
    "warning": 57346,
    "watch": 58164,
    "watch-later": 59684,
    "wb-auto": 58412,
    "wb-cloudy": 58413,
    "wb-incandescent": 58414,
    "wb-iridescent": 58422,
    "wb-sunny": 58416,
    "wc": 58941,
    "web": 57425,
    "web-asset": 57449,
    "weekend": 57707,
    "whatshot": 59406,
    "widgets": 57789,
    "wifi": 58942,
    "wifi-lock": 57825,
    "wifi-tethering": 57826,
    "work": 59641,
    "wrap-text": 57947,
    "youtube-searched-for": 59642,
    "zoom-in": 59647,
    "zoom-out": 59648,
    "zoom-out-map": 58731
  };
},685,[],"react-native-vector-icons/glyphmaps/MaterialIcons.json");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.registerCustomIconType = undefined;

  var _Zocial = require(_dependencyMap[0], "react-native-vector-icons/Zocial");

  var _Zocial2 = babelHelpers.interopRequireDefault(_Zocial);

  var _Octicons = require(_dependencyMap[1], "react-native-vector-icons/Octicons");

  var _Octicons2 = babelHelpers.interopRequireDefault(_Octicons);

  var _MaterialIcons = require(_dependencyMap[2], "react-native-vector-icons/MaterialIcons");

  var _MaterialIcons2 = babelHelpers.interopRequireDefault(_MaterialIcons);

  var _MaterialCommunityIcons = require(_dependencyMap[3], "react-native-vector-icons/MaterialCommunityIcons");

  var _MaterialCommunityIcons2 = babelHelpers.interopRequireDefault(_MaterialCommunityIcons);

  var _Ionicons = require(_dependencyMap[4], "react-native-vector-icons/Ionicons");

  var _Ionicons2 = babelHelpers.interopRequireDefault(_Ionicons);

  var _Foundation = require(_dependencyMap[5], "react-native-vector-icons/Foundation");

  var _Foundation2 = babelHelpers.interopRequireDefault(_Foundation);

  var _EvilIcons = require(_dependencyMap[6], "react-native-vector-icons/EvilIcons");

  var _EvilIcons2 = babelHelpers.interopRequireDefault(_EvilIcons);

  var _Entypo = require(_dependencyMap[7], "react-native-vector-icons/Entypo");

  var _Entypo2 = babelHelpers.interopRequireDefault(_Entypo);

  var _FontAwesome = require(_dependencyMap[8], "react-native-vector-icons/FontAwesome");

  var _FontAwesome2 = babelHelpers.interopRequireDefault(_FontAwesome);

  var _SimpleLineIcons = require(_dependencyMap[9], "react-native-vector-icons/SimpleLineIcons");

  var _SimpleLineIcons2 = babelHelpers.interopRequireDefault(_SimpleLineIcons);

  var _Feather = require(_dependencyMap[10], "react-native-vector-icons/Feather");

  var _Feather2 = babelHelpers.interopRequireDefault(_Feather);

  var customIcons = {};

  var registerCustomIconType = exports.registerCustomIconType = function registerCustomIconType(id, customIcon) {
    customIcons[id] = customIcon;
  };

  exports.default = function (type) {
    switch (type) {
      case 'zocial':
        return _Zocial2.default;

      case 'octicon':
        return _Octicons2.default;

      case 'material':
        return _MaterialIcons2.default;

      case 'material-community':
        return _MaterialCommunityIcons2.default;

      case 'ionicon':
        return _Ionicons2.default;

      case 'foundation':
        return _Foundation2.default;

      case 'evilicon':
        return _EvilIcons2.default;

      case 'entypo':
        return _Entypo2.default;

      case 'font-awesome':
        return _FontAwesome2.default;

      case 'simple-line-icon':
        return _SimpleLineIcons2.default;

      case 'feather':
        return _Feather2.default;

      default:
        if (customIcons.hasOwnProperty(type)) {
          return customIcons[type];
        }

        return _MaterialIcons2.default;
    }
  };
},686,[687,689,679,691,693,695,697,699,701,703,705],"react-native-elements/src/helpers/getIconType.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  var _Zocial = require(_dependencyMap[1], "./glyphmaps/Zocial.json");

  var _Zocial2 = babelHelpers.interopRequireDefault(_Zocial);

  var iconSet = (0, _createIconSet2.default)(_Zocial2.default, 'zocial', 'Zocial.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},687,[680,688],"react-native-vector-icons/Zocial.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    "acrobat": 61696,
    "amazon": 61697,
    "android": 61698,
    "angellist": 61699,
    "aol": 61700,
    "appnet": 61701,
    "appstore": 61702,
    "bitbucket": 61703,
    "bitcoin": 61704,
    "blogger": 61705,
    "buffer": 61706,
    "cal": 61707,
    "call": 61708,
    "cart": 61709,
    "chrome": 61710,
    "cloudapp": 61711,
    "creativecommons": 61712,
    "delicious": 61713,
    "digg": 61714,
    "disqus": 61715,
    "dribbble": 61716,
    "dropbox": 61717,
    "drupal": 61718,
    "dwolla": 61720,
    "email": 61721,
    "eventasaurus": 61722,
    "eventbrite": 61723,
    "eventful": 61724,
    "evernote": 61725,
    "facebook": 61726,
    "fivehundredpx": 61727,
    "flattr": 61728,
    "flickr": 61729,
    "forrst": 61730,
    "foursquare": 61731,
    "github": 61732,
    "gmail": 61733,
    "google": 61734,
    "googleplay": 61735,
    "googleplus": 61736,
    "gowalla": 61737,
    "grooveshark": 61738,
    "guest": 61739,
    "html5": 61740,
    "ie": 61741,
    "instagram": 61742,
    "instapaper": 61743,
    "intensedebate": 61744,
    "itunes": 61745,
    "klout": 61746,
    "lanyrd": 61747,
    "lastfm": 61748,
    "lego": 61749,
    "linkedin": 61750,
    "lkdto": 61751,
    "logmein": 61752,
    "macstore": 61753,
    "meetup": 61754,
    "myspace": 61755,
    "ninetyninedesigns": 61756,
    "openid": 61757,
    "opentable": 61758,
    "paypal": 61759,
    "persona": 61796,
    "pinboard": 61760,
    "pinterest": 61761,
    "plancast": 61762,
    "plurk": 61763,
    "pocket": 61764,
    "podcast": 61765,
    "posterous": 61766,
    "print": 61767,
    "quora": 61768,
    "reddit": 61769,
    "rss": 61770,
    "scribd": 61771,
    "skype": 61772,
    "smashing": 61773,
    "songkick": 61774,
    "soundcloud": 61775,
    "spotify": 61776,
    "stackoverflow": 61777,
    "statusnet": 61778,
    "steam": 61779,
    "stripe": 61780,
    "stumbleupon": 61781,
    "tumblr": 61782,
    "twitter": 61783,
    "viadeo": 61784,
    "vimeo": 61785,
    "vk": 61786,
    "weibo": 61787,
    "wikipedia": 61788,
    "windows": 61789,
    "wordpress": 61790,
    "xing": 61791,
    "yahoo": 61792,
    "ycombinator": 61793,
    "yelp": 61794,
    "youtube": 61795
  };
},688,[],"react-native-vector-icons/glyphmaps/Zocial.json");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  var _Octicons = require(_dependencyMap[1], "./glyphmaps/Octicons.json");

  var _Octicons2 = babelHelpers.interopRequireDefault(_Octicons);

  var iconSet = (0, _createIconSet2.default)(_Octicons2.default, 'Octicons', 'Octicons.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},689,[680,690],"react-native-vector-icons/Octicons.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    "alert": 61696,
    "arrow-down": 61697,
    "arrow-left": 61698,
    "arrow-right": 61699,
    "arrow-small-down": 61700,
    "arrow-small-left": 61701,
    "arrow-small-right": 61702,
    "arrow-small-up": 61703,
    "arrow-up": 61704,
    "beaker": 61705,
    "bell": 61706,
    "bold": 61707,
    "book": 61708,
    "bookmark": 61709,
    "briefcase": 61710,
    "broadcast": 61711,
    "browser": 61712,
    "bug": 61713,
    "calendar": 61714,
    "check": 61715,
    "checklist": 61716,
    "chevron-down": 61717,
    "chevron-left": 61718,
    "chevron-right": 61719,
    "chevron-up": 61720,
    "circle-slash": 61721,
    "circuit-board": 61722,
    "clippy": 61723,
    "clock": 61724,
    "cloud-download": 61725,
    "cloud-upload": 61726,
    "code": 61727,
    "comment": 61728,
    "comment-discussion": 61729,
    "credit-card": 61730,
    "dash": 61731,
    "dashboard": 61732,
    "database": 61733,
    "desktop-download": 61734,
    "device-camera": 61735,
    "device-camera-video": 61736,
    "device-desktop": 61737,
    "device-mobile": 61738,
    "diff": 61739,
    "diff-added": 61740,
    "diff-ignored": 61741,
    "diff-modified": 61742,
    "diff-removed": 61743,
    "diff-renamed": 61744,
    "ellipsis": 61745,
    "eye": 61746,
    "file": 61747,
    "file-binary": 61748,
    "file-code": 61749,
    "file-directory": 61750,
    "file-media": 61751,
    "file-pdf": 61752,
    "file-submodule": 61753,
    "file-symlink-directory": 61754,
    "file-symlink-file": 61755,
    "file-text": 61756,
    "file-zip": 61757,
    "flame": 61758,
    "fold": 61759,
    "gear": 61760,
    "gift": 61761,
    "gist": 61762,
    "gist-secret": 61763,
    "git-branch": 61764,
    "git-commit": 61765,
    "git-compare": 61766,
    "git-merge": 61767,
    "git-pull-request": 61768,
    "globe": 61769,
    "grabber": 61770,
    "graph": 61771,
    "heart": 61772,
    "history": 61773,
    "home": 61774,
    "horizontal-rule": 61775,
    "hubot": 61776,
    "inbox": 61777,
    "info": 61778,
    "issue-closed": 61779,
    "issue-opened": 61780,
    "issue-reopened": 61781,
    "italic": 61782,
    "jersey": 61783,
    "kebab-horizontal": 61784,
    "kebab-vertical": 61785,
    "key": 61786,
    "keyboard": 61787,
    "law": 61788,
    "light-bulb": 61789,
    "link": 61790,
    "link-external": 61791,
    "list-ordered": 61792,
    "list-unordered": 61793,
    "location": 61794,
    "lock": 61795,
    "logo-gist": 61796,
    "logo-github": 61797,
    "mail": 61798,
    "mail-read": 61799,
    "mail-reply": 61800,
    "mark-github": 61801,
    "markdown": 61802,
    "megaphone": 61803,
    "mention": 61804,
    "milestone": 61805,
    "mirror": 61806,
    "mortar-board": 61807,
    "mute": 61808,
    "no-newline": 61809,
    "note": 61810,
    "octoface": 61811,
    "organization": 61812,
    "package": 61813,
    "paintcan": 61814,
    "pencil": 61815,
    "person": 61816,
    "pin": 61817,
    "plug": 61818,
    "plus": 61819,
    "plus-small": 61820,
    "primitive-dot": 61821,
    "primitive-square": 61822,
    "project": 61823,
    "pulse": 61824,
    "question": 61825,
    "quote": 61826,
    "radio-tower": 61827,
    "reply": 61828,
    "repo": 61829,
    "repo-clone": 61830,
    "repo-force-push": 61831,
    "repo-forked": 61832,
    "repo-pull": 61833,
    "repo-push": 61834,
    "rocket": 61835,
    "rss": 61836,
    "ruby": 61837,
    "screen-full": 61838,
    "screen-normal": 61839,
    "search": 61840,
    "server": 61841,
    "settings": 61842,
    "shield": 61843,
    "sign-in": 61844,
    "sign-out": 61845,
    "smiley": 61846,
    "squirrel": 61847,
    "star": 61848,
    "stop": 61849,
    "sync": 61850,
    "tag": 61851,
    "tasklist": 61852,
    "telescope": 61853,
    "terminal": 61854,
    "text-size": 61855,
    "three-bars": 61856,
    "thumbsdown": 61857,
    "thumbsup": 61858,
    "tools": 61859,
    "trashcan": 61860,
    "triangle-down": 61861,
    "triangle-left": 61862,
    "triangle-right": 61863,
    "triangle-up": 61864,
    "unfold": 61865,
    "unmute": 61866,
    "unverified": 61867,
    "verified": 61868,
    "versions": 61869,
    "watch": 61870,
    "x": 61871,
    "zap": 61872
  };
},690,[],"react-native-vector-icons/glyphmaps/Octicons.json");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  var _MaterialCommunityIcons = require(_dependencyMap[1], "./glyphmaps/MaterialCommunityIcons.json");

  var _MaterialCommunityIcons2 = babelHelpers.interopRequireDefault(_MaterialCommunityIcons);

  var iconSet = (0, _createIconSet2.default)(_MaterialCommunityIcons2.default, 'Material Design Icons', 'MaterialCommunityIcons.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},691,[680,692],"react-native-vector-icons/MaterialCommunityIcons.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    "access-point": 61442,
    "access-point-network": 61443,
    "account": 61444,
    "account-alert": 61445,
    "account-box": 61446,
    "account-box-outline": 61447,
    "account-card-details": 62930,
    "account-check": 61448,
    "account-circle": 61449,
    "account-convert": 61450,
    "account-edit": 63163,
    "account-key": 61451,
    "account-location": 61452,
    "account-minus": 61453,
    "account-multiple": 61454,
    "account-multiple-minus": 62931,
    "account-multiple-outline": 61455,
    "account-multiple-plus": 61456,
    "account-multiple-plus-outline": 63487,
    "account-network": 61457,
    "account-off": 61458,
    "account-outline": 61459,
    "account-plus": 61460,
    "account-plus-outline": 63488,
    "account-remove": 61461,
    "account-search": 61462,
    "account-settings": 63024,
    "account-settings-variant": 63025,
    "account-star": 61463,
    "account-switch": 61465,
    "adjust": 61466,
    "air-conditioner": 61467,
    "airballoon": 61468,
    "airplane": 61469,
    "airplane-landing": 62932,
    "airplane-off": 61470,
    "airplane-takeoff": 62933,
    "airplay": 61471,
    "alarm": 61472,
    "alarm-bell": 63373,
    "alarm-check": 61473,
    "alarm-light": 63374,
    "alarm-multiple": 61474,
    "alarm-off": 61475,
    "alarm-plus": 61476,
    "alarm-snooze": 63117,
    "album": 61477,
    "alert": 61478,
    "alert-box": 61479,
    "alert-circle": 61480,
    "alert-circle-outline": 62934,
    "alert-decagram": 63164,
    "alert-octagon": 61481,
    "alert-octagram": 63334,
    "alert-outline": 61482,
    "all-inclusive": 63165,
    "allo": 63489,
    "alpha": 61483,
    "alphabetical": 61484,
    "altimeter": 62935,
    "amazon": 61485,
    "amazon-clouddrive": 61486,
    "ambulance": 61487,
    "amplifier": 61488,
    "anchor": 61489,
    "android": 61490,
    "android-debug-bridge": 61491,
    "android-head": 63375,
    "android-studio": 61492,
    "angular": 63153,
    "angularjs": 63166,
    "animation": 62936,
    "apple": 61493,
    "apple-finder": 61494,
    "apple-ios": 61495,
    "apple-keyboard-caps": 63026,
    "apple-keyboard-command": 63027,
    "apple-keyboard-control": 63028,
    "apple-keyboard-option": 63029,
    "apple-keyboard-shift": 63030,
    "apple-mobileme": 61496,
    "apple-safari": 61497,
    "application": 62996,
    "approval": 63376,
    "apps": 61499,
    "archive": 61500,
    "arrange-bring-forward": 61501,
    "arrange-bring-to-front": 61502,
    "arrange-send-backward": 61503,
    "arrange-send-to-back": 61504,
    "arrow-all": 61505,
    "arrow-bottom-left": 61506,
    "arrow-bottom-right": 61507,
    "arrow-collapse": 62997,
    "arrow-collapse-all": 61508,
    "arrow-collapse-down": 63377,
    "arrow-collapse-left": 63378,
    "arrow-collapse-right": 63379,
    "arrow-collapse-up": 63380,
    "arrow-down": 61509,
    "arrow-down-bold": 63277,
    "arrow-down-bold-box": 63278,
    "arrow-down-bold-box-outline": 63279,
    "arrow-down-bold-circle": 61511,
    "arrow-down-bold-circle-outline": 61512,
    "arrow-down-bold-hexagon-outline": 61513,
    "arrow-down-box": 63167,
    "arrow-down-drop-circle": 61514,
    "arrow-down-drop-circle-outline": 61515,
    "arrow-down-thick": 61510,
    "arrow-expand": 62998,
    "arrow-expand-all": 61516,
    "arrow-expand-down": 63381,
    "arrow-expand-left": 63382,
    "arrow-expand-right": 63383,
    "arrow-expand-up": 63384,
    "arrow-left": 61517,
    "arrow-left-bold": 63280,
    "arrow-left-bold-box": 63281,
    "arrow-left-bold-box-outline": 63282,
    "arrow-left-bold-circle": 61519,
    "arrow-left-bold-circle-outline": 61520,
    "arrow-left-bold-hexagon-outline": 61521,
    "arrow-left-box": 63168,
    "arrow-left-drop-circle": 61522,
    "arrow-left-drop-circle-outline": 61523,
    "arrow-left-thick": 61518,
    "arrow-right": 61524,
    "arrow-right-bold": 63283,
    "arrow-right-bold-box": 63284,
    "arrow-right-bold-box-outline": 63285,
    "arrow-right-bold-circle": 61526,
    "arrow-right-bold-circle-outline": 61527,
    "arrow-right-bold-hexagon-outline": 61528,
    "arrow-right-box": 63169,
    "arrow-right-drop-circle": 61529,
    "arrow-right-drop-circle-outline": 61530,
    "arrow-right-thick": 61525,
    "arrow-top-left": 61531,
    "arrow-top-right": 61532,
    "arrow-up": 61533,
    "arrow-up-bold": 63286,
    "arrow-up-bold-box": 63287,
    "arrow-up-bold-box-outline": 63288,
    "arrow-up-bold-circle": 61535,
    "arrow-up-bold-circle-outline": 61536,
    "arrow-up-bold-hexagon-outline": 61537,
    "arrow-up-box": 63170,
    "arrow-up-drop-circle": 61538,
    "arrow-up-drop-circle-outline": 61539,
    "arrow-up-thick": 61534,
    "artist": 63490,
    "assistant": 61540,
    "asterisk": 63171,
    "at": 61541,
    "atlassian": 63491,
    "atom": 63335,
    "attachment": 61542,
    "audiobook": 61543,
    "auto-fix": 61544,
    "auto-upload": 61545,
    "autorenew": 61546,
    "av-timer": 61547,
    "azure": 63492,
    "baby": 61548,
    "baby-buggy": 63118,
    "backburger": 61549,
    "backspace": 61550,
    "backup-restore": 61551,
    "bandcamp": 63092,
    "bank": 61552,
    "barcode": 61553,
    "barcode-scan": 61554,
    "barley": 61555,
    "barrel": 61556,
    "basecamp": 61557,
    "basket": 61558,
    "basket-fill": 61559,
    "basket-unfill": 61560,
    "basketball": 63493,
    "battery": 61561,
    "battery-10": 61562,
    "battery-20": 61563,
    "battery-30": 61564,
    "battery-40": 61565,
    "battery-50": 61566,
    "battery-60": 61567,
    "battery-70": 61568,
    "battery-80": 61569,
    "battery-90": 61570,
    "battery-alert": 61571,
    "battery-charging": 61572,
    "battery-charging-100": 61573,
    "battery-charging-20": 61574,
    "battery-charging-30": 61575,
    "battery-charging-40": 61576,
    "battery-charging-60": 61577,
    "battery-charging-80": 61578,
    "battery-charging-90": 61579,
    "battery-charging-wireless": 63494,
    "battery-charging-wireless-10": 63495,
    "battery-charging-wireless-20": 63496,
    "battery-charging-wireless-30": 63497,
    "battery-charging-wireless-40": 63498,
    "battery-charging-wireless-50": 63499,
    "battery-charging-wireless-60": 63500,
    "battery-charging-wireless-70": 63501,
    "battery-charging-wireless-80": 63502,
    "battery-charging-wireless-90": 63503,
    "battery-charging-wireless-alert": 63504,
    "battery-charging-wireless-outline": 63505,
    "battery-minus": 61580,
    "battery-negative": 61581,
    "battery-outline": 61582,
    "battery-plus": 61583,
    "battery-positive": 61584,
    "battery-unknown": 61585,
    "beach": 61586,
    "beaker": 63119,
    "beats": 61591,
    "beer": 61592,
    "behance": 61593,
    "bell": 61594,
    "bell-off": 61595,
    "bell-outline": 61596,
    "bell-plus": 61597,
    "bell-ring": 61598,
    "bell-ring-outline": 61599,
    "bell-sleep": 61600,
    "beta": 61601,
    "bible": 61602,
    "bike": 61603,
    "bing": 61604,
    "binoculars": 61605,
    "bio": 61606,
    "biohazard": 61607,
    "bitbucket": 61608,
    "bitcoin": 63506,
    "black-mesa": 61609,
    "blackberry": 61610,
    "blender": 61611,
    "blinds": 61612,
    "block-helper": 61613,
    "blogger": 61614,
    "bluetooth": 61615,
    "bluetooth-audio": 61616,
    "bluetooth-connect": 61617,
    "bluetooth-off": 61618,
    "bluetooth-settings": 61619,
    "bluetooth-transfer": 61620,
    "blur": 61621,
    "blur-linear": 61622,
    "blur-off": 61623,
    "blur-radial": 61624,
    "bomb": 63120,
    "bomb-off": 63172,
    "bone": 61625,
    "book": 61626,
    "book-minus": 62937,
    "book-multiple": 61627,
    "book-multiple-variant": 61628,
    "book-open": 61629,
    "book-open-page-variant": 62938,
    "book-open-variant": 61630,
    "book-plus": 62939,
    "book-secure": 63385,
    "book-unsecure": 63386,
    "book-variant": 61631,
    "bookmark": 61632,
    "bookmark-check": 61633,
    "bookmark-music": 61634,
    "bookmark-outline": 61635,
    "bookmark-plus": 61637,
    "bookmark-plus-outline": 61636,
    "bookmark-remove": 61638,
    "boombox": 62940,
    "bootstrap": 63173,
    "border-all": 61639,
    "border-bottom": 61640,
    "border-color": 61641,
    "border-horizontal": 61642,
    "border-inside": 61643,
    "border-left": 61644,
    "border-none": 61645,
    "border-outside": 61646,
    "border-right": 61647,
    "border-style": 61648,
    "border-top": 61649,
    "border-vertical": 61650,
    "bow-tie": 63095,
    "bowl": 62999,
    "bowling": 61651,
    "box": 61652,
    "box-cutter": 61653,
    "box-shadow": 63031,
    "bridge": 63000,
    "briefcase": 61654,
    "briefcase-check": 61655,
    "briefcase-download": 61656,
    "briefcase-outline": 63507,
    "briefcase-upload": 61657,
    "brightness-1": 61658,
    "brightness-2": 61659,
    "brightness-3": 61660,
    "brightness-4": 61661,
    "brightness-5": 61662,
    "brightness-6": 61663,
    "brightness-7": 61664,
    "brightness-auto": 61665,
    "broom": 61666,
    "brush": 61667,
    "buffer": 63001,
    "bug": 61668,
    "bulletin-board": 61669,
    "bullhorn": 61670,
    "bullseye": 62941,
    "bus": 61671,
    "bus-articulated-end": 63387,
    "bus-articulated-front": 63388,
    "bus-double-decker": 63389,
    "bus-school": 63390,
    "bus-side": 63391,
    "cached": 61672,
    "cake": 61673,
    "cake-layered": 61674,
    "cake-variant": 61675,
    "calculator": 61676,
    "calendar": 61677,
    "calendar-blank": 61678,
    "calendar-check": 61679,
    "calendar-clock": 61680,
    "calendar-multiple": 61681,
    "calendar-multiple-check": 61682,
    "calendar-plus": 61683,
    "calendar-question": 63121,
    "calendar-range": 63096,
    "calendar-remove": 61684,
    "calendar-text": 61685,
    "calendar-today": 61686,
    "call-made": 61687,
    "call-merge": 61688,
    "call-missed": 61689,
    "call-received": 61690,
    "call-split": 61691,
    "camcorder": 61692,
    "camcorder-box": 61693,
    "camcorder-box-off": 61694,
    "camcorder-off": 61695,
    "camera": 61696,
    "camera-burst": 63122,
    "camera-enhance": 61697,
    "camera-front": 61698,
    "camera-front-variant": 61699,
    "camera-gopro": 63392,
    "camera-iris": 61700,
    "camera-metering-center": 63393,
    "camera-metering-matrix": 63394,
    "camera-metering-partial": 63395,
    "camera-metering-spot": 63396,
    "camera-off": 62943,
    "camera-party-mode": 61701,
    "camera-rear": 61702,
    "camera-rear-variant": 61703,
    "camera-switch": 61704,
    "camera-timer": 61705,
    "cancel": 63289,
    "candle": 62946,
    "candycane": 61706,
    "cannabis": 63397,
    "car": 61707,
    "car-battery": 61708,
    "car-connected": 61709,
    "car-convertible": 63398,
    "car-estate": 63399,
    "car-hatchback": 63400,
    "car-pickup": 63401,
    "car-side": 63402,
    "car-sports": 63403,
    "car-wash": 61710,
    "caravan": 63404,
    "cards": 63032,
    "cards-outline": 63033,
    "cards-playing-outline": 63034,
    "cards-variant": 63174,
    "carrot": 61711,
    "cart": 61712,
    "cart-off": 63083,
    "cart-outline": 61713,
    "cart-plus": 61714,
    "case-sensitive-alt": 61715,
    "cash": 61716,
    "cash-100": 61717,
    "cash-multiple": 61718,
    "cash-usd": 61719,
    "cast": 61720,
    "cast-connected": 61721,
    "cast-off": 63369,
    "castle": 61722,
    "cat": 61723,
    "cctv": 63405,
    "ceiling-light": 63336,
    "cellphone": 61724,
    "cellphone-android": 61725,
    "cellphone-basic": 61726,
    "cellphone-dock": 61727,
    "cellphone-iphone": 61728,
    "cellphone-link": 61729,
    "cellphone-link-off": 61730,
    "cellphone-settings": 61731,
    "cellphone-wireless": 63508,
    "certificate": 61732,
    "chair-school": 61733,
    "chart-arc": 61734,
    "chart-areaspline": 61735,
    "chart-bar": 61736,
    "chart-bar-stacked": 63337,
    "chart-bubble": 62947,
    "chart-donut": 63406,
    "chart-donut-variant": 63407,
    "chart-gantt": 63084,
    "chart-histogram": 61737,
    "chart-line": 61738,
    "chart-line-stacked": 63338,
    "chart-line-variant": 63408,
    "chart-pie": 61739,
    "chart-scatterplot-hexbin": 63085,
    "chart-timeline": 63086,
    "check": 61740,
    "check-all": 61741,
    "check-circle": 62944,
    "check-circle-outline": 62945,
    "checkbox-blank": 61742,
    "checkbox-blank-circle": 61743,
    "checkbox-blank-circle-outline": 61744,
    "checkbox-blank-outline": 61745,
    "checkbox-marked": 61746,
    "checkbox-marked-circle": 61747,
    "checkbox-marked-circle-outline": 61748,
    "checkbox-marked-outline": 61749,
    "checkbox-multiple-blank": 61750,
    "checkbox-multiple-blank-circle": 63035,
    "checkbox-multiple-blank-circle-outline": 63036,
    "checkbox-multiple-blank-outline": 61751,
    "checkbox-multiple-marked": 61752,
    "checkbox-multiple-marked-circle": 63037,
    "checkbox-multiple-marked-circle-outline": 63038,
    "checkbox-multiple-marked-outline": 61753,
    "checkerboard": 61754,
    "chemical-weapon": 61755,
    "chevron-double-down": 61756,
    "chevron-double-left": 61757,
    "chevron-double-right": 61758,
    "chevron-double-up": 61759,
    "chevron-down": 61760,
    "chevron-left": 61761,
    "chevron-right": 61762,
    "chevron-up": 61763,
    "chili-hot": 63409,
    "chili-medium": 63410,
    "chili-mild": 63411,
    "chip": 63002,
    "church": 61764,
    "circle": 63332,
    "circle-outline": 63333,
    "cisco-webex": 61765,
    "city": 61766,
    "clipboard": 61767,
    "clipboard-account": 61768,
    "clipboard-alert": 61769,
    "clipboard-arrow-down": 61770,
    "clipboard-arrow-left": 61771,
    "clipboard-check": 61772,
    "clipboard-flow": 63175,
    "clipboard-outline": 61773,
    "clipboard-plus": 63312,
    "clipboard-text": 61774,
    "clippy": 61775,
    "clock": 61776,
    "clock-alert": 62926,
    "clock-end": 61777,
    "clock-fast": 61778,
    "clock-in": 61779,
    "clock-out": 61780,
    "clock-start": 61781,
    "close": 61782,
    "close-box": 61783,
    "close-box-outline": 61784,
    "close-circle": 61785,
    "close-circle-outline": 61786,
    "close-network": 61787,
    "close-octagon": 61788,
    "close-octagon-outline": 61789,
    "close-outline": 63176,
    "closed-caption": 61790,
    "cloud": 61791,
    "cloud-braces": 63412,
    "cloud-check": 61792,
    "cloud-circle": 61793,
    "cloud-download": 61794,
    "cloud-off-outline": 61796,
    "cloud-outline": 61795,
    "cloud-print": 61797,
    "cloud-print-outline": 61798,
    "cloud-sync": 63039,
    "cloud-tags": 63413,
    "cloud-upload": 61799,
    "clover": 63509,
    "code-array": 61800,
    "code-braces": 61801,
    "code-brackets": 61802,
    "code-equal": 61803,
    "code-greater-than": 61804,
    "code-greater-than-or-equal": 61805,
    "code-less-than": 61806,
    "code-less-than-or-equal": 61807,
    "code-not-equal": 61808,
    "code-not-equal-variant": 61809,
    "code-parentheses": 61810,
    "code-string": 61811,
    "code-tags": 61812,
    "code-tags-check": 63123,
    "codepen": 61813,
    "coffee": 61814,
    "coffee-outline": 63177,
    "coffee-to-go": 61815,
    "coin": 61816,
    "coins": 63124,
    "collage": 63040,
    "color-helper": 61817,
    "comment": 61818,
    "comment-account": 61819,
    "comment-account-outline": 61820,
    "comment-alert": 61821,
    "comment-alert-outline": 61822,
    "comment-check": 61823,
    "comment-check-outline": 61824,
    "comment-multiple-outline": 61825,
    "comment-outline": 61826,
    "comment-plus-outline": 61827,
    "comment-processing": 61828,
    "comment-processing-outline": 61829,
    "comment-question": 63510,
    "comment-question-outline": 61830,
    "comment-remove": 62942,
    "comment-remove-outline": 61831,
    "comment-text": 61832,
    "comment-text-outline": 61833,
    "compare": 61834,
    "compass": 61835,
    "compass-outline": 61836,
    "console": 61837,
    "console-line": 63414,
    "contact-mail": 61838,
    "contacts": 63178,
    "content-copy": 61839,
    "content-cut": 61840,
    "content-duplicate": 61841,
    "content-paste": 61842,
    "content-save": 61843,
    "content-save-all": 61844,
    "content-save-outline": 63511,
    "content-save-settings": 63003,
    "contrast": 61845,
    "contrast-box": 61846,
    "contrast-circle": 61847,
    "cookie": 61848,
    "copyright": 62950,
    "corn": 63415,
    "counter": 61849,
    "cow": 61850,
    "creation": 61897,
    "credit-card": 61851,
    "credit-card-multiple": 61852,
    "credit-card-off": 62948,
    "credit-card-plus": 63093,
    "credit-card-scan": 61853,
    "crop": 61854,
    "crop-free": 61855,
    "crop-landscape": 61856,
    "crop-portrait": 61857,
    "crop-rotate": 63125,
    "crop-square": 61858,
    "crosshairs": 61859,
    "crosshairs-gps": 61860,
    "crown": 61861,
    "cube": 61862,
    "cube-outline": 61863,
    "cube-send": 61864,
    "cube-unfolded": 61865,
    "cup": 61866,
    "cup-off": 62949,
    "cup-water": 61867,
    "currency-btc": 61868,
    "currency-chf": 63416,
    "currency-cny": 63417,
    "currency-eth": 63418,
    "currency-eur": 61869,
    "currency-gbp": 61870,
    "currency-inr": 61871,
    "currency-jpy": 63419,
    "currency-krw": 63420,
    "currency-ngn": 61872,
    "currency-rub": 61873,
    "currency-sign": 63421,
    "currency-try": 61874,
    "currency-twd": 63422,
    "currency-usd": 61875,
    "currency-usd-off": 63097,
    "cursor-default": 61876,
    "cursor-default-outline": 61877,
    "cursor-move": 61878,
    "cursor-pointer": 61879,
    "cursor-text": 62951,
    "database": 61880,
    "database-minus": 61881,
    "database-plus": 61882,
    "debug-step-into": 61883,
    "debug-step-out": 61884,
    "debug-step-over": 61885,
    "decagram": 63339,
    "decagram-outline": 63340,
    "decimal-decrease": 61886,
    "decimal-increase": 61887,
    "delete": 61888,
    "delete-circle": 63106,
    "delete-empty": 63179,
    "delete-forever": 62952,
    "delete-restore": 63512,
    "delete-sweep": 62953,
    "delete-variant": 61889,
    "delta": 61890,
    "deskphone": 61891,
    "desktop-classic": 63423,
    "desktop-mac": 61892,
    "desktop-tower": 61893,
    "details": 61894,
    "developer-board": 63126,
    "deviantart": 61895,
    "dialpad": 63004,
    "diamond": 61896,
    "dice-1": 61898,
    "dice-2": 61899,
    "dice-3": 61900,
    "dice-4": 61901,
    "dice-5": 61902,
    "dice-6": 61903,
    "dice-d10": 63342,
    "dice-d20": 62954,
    "dice-d4": 62955,
    "dice-d6": 62956,
    "dice-d8": 62957,
    "dice-multiple": 63341,
    "dictionary": 63005,
    "dip-switch": 63424,
    "directions": 61904,
    "directions-fork": 63041,
    "discord": 63087,
    "disk": 62958,
    "disk-alert": 61905,
    "disqus": 61906,
    "disqus-outline": 61907,
    "division": 61908,
    "division-box": 61909,
    "dna": 63107,
    "dns": 61910,
    "do-not-disturb": 63127,
    "do-not-disturb-off": 63128,
    "dolby": 63154,
    "domain": 61911,
    "donkey": 63425,
    "door": 63513,
    "door-closed": 63514,
    "door-open": 63515,
    "dots-horizontal": 61912,
    "dots-horizontal-circle": 63426,
    "dots-vertical": 61913,
    "dots-vertical-circle": 63427,
    "douban": 63129,
    "download": 61914,
    "download-network": 63219,
    "drag": 61915,
    "drag-horizontal": 61916,
    "drag-vertical": 61917,
    "drawing": 61918,
    "drawing-box": 61919,
    "dribbble": 61920,
    "dribbble-box": 61921,
    "drone": 61922,
    "dropbox": 61923,
    "drupal": 61924,
    "duck": 61925,
    "dumbbell": 61926,
    "ear-hearing": 63428,
    "earth": 61927,
    "earth-box": 63180,
    "earth-box-off": 63181,
    "earth-off": 61928,
    "edge": 61929,
    "eject": 61930,
    "elephant": 63429,
    "elevation-decline": 61931,
    "elevation-rise": 61932,
    "elevator": 61933,
    "email": 61934,
    "email-alert": 63182,
    "email-open": 61935,
    "email-open-outline": 62959,
    "email-outline": 61936,
    "email-secure": 61937,
    "email-variant": 62960,
    "emby": 63155,
    "emoticon": 61938,
    "emoticon-cool": 61939,
    "emoticon-dead": 63130,
    "emoticon-devil": 61940,
    "emoticon-excited": 63131,
    "emoticon-happy": 61941,
    "emoticon-neutral": 61942,
    "emoticon-poop": 61943,
    "emoticon-sad": 61944,
    "emoticon-tongue": 61945,
    "engine": 61946,
    "engine-outline": 61947,
    "equal": 61948,
    "equal-box": 61949,
    "eraser": 61950,
    "eraser-variant": 63042,
    "escalator": 61951,
    "ethernet": 61952,
    "ethernet-cable": 61953,
    "ethernet-cable-off": 61954,
    "etsy": 61955,
    "ev-station": 62961,
    "eventbrite": 63430,
    "evernote": 61956,
    "exclamation": 61957,
    "exit-to-app": 61958,
    "export": 61959,
    "eye": 61960,
    "eye-off": 61961,
    "eye-off-outline": 63184,
    "eye-outline": 63183,
    "eyedropper": 61962,
    "eyedropper-variant": 61963,
    "face": 63043,
    "face-profile": 63044,
    "facebook": 61964,
    "facebook-box": 61965,
    "facebook-messenger": 61966,
    "factory": 61967,
    "fan": 61968,
    "fan-off": 63516,
    "fast-forward": 61969,
    "fast-forward-outline": 63185,
    "fax": 61970,
    "feather": 63186,
    "ferry": 61971,
    "file": 61972,
    "file-account": 63290,
    "file-chart": 61973,
    "file-check": 61974,
    "file-cloud": 61975,
    "file-delimited": 61976,
    "file-document": 61977,
    "file-document-box": 61978,
    "file-excel": 61979,
    "file-excel-box": 61980,
    "file-export": 61981,
    "file-find": 61982,
    "file-hidden": 62995,
    "file-image": 61983,
    "file-import": 61984,
    "file-lock": 61985,
    "file-multiple": 61986,
    "file-music": 61987,
    "file-outline": 61988,
    "file-pdf": 61989,
    "file-pdf-box": 61990,
    "file-percent": 63517,
    "file-plus": 63313,
    "file-powerpoint": 61991,
    "file-powerpoint-box": 61992,
    "file-presentation-box": 61993,
    "file-restore": 63088,
    "file-send": 61994,
    "file-tree": 63045,
    "file-video": 61995,
    "file-word": 61996,
    "file-word-box": 61997,
    "file-xml": 61998,
    "film": 61999,
    "filmstrip": 62000,
    "filmstrip-off": 62001,
    "filter": 62002,
    "filter-outline": 62003,
    "filter-remove": 62004,
    "filter-remove-outline": 62005,
    "filter-variant": 62006,
    "finance": 63518,
    "find-replace": 63187,
    "fingerprint": 62007,
    "fire": 62008,
    "firefox": 62009,
    "fish": 62010,
    "flag": 62011,
    "flag-checkered": 62012,
    "flag-outline": 62013,
    "flag-triangle": 62015,
    "flag-variant": 62016,
    "flag-variant-outline": 62014,
    "flash": 62017,
    "flash-auto": 62018,
    "flash-circle": 63519,
    "flash-off": 62019,
    "flash-outline": 63188,
    "flash-red-eye": 63098,
    "flashlight": 62020,
    "flashlight-off": 62021,
    "flask": 61587,
    "flask-empty": 61588,
    "flask-empty-outline": 61589,
    "flask-outline": 61590,
    "flattr": 62022,
    "flip-to-back": 62023,
    "flip-to-front": 62024,
    "floor-plan": 63520,
    "floppy": 62025,
    "flower": 62026,
    "folder": 62027,
    "folder-account": 62028,
    "folder-download": 62029,
    "folder-google-drive": 62030,
    "folder-image": 62031,
    "folder-lock": 62032,
    "folder-lock-open": 62033,
    "folder-move": 62034,
    "folder-multiple": 62035,
    "folder-multiple-image": 62036,
    "folder-multiple-outline": 62037,
    "folder-open": 63343,
    "folder-outline": 62038,
    "folder-plus": 62039,
    "folder-remove": 62040,
    "folder-star": 63132,
    "folder-upload": 62041,
    "font-awesome": 61498,
    "food": 62042,
    "food-apple": 62043,
    "food-croissant": 63431,
    "food-fork-drink": 62962,
    "food-off": 62963,
    "food-variant": 62044,
    "football": 62045,
    "football-australian": 62046,
    "football-helmet": 62047,
    "forklift": 63432,
    "format-align-bottom": 63314,
    "format-align-center": 62048,
    "format-align-justify": 62049,
    "format-align-left": 62050,
    "format-align-middle": 63315,
    "format-align-right": 62051,
    "format-align-top": 63316,
    "format-annotation-plus": 63046,
    "format-bold": 62052,
    "format-clear": 62053,
    "format-color-fill": 62054,
    "format-color-text": 63133,
    "format-float-center": 62055,
    "format-float-left": 62056,
    "format-float-none": 62057,
    "format-float-right": 62058,
    "format-font": 63189,
    "format-header-1": 62059,
    "format-header-2": 62060,
    "format-header-3": 62061,
    "format-header-4": 62062,
    "format-header-5": 62063,
    "format-header-6": 62064,
    "format-header-decrease": 62065,
    "format-header-equal": 62066,
    "format-header-increase": 62067,
    "format-header-pound": 62068,
    "format-horizontal-align-center": 63006,
    "format-horizontal-align-left": 63007,
    "format-horizontal-align-right": 63008,
    "format-indent-decrease": 62069,
    "format-indent-increase": 62070,
    "format-italic": 62071,
    "format-line-spacing": 62072,
    "format-line-style": 62920,
    "format-line-weight": 62921,
    "format-list-bulleted": 62073,
    "format-list-bulleted-type": 62074,
    "format-list-checks": 63317,
    "format-list-numbers": 62075,
    "format-page-break": 63190,
    "format-paint": 62076,
    "format-paragraph": 62077,
    "format-pilcrow": 63191,
    "format-quote-close": 62078,
    "format-quote-open": 63318,
    "format-rotate-90": 63145,
    "format-section": 63134,
    "format-size": 62079,
    "format-strikethrough": 62080,
    "format-strikethrough-variant": 62081,
    "format-subscript": 62082,
    "format-superscript": 62083,
    "format-text": 62084,
    "format-textdirection-l-to-r": 62085,
    "format-textdirection-r-to-l": 62086,
    "format-title": 62964,
    "format-underline": 62087,
    "format-vertical-align-bottom": 63009,
    "format-vertical-align-center": 63010,
    "format-vertical-align-top": 63011,
    "format-wrap-inline": 62088,
    "format-wrap-square": 62089,
    "format-wrap-tight": 62090,
    "format-wrap-top-bottom": 62091,
    "forum": 62092,
    "forum-outline": 63521,
    "forward": 62093,
    "foursquare": 62094,
    "fridge": 62095,
    "fridge-filled": 62096,
    "fridge-filled-bottom": 62097,
    "fridge-filled-top": 62098,
    "fuel": 63433,
    "fullscreen": 62099,
    "fullscreen-exit": 62100,
    "function": 62101,
    "gamepad": 62102,
    "gamepad-variant": 62103,
    "garage": 63192,
    "garage-open": 63193,
    "gas-cylinder": 63047,
    "gas-station": 62104,
    "gate": 62105,
    "gauge": 62106,
    "gavel": 62107,
    "gender-female": 62108,
    "gender-male": 62109,
    "gender-male-female": 62110,
    "gender-transgender": 62111,
    "gesture": 63434,
    "gesture-double-tap": 63291,
    "gesture-swipe-down": 63292,
    "gesture-swipe-left": 63293,
    "gesture-swipe-right": 63294,
    "gesture-swipe-up": 63295,
    "gesture-tap": 63296,
    "gesture-two-double-tap": 63297,
    "gesture-two-tap": 63298,
    "ghost": 62112,
    "gift": 62113,
    "git": 62114,
    "github-box": 62115,
    "github-circle": 62116,
    "github-face": 63194,
    "glass-flute": 62117,
    "glass-mug": 62118,
    "glass-stange": 62119,
    "glass-tulip": 62120,
    "glassdoor": 62121,
    "glasses": 62122,
    "gmail": 62123,
    "gnome": 62124,
    "golf": 63522,
    "gondola": 63109,
    "google": 62125,
    "google-analytics": 63435,
    "google-assistant": 63436,
    "google-cardboard": 62126,
    "google-chrome": 62127,
    "google-circles": 62128,
    "google-circles-communities": 62129,
    "google-circles-extended": 62130,
    "google-circles-group": 62131,
    "google-controller": 62132,
    "google-controller-off": 62133,
    "google-drive": 62134,
    "google-earth": 62135,
    "google-glass": 62136,
    "google-home": 63523,
    "google-keep": 63195,
    "google-maps": 62965,
    "google-nearby": 62137,
    "google-pages": 62138,
    "google-photos": 63196,
    "google-physical-web": 62139,
    "google-play": 62140,
    "google-plus": 62141,
    "google-plus-box": 62142,
    "google-translate": 62143,
    "google-wallet": 62144,
    "gradient": 63135,
    "grease-pencil": 63048,
    "grid": 62145,
    "grid-large": 63319,
    "grid-off": 62146,
    "group": 62147,
    "guitar-acoustic": 63344,
    "guitar-electric": 62148,
    "guitar-pick": 62149,
    "guitar-pick-outline": 62150,
    "guy-fawkes-mask": 63524,
    "hackernews": 63012,
    "hamburger": 63108,
    "hand-pointing-right": 62151,
    "hanger": 62152,
    "hangouts": 62153,
    "harddisk": 62154,
    "headphones": 62155,
    "headphones-box": 62156,
    "headphones-off": 63437,
    "headphones-settings": 62157,
    "headset": 62158,
    "headset-dock": 62159,
    "headset-off": 62160,
    "heart": 62161,
    "heart-box": 62162,
    "heart-box-outline": 62163,
    "heart-broken": 62164,
    "heart-half": 63198,
    "heart-half-full": 63197,
    "heart-half-outline": 63199,
    "heart-off": 63320,
    "heart-outline": 62165,
    "heart-pulse": 62966,
    "help": 62166,
    "help-box": 63370,
    "help-circle": 62167,
    "help-circle-outline": 63013,
    "help-network": 63220,
    "hexagon": 62168,
    "hexagon-multiple": 63200,
    "hexagon-outline": 62169,
    "high-definition": 63438,
    "highway": 62967,
    "history": 62170,
    "hololens": 62171,
    "home": 62172,
    "home-account": 63525,
    "home-assistant": 63439,
    "home-automation": 63440,
    "home-circle": 63441,
    "home-heart": 63526,
    "home-map-marker": 62968,
    "home-modern": 62173,
    "home-outline": 63136,
    "home-variant": 62174,
    "hook": 63201,
    "hook-off": 63202,
    "hops": 62175,
    "hospital": 62176,
    "hospital-building": 62177,
    "hospital-marker": 62178,
    "hot-tub": 63527,
    "hotel": 62179,
    "houzz": 62180,
    "houzz-box": 62181,
    "hulu": 63528,
    "human": 62182,
    "human-child": 62183,
    "human-female": 63049,
    "human-greeting": 63050,
    "human-handsdown": 63051,
    "human-handsup": 63052,
    "human-male": 63053,
    "human-male-female": 62184,
    "human-pregnant": 62927,
    "humble-bundle": 63299,
    "ice-cream": 63529,
    "image": 62185,
    "image-album": 62186,
    "image-area": 62187,
    "image-area-close": 62188,
    "image-broken": 62189,
    "image-broken-variant": 62190,
    "image-filter": 62191,
    "image-filter-black-white": 62192,
    "image-filter-center-focus": 62193,
    "image-filter-center-focus-weak": 62194,
    "image-filter-drama": 62195,
    "image-filter-frames": 62196,
    "image-filter-hdr": 62197,
    "image-filter-none": 62198,
    "image-filter-tilt-shift": 62199,
    "image-filter-vintage": 62200,
    "image-multiple": 62201,
    "image-off": 63530,
    "import": 62202,
    "inbox": 63110,
    "inbox-arrow-down": 62203,
    "inbox-arrow-up": 62417,
    "incognito": 62969,
    "infinity": 63203,
    "information": 62204,
    "information-outline": 62205,
    "information-variant": 63054,
    "instagram": 62206,
    "instapaper": 62207,
    "internet-explorer": 62208,
    "invert-colors": 62209,
    "itunes": 63094,
    "jeepney": 62210,
    "jira": 62211,
    "jsfiddle": 62212,
    "json": 63014,
    "karate": 63531,
    "keg": 62213,
    "kettle": 62970,
    "key": 62214,
    "key-change": 62215,
    "key-minus": 62216,
    "key-plus": 62217,
    "key-remove": 62218,
    "key-variant": 62219,
    "keyboard": 62220,
    "keyboard-backspace": 62221,
    "keyboard-caps": 62222,
    "keyboard-close": 62223,
    "keyboard-off": 62224,
    "keyboard-return": 62225,
    "keyboard-tab": 62226,
    "keyboard-variant": 62227,
    "kickstarter": 63300,
    "kodi": 62228,
    "label": 62229,
    "label-outline": 62230,
    "ladybug": 63532,
    "lambda": 63015,
    "lamp": 63156,
    "lan": 62231,
    "lan-connect": 62232,
    "lan-disconnect": 62233,
    "lan-pending": 62234,
    "language-c": 63089,
    "language-cpp": 63090,
    "language-csharp": 62235,
    "language-css3": 62236,
    "language-go": 63442,
    "language-html5": 62237,
    "language-javascript": 62238,
    "language-php": 62239,
    "language-python": 62240,
    "language-python-text": 62241,
    "language-r": 63443,
    "language-swift": 63204,
    "language-typescript": 63205,
    "laptop": 62242,
    "laptop-chromebook": 62243,
    "laptop-mac": 62244,
    "laptop-off": 63206,
    "laptop-windows": 62245,
    "lastfm": 62246,
    "lastpass": 62534,
    "launch": 62247,
    "lava-lamp": 63444,
    "layers": 62248,
    "layers-off": 62249,
    "lead-pencil": 63055,
    "leaf": 62250,
    "led-off": 62251,
    "led-on": 62252,
    "led-outline": 62253,
    "led-strip": 63445,
    "led-variant-off": 62254,
    "led-variant-on": 62255,
    "led-variant-outline": 62256,
    "library": 62257,
    "library-books": 62258,
    "library-music": 62259,
    "library-plus": 62260,
    "lightbulb": 62261,
    "lightbulb-on": 63207,
    "lightbulb-on-outline": 63208,
    "lightbulb-outline": 62262,
    "link": 62263,
    "link-off": 62264,
    "link-variant": 62265,
    "link-variant-off": 62266,
    "linkedin": 62267,
    "linkedin-box": 62268,
    "linux": 62269,
    "loading": 63345,
    "lock": 62270,
    "lock-open": 62271,
    "lock-open-outline": 62272,
    "lock-outline": 62273,
    "lock-pattern": 63209,
    "lock-plus": 62971,
    "lock-reset": 63346,
    "locker": 63446,
    "locker-multiple": 63447,
    "login": 62274,
    "login-variant": 62972,
    "logout": 62275,
    "logout-variant": 62973,
    "looks": 62276,
    "loop": 63210,
    "loupe": 62277,
    "lumx": 62278,
    "magnet": 62279,
    "magnet-on": 62280,
    "magnify": 62281,
    "magnify-minus": 62282,
    "magnify-minus-outline": 63211,
    "magnify-plus": 62283,
    "magnify-plus-outline": 63212,
    "mail-ru": 62284,
    "mailbox": 63213,
    "map": 62285,
    "map-marker": 62286,
    "map-marker-circle": 62287,
    "map-marker-minus": 63056,
    "map-marker-multiple": 62288,
    "map-marker-off": 62289,
    "map-marker-outline": 63448,
    "map-marker-plus": 63057,
    "map-marker-radius": 62290,
    "margin": 62291,
    "markdown": 62292,
    "marker": 63058,
    "marker-check": 62293,
    "martini": 62294,
    "material-ui": 62295,
    "math-compass": 62296,
    "matrix": 63016,
    "maxcdn": 62297,
    "medical-bag": 63214,
    "medium": 62298,
    "memory": 62299,
    "menu": 62300,
    "menu-down": 62301,
    "menu-down-outline": 63157,
    "menu-left": 62302,
    "menu-right": 62303,
    "menu-up": 62304,
    "menu-up-outline": 63158,
    "message": 62305,
    "message-alert": 62306,
    "message-bulleted": 63137,
    "message-bulleted-off": 63138,
    "message-draw": 62307,
    "message-image": 62308,
    "message-outline": 62309,
    "message-plus": 63059,
    "message-processing": 62310,
    "message-reply": 62311,
    "message-reply-text": 62312,
    "message-settings": 63215,
    "message-settings-variant": 63216,
    "message-text": 62313,
    "message-text-outline": 62314,
    "message-video": 62315,
    "meteor": 63017,
    "metronome": 63449,
    "metronome-tick": 63450,
    "micro-sd": 63451,
    "microphone": 62316,
    "microphone-off": 62317,
    "microphone-outline": 62318,
    "microphone-settings": 62319,
    "microphone-variant": 62320,
    "microphone-variant-off": 62321,
    "microscope": 63060,
    "microsoft": 62322,
    "minecraft": 62323,
    "minus": 62324,
    "minus-box": 62325,
    "minus-box-outline": 63217,
    "minus-circle": 62326,
    "minus-circle-outline": 62327,
    "minus-network": 62328,
    "mixcloud": 63018,
    "mixer": 63452,
    "monitor": 62329,
    "monitor-multiple": 62330,
    "more": 62331,
    "motorbike": 62332,
    "mouse": 62333,
    "mouse-off": 62334,
    "mouse-variant": 62335,
    "mouse-variant-off": 62336,
    "move-resize": 63061,
    "move-resize-variant": 63062,
    "movie": 62337,
    "movie-roll": 63453,
    "multiplication": 62338,
    "multiplication-box": 62339,
    "mushroom": 63454,
    "mushroom-outline": 63455,
    "music": 63321,
    "music-box": 62340,
    "music-box-outline": 62341,
    "music-circle": 62342,
    "music-note": 62343,
    "music-note-bluetooth": 62974,
    "music-note-bluetooth-off": 62975,
    "music-note-eighth": 62344,
    "music-note-half": 62345,
    "music-note-off": 62346,
    "music-note-quarter": 62347,
    "music-note-sixteenth": 62348,
    "music-note-whole": 62349,
    "music-off": 63322,
    "nature": 62350,
    "nature-people": 62351,
    "navigation": 62352,
    "near-me": 62925,
    "needle": 62353,
    "nest-protect": 62354,
    "nest-thermostat": 62355,
    "netflix": 63301,
    "network": 63218,
    "new-box": 62356,
    "newspaper": 62357,
    "nfc": 62358,
    "nfc-tap": 62359,
    "nfc-variant": 62360,
    "ninja": 63347,
    "nintendo-switch": 63456,
    "nodejs": 62361,
    "note": 62362,
    "note-multiple": 63159,
    "note-multiple-outline": 63160,
    "note-outline": 62363,
    "note-plus": 62364,
    "note-plus-outline": 62365,
    "note-text": 62366,
    "notebook": 63533,
    "notification-clear-all": 62367,
    "npm": 63222,
    "nuke": 63139,
    "null": 63457,
    "numeric": 62368,
    "numeric-0-box": 62369,
    "numeric-0-box-multiple-outline": 62370,
    "numeric-0-box-outline": 62371,
    "numeric-1-box": 62372,
    "numeric-1-box-multiple-outline": 62373,
    "numeric-1-box-outline": 62374,
    "numeric-2-box": 62375,
    "numeric-2-box-multiple-outline": 62376,
    "numeric-2-box-outline": 62377,
    "numeric-3-box": 62378,
    "numeric-3-box-multiple-outline": 62379,
    "numeric-3-box-outline": 62380,
    "numeric-4-box": 62381,
    "numeric-4-box-multiple-outline": 62382,
    "numeric-4-box-outline": 62383,
    "numeric-5-box": 62384,
    "numeric-5-box-multiple-outline": 62385,
    "numeric-5-box-outline": 62386,
    "numeric-6-box": 62387,
    "numeric-6-box-multiple-outline": 62388,
    "numeric-6-box-outline": 62389,
    "numeric-7-box": 62390,
    "numeric-7-box-multiple-outline": 62391,
    "numeric-7-box-outline": 62392,
    "numeric-8-box": 62393,
    "numeric-8-box-multiple-outline": 62394,
    "numeric-8-box-outline": 62395,
    "numeric-9-box": 62396,
    "numeric-9-box-multiple-outline": 62397,
    "numeric-9-box-outline": 62398,
    "numeric-9-plus-box": 62399,
    "numeric-9-plus-box-multiple-outline": 62400,
    "numeric-9-plus-box-outline": 62401,
    "nut": 63223,
    "nutrition": 62402,
    "oar": 63099,
    "octagon": 62403,
    "octagon-outline": 62404,
    "octagram": 63224,
    "octagram-outline": 63348,
    "odnoklassniki": 62405,
    "office": 62406,
    "oil": 62407,
    "oil-temperature": 62408,
    "omega": 62409,
    "onedrive": 62410,
    "onenote": 63302,
    "opacity": 62924,
    "open-in-app": 62411,
    "open-in-new": 62412,
    "openid": 62413,
    "opera": 62414,
    "orbit": 61464,
    "ornament": 62415,
    "ornament-variant": 62416,
    "owl": 62418,
    "package": 62419,
    "package-down": 62420,
    "package-up": 62421,
    "package-variant": 62422,
    "package-variant-closed": 62423,
    "page-first": 62976,
    "page-last": 62977,
    "page-layout-body": 63225,
    "page-layout-footer": 63226,
    "page-layout-header": 63227,
    "page-layout-sidebar-left": 63228,
    "page-layout-sidebar-right": 63229,
    "palette": 62424,
    "palette-advanced": 62425,
    "panda": 62426,
    "pandora": 62427,
    "panorama": 62428,
    "panorama-fisheye": 62429,
    "panorama-horizontal": 62430,
    "panorama-vertical": 62431,
    "panorama-wide-angle": 62432,
    "paper-cut-vertical": 62433,
    "paperclip": 62434,
    "parking": 62435,
    "passport": 63458,
    "pause": 62436,
    "pause-circle": 62437,
    "pause-circle-outline": 62438,
    "pause-octagon": 62439,
    "pause-octagon-outline": 62440,
    "paw": 62441,
    "paw-off": 63063,
    "pen": 62442,
    "pencil": 62443,
    "pencil-box": 62444,
    "pencil-box-outline": 62445,
    "pencil-circle": 63230,
    "pencil-circle-outline": 63349,
    "pencil-lock": 62446,
    "pencil-off": 62447,
    "pentagon": 63231,
    "pentagon-outline": 63232,
    "percent": 62448,
    "periodic-table-co2": 63459,
    "periscope": 63303,
    "pharmacy": 62449,
    "phone": 62450,
    "phone-bluetooth": 62451,
    "phone-classic": 62978,
    "phone-forward": 62452,
    "phone-hangup": 62453,
    "phone-in-talk": 62454,
    "phone-incoming": 62455,
    "phone-locked": 62456,
    "phone-log": 62457,
    "phone-minus": 63064,
    "phone-missed": 62458,
    "phone-outgoing": 62459,
    "phone-paused": 62460,
    "phone-plus": 63065,
    "phone-return": 63534,
    "phone-settings": 62461,
    "phone-voip": 62462,
    "pi": 62463,
    "pi-box": 62464,
    "piano": 63100,
    "pig": 62465,
    "pill": 62466,
    "pillar": 63233,
    "pin": 62467,
    "pin-off": 62468,
    "pine-tree": 62469,
    "pine-tree-box": 62470,
    "pinterest": 62471,
    "pinterest-box": 62472,
    "pipe": 63460,
    "pipe-disconnected": 63461,
    "pistol": 63234,
    "pizza": 62473,
    "plane-shield": 63162,
    "play": 62474,
    "play-box-outline": 62475,
    "play-circle": 62476,
    "play-circle-outline": 62477,
    "play-pause": 62478,
    "play-protected-content": 62479,
    "playlist-check": 62919,
    "playlist-minus": 62480,
    "playlist-play": 62481,
    "playlist-plus": 62482,
    "playlist-remove": 62483,
    "playstation": 62484,
    "plex": 63161,
    "plus": 62485,
    "plus-box": 62486,
    "plus-box-outline": 63235,
    "plus-circle": 62487,
    "plus-circle-multiple-outline": 62488,
    "plus-circle-outline": 62489,
    "plus-network": 62490,
    "plus-one": 62491,
    "plus-outline": 63236,
    "pocket": 62492,
    "pokeball": 62493,
    "poker-chip": 63535,
    "polaroid": 62494,
    "poll": 62495,
    "poll-box": 62496,
    "polymer": 62497,
    "pool": 62982,
    "popcorn": 62498,
    "pot": 63066,
    "pot-mix": 63067,
    "pound": 62499,
    "pound-box": 62500,
    "power": 62501,
    "power-plug": 63140,
    "power-plug-off": 63141,
    "power-settings": 62502,
    "power-socket": 62503,
    "power-socket-eu": 63462,
    "power-socket-uk": 63463,
    "power-socket-us": 63464,
    "prescription": 63237,
    "presentation": 62504,
    "presentation-play": 62505,
    "printer": 62506,
    "printer-3d": 62507,
    "printer-alert": 62508,
    "printer-settings": 63238,
    "priority-high": 62979,
    "priority-low": 62980,
    "professional-hexagon": 62509,
    "projector": 62510,
    "projector-screen": 62511,
    "publish": 63142,
    "pulse": 62512,
    "puzzle": 62513,
    "qqchat": 62981,
    "qrcode": 62514,
    "qrcode-scan": 62515,
    "quadcopter": 62516,
    "quality-high": 62517,
    "quicktime": 62518,
    "radar": 62519,
    "radiator": 62520,
    "radio": 62521,
    "radio-handheld": 62522,
    "radio-tower": 62523,
    "radioactive": 62524,
    "radiobox-blank": 62525,
    "radiobox-marked": 62526,
    "raspberrypi": 62527,
    "ray-end": 62528,
    "ray-end-arrow": 62529,
    "ray-start": 62530,
    "ray-start-arrow": 62531,
    "ray-start-end": 62532,
    "ray-vertex": 62533,
    "react": 63239,
    "read": 62535,
    "receipt": 62537,
    "record": 62538,
    "record-rec": 62539,
    "recycle": 62540,
    "reddit": 62541,
    "redo": 62542,
    "redo-variant": 62543,
    "refresh": 62544,
    "regex": 62545,
    "relative-scale": 62546,
    "reload": 62547,
    "remote": 62548,
    "rename-box": 62549,
    "reorder-horizontal": 63111,
    "reorder-vertical": 63112,
    "repeat": 62550,
    "repeat-off": 62551,
    "repeat-once": 62552,
    "replay": 62553,
    "reply": 62554,
    "reply-all": 62555,
    "reproduction": 62556,
    "resize-bottom-right": 62557,
    "responsive": 62558,
    "restart": 63240,
    "restore": 63143,
    "rewind": 62559,
    "rewind-outline": 63241,
    "rhombus": 63242,
    "rhombus-outline": 63243,
    "ribbon": 62560,
    "rice": 63465,
    "ring": 63466,
    "road": 62561,
    "road-variant": 62562,
    "robot": 63144,
    "rocket": 62563,
    "roomba": 63244,
    "rotate-3d": 62564,
    "rotate-left": 62565,
    "rotate-left-variant": 62566,
    "rotate-right": 62567,
    "rotate-right-variant": 62568,
    "rounded-corner": 62983,
    "router-wireless": 62569,
    "routes": 62570,
    "rowing": 62984,
    "rss": 62571,
    "rss-box": 62572,
    "ruler": 62573,
    "run": 63245,
    "run-fast": 62574,
    "sale": 62575,
    "sass": 63467,
    "satellite": 62576,
    "satellite-variant": 62577,
    "saxophone": 62985,
    "scale": 62578,
    "scale-balance": 62929,
    "scale-bathroom": 62579,
    "scanner": 63146,
    "school": 62580,
    "screen-rotation": 62581,
    "screen-rotation-lock": 62582,
    "screwdriver": 62583,
    "script": 62584,
    "sd": 62585,
    "seal": 62586,
    "search-web": 63246,
    "seat-flat": 62587,
    "seat-flat-angled": 62588,
    "seat-individual-suite": 62589,
    "seat-legroom-extra": 62590,
    "seat-legroom-normal": 62591,
    "seat-legroom-reduced": 62592,
    "seat-recline-extra": 62593,
    "seat-recline-normal": 62594,
    "security": 62595,
    "security-home": 63113,
    "security-network": 62596,
    "select": 62597,
    "select-all": 62598,
    "select-inverse": 62599,
    "select-off": 62600,
    "selection": 62601,
    "selection-off": 63350,
    "send": 62602,
    "send-secure": 63468,
    "serial-port": 63068,
    "server": 62603,
    "server-minus": 62604,
    "server-network": 62605,
    "server-network-off": 62606,
    "server-off": 62607,
    "server-plus": 62608,
    "server-remove": 62609,
    "server-security": 62610,
    "set-all": 63351,
    "set-center": 63352,
    "set-center-right": 63353,
    "set-left": 63354,
    "set-left-center": 63355,
    "set-left-right": 63356,
    "set-none": 63357,
    "set-right": 63358,
    "settings": 62611,
    "settings-box": 62612,
    "shape": 63536,
    "shape-circle-plus": 63069,
    "shape-outline": 63537,
    "shape-plus": 62613,
    "shape-polygon-plus": 63070,
    "shape-rectangle-plus": 63071,
    "shape-square-plus": 63072,
    "share": 62614,
    "share-variant": 62615,
    "shield": 62616,
    "shield-half-full": 63359,
    "shield-outline": 62617,
    "ship-wheel": 63538,
    "shopping": 62618,
    "shopping-music": 62619,
    "shovel": 63247,
    "shovel-off": 63248,
    "shredder": 62620,
    "shuffle": 62621,
    "shuffle-disabled": 62622,
    "shuffle-variant": 62623,
    "sigma": 62624,
    "sigma-lower": 63019,
    "sign-caution": 62625,
    "sign-direction": 63360,
    "sign-text": 63361,
    "signal": 62626,
    "signal-2g": 63249,
    "signal-3g": 63250,
    "signal-4g": 63251,
    "signal-hspa": 63252,
    "signal-hspa-plus": 63253,
    "signal-off": 63362,
    "signal-variant": 62986,
    "silverware": 62627,
    "silverware-fork": 62628,
    "silverware-spoon": 62629,
    "silverware-variant": 62630,
    "sim": 62631,
    "sim-alert": 62632,
    "sim-off": 62633,
    "sitemap": 62634,
    "skip-backward": 62635,
    "skip-forward": 62636,
    "skip-next": 62637,
    "skip-next-circle": 63073,
    "skip-next-circle-outline": 63074,
    "skip-previous": 62638,
    "skip-previous-circle": 63075,
    "skip-previous-circle-outline": 63076,
    "skull": 63115,
    "skype": 62639,
    "skype-business": 62640,
    "slack": 62641,
    "sleep": 62642,
    "sleep-off": 62643,
    "smoking": 62644,
    "smoking-off": 62645,
    "snapchat": 62646,
    "snowflake": 63254,
    "snowman": 62647,
    "soccer": 62648,
    "soccer-field": 63539,
    "sofa": 62649,
    "solid": 63116,
    "sort": 62650,
    "sort-alphabetical": 62651,
    "sort-ascending": 62652,
    "sort-descending": 62653,
    "sort-numeric": 62654,
    "sort-variant": 62655,
    "soundcloud": 62656,
    "source-branch": 63020,
    "source-commit": 63255,
    "source-commit-end": 63256,
    "source-commit-end-local": 63257,
    "source-commit-local": 63258,
    "source-commit-next-local": 63259,
    "source-commit-start": 63260,
    "source-commit-start-next-local": 63261,
    "source-fork": 62657,
    "source-merge": 63021,
    "source-pull": 62658,
    "soy-sauce": 63469,
    "speaker": 62659,
    "speaker-off": 62660,
    "speaker-wireless": 63262,
    "speedometer": 62661,
    "spellcheck": 62662,
    "spotify": 62663,
    "spotlight": 62664,
    "spotlight-beam": 62665,
    "spray": 63077,
    "square": 63331,
    "square-inc": 62666,
    "square-inc-cash": 62667,
    "square-outline": 63330,
    "square-root": 63363,
    "stack-overflow": 62668,
    "stackexchange": 62987,
    "stadium": 63263,
    "stairs": 62669,
    "standard-definition": 63470,
    "star": 62670,
    "star-circle": 62671,
    "star-half": 62672,
    "star-off": 62673,
    "star-outline": 62674,
    "steam": 62675,
    "steering": 62676,
    "step-backward": 62677,
    "step-backward-2": 62678,
    "step-forward": 62679,
    "step-forward-2": 62680,
    "stethoscope": 62681,
    "sticker": 62928,
    "sticker-emoji": 63364,
    "stocking": 62682,
    "stop": 62683,
    "stop-circle": 63078,
    "stop-circle-outline": 63079,
    "store": 62684,
    "store-24-hour": 62685,
    "stove": 62686,
    "subdirectory-arrow-left": 62988,
    "subdirectory-arrow-right": 62989,
    "subway": 63147,
    "subway-variant": 62687,
    "summit": 63365,
    "sunglasses": 62688,
    "surround-sound": 62917,
    "surround-sound-2-0": 63471,
    "surround-sound-3-1": 63472,
    "surround-sound-5-1": 63473,
    "surround-sound-7-1": 63474,
    "svg": 63264,
    "swap-horizontal": 62689,
    "swap-vertical": 62690,
    "swim": 62691,
    "switch": 62692,
    "sword": 62693,
    "sword-cross": 63366,
    "sync": 62694,
    "sync-alert": 62695,
    "sync-off": 62696,
    "tab": 62697,
    "tab-plus": 63323,
    "tab-unselected": 62698,
    "table": 62699,
    "table-column": 63540,
    "table-column-plus-after": 62700,
    "table-column-plus-before": 62701,
    "table-column-remove": 62702,
    "table-column-width": 62703,
    "table-edit": 62704,
    "table-large": 62705,
    "table-of-contents": 63541,
    "table-row": 63542,
    "table-row-height": 62706,
    "table-row-plus-after": 62707,
    "table-row-plus-before": 62708,
    "table-row-remove": 62709,
    "table-settings": 63543,
    "tablet": 62710,
    "tablet-android": 62711,
    "tablet-ipad": 62712,
    "taco": 63329,
    "tag": 62713,
    "tag-faces": 62714,
    "tag-heart": 63114,
    "tag-multiple": 62715,
    "tag-outline": 62716,
    "tag-plus": 63265,
    "tag-remove": 63266,
    "tag-text-outline": 62717,
    "target": 62718,
    "taxi": 62719,
    "teamviewer": 62720,
    "telegram": 62721,
    "television": 62722,
    "television-box": 63544,
    "television-classic": 63475,
    "television-classic-off": 63545,
    "television-guide": 62723,
    "television-off": 63546,
    "temperature-celsius": 62724,
    "temperature-fahrenheit": 62725,
    "temperature-kelvin": 62726,
    "tennis": 62727,
    "tent": 62728,
    "terrain": 62729,
    "test-tube": 63080,
    "text-shadow": 63081,
    "text-to-speech": 62730,
    "text-to-speech-off": 62731,
    "textbox": 62990,
    "textbox-password": 63476,
    "texture": 62732,
    "theater": 62733,
    "theme-light-dark": 62734,
    "thermometer": 62735,
    "thermometer-lines": 62736,
    "thought-bubble": 63477,
    "thought-bubble-outline": 63478,
    "thumb-down": 62737,
    "thumb-down-outline": 62738,
    "thumb-up": 62739,
    "thumb-up-outline": 62740,
    "thumbs-up-down": 62741,
    "ticket": 62742,
    "ticket-account": 62743,
    "ticket-confirmation": 62744,
    "ticket-percent": 63267,
    "tie": 62745,
    "tilde": 63268,
    "timelapse": 62746,
    "timer": 62747,
    "timer-10": 62748,
    "timer-3": 62749,
    "timer-off": 62750,
    "timer-sand": 62751,
    "timer-sand-empty": 63148,
    "timer-sand-full": 63371,
    "timetable": 62752,
    "toggle-switch": 62753,
    "toggle-switch-off": 62754,
    "tooltip": 62755,
    "tooltip-edit": 62756,
    "tooltip-image": 62757,
    "tooltip-outline": 62758,
    "tooltip-outline-plus": 62759,
    "tooltip-text": 62760,
    "tooth": 62761,
    "tor": 62762,
    "tower-beach": 63104,
    "tower-fire": 63105,
    "towing": 63547,
    "trackpad": 63479,
    "traffic-light": 62763,
    "train": 62764,
    "tram": 62765,
    "transcribe": 62766,
    "transcribe-close": 62767,
    "transfer": 62768,
    "transit-transfer": 63149,
    "translate": 62922,
    "treasure-chest": 63269,
    "tree": 62769,
    "trello": 62770,
    "trending-down": 62771,
    "trending-neutral": 62772,
    "trending-up": 62773,
    "triangle": 62774,
    "triangle-outline": 62775,
    "trophy": 62776,
    "trophy-award": 62777,
    "trophy-outline": 62778,
    "trophy-variant": 62779,
    "trophy-variant-outline": 62780,
    "truck": 62781,
    "truck-delivery": 62782,
    "truck-fast": 63367,
    "truck-trailer": 63270,
    "tshirt-crew": 62783,
    "tshirt-v": 62784,
    "tumblr": 62785,
    "tumblr-reblog": 62786,
    "tune": 63022,
    "tune-vertical": 63082,
    "twitch": 62787,
    "twitter": 62788,
    "twitter-box": 62789,
    "twitter-circle": 62790,
    "twitter-retweet": 62791,
    "uber": 63304,
    "ubuntu": 62792,
    "ultra-high-definition": 63480,
    "umbraco": 62793,
    "umbrella": 62794,
    "umbrella-outline": 62795,
    "undo": 62796,
    "undo-variant": 62797,
    "unfold-less-horizontal": 62798,
    "unfold-less-vertical": 63327,
    "unfold-more-horizontal": 62799,
    "unfold-more-vertical": 63328,
    "ungroup": 62800,
    "unity": 63150,
    "untappd": 62801,
    "update": 63151,
    "upload": 62802,
    "upload-multiple": 63548,
    "upload-network": 63221,
    "usb": 62803,
    "van-passenger": 63481,
    "van-utility": 63482,
    "vanish": 63483,
    "vector-arrange-above": 62804,
    "vector-arrange-below": 62805,
    "vector-circle": 62806,
    "vector-circle-variant": 62807,
    "vector-combine": 62808,
    "vector-curve": 62809,
    "vector-difference": 62810,
    "vector-difference-ab": 62811,
    "vector-difference-ba": 62812,
    "vector-intersection": 62813,
    "vector-line": 62814,
    "vector-point": 62815,
    "vector-polygon": 62816,
    "vector-polyline": 62817,
    "vector-radius": 63305,
    "vector-rectangle": 62918,
    "vector-selection": 62818,
    "vector-square": 61441,
    "vector-triangle": 62819,
    "vector-union": 62820,
    "venmo": 62840,
    "verified": 62821,
    "vibrate": 62822,
    "video": 62823,
    "video-3d": 63484,
    "video-4k-box": 63549,
    "video-input-antenna": 63550,
    "video-input-component": 63551,
    "video-input-hdmi": 63552,
    "video-input-svideo": 63553,
    "video-off": 62824,
    "video-switch": 62825,
    "view-agenda": 62826,
    "view-array": 62827,
    "view-carousel": 62828,
    "view-column": 62829,
    "view-dashboard": 62830,
    "view-dashboard-variant": 63554,
    "view-day": 62831,
    "view-grid": 62832,
    "view-headline": 62833,
    "view-list": 62834,
    "view-module": 62835,
    "view-parallel": 63271,
    "view-quilt": 62836,
    "view-sequential": 63272,
    "view-stream": 62837,
    "view-week": 62838,
    "vimeo": 62839,
    "violin": 62991,
    "visualstudio": 62992,
    "vk": 62841,
    "vk-box": 62842,
    "vk-circle": 62843,
    "vlc": 62844,
    "voice": 62923,
    "voicemail": 62845,
    "volume-high": 62846,
    "volume-low": 62847,
    "volume-medium": 62848,
    "volume-minus": 63325,
    "volume-mute": 63326,
    "volume-off": 62849,
    "volume-plus": 63324,
    "vpn": 62850,
    "vuejs": 63555,
    "walk": 62851,
    "wall": 63485,
    "wallet": 62852,
    "wallet-giftcard": 62853,
    "wallet-membership": 62854,
    "wallet-travel": 62855,
    "wan": 62856,
    "washing-machine": 63273,
    "watch": 62857,
    "watch-export": 62858,
    "watch-import": 62859,
    "watch-vibrate": 63152,
    "water": 62860,
    "water-off": 62861,
    "water-percent": 62862,
    "water-pump": 62863,
    "watermark": 62994,
    "waves": 63372,
    "weather-cloudy": 62864,
    "weather-fog": 62865,
    "weather-hail": 62866,
    "weather-lightning": 62867,
    "weather-lightning-rainy": 63101,
    "weather-night": 62868,
    "weather-partlycloudy": 62869,
    "weather-pouring": 62870,
    "weather-rainy": 62871,
    "weather-snowy": 62872,
    "weather-snowy-rainy": 63102,
    "weather-sunny": 62873,
    "weather-sunset": 62874,
    "weather-sunset-down": 62875,
    "weather-sunset-up": 62876,
    "weather-windy": 62877,
    "weather-windy-variant": 62878,
    "web": 62879,
    "webcam": 62880,
    "webhook": 63023,
    "webpack": 63274,
    "wechat": 62993,
    "weight": 62881,
    "weight-kilogram": 62882,
    "whatsapp": 62883,
    "wheelchair-accessibility": 62884,
    "white-balance-auto": 62885,
    "white-balance-incandescent": 62886,
    "white-balance-iridescent": 62887,
    "white-balance-sunny": 62888,
    "widgets": 63275,
    "wifi": 62889,
    "wifi-off": 62890,
    "wii": 62891,
    "wiiu": 63276,
    "wikipedia": 62892,
    "window-close": 62893,
    "window-closed": 62894,
    "window-maximize": 62895,
    "window-minimize": 62896,
    "window-open": 62897,
    "window-restore": 62898,
    "windows": 62899,
    "wordpress": 62900,
    "worker": 62901,
    "wrap": 62902,
    "wrench": 62903,
    "wunderlist": 62904,
    "xamarin": 63556,
    "xamarin-outline": 63557,
    "xaml": 63091,
    "xbox": 62905,
    "xbox-controller": 62906,
    "xbox-controller-battery-alert": 63306,
    "xbox-controller-battery-empty": 63307,
    "xbox-controller-battery-full": 63308,
    "xbox-controller-battery-low": 63309,
    "xbox-controller-battery-medium": 63310,
    "xbox-controller-battery-unknown": 63311,
    "xbox-controller-off": 62907,
    "xda": 62908,
    "xing": 62909,
    "xing-box": 62910,
    "xing-circle": 62911,
    "xml": 62912,
    "xmpp": 63486,
    "yammer": 63368,
    "yeast": 62913,
    "yelp": 62914,
    "yin-yang": 63103,
    "youtube-creator-studio": 63558,
    "youtube-gaming": 63559,
    "youtube-play": 62915,
    "youtube-tv": 62536,
    "zip-box": 62916,
    "blank": 63116
  };
},692,[],"react-native-vector-icons/glyphmaps/MaterialCommunityIcons.json");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  var _Ionicons = require(_dependencyMap[1], "./glyphmaps/Ionicons.json");

  var _Ionicons2 = babelHelpers.interopRequireDefault(_Ionicons);

  var iconSet = (0, _createIconSet2.default)(_Ionicons2.default, 'Ionicons', 'Ionicons.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},693,[680,694],"react-native-vector-icons/Ionicons.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    "ios-add": 61698,
    "ios-add-circle": 61697,
    "ios-add-circle-outline": 61696,
    "ios-add-outline": 61698,
    "ios-alarm": 62408,
    "ios-alarm-outline": 62407,
    "ios-albums": 62410,
    "ios-albums-outline": 62409,
    "ios-alert": 61700,
    "ios-alert-outline": 61699,
    "ios-american-football": 61702,
    "ios-american-football-outline": 61701,
    "ios-analytics": 62414,
    "ios-analytics-outline": 62413,
    "ios-aperture": 61704,
    "ios-aperture-outline": 61703,
    "ios-apps": 61706,
    "ios-apps-outline": 61705,
    "ios-appstore": 61708,
    "ios-appstore-outline": 61707,
    "ios-archive": 61710,
    "ios-archive-outline": 61709,
    "ios-arrow-back": 62415,
    "ios-arrow-back-outline": 62415,
    "ios-arrow-down": 62416,
    "ios-arrow-down-outline": 62416,
    "ios-arrow-dropdown": 61712,
    "ios-arrow-dropdown-circle": 61711,
    "ios-arrow-dropdown-circle-outline": 61711,
    "ios-arrow-dropdown-outline": 61712,
    "ios-arrow-dropleft": 61714,
    "ios-arrow-dropleft-circle": 61713,
    "ios-arrow-dropleft-circle-outline": 61713,
    "ios-arrow-dropleft-outline": 61714,
    "ios-arrow-dropright": 61716,
    "ios-arrow-dropright-circle": 61715,
    "ios-arrow-dropright-circle-outline": 61715,
    "ios-arrow-dropright-outline": 61716,
    "ios-arrow-dropup": 61718,
    "ios-arrow-dropup-circle": 61717,
    "ios-arrow-dropup-circle-outline": 61717,
    "ios-arrow-dropup-outline": 61718,
    "ios-arrow-forward": 62417,
    "ios-arrow-forward-outline": 62417,
    "ios-arrow-round-back": 61719,
    "ios-arrow-round-back-outline": 61719,
    "ios-arrow-round-down": 61720,
    "ios-arrow-round-down-outline": 61720,
    "ios-arrow-round-forward": 61721,
    "ios-arrow-round-forward-outline": 61721,
    "ios-arrow-round-up": 61722,
    "ios-arrow-round-up-outline": 61722,
    "ios-arrow-up": 62424,
    "ios-arrow-up-outline": 62424,
    "ios-at": 62426,
    "ios-at-outline": 62425,
    "ios-attach": 61723,
    "ios-attach-outline": 61723,
    "ios-backspace": 61725,
    "ios-backspace-outline": 61724,
    "ios-barcode": 62428,
    "ios-barcode-outline": 62427,
    "ios-baseball": 62430,
    "ios-baseball-outline": 62429,
    "ios-basket": 61727,
    "ios-basket-outline": 61726,
    "ios-basketball": 62432,
    "ios-basketball-outline": 62431,
    "ios-battery-charging": 61728,
    "ios-battery-charging-outline": 61728,
    "ios-battery-dead": 61729,
    "ios-battery-dead-outline": 61729,
    "ios-battery-full": 61730,
    "ios-battery-full-outline": 61730,
    "ios-beaker": 61732,
    "ios-beaker-outline": 61731,
    "ios-beer": 61734,
    "ios-beer-outline": 61733,
    "ios-bicycle": 61735,
    "ios-bicycle-outline": 61735,
    "ios-bluetooth": 61736,
    "ios-bluetooth-outline": 61736,
    "ios-boat": 61738,
    "ios-boat-outline": 61737,
    "ios-body": 62436,
    "ios-body-outline": 62435,
    "ios-bonfire": 61740,
    "ios-bonfire-outline": 61739,
    "ios-book": 62440,
    "ios-book-outline": 62439,
    "ios-bookmark": 61742,
    "ios-bookmark-outline": 61741,
    "ios-bookmarks": 62442,
    "ios-bookmarks-outline": 62441,
    "ios-bowtie": 61744,
    "ios-bowtie-outline": 61743,
    "ios-briefcase": 62446,
    "ios-briefcase-outline": 62445,
    "ios-browsers": 62448,
    "ios-browsers-outline": 62447,
    "ios-brush": 61746,
    "ios-brush-outline": 61745,
    "ios-bug": 61748,
    "ios-bug-outline": 61747,
    "ios-build": 61750,
    "ios-build-outline": 61749,
    "ios-bulb": 61752,
    "ios-bulb-outline": 61751,
    "ios-bus": 61754,
    "ios-bus-outline": 61753,
    "ios-cafe": 61756,
    "ios-cafe-outline": 61755,
    "ios-calculator": 62450,
    "ios-calculator-outline": 62449,
    "ios-calendar": 62452,
    "ios-calendar-outline": 62451,
    "ios-call": 61758,
    "ios-call-outline": 61757,
    "ios-camera": 62454,
    "ios-camera-outline": 62453,
    "ios-car": 61760,
    "ios-car-outline": 61759,
    "ios-card": 61762,
    "ios-card-outline": 61761,
    "ios-cart": 62456,
    "ios-cart-outline": 62455,
    "ios-cash": 61764,
    "ios-cash-outline": 61763,
    "ios-chatboxes": 62458,
    "ios-chatboxes-outline": 62457,
    "ios-chatbubbles": 61766,
    "ios-chatbubbles-outline": 61765,
    "ios-checkbox": 61768,
    "ios-checkbox-outline": 61767,
    "ios-checkmark": 62463,
    "ios-checkmark-circle": 61770,
    "ios-checkmark-circle-outline": 61769,
    "ios-checkmark-outline": 62463,
    "ios-clipboard": 61772,
    "ios-clipboard-outline": 61771,
    "ios-clock": 62467,
    "ios-clock-outline": 62466,
    "ios-close": 62470,
    "ios-close-circle": 61774,
    "ios-close-circle-outline": 61773,
    "ios-close-outline": 62470,
    "ios-closed-captioning": 61776,
    "ios-closed-captioning-outline": 61775,
    "ios-cloud": 62476,
    "ios-cloud-circle": 61778,
    "ios-cloud-circle-outline": 61777,
    "ios-cloud-done": 61780,
    "ios-cloud-done-outline": 61779,
    "ios-cloud-download": 62472,
    "ios-cloud-download-outline": 62471,
    "ios-cloud-outline": 62473,
    "ios-cloud-upload": 62475,
    "ios-cloud-upload-outline": 62474,
    "ios-cloudy": 62480,
    "ios-cloudy-night": 62478,
    "ios-cloudy-night-outline": 62477,
    "ios-cloudy-outline": 62479,
    "ios-code": 61783,
    "ios-code-download": 61781,
    "ios-code-download-outline": 61781,
    "ios-code-outline": 61783,
    "ios-code-working": 61782,
    "ios-code-working-outline": 61782,
    "ios-cog": 62482,
    "ios-cog-outline": 62481,
    "ios-color-fill": 61785,
    "ios-color-fill-outline": 61784,
    "ios-color-filter": 62484,
    "ios-color-filter-outline": 62483,
    "ios-color-palette": 61787,
    "ios-color-palette-outline": 61786,
    "ios-color-wand": 62486,
    "ios-color-wand-outline": 62485,
    "ios-compass": 61789,
    "ios-compass-outline": 61788,
    "ios-construct": 61791,
    "ios-construct-outline": 61790,
    "ios-contact": 62490,
    "ios-contact-outline": 62489,
    "ios-contacts": 61793,
    "ios-contacts-outline": 61792,
    "ios-contract": 61794,
    "ios-contract-outline": 61794,
    "ios-contrast": 61795,
    "ios-contrast-outline": 61795,
    "ios-copy": 62492,
    "ios-copy-outline": 62491,
    "ios-create": 61797,
    "ios-create-outline": 61796,
    "ios-crop": 62494,
    "ios-crop-outline": 61798,
    "ios-cube": 61800,
    "ios-cube-outline": 61799,
    "ios-cut": 61802,
    "ios-cut-outline": 61801,
    "ios-desktop": 61804,
    "ios-desktop-outline": 61803,
    "ios-disc": 61806,
    "ios-disc-outline": 61805,
    "ios-document": 61808,
    "ios-document-outline": 61807,
    "ios-done-all": 61809,
    "ios-done-all-outline": 61809,
    "ios-download": 62496,
    "ios-download-outline": 62495,
    "ios-easel": 61811,
    "ios-easel-outline": 61810,
    "ios-egg": 61813,
    "ios-egg-outline": 61812,
    "ios-exit": 61815,
    "ios-exit-outline": 61814,
    "ios-expand": 61816,
    "ios-expand-outline": 61816,
    "ios-eye": 62501,
    "ios-eye-off": 61818,
    "ios-eye-off-outline": 61817,
    "ios-eye-outline": 62500,
    "ios-fastforward": 62503,
    "ios-fastforward-outline": 62502,
    "ios-female": 61819,
    "ios-female-outline": 61819,
    "ios-filing": 62505,
    "ios-filing-outline": 62504,
    "ios-film": 62507,
    "ios-film-outline": 62506,
    "ios-finger-print": 61820,
    "ios-finger-print-outline": 61820,
    "ios-flag": 62509,
    "ios-flag-outline": 62508,
    "ios-flame": 62511,
    "ios-flame-outline": 62510,
    "ios-flash": 61822,
    "ios-flash-outline": 61821,
    "ios-flask": 62513,
    "ios-flask-outline": 62512,
    "ios-flower": 62515,
    "ios-flower-outline": 62514,
    "ios-folder": 62517,
    "ios-folder-open": 61824,
    "ios-folder-open-outline": 61823,
    "ios-folder-outline": 62516,
    "ios-football": 62519,
    "ios-football-outline": 62518,
    "ios-funnel": 61826,
    "ios-funnel-outline": 61825,
    "ios-game-controller-a": 62521,
    "ios-game-controller-a-outline": 62520,
    "ios-game-controller-b": 62523,
    "ios-game-controller-b-outline": 62522,
    "ios-git-branch": 61827,
    "ios-git-branch-outline": 61827,
    "ios-git-commit": 61828,
    "ios-git-commit-outline": 61828,
    "ios-git-compare": 61829,
    "ios-git-compare-outline": 61829,
    "ios-git-merge": 61830,
    "ios-git-merge-outline": 61830,
    "ios-git-network": 61831,
    "ios-git-network-outline": 61831,
    "ios-git-pull-request": 61832,
    "ios-git-pull-request-outline": 61832,
    "ios-glasses": 62527,
    "ios-glasses-outline": 62526,
    "ios-globe": 61834,
    "ios-globe-outline": 61833,
    "ios-grid": 61836,
    "ios-grid-outline": 61835,
    "ios-hammer": 61838,
    "ios-hammer-outline": 61837,
    "ios-hand": 61840,
    "ios-hand-outline": 61839,
    "ios-happy": 61842,
    "ios-happy-outline": 61841,
    "ios-headset": 61844,
    "ios-headset-outline": 61843,
    "ios-heart": 62531,
    "ios-heart-outline": 62530,
    "ios-help": 62534,
    "ios-help-buoy": 61846,
    "ios-help-buoy-outline": 61845,
    "ios-help-circle": 61848,
    "ios-help-circle-outline": 61847,
    "ios-help-outline": 62534,
    "ios-home": 62536,
    "ios-home-outline": 62535,
    "ios-ice-cream": 61850,
    "ios-ice-cream-outline": 61849,
    "ios-image": 61852,
    "ios-image-outline": 61851,
    "ios-images": 61854,
    "ios-images-outline": 61853,
    "ios-infinite": 62538,
    "ios-infinite-outline": 62537,
    "ios-information": 62541,
    "ios-information-circle": 61856,
    "ios-information-circle-outline": 61855,
    "ios-information-outline": 62541,
    "ios-ionic": 61857,
    "ios-ionic-outline": 62542,
    "ios-ionitron": 61859,
    "ios-ionitron-outline": 61858,
    "ios-jet": 61861,
    "ios-jet-outline": 61860,
    "ios-key": 61863,
    "ios-key-outline": 61862,
    "ios-keypad": 62544,
    "ios-keypad-outline": 62543,
    "ios-laptop": 61864,
    "ios-laptop-outline": 61864,
    "ios-leaf": 61866,
    "ios-leaf-outline": 61865,
    "ios-link": 61994,
    "ios-link-outline": 61898,
    "ios-list": 62548,
    "ios-list-box": 61868,
    "ios-list-box-outline": 61867,
    "ios-list-outline": 62548,
    "ios-locate": 61870,
    "ios-locate-outline": 61869,
    "ios-lock": 61872,
    "ios-lock-outline": 61871,
    "ios-log-in": 61873,
    "ios-log-in-outline": 61873,
    "ios-log-out": 61874,
    "ios-log-out-outline": 61874,
    "ios-magnet": 61876,
    "ios-magnet-outline": 61875,
    "ios-mail": 61880,
    "ios-mail-open": 61878,
    "ios-mail-open-outline": 61877,
    "ios-mail-outline": 61879,
    "ios-male": 61881,
    "ios-male-outline": 61881,
    "ios-man": 61883,
    "ios-man-outline": 61882,
    "ios-map": 61885,
    "ios-map-outline": 61884,
    "ios-medal": 61887,
    "ios-medal-outline": 61886,
    "ios-medical": 62556,
    "ios-medical-outline": 62555,
    "ios-medkit": 62558,
    "ios-medkit-outline": 62557,
    "ios-megaphone": 61889,
    "ios-megaphone-outline": 61888,
    "ios-menu": 61891,
    "ios-menu-outline": 61890,
    "ios-mic": 62561,
    "ios-mic-off": 62559,
    "ios-mic-off-outline": 61892,
    "ios-mic-outline": 62560,
    "ios-microphone": 61894,
    "ios-microphone-outline": 61893,
    "ios-moon": 62568,
    "ios-moon-outline": 62567,
    "ios-more": 61896,
    "ios-more-outline": 61895,
    "ios-move": 61899,
    "ios-move-outline": 61899,
    "ios-musical-note": 62571,
    "ios-musical-note-outline": 61900,
    "ios-musical-notes": 62572,
    "ios-musical-notes-outline": 61901,
    "ios-navigate": 62574,
    "ios-navigate-outline": 62573,
    "ios-no-smoking": 61903,
    "ios-no-smoking-outline": 61902,
    "ios-notifications": 61907,
    "ios-notifications-off": 61905,
    "ios-notifications-off-outline": 61904,
    "ios-notifications-outline": 61906,
    "ios-nuclear": 61909,
    "ios-nuclear-outline": 61908,
    "ios-nutrition": 62576,
    "ios-nutrition-outline": 62575,
    "ios-open": 61911,
    "ios-open-outline": 61910,
    "ios-options": 61913,
    "ios-options-outline": 61912,
    "ios-outlet": 61915,
    "ios-outlet-outline": 61914,
    "ios-paper": 62578,
    "ios-paper-outline": 62577,
    "ios-paper-plane": 61917,
    "ios-paper-plane-outline": 61916,
    "ios-partly-sunny": 61919,
    "ios-partly-sunny-outline": 61918,
    "ios-pause": 62584,
    "ios-pause-outline": 62583,
    "ios-paw": 62586,
    "ios-paw-outline": 62585,
    "ios-people": 62588,
    "ios-people-outline": 62587,
    "ios-person": 62590,
    "ios-person-add": 61921,
    "ios-person-add-outline": 61920,
    "ios-person-outline": 62589,
    "ios-phone-landscape": 61922,
    "ios-phone-landscape-outline": 61922,
    "ios-phone-portrait": 61923,
    "ios-phone-portrait-outline": 61923,
    "ios-photos": 62594,
    "ios-photos-outline": 62593,
    "ios-pie": 62596,
    "ios-pie-outline": 62595,
    "ios-pin": 61925,
    "ios-pin-outline": 61924,
    "ios-pint": 62598,
    "ios-pint-outline": 62597,
    "ios-pizza": 61927,
    "ios-pizza-outline": 61926,
    "ios-plane": 61929,
    "ios-plane-outline": 61928,
    "ios-planet": 61931,
    "ios-planet-outline": 61930,
    "ios-play": 62600,
    "ios-play-outline": 62599,
    "ios-podium": 61933,
    "ios-podium-outline": 61932,
    "ios-power": 61935,
    "ios-power-outline": 61934,
    "ios-pricetag": 62605,
    "ios-pricetag-outline": 62604,
    "ios-pricetags": 62607,
    "ios-pricetags-outline": 62606,
    "ios-print": 61937,
    "ios-print-outline": 61936,
    "ios-pulse": 62611,
    "ios-pulse-outline": 61938,
    "ios-qr-scanner": 61939,
    "ios-qr-scanner-outline": 61939,
    "ios-quote": 61941,
    "ios-quote-outline": 61940,
    "ios-radio": 61945,
    "ios-radio-button-off": 61942,
    "ios-radio-button-off-outline": 61942,
    "ios-radio-button-on": 61943,
    "ios-radio-button-on-outline": 61943,
    "ios-radio-outline": 61944,
    "ios-rainy": 62613,
    "ios-rainy-outline": 62612,
    "ios-recording": 62615,
    "ios-recording-outline": 62614,
    "ios-redo": 62617,
    "ios-redo-outline": 62616,
    "ios-refresh": 62620,
    "ios-refresh-circle": 61990,
    "ios-refresh-circle-outline": 61988,
    "ios-refresh-outline": 62620,
    "ios-remove": 61948,
    "ios-remove-circle": 61947,
    "ios-remove-circle-outline": 61946,
    "ios-remove-outline": 61948,
    "ios-reorder": 61949,
    "ios-reorder-outline": 61949,
    "ios-repeat": 61950,
    "ios-repeat-outline": 61950,
    "ios-resize": 61951,
    "ios-resize-outline": 61951,
    "ios-restaurant": 61953,
    "ios-restaurant-outline": 61952,
    "ios-return-left": 61954,
    "ios-return-left-outline": 61954,
    "ios-return-right": 61955,
    "ios-return-right-outline": 61955,
    "ios-reverse-camera": 62623,
    "ios-reverse-camera-outline": 62622,
    "ios-rewind": 62625,
    "ios-rewind-outline": 62624,
    "ios-ribbon": 61957,
    "ios-ribbon-outline": 61956,
    "ios-rose": 62627,
    "ios-rose-outline": 62626,
    "ios-sad": 61959,
    "ios-sad-outline": 61958,
    "ios-school": 61961,
    "ios-school-outline": 61960,
    "ios-search": 62629,
    "ios-search-outline": 61962,
    "ios-send": 61964,
    "ios-send-outline": 61963,
    "ios-settings": 62631,
    "ios-settings-outline": 61965,
    "ios-share": 61969,
    "ios-share-alt": 61967,
    "ios-share-alt-outline": 61966,
    "ios-share-outline": 61968,
    "ios-shirt": 61971,
    "ios-shirt-outline": 61970,
    "ios-shuffle": 62633,
    "ios-shuffle-outline": 62633,
    "ios-skip-backward": 61973,
    "ios-skip-backward-outline": 61972,
    "ios-skip-forward": 61975,
    "ios-skip-forward-outline": 61974,
    "ios-snow": 61976,
    "ios-snow-outline": 61996,
    "ios-speedometer": 62640,
    "ios-speedometer-outline": 62639,
    "ios-square": 61978,
    "ios-square-outline": 61977,
    "ios-star": 62643,
    "ios-star-half": 62641,
    "ios-star-half-outline": 62641,
    "ios-star-outline": 62642,
    "ios-stats": 61980,
    "ios-stats-outline": 61979,
    "ios-stopwatch": 62645,
    "ios-stopwatch-outline": 62644,
    "ios-subway": 61982,
    "ios-subway-outline": 61981,
    "ios-sunny": 62647,
    "ios-sunny-outline": 62646,
    "ios-swap": 61983,
    "ios-swap-outline": 61983,
    "ios-switch": 61985,
    "ios-switch-outline": 61984,
    "ios-sync": 61986,
    "ios-sync-outline": 61986,
    "ios-tablet-landscape": 61987,
    "ios-tablet-landscape-outline": 61987,
    "ios-tablet-portrait": 62030,
    "ios-tablet-portrait-outline": 62030,
    "ios-tennisball": 62651,
    "ios-tennisball-outline": 62650,
    "ios-text": 62032,
    "ios-text-outline": 62031,
    "ios-thermometer": 62034,
    "ios-thermometer-outline": 62033,
    "ios-thumbs-down": 62036,
    "ios-thumbs-down-outline": 62035,
    "ios-thumbs-up": 62038,
    "ios-thumbs-up-outline": 62037,
    "ios-thunderstorm": 62653,
    "ios-thunderstorm-outline": 62652,
    "ios-time": 62655,
    "ios-time-outline": 62654,
    "ios-timer": 62657,
    "ios-timer-outline": 62656,
    "ios-train": 62040,
    "ios-train-outline": 62039,
    "ios-transgender": 62041,
    "ios-transgender-outline": 62041,
    "ios-trash": 62661,
    "ios-trash-outline": 62660,
    "ios-trending-down": 62042,
    "ios-trending-down-outline": 62042,
    "ios-trending-up": 62043,
    "ios-trending-up-outline": 62043,
    "ios-trophy": 62045,
    "ios-trophy-outline": 62044,
    "ios-umbrella": 62047,
    "ios-umbrella-outline": 62046,
    "ios-undo": 62663,
    "ios-undo-outline": 62662,
    "ios-unlock": 62049,
    "ios-unlock-outline": 62048,
    "ios-videocam": 62669,
    "ios-videocam-outline": 62668,
    "ios-volume-down": 62050,
    "ios-volume-down-outline": 62050,
    "ios-volume-mute": 62051,
    "ios-volume-mute-outline": 62051,
    "ios-volume-off": 62052,
    "ios-volume-off-outline": 62052,
    "ios-volume-up": 62053,
    "ios-volume-up-outline": 62053,
    "ios-walk": 62054,
    "ios-walk-outline": 62054,
    "ios-warning": 62056,
    "ios-warning-outline": 62055,
    "ios-watch": 62057,
    "ios-watch-outline": 62057,
    "ios-water": 62059,
    "ios-water-outline": 62058,
    "ios-wifi": 62061,
    "ios-wifi-outline": 62060,
    "ios-wine": 62063,
    "ios-wine-outline": 62062,
    "ios-woman": 62065,
    "ios-woman-outline": 62064,
    "logo-android": 61989,
    "logo-angular": 61991,
    "logo-apple": 61993,
    "logo-bitcoin": 61995,
    "logo-buffer": 61997,
    "logo-chrome": 61999,
    "logo-codepen": 62000,
    "logo-css3": 62001,
    "logo-designernews": 62002,
    "logo-dribbble": 62003,
    "logo-dropbox": 62004,
    "logo-euro": 62005,
    "logo-facebook": 62006,
    "logo-foursquare": 62007,
    "logo-freebsd-devil": 62008,
    "logo-github": 62009,
    "logo-google": 62010,
    "logo-googleplus": 62011,
    "logo-hackernews": 62012,
    "logo-html5": 62013,
    "logo-instagram": 62014,
    "logo-javascript": 62015,
    "logo-linkedin": 62016,
    "logo-markdown": 62017,
    "logo-nodejs": 62018,
    "logo-octocat": 62019,
    "logo-pinterest": 62020,
    "logo-playstation": 62021,
    "logo-python": 62022,
    "logo-reddit": 62023,
    "logo-rss": 62024,
    "logo-sass": 62025,
    "logo-skype": 62026,
    "logo-snapchat": 62027,
    "logo-steam": 62028,
    "logo-tumblr": 62029,
    "logo-tux": 62126,
    "logo-twitch": 62127,
    "logo-twitter": 62128,
    "logo-usd": 62129,
    "logo-vimeo": 62148,
    "logo-whatsapp": 62149,
    "logo-windows": 62255,
    "logo-wordpress": 62256,
    "logo-xbox": 62284,
    "logo-yahoo": 62285,
    "logo-yen": 62286,
    "logo-youtube": 62287,
    "md-add": 62067,
    "md-add-circle": 62066,
    "md-alarm": 62068,
    "md-albums": 62069,
    "md-alert": 62070,
    "md-american-football": 62071,
    "md-analytics": 62072,
    "md-aperture": 62073,
    "md-apps": 62074,
    "md-appstore": 62075,
    "md-archive": 62076,
    "md-arrow-back": 62077,
    "md-arrow-down": 62078,
    "md-arrow-dropdown": 62080,
    "md-arrow-dropdown-circle": 62079,
    "md-arrow-dropleft": 62082,
    "md-arrow-dropleft-circle": 62081,
    "md-arrow-dropright": 62084,
    "md-arrow-dropright-circle": 62083,
    "md-arrow-dropup": 62086,
    "md-arrow-dropup-circle": 62085,
    "md-arrow-forward": 62087,
    "md-arrow-round-back": 62088,
    "md-arrow-round-down": 62089,
    "md-arrow-round-forward": 62090,
    "md-arrow-round-up": 62091,
    "md-arrow-up": 62092,
    "md-at": 62093,
    "md-attach": 62094,
    "md-backspace": 62095,
    "md-barcode": 62096,
    "md-baseball": 62097,
    "md-basket": 62098,
    "md-basketball": 62099,
    "md-battery-charging": 62100,
    "md-battery-dead": 62101,
    "md-battery-full": 62102,
    "md-beaker": 62103,
    "md-beer": 62104,
    "md-bicycle": 62105,
    "md-bluetooth": 62106,
    "md-boat": 62107,
    "md-body": 62108,
    "md-bonfire": 62109,
    "md-book": 62110,
    "md-bookmark": 62111,
    "md-bookmarks": 62112,
    "md-bowtie": 62113,
    "md-briefcase": 62114,
    "md-browsers": 62115,
    "md-brush": 62116,
    "md-bug": 62117,
    "md-build": 62118,
    "md-bulb": 62119,
    "md-bus": 62120,
    "md-cafe": 62121,
    "md-calculator": 62122,
    "md-calendar": 62123,
    "md-call": 62124,
    "md-camera": 62125,
    "md-car": 62130,
    "md-card": 62131,
    "md-cart": 62132,
    "md-cash": 62133,
    "md-chatboxes": 62134,
    "md-chatbubbles": 62135,
    "md-checkbox": 62137,
    "md-checkbox-outline": 62136,
    "md-checkmark": 62140,
    "md-checkmark-circle": 62139,
    "md-checkmark-circle-outline": 62138,
    "md-clipboard": 62141,
    "md-clock": 62142,
    "md-close": 62144,
    "md-close-circle": 62143,
    "md-closed-captioning": 62145,
    "md-cloud": 62153,
    "md-cloud-circle": 62146,
    "md-cloud-done": 62147,
    "md-cloud-download": 62150,
    "md-cloud-outline": 62151,
    "md-cloud-upload": 62152,
    "md-cloudy": 62155,
    "md-cloudy-night": 62154,
    "md-code": 62158,
    "md-code-download": 62156,
    "md-code-working": 62157,
    "md-cog": 62159,
    "md-color-fill": 62160,
    "md-color-filter": 62161,
    "md-color-palette": 62162,
    "md-color-wand": 62163,
    "md-compass": 62164,
    "md-construct": 62165,
    "md-contact": 62166,
    "md-contacts": 62167,
    "md-contract": 62168,
    "md-contrast": 62169,
    "md-copy": 62170,
    "md-create": 62171,
    "md-crop": 62172,
    "md-cube": 62173,
    "md-cut": 62174,
    "md-desktop": 62175,
    "md-disc": 62176,
    "md-document": 62177,
    "md-done-all": 62178,
    "md-download": 62179,
    "md-easel": 62180,
    "md-egg": 62181,
    "md-exit": 62182,
    "md-expand": 62183,
    "md-eye": 62185,
    "md-eye-off": 62184,
    "md-fastforward": 62186,
    "md-female": 62187,
    "md-filing": 62188,
    "md-film": 62189,
    "md-finger-print": 62190,
    "md-flag": 62191,
    "md-flame": 62192,
    "md-flash": 62193,
    "md-flask": 62194,
    "md-flower": 62195,
    "md-folder": 62197,
    "md-folder-open": 62196,
    "md-football": 62198,
    "md-funnel": 62199,
    "md-game-controller-a": 62200,
    "md-game-controller-b": 62201,
    "md-git-branch": 62202,
    "md-git-commit": 62203,
    "md-git-compare": 62204,
    "md-git-merge": 62205,
    "md-git-network": 62206,
    "md-git-pull-request": 62207,
    "md-glasses": 62208,
    "md-globe": 62209,
    "md-grid": 62210,
    "md-hammer": 62211,
    "md-hand": 62212,
    "md-happy": 62213,
    "md-headset": 62214,
    "md-heart": 62216,
    "md-heart-outline": 62215,
    "md-help": 62219,
    "md-help-buoy": 62217,
    "md-help-circle": 62218,
    "md-home": 62220,
    "md-ice-cream": 62221,
    "md-image": 62222,
    "md-images": 62223,
    "md-infinite": 62224,
    "md-information": 62226,
    "md-information-circle": 62225,
    "md-ionic": 62227,
    "md-ionitron": 62228,
    "md-jet": 62229,
    "md-key": 62230,
    "md-keypad": 62231,
    "md-laptop": 62232,
    "md-leaf": 62233,
    "md-link": 61998,
    "md-list": 62235,
    "md-list-box": 62234,
    "md-locate": 62236,
    "md-lock": 62237,
    "md-log-in": 62238,
    "md-log-out": 62239,
    "md-magnet": 62240,
    "md-mail": 62242,
    "md-mail-open": 62241,
    "md-male": 62243,
    "md-man": 62244,
    "md-map": 62245,
    "md-medal": 62246,
    "md-medical": 62247,
    "md-medkit": 62248,
    "md-megaphone": 62249,
    "md-menu": 62250,
    "md-mic": 62252,
    "md-mic-off": 62251,
    "md-microphone": 62253,
    "md-moon": 62254,
    "md-more": 61897,
    "md-move": 62257,
    "md-musical-note": 62258,
    "md-musical-notes": 62259,
    "md-navigate": 62260,
    "md-no-smoking": 62261,
    "md-notifications": 62264,
    "md-notifications-off": 62262,
    "md-notifications-outline": 62263,
    "md-nuclear": 62265,
    "md-nutrition": 62266,
    "md-open": 62267,
    "md-options": 62268,
    "md-outlet": 62269,
    "md-paper": 62271,
    "md-paper-plane": 62270,
    "md-partly-sunny": 62272,
    "md-pause": 62273,
    "md-paw": 62274,
    "md-people": 62275,
    "md-person": 62277,
    "md-person-add": 62276,
    "md-phone-landscape": 62278,
    "md-phone-portrait": 62279,
    "md-photos": 62280,
    "md-pie": 62281,
    "md-pin": 62282,
    "md-pint": 62283,
    "md-pizza": 62292,
    "md-plane": 62293,
    "md-planet": 62294,
    "md-play": 62295,
    "md-podium": 62296,
    "md-power": 62297,
    "md-pricetag": 62298,
    "md-pricetags": 62299,
    "md-print": 62300,
    "md-pulse": 62301,
    "md-qr-scanner": 62302,
    "md-quote": 62303,
    "md-radio": 62306,
    "md-radio-button-off": 62304,
    "md-radio-button-on": 62305,
    "md-rainy": 62307,
    "md-recording": 62308,
    "md-redo": 62309,
    "md-refresh": 62310,
    "md-refresh-circle": 61992,
    "md-remove": 62312,
    "md-remove-circle": 62311,
    "md-reorder": 62313,
    "md-repeat": 62314,
    "md-resize": 62315,
    "md-restaurant": 62316,
    "md-return-left": 62317,
    "md-return-right": 62318,
    "md-reverse-camera": 62319,
    "md-rewind": 62320,
    "md-ribbon": 62321,
    "md-rose": 62322,
    "md-sad": 62323,
    "md-school": 62324,
    "md-search": 62325,
    "md-send": 62326,
    "md-settings": 62327,
    "md-share": 62329,
    "md-share-alt": 62328,
    "md-shirt": 62330,
    "md-shuffle": 62331,
    "md-skip-backward": 62332,
    "md-skip-forward": 62333,
    "md-snow": 62334,
    "md-speedometer": 62335,
    "md-square": 62337,
    "md-square-outline": 62336,
    "md-star": 62340,
    "md-star-half": 62338,
    "md-star-outline": 62339,
    "md-stats": 62341,
    "md-stopwatch": 62342,
    "md-subway": 62343,
    "md-sunny": 62344,
    "md-swap": 62345,
    "md-switch": 62346,
    "md-sync": 62347,
    "md-tablet-landscape": 62348,
    "md-tablet-portrait": 62349,
    "md-tennisball": 62350,
    "md-text": 62351,
    "md-thermometer": 62352,
    "md-thumbs-down": 62353,
    "md-thumbs-up": 62354,
    "md-thunderstorm": 62355,
    "md-time": 62356,
    "md-timer": 62357,
    "md-train": 62358,
    "md-transgender": 62359,
    "md-trash": 62360,
    "md-trending-down": 62361,
    "md-trending-up": 62362,
    "md-trophy": 62363,
    "md-umbrella": 62364,
    "md-undo": 62365,
    "md-unlock": 62366,
    "md-videocam": 62367,
    "md-volume-down": 62368,
    "md-volume-mute": 62369,
    "md-volume-off": 62370,
    "md-volume-up": 62371,
    "md-walk": 62372,
    "md-warning": 62373,
    "md-watch": 62374,
    "md-water": 62375,
    "md-wifi": 62376,
    "md-wine": 62377,
    "md-woman": 62378
  };
},694,[],"react-native-vector-icons/glyphmaps/Ionicons.json");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  var _Foundation = require(_dependencyMap[1], "./glyphmaps/Foundation.json");

  var _Foundation2 = babelHelpers.interopRequireDefault(_Foundation);

  var iconSet = (0, _createIconSet2.default)(_Foundation2.default, 'fontcustom', 'Foundation.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},695,[680,696],"react-native-vector-icons/Foundation.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    "address-book": 61696,
    "alert": 61697,
    "align-center": 61698,
    "align-justify": 61699,
    "align-left": 61700,
    "align-right": 61701,
    "anchor": 61702,
    "annotate": 61703,
    "archive": 61704,
    "arrow-down": 61705,
    "arrow-left": 61706,
    "arrow-right": 61707,
    "arrow-up": 61708,
    "arrows-compress": 61709,
    "arrows-expand": 61710,
    "arrows-in": 61711,
    "arrows-out": 61712,
    "asl": 61713,
    "asterisk": 61714,
    "at-sign": 61715,
    "background-color": 61716,
    "battery-empty": 61717,
    "battery-full": 61718,
    "battery-half": 61719,
    "bitcoin-circle": 61720,
    "bitcoin": 61721,
    "blind": 61722,
    "bluetooth": 61723,
    "bold": 61724,
    "book-bookmark": 61725,
    "book": 61726,
    "bookmark": 61727,
    "braille": 61728,
    "burst-new": 61729,
    "burst-sale": 61730,
    "burst": 61731,
    "calendar": 61732,
    "camera": 61733,
    "check": 61734,
    "checkbox": 61735,
    "clipboard-notes": 61736,
    "clipboard-pencil": 61737,
    "clipboard": 61738,
    "clock": 61739,
    "closed-caption": 61740,
    "cloud": 61741,
    "comment-minus": 61742,
    "comment-quotes": 61743,
    "comment-video": 61744,
    "comment": 61745,
    "comments": 61746,
    "compass": 61747,
    "contrast": 61748,
    "credit-card": 61749,
    "crop": 61750,
    "crown": 61751,
    "css3": 61752,
    "database": 61753,
    "die-five": 61754,
    "die-four": 61755,
    "die-one": 61756,
    "die-six": 61757,
    "die-three": 61758,
    "die-two": 61759,
    "dislike": 61760,
    "dollar-bill": 61761,
    "dollar": 61762,
    "download": 61763,
    "eject": 61764,
    "elevator": 61765,
    "euro": 61766,
    "eye": 61767,
    "fast-forward": 61768,
    "female-symbol": 61769,
    "female": 61770,
    "filter": 61771,
    "first-aid": 61772,
    "flag": 61773,
    "folder-add": 61774,
    "folder-lock": 61775,
    "folder": 61776,
    "foot": 61777,
    "foundation": 61778,
    "graph-bar": 61779,
    "graph-horizontal": 61780,
    "graph-pie": 61781,
    "graph-trend": 61782,
    "guide-dog": 61783,
    "hearing-aid": 61784,
    "heart": 61785,
    "home": 61786,
    "html5": 61787,
    "indent-less": 61788,
    "indent-more": 61789,
    "info": 61790,
    "italic": 61791,
    "key": 61792,
    "laptop": 61793,
    "layout": 61794,
    "lightbulb": 61795,
    "like": 61796,
    "link": 61797,
    "list-bullet": 61798,
    "list-number": 61799,
    "list-thumbnails": 61800,
    "list": 61801,
    "lock": 61802,
    "loop": 61803,
    "magnifying-glass": 61804,
    "mail": 61805,
    "male-female": 61806,
    "male-symbol": 61807,
    "male": 61808,
    "map": 61809,
    "marker": 61810,
    "megaphone": 61811,
    "microphone": 61812,
    "minus-circle": 61813,
    "minus": 61814,
    "mobile-signal": 61815,
    "mobile": 61816,
    "monitor": 61817,
    "mountains": 61818,
    "music": 61819,
    "next": 61820,
    "no-dogs": 61821,
    "no-smoking": 61822,
    "page-add": 61823,
    "page-copy": 61824,
    "page-csv": 61825,
    "page-delete": 61826,
    "page-doc": 61827,
    "page-edit": 61828,
    "page-export-csv": 61829,
    "page-export-doc": 61830,
    "page-export-pdf": 61831,
    "page-export": 61832,
    "page-filled": 61833,
    "page-multiple": 61834,
    "page-pdf": 61835,
    "page-remove": 61836,
    "page-search": 61837,
    "page": 61838,
    "paint-bucket": 61839,
    "paperclip": 61840,
    "pause": 61841,
    "paw": 61842,
    "paypal": 61843,
    "pencil": 61844,
    "photo": 61845,
    "play-circle": 61846,
    "play-video": 61847,
    "play": 61848,
    "plus": 61849,
    "pound": 61850,
    "power": 61851,
    "previous": 61852,
    "price-tag": 61853,
    "pricetag-multiple": 61854,
    "print": 61855,
    "prohibited": 61856,
    "projection-screen": 61857,
    "puzzle": 61858,
    "quote": 61859,
    "record": 61860,
    "refresh": 61861,
    "results-demographics": 61862,
    "results": 61863,
    "rewind-ten": 61864,
    "rewind": 61865,
    "rss": 61866,
    "safety-cone": 61867,
    "save": 61868,
    "share": 61869,
    "sheriff-badge": 61870,
    "shield": 61871,
    "shopping-bag": 61872,
    "shopping-cart": 61873,
    "shuffle": 61874,
    "skull": 61875,
    "social-500px": 61876,
    "social-adobe": 61877,
    "social-amazon": 61878,
    "social-android": 61879,
    "social-apple": 61880,
    "social-behance": 61881,
    "social-bing": 61882,
    "social-blogger": 61883,
    "social-delicious": 61884,
    "social-designer-news": 61885,
    "social-deviant-art": 61886,
    "social-digg": 61887,
    "social-dribbble": 61888,
    "social-drive": 61889,
    "social-dropbox": 61890,
    "social-evernote": 61891,
    "social-facebook": 61892,
    "social-flickr": 61893,
    "social-forrst": 61894,
    "social-foursquare": 61895,
    "social-game-center": 61896,
    "social-github": 61897,
    "social-google-plus": 61898,
    "social-hacker-news": 61899,
    "social-hi5": 61900,
    "social-instagram": 61901,
    "social-joomla": 61902,
    "social-lastfm": 61903,
    "social-linkedin": 61904,
    "social-medium": 61905,
    "social-myspace": 61906,
    "social-orkut": 61907,
    "social-path": 61908,
    "social-picasa": 61909,
    "social-pinterest": 61910,
    "social-rdio": 61911,
    "social-reddit": 61912,
    "social-skillshare": 61913,
    "social-skype": 61914,
    "social-smashing-mag": 61915,
    "social-snapchat": 61916,
    "social-spotify": 61917,
    "social-squidoo": 61918,
    "social-stack-overflow": 61919,
    "social-steam": 61920,
    "social-stumbleupon": 61921,
    "social-treehouse": 61922,
    "social-tumblr": 61923,
    "social-twitter": 61924,
    "social-vimeo": 61925,
    "social-windows": 61926,
    "social-xbox": 61927,
    "social-yahoo": 61928,
    "social-yelp": 61929,
    "social-youtube": 61930,
    "social-zerply": 61931,
    "social-zurb": 61932,
    "sound": 61933,
    "star": 61934,
    "stop": 61935,
    "strikethrough": 61936,
    "subscript": 61937,
    "superscript": 61938,
    "tablet-landscape": 61939,
    "tablet-portrait": 61940,
    "target-two": 61941,
    "target": 61942,
    "telephone-accessible": 61943,
    "telephone": 61944,
    "text-color": 61945,
    "thumbnails": 61946,
    "ticket": 61947,
    "torso-business": 61948,
    "torso-female": 61949,
    "torso": 61950,
    "torsos-all-female": 61951,
    "torsos-all": 61952,
    "torsos-female-male": 61953,
    "torsos-male-female": 61954,
    "torsos": 61955,
    "trash": 61956,
    "trees": 61957,
    "trophy": 61958,
    "underline": 61959,
    "universal-access": 61960,
    "unlink": 61961,
    "unlock": 61962,
    "upload-cloud": 61963,
    "upload": 61964,
    "usb": 61965,
    "video": 61966,
    "volume-none": 61967,
    "volume-strike": 61968,
    "volume": 61969,
    "web": 61970,
    "wheelchair": 61971,
    "widget": 61972,
    "wrench": 61973,
    "x-circle": 61974,
    "x": 61975,
    "yen": 61976,
    "zoom-in": 61977,
    "zoom-out": 61978
  };
},696,[],"react-native-vector-icons/glyphmaps/Foundation.json");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  var _EvilIcons = require(_dependencyMap[1], "./glyphmaps/EvilIcons.json");

  var _EvilIcons2 = babelHelpers.interopRequireDefault(_EvilIcons);

  var iconSet = (0, _createIconSet2.default)(_EvilIcons2.default, 'EvilIcons', 'EvilIcons.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},697,[680,698],"react-native-vector-icons/EvilIcons.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    "archive": 61696,
    "arrow-down": 61697,
    "arrow-left": 61698,
    "arrow-right": 61699,
    "arrow-up": 61700,
    "bell": 61701,
    "calendar": 61702,
    "camera": 61703,
    "cart": 61704,
    "chart": 61705,
    "check": 61706,
    "chevron-down": 61707,
    "chevron-left": 61708,
    "chevron-right": 61709,
    "chevron-up": 61710,
    "clock": 61711,
    "close": 61712,
    "close-o": 61713,
    "comment": 61714,
    "credit-card": 61715,
    "envelope": 61716,
    "exclamation": 61717,
    "external-link": 61718,
    "eye": 61719,
    "gear": 61720,
    "heart": 61721,
    "image": 61722,
    "like": 61723,
    "link": 61724,
    "location": 61725,
    "lock": 61726,
    "minus": 61727,
    "navicon": 61728,
    "paperclip": 61729,
    "pencil": 61730,
    "play": 61731,
    "plus": 61732,
    "pointer": 61733,
    "question": 61734,
    "redo": 61735,
    "refresh": 61736,
    "retweet": 61737,
    "sc-facebook": 61738,
    "sc-github": 61739,
    "sc-google-plus": 61740,
    "sc-instagram": 61741,
    "sc-linkedin": 61742,
    "sc-odnoklassniki": 61743,
    "sc-pinterest": 61744,
    "sc-skype": 61745,
    "sc-soundcloud": 61746,
    "sc-telegram": 61747,
    "sc-tumblr": 61748,
    "sc-twitter": 61749,
    "sc-vimeo": 61750,
    "sc-vk": 61751,
    "sc-youtube": 61752,
    "search": 61753,
    "share-apple": 61754,
    "share-google": 61755,
    "spinner": 61756,
    "spinner-2": 61757,
    "spinner-3": 61758,
    "star": 61759,
    "tag": 61760,
    "trash": 61761,
    "trophy": 61762,
    "undo": 61763,
    "unlock": 61764,
    "user": 61765
  };
},698,[],"react-native-vector-icons/glyphmaps/EvilIcons.json");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  var _Entypo = require(_dependencyMap[1], "./glyphmaps/Entypo.json");

  var _Entypo2 = babelHelpers.interopRequireDefault(_Entypo);

  var iconSet = (0, _createIconSet2.default)(_Entypo2.default, 'Entypo', 'Entypo.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},699,[680,700],"react-native-vector-icons/Entypo.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    "500px": 61696,
    "500px-with-circle": 61697,
    "add-to-list": 61698,
    "add-user": 61699,
    "address": 61700,
    "adjust": 61701,
    "air": 61702,
    "aircraft": 61703,
    "aircraft-landing": 61704,
    "aircraft-take-off": 61705,
    "align-bottom": 61706,
    "align-horizontal-middle": 61707,
    "align-left": 61708,
    "align-right": 61709,
    "align-top": 61710,
    "align-vertical-middle": 61711,
    "app-store": 61712,
    "archive": 61713,
    "area-graph": 61714,
    "arrow-bold-down": 61715,
    "arrow-bold-left": 61716,
    "arrow-bold-right": 61717,
    "arrow-bold-up": 61718,
    "arrow-down": 61719,
    "arrow-left": 61720,
    "arrow-long-down": 61721,
    "arrow-long-left": 61722,
    "arrow-long-right": 61723,
    "arrow-long-up": 61724,
    "arrow-right": 61725,
    "arrow-up": 61726,
    "arrow-with-circle-down": 61727,
    "arrow-with-circle-left": 61728,
    "arrow-with-circle-right": 61729,
    "arrow-with-circle-up": 61730,
    "attachment": 61731,
    "awareness-ribbon": 61732,
    "back": 61733,
    "back-in-time": 61734,
    "baidu": 61735,
    "bar-graph": 61736,
    "basecamp": 61737,
    "battery": 61738,
    "beamed-note": 61739,
    "behance": 61740,
    "bell": 61741,
    "blackboard": 61742,
    "block": 61743,
    "book": 61744,
    "bookmark": 61745,
    "bookmarks": 61746,
    "bowl": 61747,
    "box": 61748,
    "briefcase": 61749,
    "browser": 61750,
    "brush": 61751,
    "bucket": 61752,
    "bug": 61753,
    "cake": 61754,
    "calculator": 61755,
    "calendar": 61756,
    "camera": 61757,
    "ccw": 61758,
    "chat": 61759,
    "check": 61760,
    "chevron-down": 61761,
    "chevron-left": 61762,
    "chevron-right": 61763,
    "chevron-small-down": 61764,
    "chevron-small-left": 61765,
    "chevron-small-right": 61766,
    "chevron-small-up": 61767,
    "chevron-thin-down": 61768,
    "chevron-thin-left": 61769,
    "chevron-thin-right": 61770,
    "chevron-thin-up": 61771,
    "chevron-up": 61772,
    "chevron-with-circle-down": 61773,
    "chevron-with-circle-left": 61774,
    "chevron-with-circle-right": 61775,
    "chevron-with-circle-up": 61776,
    "circle": 61777,
    "circle-with-cross": 61778,
    "circle-with-minus": 61779,
    "circle-with-plus": 61780,
    "circular-graph": 61781,
    "clapperboard": 61782,
    "classic-computer": 61783,
    "clipboard": 61784,
    "clock": 61785,
    "cloud": 61786,
    "code": 61787,
    "cog": 61788,
    "colours": 61789,
    "compass": 61790,
    "controller-fast-backward": 61791,
    "controller-fast-forward": 61792,
    "controller-jump-to-start": 61793,
    "controller-next": 61794,
    "controller-paus": 61795,
    "controller-play": 61796,
    "controller-record": 61797,
    "controller-stop": 61798,
    "controller-volume": 61799,
    "copy": 61800,
    "creative-cloud": 61801,
    "creative-commons": 61802,
    "creative-commons-attribution": 61803,
    "creative-commons-noderivs": 61804,
    "creative-commons-noncommercial-eu": 61805,
    "creative-commons-noncommercial-us": 61806,
    "creative-commons-public-domain": 61807,
    "creative-commons-remix": 61808,
    "creative-commons-share": 61809,
    "creative-commons-sharealike": 61810,
    "credit": 61811,
    "credit-card": 61812,
    "crop": 61813,
    "cross": 61814,
    "cup": 61815,
    "cw": 61816,
    "cycle": 61817,
    "database": 61818,
    "dial-pad": 61819,
    "direction": 61820,
    "document": 61821,
    "document-landscape": 61822,
    "documents": 61823,
    "dot-single": 61824,
    "dots-three-horizontal": 61825,
    "dots-three-vertical": 61826,
    "dots-two-horizontal": 61827,
    "dots-two-vertical": 61828,
    "download": 61829,
    "dribbble": 61830,
    "dribbble-with-circle": 61831,
    "drink": 61832,
    "drive": 61833,
    "drop": 61834,
    "dropbox": 61835,
    "edit": 61836,
    "email": 61837,
    "emoji-flirt": 61838,
    "emoji-happy": 61839,
    "emoji-neutral": 61840,
    "emoji-sad": 61841,
    "erase": 61842,
    "eraser": 61843,
    "evernote": 61844,
    "export": 61845,
    "eye": 61846,
    "eye-with-line": 61847,
    "facebook": 61848,
    "facebook-with-circle": 61849,
    "feather": 61850,
    "fingerprint": 61851,
    "flag": 61852,
    "flash": 61853,
    "flashlight": 61854,
    "flat-brush": 61855,
    "flattr": 61856,
    "flickr": 61857,
    "flickr-with-circle": 61858,
    "flow-branch": 61859,
    "flow-cascade": 61860,
    "flow-line": 61861,
    "flow-parallel": 61862,
    "flow-tree": 61863,
    "flower": 61864,
    "folder": 61865,
    "folder-images": 61866,
    "folder-music": 61867,
    "folder-video": 61868,
    "forward": 61869,
    "foursquare": 61870,
    "funnel": 61871,
    "game-controller": 61872,
    "gauge": 61873,
    "github": 61874,
    "github-with-circle": 61875,
    "globe": 61876,
    "google-": 61877,
    "google--with-circle": 61878,
    "google-drive": 61879,
    "google-hangouts": 61880,
    "google-play": 61881,
    "graduation-cap": 61882,
    "grid": 61883,
    "grooveshark": 61884,
    "hair-cross": 61885,
    "hand": 61886,
    "heart": 61887,
    "heart-outlined": 61888,
    "help": 61889,
    "help-with-circle": 61890,
    "home": 61891,
    "hour-glass": 61892,
    "houzz": 61893,
    "icloud": 61894,
    "image": 61895,
    "image-inverted": 61896,
    "images": 61897,
    "inbox": 61898,
    "infinity": 61899,
    "info": 61900,
    "info-with-circle": 61901,
    "instagram": 61902,
    "instagram-with-circle": 61903,
    "install": 61904,
    "key": 61905,
    "keyboard": 61906,
    "lab-flask": 61907,
    "landline": 61908,
    "language": 61909,
    "laptop": 61910,
    "lastfm": 61911,
    "lastfm-with-circle": 61912,
    "layers": 61913,
    "leaf": 61914,
    "level-down": 61915,
    "level-up": 61916,
    "lifebuoy": 61917,
    "light-bulb": 61918,
    "light-down": 61919,
    "light-up": 61920,
    "line-graph": 61921,
    "link": 61922,
    "linkedin": 61923,
    "linkedin-with-circle": 61924,
    "list": 61925,
    "location": 61926,
    "location-pin": 61927,
    "lock": 61928,
    "lock-open": 61929,
    "log-out": 61930,
    "login": 61931,
    "loop": 61932,
    "magnet": 61933,
    "magnifying-glass": 61934,
    "mail": 61935,
    "mail-with-circle": 61936,
    "man": 61937,
    "map": 61938,
    "mask": 61939,
    "medal": 61940,
    "medium": 61941,
    "medium-with-circle": 61942,
    "megaphone": 61943,
    "menu": 61944,
    "merge": 61945,
    "message": 61946,
    "mic": 61947,
    "minus": 61948,
    "mixi": 61949,
    "mobile": 61950,
    "modern-mic": 61951,
    "moon": 61952,
    "mouse": 61953,
    "mouse-pointer": 61954,
    "music": 61955,
    "network": 61956,
    "new": 61957,
    "new-message": 61958,
    "news": 61959,
    "newsletter": 61960,
    "note": 61961,
    "notification": 61962,
    "notifications-off": 61963,
    "old-mobile": 61964,
    "old-phone": 61965,
    "onedrive": 61966,
    "open-book": 61967,
    "palette": 61968,
    "paper-plane": 61969,
    "paypal": 61970,
    "pencil": 61971,
    "phone": 61972,
    "picasa": 61973,
    "pie-chart": 61974,
    "pin": 61975,
    "pinterest": 61976,
    "pinterest-with-circle": 61977,
    "plus": 61978,
    "popup": 61979,
    "power-plug": 61980,
    "price-ribbon": 61981,
    "price-tag": 61982,
    "print": 61983,
    "progress-empty": 61984,
    "progress-full": 61985,
    "progress-one": 61986,
    "progress-two": 61987,
    "publish": 61988,
    "qq": 61989,
    "qq-with-circle": 61990,
    "quote": 61991,
    "radio": 61992,
    "raft": 61993,
    "raft-with-circle": 61994,
    "rainbow": 61995,
    "rdio": 61996,
    "rdio-with-circle": 61997,
    "remove-user": 61998,
    "renren": 61999,
    "reply": 62000,
    "reply-all": 62001,
    "resize-100-": 62002,
    "resize-full-screen": 62003,
    "retweet": 62004,
    "rocket": 62005,
    "round-brush": 62006,
    "rss": 62007,
    "ruler": 62008,
    "save": 62009,
    "scissors": 62010,
    "scribd": 62011,
    "select-arrows": 62012,
    "share": 62013,
    "share-alternative": 62014,
    "shareable": 62015,
    "shield": 62016,
    "shop": 62017,
    "shopping-bag": 62018,
    "shopping-basket": 62019,
    "shopping-cart": 62020,
    "shuffle": 62021,
    "signal": 62022,
    "sina-weibo": 62023,
    "skype": 62024,
    "skype-with-circle": 62025,
    "slideshare": 62026,
    "smashing": 62027,
    "sound": 62028,
    "sound-mix": 62029,
    "sound-mute": 62030,
    "soundcloud": 62031,
    "sports-club": 62032,
    "spotify": 62033,
    "spotify-with-circle": 62034,
    "spreadsheet": 62035,
    "squared-cross": 62036,
    "squared-minus": 62037,
    "squared-plus": 62038,
    "star": 62039,
    "star-outlined": 62040,
    "stopwatch": 62041,
    "stumbleupon": 62042,
    "stumbleupon-with-circle": 62043,
    "suitcase": 62044,
    "swap": 62045,
    "swarm": 62046,
    "sweden": 62047,
    "switch": 62048,
    "tablet": 62049,
    "tablet-mobile-combo": 62050,
    "tag": 62051,
    "text": 62052,
    "text-document": 62053,
    "text-document-inverted": 62054,
    "thermometer": 62055,
    "thumbs-down": 62056,
    "thumbs-up": 62057,
    "thunder-cloud": 62058,
    "ticket": 62059,
    "time-slot": 62060,
    "tools": 62061,
    "traffic-cone": 62062,
    "trash": 62063,
    "tree": 62064,
    "triangle-down": 62065,
    "triangle-left": 62066,
    "triangle-right": 62067,
    "triangle-up": 62068,
    "tripadvisor": 62069,
    "trophy": 62070,
    "tumblr": 62071,
    "tumblr-with-circle": 62072,
    "tv": 62073,
    "twitter": 62074,
    "twitter-with-circle": 62075,
    "typing": 62076,
    "uninstall": 62077,
    "unread": 62078,
    "untag": 62079,
    "upload": 62080,
    "upload-to-cloud": 62081,
    "user": 62082,
    "users": 62083,
    "v-card": 62084,
    "video": 62085,
    "video-camera": 62086,
    "vimeo": 62087,
    "vimeo-with-circle": 62088,
    "vine": 62089,
    "vine-with-circle": 62090,
    "vinyl": 62091,
    "vk": 62092,
    "vk-alternitive": 62093,
    "vk-with-circle": 62094,
    "voicemail": 62095,
    "wallet": 62096,
    "warning": 62097,
    "water": 62098,
    "windows-store": 62099,
    "xing": 62100,
    "xing-with-circle": 62101,
    "yelp": 62102,
    "youko": 62103,
    "youko-with-circle": 62104,
    "youtube": 62105,
    "youtube-with-circle": 62106
  };
},700,[],"react-native-vector-icons/glyphmaps/Entypo.json");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  var _FontAwesome = require(_dependencyMap[1], "./glyphmaps/FontAwesome.json");

  var _FontAwesome2 = babelHelpers.interopRequireDefault(_FontAwesome);

  var iconSet = (0, _createIconSet2.default)(_FontAwesome2.default, 'FontAwesome', 'FontAwesome.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},701,[680,702],"react-native-vector-icons/FontAwesome.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    "glass": 61440,
    "music": 61441,
    "search": 61442,
    "envelope-o": 61443,
    "heart": 61444,
    "star": 61445,
    "star-o": 61446,
    "user": 61447,
    "film": 61448,
    "th-large": 61449,
    "th": 61450,
    "th-list": 61451,
    "check": 61452,
    "remove": 61453,
    "close": 61453,
    "times": 61453,
    "search-plus": 61454,
    "search-minus": 61456,
    "power-off": 61457,
    "signal": 61458,
    "gear": 61459,
    "cog": 61459,
    "trash-o": 61460,
    "home": 61461,
    "file-o": 61462,
    "clock-o": 61463,
    "road": 61464,
    "download": 61465,
    "arrow-circle-o-down": 61466,
    "arrow-circle-o-up": 61467,
    "inbox": 61468,
    "play-circle-o": 61469,
    "rotate-right": 61470,
    "repeat": 61470,
    "refresh": 61473,
    "list-alt": 61474,
    "lock": 61475,
    "flag": 61476,
    "headphones": 61477,
    "volume-off": 61478,
    "volume-down": 61479,
    "volume-up": 61480,
    "qrcode": 61481,
    "barcode": 61482,
    "tag": 61483,
    "tags": 61484,
    "book": 61485,
    "bookmark": 61486,
    "print": 61487,
    "camera": 61488,
    "font": 61489,
    "bold": 61490,
    "italic": 61491,
    "text-height": 61492,
    "text-width": 61493,
    "align-left": 61494,
    "align-center": 61495,
    "align-right": 61496,
    "align-justify": 61497,
    "list": 61498,
    "dedent": 61499,
    "outdent": 61499,
    "indent": 61500,
    "video-camera": 61501,
    "photo": 61502,
    "image": 61502,
    "picture-o": 61502,
    "pencil": 61504,
    "map-marker": 61505,
    "adjust": 61506,
    "tint": 61507,
    "edit": 61508,
    "pencil-square-o": 61508,
    "share-square-o": 61509,
    "check-square-o": 61510,
    "arrows": 61511,
    "step-backward": 61512,
    "fast-backward": 61513,
    "backward": 61514,
    "play": 61515,
    "pause": 61516,
    "stop": 61517,
    "forward": 61518,
    "fast-forward": 61520,
    "step-forward": 61521,
    "eject": 61522,
    "chevron-left": 61523,
    "chevron-right": 61524,
    "plus-circle": 61525,
    "minus-circle": 61526,
    "times-circle": 61527,
    "check-circle": 61528,
    "question-circle": 61529,
    "info-circle": 61530,
    "crosshairs": 61531,
    "times-circle-o": 61532,
    "check-circle-o": 61533,
    "ban": 61534,
    "arrow-left": 61536,
    "arrow-right": 61537,
    "arrow-up": 61538,
    "arrow-down": 61539,
    "mail-forward": 61540,
    "share": 61540,
    "expand": 61541,
    "compress": 61542,
    "plus": 61543,
    "minus": 61544,
    "asterisk": 61545,
    "exclamation-circle": 61546,
    "gift": 61547,
    "leaf": 61548,
    "fire": 61549,
    "eye": 61550,
    "eye-slash": 61552,
    "warning": 61553,
    "exclamation-triangle": 61553,
    "plane": 61554,
    "calendar": 61555,
    "random": 61556,
    "comment": 61557,
    "magnet": 61558,
    "chevron-up": 61559,
    "chevron-down": 61560,
    "retweet": 61561,
    "shopping-cart": 61562,
    "folder": 61563,
    "folder-open": 61564,
    "arrows-v": 61565,
    "arrows-h": 61566,
    "bar-chart-o": 61568,
    "bar-chart": 61568,
    "twitter-square": 61569,
    "facebook-square": 61570,
    "camera-retro": 61571,
    "key": 61572,
    "gears": 61573,
    "cogs": 61573,
    "comments": 61574,
    "thumbs-o-up": 61575,
    "thumbs-o-down": 61576,
    "star-half": 61577,
    "heart-o": 61578,
    "sign-out": 61579,
    "linkedin-square": 61580,
    "thumb-tack": 61581,
    "external-link": 61582,
    "sign-in": 61584,
    "trophy": 61585,
    "github-square": 61586,
    "upload": 61587,
    "lemon-o": 61588,
    "phone": 61589,
    "square-o": 61590,
    "bookmark-o": 61591,
    "phone-square": 61592,
    "twitter": 61593,
    "facebook-f": 61594,
    "facebook": 61594,
    "github": 61595,
    "unlock": 61596,
    "credit-card": 61597,
    "feed": 61598,
    "rss": 61598,
    "hdd-o": 61600,
    "bullhorn": 61601,
    "bell": 61683,
    "certificate": 61603,
    "hand-o-right": 61604,
    "hand-o-left": 61605,
    "hand-o-up": 61606,
    "hand-o-down": 61607,
    "arrow-circle-left": 61608,
    "arrow-circle-right": 61609,
    "arrow-circle-up": 61610,
    "arrow-circle-down": 61611,
    "globe": 61612,
    "wrench": 61613,
    "tasks": 61614,
    "filter": 61616,
    "briefcase": 61617,
    "arrows-alt": 61618,
    "group": 61632,
    "users": 61632,
    "chain": 61633,
    "link": 61633,
    "cloud": 61634,
    "flask": 61635,
    "cut": 61636,
    "scissors": 61636,
    "copy": 61637,
    "files-o": 61637,
    "paperclip": 61638,
    "save": 61639,
    "floppy-o": 61639,
    "square": 61640,
    "navicon": 61641,
    "reorder": 61641,
    "bars": 61641,
    "list-ul": 61642,
    "list-ol": 61643,
    "strikethrough": 61644,
    "underline": 61645,
    "table": 61646,
    "magic": 61648,
    "truck": 61649,
    "pinterest": 61650,
    "pinterest-square": 61651,
    "google-plus-square": 61652,
    "google-plus": 61653,
    "money": 61654,
    "caret-down": 61655,
    "caret-up": 61656,
    "caret-left": 61657,
    "caret-right": 61658,
    "columns": 61659,
    "unsorted": 61660,
    "sort": 61660,
    "sort-down": 61661,
    "sort-desc": 61661,
    "sort-up": 61662,
    "sort-asc": 61662,
    "envelope": 61664,
    "linkedin": 61665,
    "rotate-left": 61666,
    "undo": 61666,
    "legal": 61667,
    "gavel": 61667,
    "dashboard": 61668,
    "tachometer": 61668,
    "comment-o": 61669,
    "comments-o": 61670,
    "flash": 61671,
    "bolt": 61671,
    "sitemap": 61672,
    "umbrella": 61673,
    "paste": 61674,
    "clipboard": 61674,
    "lightbulb-o": 61675,
    "exchange": 61676,
    "cloud-download": 61677,
    "cloud-upload": 61678,
    "user-md": 61680,
    "stethoscope": 61681,
    "suitcase": 61682,
    "bell-o": 61602,
    "coffee": 61684,
    "cutlery": 61685,
    "file-text-o": 61686,
    "building-o": 61687,
    "hospital-o": 61688,
    "ambulance": 61689,
    "medkit": 61690,
    "fighter-jet": 61691,
    "beer": 61692,
    "h-square": 61693,
    "plus-square": 61694,
    "angle-double-left": 61696,
    "angle-double-right": 61697,
    "angle-double-up": 61698,
    "angle-double-down": 61699,
    "angle-left": 61700,
    "angle-right": 61701,
    "angle-up": 61702,
    "angle-down": 61703,
    "desktop": 61704,
    "laptop": 61705,
    "tablet": 61706,
    "mobile-phone": 61707,
    "mobile": 61707,
    "circle-o": 61708,
    "quote-left": 61709,
    "quote-right": 61710,
    "spinner": 61712,
    "circle": 61713,
    "mail-reply": 61714,
    "reply": 61714,
    "github-alt": 61715,
    "folder-o": 61716,
    "folder-open-o": 61717,
    "smile-o": 61720,
    "frown-o": 61721,
    "meh-o": 61722,
    "gamepad": 61723,
    "keyboard-o": 61724,
    "flag-o": 61725,
    "flag-checkered": 61726,
    "terminal": 61728,
    "code": 61729,
    "mail-reply-all": 61730,
    "reply-all": 61730,
    "star-half-empty": 61731,
    "star-half-full": 61731,
    "star-half-o": 61731,
    "location-arrow": 61732,
    "crop": 61733,
    "code-fork": 61734,
    "unlink": 61735,
    "chain-broken": 61735,
    "question": 61736,
    "info": 61737,
    "exclamation": 61738,
    "superscript": 61739,
    "subscript": 61740,
    "eraser": 61741,
    "puzzle-piece": 61742,
    "microphone": 61744,
    "microphone-slash": 61745,
    "shield": 61746,
    "calendar-o": 61747,
    "fire-extinguisher": 61748,
    "rocket": 61749,
    "maxcdn": 61750,
    "chevron-circle-left": 61751,
    "chevron-circle-right": 61752,
    "chevron-circle-up": 61753,
    "chevron-circle-down": 61754,
    "html5": 61755,
    "css3": 61756,
    "anchor": 61757,
    "unlock-alt": 61758,
    "bullseye": 61760,
    "ellipsis-h": 61761,
    "ellipsis-v": 61762,
    "rss-square": 61763,
    "play-circle": 61764,
    "ticket": 61765,
    "minus-square": 61766,
    "minus-square-o": 61767,
    "level-up": 61768,
    "level-down": 61769,
    "check-square": 61770,
    "pencil-square": 61771,
    "external-link-square": 61772,
    "share-square": 61773,
    "compass": 61774,
    "toggle-down": 61776,
    "caret-square-o-down": 61776,
    "toggle-up": 61777,
    "caret-square-o-up": 61777,
    "toggle-right": 61778,
    "caret-square-o-right": 61778,
    "euro": 61779,
    "eur": 61779,
    "gbp": 61780,
    "dollar": 61781,
    "usd": 61781,
    "rupee": 61782,
    "inr": 61782,
    "cny": 61783,
    "rmb": 61783,
    "yen": 61783,
    "jpy": 61783,
    "ruble": 61784,
    "rouble": 61784,
    "rub": 61784,
    "won": 61785,
    "krw": 61785,
    "bitcoin": 61786,
    "btc": 61786,
    "file": 61787,
    "file-text": 61788,
    "sort-alpha-asc": 61789,
    "sort-alpha-desc": 61790,
    "sort-amount-asc": 61792,
    "sort-amount-desc": 61793,
    "sort-numeric-asc": 61794,
    "sort-numeric-desc": 61795,
    "thumbs-up": 61796,
    "thumbs-down": 61797,
    "youtube-square": 61798,
    "youtube": 61799,
    "xing": 61800,
    "xing-square": 61801,
    "youtube-play": 61802,
    "dropbox": 61803,
    "stack-overflow": 61804,
    "instagram": 61805,
    "flickr": 61806,
    "adn": 61808,
    "bitbucket": 61809,
    "bitbucket-square": 61810,
    "tumblr": 61811,
    "tumblr-square": 61812,
    "long-arrow-down": 61813,
    "long-arrow-up": 61814,
    "long-arrow-left": 61815,
    "long-arrow-right": 61816,
    "apple": 61817,
    "windows": 61818,
    "android": 61819,
    "linux": 61820,
    "dribbble": 61821,
    "skype": 61822,
    "foursquare": 61824,
    "trello": 61825,
    "female": 61826,
    "male": 61827,
    "gittip": 61828,
    "gratipay": 61828,
    "sun-o": 61829,
    "moon-o": 61830,
    "archive": 61831,
    "bug": 61832,
    "vk": 61833,
    "weibo": 61834,
    "renren": 61835,
    "pagelines": 61836,
    "stack-exchange": 61837,
    "arrow-circle-o-right": 61838,
    "arrow-circle-o-left": 61840,
    "toggle-left": 61841,
    "caret-square-o-left": 61841,
    "dot-circle-o": 61842,
    "wheelchair": 61843,
    "vimeo-square": 61844,
    "turkish-lira": 61845,
    "try": 61845,
    "plus-square-o": 61846,
    "space-shuttle": 61847,
    "slack": 61848,
    "envelope-square": 61849,
    "wordpress": 61850,
    "openid": 61851,
    "institution": 61852,
    "bank": 61852,
    "university": 61852,
    "mortar-board": 61853,
    "graduation-cap": 61853,
    "yahoo": 61854,
    "google": 61856,
    "reddit": 61857,
    "reddit-square": 61858,
    "stumbleupon-circle": 61859,
    "stumbleupon": 61860,
    "delicious": 61861,
    "digg": 61862,
    "pied-piper-pp": 61863,
    "pied-piper-alt": 61864,
    "drupal": 61865,
    "joomla": 61866,
    "language": 61867,
    "fax": 61868,
    "building": 61869,
    "child": 61870,
    "paw": 61872,
    "spoon": 61873,
    "cube": 61874,
    "cubes": 61875,
    "behance": 61876,
    "behance-square": 61877,
    "steam": 61878,
    "steam-square": 61879,
    "recycle": 61880,
    "automobile": 61881,
    "car": 61881,
    "cab": 61882,
    "taxi": 61882,
    "tree": 61883,
    "spotify": 61884,
    "deviantart": 61885,
    "soundcloud": 61886,
    "database": 61888,
    "file-pdf-o": 61889,
    "file-word-o": 61890,
    "file-excel-o": 61891,
    "file-powerpoint-o": 61892,
    "file-photo-o": 61893,
    "file-picture-o": 61893,
    "file-image-o": 61893,
    "file-zip-o": 61894,
    "file-archive-o": 61894,
    "file-sound-o": 61895,
    "file-audio-o": 61895,
    "file-movie-o": 61896,
    "file-video-o": 61896,
    "file-code-o": 61897,
    "vine": 61898,
    "codepen": 61899,
    "jsfiddle": 61900,
    "life-bouy": 61901,
    "life-buoy": 61901,
    "life-saver": 61901,
    "support": 61901,
    "life-ring": 61901,
    "circle-o-notch": 61902,
    "ra": 61904,
    "resistance": 61904,
    "rebel": 61904,
    "ge": 61905,
    "empire": 61905,
    "git-square": 61906,
    "git": 61907,
    "y-combinator-square": 61908,
    "yc-square": 61908,
    "hacker-news": 61908,
    "tencent-weibo": 61909,
    "qq": 61910,
    "wechat": 61911,
    "weixin": 61911,
    "send": 61912,
    "paper-plane": 61912,
    "send-o": 61913,
    "paper-plane-o": 61913,
    "history": 61914,
    "circle-thin": 61915,
    "header": 61916,
    "paragraph": 61917,
    "sliders": 61918,
    "share-alt": 61920,
    "share-alt-square": 61921,
    "bomb": 61922,
    "soccer-ball-o": 61923,
    "futbol-o": 61923,
    "tty": 61924,
    "binoculars": 61925,
    "plug": 61926,
    "slideshare": 61927,
    "twitch": 61928,
    "yelp": 61929,
    "newspaper-o": 61930,
    "wifi": 61931,
    "calculator": 61932,
    "paypal": 61933,
    "google-wallet": 61934,
    "cc-visa": 61936,
    "cc-mastercard": 61937,
    "cc-discover": 61938,
    "cc-amex": 61939,
    "cc-paypal": 61940,
    "cc-stripe": 61941,
    "bell-slash": 61942,
    "bell-slash-o": 61943,
    "trash": 61944,
    "copyright": 61945,
    "at": 61946,
    "eyedropper": 61947,
    "paint-brush": 61948,
    "birthday-cake": 61949,
    "area-chart": 61950,
    "pie-chart": 61952,
    "line-chart": 61953,
    "lastfm": 61954,
    "lastfm-square": 61955,
    "toggle-off": 61956,
    "toggle-on": 61957,
    "bicycle": 61958,
    "bus": 61959,
    "ioxhost": 61960,
    "angellist": 61961,
    "cc": 61962,
    "shekel": 61963,
    "sheqel": 61963,
    "ils": 61963,
    "meanpath": 61964,
    "buysellads": 61965,
    "connectdevelop": 61966,
    "dashcube": 61968,
    "forumbee": 61969,
    "leanpub": 61970,
    "sellsy": 61971,
    "shirtsinbulk": 61972,
    "simplybuilt": 61973,
    "skyatlas": 61974,
    "cart-plus": 61975,
    "cart-arrow-down": 61976,
    "diamond": 61977,
    "ship": 61978,
    "user-secret": 61979,
    "motorcycle": 61980,
    "street-view": 61981,
    "heartbeat": 61982,
    "venus": 61985,
    "mars": 61986,
    "mercury": 61987,
    "intersex": 61988,
    "transgender": 61988,
    "transgender-alt": 61989,
    "venus-double": 61990,
    "mars-double": 61991,
    "venus-mars": 61992,
    "mars-stroke": 61993,
    "mars-stroke-v": 61994,
    "mars-stroke-h": 61995,
    "neuter": 61996,
    "genderless": 61997,
    "facebook-official": 62000,
    "pinterest-p": 62001,
    "whatsapp": 62002,
    "server": 62003,
    "user-plus": 62004,
    "user-times": 62005,
    "hotel": 62006,
    "bed": 62006,
    "viacoin": 62007,
    "train": 62008,
    "subway": 62009,
    "medium": 62010,
    "yc": 62011,
    "y-combinator": 62011,
    "optin-monster": 62012,
    "opencart": 62013,
    "expeditedssl": 62014,
    "battery-4": 62016,
    "battery": 62016,
    "battery-full": 62016,
    "battery-3": 62017,
    "battery-three-quarters": 62017,
    "battery-2": 62018,
    "battery-half": 62018,
    "battery-1": 62019,
    "battery-quarter": 62019,
    "battery-0": 62020,
    "battery-empty": 62020,
    "mouse-pointer": 62021,
    "i-cursor": 62022,
    "object-group": 62023,
    "object-ungroup": 62024,
    "sticky-note": 62025,
    "sticky-note-o": 62026,
    "cc-jcb": 62027,
    "cc-diners-club": 62028,
    "clone": 62029,
    "balance-scale": 62030,
    "hourglass-o": 62032,
    "hourglass-1": 62033,
    "hourglass-start": 62033,
    "hourglass-2": 62034,
    "hourglass-half": 62034,
    "hourglass-3": 62035,
    "hourglass-end": 62035,
    "hourglass": 62036,
    "hand-grab-o": 62037,
    "hand-rock-o": 62037,
    "hand-stop-o": 62038,
    "hand-paper-o": 62038,
    "hand-scissors-o": 62039,
    "hand-lizard-o": 62040,
    "hand-spock-o": 62041,
    "hand-pointer-o": 62042,
    "hand-peace-o": 62043,
    "trademark": 62044,
    "registered": 62045,
    "creative-commons": 62046,
    "gg": 62048,
    "gg-circle": 62049,
    "tripadvisor": 62050,
    "odnoklassniki": 62051,
    "odnoklassniki-square": 62052,
    "get-pocket": 62053,
    "wikipedia-w": 62054,
    "safari": 62055,
    "chrome": 62056,
    "firefox": 62057,
    "opera": 62058,
    "internet-explorer": 62059,
    "tv": 62060,
    "television": 62060,
    "contao": 62061,
    "500px": 62062,
    "amazon": 62064,
    "calendar-plus-o": 62065,
    "calendar-minus-o": 62066,
    "calendar-times-o": 62067,
    "calendar-check-o": 62068,
    "industry": 62069,
    "map-pin": 62070,
    "map-signs": 62071,
    "map-o": 62072,
    "map": 62073,
    "commenting": 62074,
    "commenting-o": 62075,
    "houzz": 62076,
    "vimeo": 62077,
    "black-tie": 62078,
    "fonticons": 62080,
    "reddit-alien": 62081,
    "edge": 62082,
    "credit-card-alt": 62083,
    "codiepie": 62084,
    "modx": 62085,
    "fort-awesome": 62086,
    "usb": 62087,
    "product-hunt": 62088,
    "mixcloud": 62089,
    "scribd": 62090,
    "pause-circle": 62091,
    "pause-circle-o": 62092,
    "stop-circle": 62093,
    "stop-circle-o": 62094,
    "shopping-bag": 62096,
    "shopping-basket": 62097,
    "hashtag": 62098,
    "bluetooth": 62099,
    "bluetooth-b": 62100,
    "percent": 62101,
    "gitlab": 62102,
    "wpbeginner": 62103,
    "wpforms": 62104,
    "envira": 62105,
    "universal-access": 62106,
    "wheelchair-alt": 62107,
    "question-circle-o": 62108,
    "blind": 62109,
    "audio-description": 62110,
    "volume-control-phone": 62112,
    "braille": 62113,
    "assistive-listening-systems": 62114,
    "asl-interpreting": 62115,
    "american-sign-language-interpreting": 62115,
    "deafness": 62116,
    "hard-of-hearing": 62116,
    "deaf": 62116,
    "glide": 62117,
    "glide-g": 62118,
    "signing": 62119,
    "sign-language": 62119,
    "low-vision": 62120,
    "viadeo": 62121,
    "viadeo-square": 62122,
    "snapchat": 62123,
    "snapchat-ghost": 62124,
    "snapchat-square": 62125,
    "pied-piper": 62126,
    "first-order": 62128,
    "yoast": 62129,
    "themeisle": 62130,
    "google-plus-circle": 62131,
    "google-plus-official": 62131,
    "fa": 62132,
    "font-awesome": 62132,
    "handshake-o": 62133,
    "envelope-open": 62134,
    "envelope-open-o": 62135,
    "linode": 62136,
    "address-book": 62137,
    "address-book-o": 62138,
    "vcard": 62139,
    "address-card": 62139,
    "vcard-o": 62140,
    "address-card-o": 62140,
    "user-circle": 62141,
    "user-circle-o": 62142,
    "user-o": 62144,
    "id-badge": 62145,
    "drivers-license": 62146,
    "id-card": 62146,
    "drivers-license-o": 62147,
    "id-card-o": 62147,
    "quora": 62148,
    "free-code-camp": 62149,
    "telegram": 62150,
    "thermometer-4": 62151,
    "thermometer": 62151,
    "thermometer-full": 62151,
    "thermometer-3": 62152,
    "thermometer-three-quarters": 62152,
    "thermometer-2": 62153,
    "thermometer-half": 62153,
    "thermometer-1": 62154,
    "thermometer-quarter": 62154,
    "thermometer-0": 62155,
    "thermometer-empty": 62155,
    "shower": 62156,
    "bathtub": 62157,
    "s15": 62157,
    "bath": 62157,
    "podcast": 62158,
    "window-maximize": 62160,
    "window-minimize": 62161,
    "window-restore": 62162,
    "times-rectangle": 62163,
    "window-close": 62163,
    "times-rectangle-o": 62164,
    "window-close-o": 62164,
    "bandcamp": 62165,
    "grav": 62166,
    "etsy": 62167,
    "imdb": 62168,
    "ravelry": 62169,
    "eercast": 62170,
    "microchip": 62171,
    "snowflake-o": 62172,
    "superpowers": 62173,
    "wpexplorer": 62174,
    "meetup": 62176
  };
},702,[],"react-native-vector-icons/glyphmaps/FontAwesome.json");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  var _SimpleLineIcons = require(_dependencyMap[1], "./glyphmaps/SimpleLineIcons.json");

  var _SimpleLineIcons2 = babelHelpers.interopRequireDefault(_SimpleLineIcons);

  var iconSet = (0, _createIconSet2.default)(_SimpleLineIcons2.default, 'simple-line-icons', 'SimpleLineIcons.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},703,[680,704],"react-native-vector-icons/SimpleLineIcons.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    "user": 57349,
    "people": 57345,
    "user-female": 57344,
    "user-follow": 57346,
    "user-following": 57347,
    "user-unfollow": 57348,
    "login": 57446,
    "logout": 57445,
    "emotsmile": 57377,
    "phone": 58880,
    "call-end": 57416,
    "call-in": 57415,
    "call-out": 57414,
    "map": 57395,
    "location-pin": 57494,
    "direction": 57410,
    "directions": 57409,
    "compass": 57413,
    "layers": 57396,
    "menu": 58881,
    "list": 57447,
    "options-vertical": 58882,
    "options": 58883,
    "arrow-down": 58884,
    "arrow-left": 58885,
    "arrow-right": 58886,
    "arrow-up": 58887,
    "arrow-up-circle": 57464,
    "arrow-left-circle": 57466,
    "arrow-right-circle": 57465,
    "arrow-down-circle": 57467,
    "check": 57472,
    "clock": 57473,
    "plus": 57493,
    "minus": 58901,
    "close": 57474,
    "event": 58905,
    "exclamation": 58903,
    "organization": 58902,
    "trophy": 57350,
    "screen-smartphone": 57360,
    "screen-desktop": 57361,
    "plane": 57362,
    "notebook": 57363,
    "mustache": 57364,
    "mouse": 57365,
    "magnet": 57366,
    "energy": 57376,
    "disc": 57378,
    "cursor": 57454,
    "cursor-move": 57379,
    "crop": 57380,
    "chemistry": 57382,
    "speedometer": 57351,
    "shield": 57358,
    "screen-tablet": 57359,
    "magic-wand": 57367,
    "hourglass": 57368,
    "graduation": 57369,
    "ghost": 57370,
    "game-controller": 57371,
    "fire": 57372,
    "eyeglass": 57373,
    "envelope-open": 57374,
    "envelope-letter": 57375,
    "bell": 57383,
    "badge": 57384,
    "anchor": 57385,
    "wallet": 57386,
    "vector": 57387,
    "speech": 57388,
    "puzzle": 57389,
    "printer": 57390,
    "present": 57391,
    "playlist": 57392,
    "pin": 57393,
    "picture": 57394,
    "handbag": 57397,
    "globe-alt": 57398,
    "globe": 57399,
    "folder-alt": 57401,
    "folder": 57481,
    "film": 57402,
    "feed": 57403,
    "drop": 57406,
    "drawer": 57407,
    "docs": 57408,
    "doc": 57477,
    "diamond": 57411,
    "cup": 57412,
    "calculator": 57417,
    "bubbles": 57418,
    "briefcase": 57419,
    "book-open": 57420,
    "basket-loaded": 57421,
    "basket": 57422,
    "bag": 57423,
    "action-undo": 57424,
    "action-redo": 57425,
    "wrench": 57426,
    "umbrella": 57427,
    "trash": 57428,
    "tag": 57429,
    "support": 57430,
    "frame": 57400,
    "size-fullscreen": 57431,
    "size-actual": 57432,
    "shuffle": 57433,
    "share-alt": 57434,
    "share": 57435,
    "rocket": 57436,
    "question": 57437,
    "pie-chart": 57438,
    "pencil": 57439,
    "note": 57440,
    "loop": 57444,
    "home": 57449,
    "grid": 57450,
    "graph": 57451,
    "microphone": 57443,
    "music-tone-alt": 57441,
    "music-tone": 57442,
    "earphones-alt": 57404,
    "earphones": 57405,
    "equalizer": 57452,
    "like": 57448,
    "dislike": 57453,
    "control-start": 57455,
    "control-rewind": 57456,
    "control-play": 57457,
    "control-pause": 57458,
    "control-forward": 57459,
    "control-end": 57460,
    "volume-1": 57503,
    "volume-2": 57504,
    "volume-off": 57505,
    "calendar": 57461,
    "bulb": 57462,
    "chart": 57463,
    "ban": 57468,
    "bubble": 57469,
    "camrecorder": 57470,
    "camera": 57471,
    "cloud-download": 57475,
    "cloud-upload": 57476,
    "envelope": 57478,
    "eye": 57479,
    "flag": 57480,
    "heart": 57482,
    "info": 57483,
    "key": 57484,
    "link": 57485,
    "lock": 57486,
    "lock-open": 57487,
    "magnifier": 57488,
    "magnifier-add": 57489,
    "magnifier-remove": 57490,
    "paper-clip": 57491,
    "paper-plane": 57492,
    "power": 57495,
    "refresh": 57496,
    "reload": 57497,
    "settings": 57498,
    "star": 57499,
    "symbol-female": 57500,
    "symbol-male": 57501,
    "target": 57502,
    "credit-card": 57381,
    "paypal": 58888,
    "social-tumblr": 57354,
    "social-twitter": 57353,
    "social-facebook": 57355,
    "social-instagram": 58889,
    "social-linkedin": 58890,
    "social-pinterest": 58891,
    "social-github": 58892,
    "social-google": 58893,
    "social-reddit": 58894,
    "social-skype": 58895,
    "social-dribbble": 57357,
    "social-behance": 58896,
    "social-foursqare": 58897,
    "social-soundcloud": 58898,
    "social-spotify": 58899,
    "social-stumbleupon": 58900,
    "social-youtube": 57352,
    "social-dropbox": 57356,
    "social-vkontakte": 58904,
    "social-steam": 58912
  };
},704,[],"react-native-vector-icons/glyphmaps/SimpleLineIcons.json");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  var _Feather = require(_dependencyMap[1], "./glyphmaps/Feather.json");

  var _Feather2 = babelHelpers.interopRequireDefault(_Feather);

  var iconSet = (0, _createIconSet2.default)(_Feather2.default, 'Feather', 'Feather.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},705,[680,706],"react-native-vector-icons/Feather.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    "activity": 59648,
    "airplay": 59649,
    "alert-circle": 59650,
    "alert-octagon": 59651,
    "alert-triangle": 59652,
    "align-center": 59653,
    "align-justify": 59654,
    "align-left": 59655,
    "align-right": 59656,
    "anchor": 59657,
    "aperture": 59658,
    "arrow-down": 59659,
    "arrow-down-left": 59660,
    "arrow-down-right": 59661,
    "arrow-left": 59662,
    "arrow-right": 59663,
    "arrow-up": 59664,
    "arrow-up-left": 59665,
    "arrow-up-right": 59666,
    "at-sign": 59667,
    "award": 59668,
    "bar-chart": 59669,
    "bar-chart-2": 59670,
    "battery": 59671,
    "battery-charging": 59672,
    "bell": 59673,
    "bell-off": 59674,
    "bluetooth": 59675,
    "bold": 59676,
    "book": 59677,
    "bookmark": 59678,
    "box": 59679,
    "briefcase": 59680,
    "calendar": 59681,
    "camera": 59682,
    "camera-off": 59683,
    "cast": 59684,
    "check": 59685,
    "check-circle": 59686,
    "check-square": 59687,
    "chevron-down": 59688,
    "chevron-left": 59689,
    "chevron-right": 59690,
    "chevron-up": 59691,
    "chevrons-down": 59692,
    "chevrons-left": 59693,
    "chevrons-right": 59694,
    "chevrons-up": 59695,
    "chrome": 59696,
    "circle": 59697,
    "clipboard": 59698,
    "clock": 59699,
    "cloud": 59700,
    "cloud-drizzle": 59701,
    "cloud-lightning": 59702,
    "cloud-off": 59703,
    "cloud-rain": 59704,
    "cloud-snow": 59705,
    "codepen": 59706,
    "command": 59707,
    "compass": 59708,
    "copy": 59709,
    "corner-down-left": 59710,
    "corner-down-right": 59711,
    "corner-left-down": 59712,
    "corner-left-up": 59713,
    "corner-right-down": 59714,
    "corner-right-up": 59715,
    "corner-up-left": 59716,
    "corner-up-right": 59717,
    "cpu": 59718,
    "credit-card": 59719,
    "crop": 59720,
    "crosshair": 59721,
    "delete": 59722,
    "disc": 59723,
    "download": 59724,
    "download-cloud": 59725,
    "droplet": 59726,
    "edit": 59727,
    "edit-2": 59728,
    "edit-3": 59729,
    "external-link": 59730,
    "eye": 59731,
    "eye-off": 59732,
    "facebook": 59733,
    "fast-forward": 59734,
    "feather": 59735,
    "file": 59736,
    "file-minus": 59737,
    "file-plus": 59738,
    "file-text": 59739,
    "film": 59740,
    "filter": 59741,
    "flag": 59742,
    "folder": 59743,
    "github": 59744,
    "gitlab": 59745,
    "globe": 59746,
    "grid": 59747,
    "hash": 59748,
    "headphones": 59749,
    "heart": 59750,
    "help-circle": 59751,
    "home": 59752,
    "image": 59753,
    "inbox": 59754,
    "info": 59755,
    "instagram": 59756,
    "italic": 59757,
    "layers": 59758,
    "layout": 59759,
    "life-buoy": 59760,
    "link": 59761,
    "link-2": 59762,
    "list": 59763,
    "loader": 59764,
    "lock": 59765,
    "log-in": 59766,
    "log-out": 59767,
    "mail": 59768,
    "map": 59769,
    "map-pin": 59770,
    "maximize": 59771,
    "maximize-2": 59772,
    "menu": 59773,
    "message-circle": 59774,
    "message-square": 59775,
    "mic": 59776,
    "mic-off": 59777,
    "minimize": 59778,
    "minimize-2": 59779,
    "minus": 59780,
    "minus-circle": 59781,
    "minus-square": 59782,
    "monitor": 59783,
    "moon": 59784,
    "more-horizontal": 59785,
    "more-vertical": 59786,
    "move": 59787,
    "music": 59788,
    "navigation": 59789,
    "navigation-2": 59790,
    "octagon": 59791,
    "package": 59792,
    "paperclip": 59793,
    "pause": 59794,
    "pause-circle": 59795,
    "percent": 59796,
    "phone": 59797,
    "phone-call": 59798,
    "phone-forwarded": 59799,
    "phone-incoming": 59800,
    "phone-missed": 59801,
    "phone-off": 59802,
    "phone-outgoing": 59803,
    "pie-chart": 59804,
    "play": 59805,
    "play-circle": 59806,
    "plus": 59807,
    "plus-circle": 59808,
    "plus-square": 59809,
    "pocket": 59810,
    "power": 59811,
    "printer": 59812,
    "radio": 59813,
    "refresh-ccw": 59814,
    "refresh-cw": 59815,
    "repeat": 59816,
    "rewind": 59817,
    "rotate-ccw": 59818,
    "rotate-cw": 59819,
    "save": 59820,
    "scissors": 59821,
    "search": 59822,
    "server": 59823,
    "settings": 59824,
    "share": 59825,
    "share-2": 59826,
    "shield": 59827,
    "shopping-cart": 59828,
    "shuffle": 59829,
    "sidebar": 59830,
    "skip-back": 59831,
    "skip-forward": 59832,
    "slack": 59833,
    "slash": 59834,
    "sliders": 59835,
    "smartphone": 59836,
    "speaker": 59837,
    "square": 59838,
    "star": 59839,
    "stop-circle": 59840,
    "sun": 59841,
    "sunrise": 59842,
    "sunset": 59843,
    "tablet": 59844,
    "tag": 59845,
    "target": 59846,
    "thermometer": 59847,
    "thumbs-down": 59848,
    "thumbs-up": 59849,
    "toggle-left": 59850,
    "toggle-right": 59851,
    "trash": 59852,
    "trash-2": 59853,
    "trending-down": 59854,
    "trending-up": 59855,
    "triangle": 59856,
    "tv": 59857,
    "twitter": 59858,
    "type": 59859,
    "umbrella": 59860,
    "underline": 59861,
    "unlock": 59862,
    "upload": 59863,
    "upload-cloud": 59864,
    "user": 59865,
    "user-check": 59866,
    "user-minus": 59867,
    "user-plus": 59868,
    "user-x": 59869,
    "users": 59870,
    "video": 59871,
    "video-off": 59872,
    "voicemail": 59873,
    "volume": 59874,
    "volume-1": 59875,
    "volume-2": 59876,
    "volume-x": 59877,
    "watch": 59878,
    "wifi": 59879,
    "wifi-off": 59880,
    "wind": 59881,
    "x": 59882,
    "x-circle": 59883,
    "x-square": 59884,
    "zap": 59885,
    "zoom-in": 59886,
    "zoom-out": 59887
  };
},706,[],"react-native-vector-icons/glyphmaps/Feather.json");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var ViewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;
  exports.default = ViewPropTypes;
},707,[12],"react-native-elements/src/config/ViewPropTypes.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-elements/src/icons/Icon.js";

  var _propTypes = require(_dependencyMap[0], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = require(_dependencyMap[1], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _getIconType = require(_dependencyMap[3], "../helpers/getIconType");

  var _getIconType2 = babelHelpers.interopRequireDefault(_getIconType);

  var _ViewPropTypes = require(_dependencyMap[4], "../config/ViewPropTypes");

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var Icon = function Icon(props) {
    var type = props.type,
        name = props.name,
        size = props.size,
        color = props.color,
        iconStyle = props.iconStyle,
        component = props.component,
        underlayColor = props.underlayColor,
        reverse = props.reverse,
        raised = props.raised,
        containerStyle = props.containerStyle,
        reverseColor = props.reverseColor,
        onPress = props.onPress,
        attributes = babelHelpers.objectWithoutProperties(props, ["type", "name", "size", "color", "iconStyle", "component", "underlayColor", "reverse", "raised", "containerStyle", "reverseColor", "onPress"]);
    var Component = _reactNative.View;

    if (onPress) {
      Component = _reactNative.TouchableHighlight;
    }

    if (component) {
      Component = component;
    }

    var Icon = void 0;

    if (!type) {
      Icon = (0, _getIconType2.default)('material');
    } else {
      Icon = (0, _getIconType2.default)(type);
    }

    return _react2.default.createElement(
      Component,
      babelHelpers.extends({}, attributes, {
        underlayColor: reverse ? color : underlayColor || color,
        style: [(reverse || raised) && styles.button, (reverse || raised) && {
          borderRadius: size + 4,
          height: size * 2 + 4,
          width: size * 2 + 4
        }, raised && styles.raised, {
          backgroundColor: reverse ? color : raised ? 'white' : 'transparent',
          alignItems: 'center',
          justifyContent: 'center'
        }, containerStyle && containerStyle],
        onPress: onPress,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 44
        }
      }),
      _react2.default.createElement(Icon, {
        style: [{
          backgroundColor: 'transparent'
        }, iconStyle && iconStyle],
        size: size,
        name: name,
        color: reverse ? reverseColor : color,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 64
        }
      })
    );
  };

  Icon.propTypes = {
    type: _propTypes2.default.string,
    name: _propTypes2.default.string,
    size: _propTypes2.default.number,
    color: _propTypes2.default.string,
    component: _propTypes2.default.func,
    underlayColor: _propTypes2.default.string,
    reverse: _propTypes2.default.bool,
    raised: _propTypes2.default.bool,
    containerStyle: _ViewPropTypes2.default.style,
    iconStyle: _reactNative.Text.propTypes.style,
    onPress: _propTypes2.default.func,
    reverseColor: _propTypes2.default.string
  };
  Icon.defaultProps = {
    underlayColor: 'white',
    reverse: false,
    raised: false,
    size: 24,
    color: 'black',
    reverseColor: 'white'
  };

  var styles = _reactNative.StyleSheet.create({
    button: {
      margin: 7
    },
    raised: babelHelpers.extends({}, _reactNative.Platform.select({
      ios: {
        shadowColor: 'rgba(0,0,0, .4)',
        shadowOffset: {
          height: 1,
          width: 1
        },
        shadowOpacity: 1,
        shadowRadius: 1
      },
      android: {
        elevation: 2
      }
    }))
  });

  exports.default = Icon;
},708,[127,108,12,686,707],"react-native-elements/src/icons/Icon.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-elements/src/list/List.js";

  var _propTypes = require(_dependencyMap[0], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = require(_dependencyMap[1], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _colors = require(_dependencyMap[3], "../config/colors");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var _ViewPropTypes = require(_dependencyMap[4], "../config/ViewPropTypes");

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var List = function List(props) {
    var children = props.children,
        containerStyle = props.containerStyle,
        attributes = babelHelpers.objectWithoutProperties(props, ["children", "containerStyle"]);
    return _react2.default.createElement(
      _reactNative.View,
      babelHelpers.extends({}, attributes, {
        style: [styles.listContainer, containerStyle && containerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 10
        }
      }),
      children
    );
  };

  List.propTypes = {
    children: _propTypes2.default.any,
    containerStyle: _ViewPropTypes2.default.style
  };

  var styles = _reactNative.StyleSheet.create({
    listContainer: {
      marginTop: 20,
      borderTopWidth: 1,
      borderColor: _colors2.default.greyOutline,
      backgroundColor: _colors2.default.white
    }
  });

  exports.default = List;
},709,[127,108,12,675,707],"react-native-elements/src/list/List.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-elements/src/list/ListItem.js";

  var _propTypes = require(_dependencyMap[0], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = require(_dependencyMap[1], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _Avatar = require(_dependencyMap[3], "../avatar/Avatar");

  var _Avatar2 = babelHelpers.interopRequireDefault(_Avatar);

  var _badge = require(_dependencyMap[4], "../badge/badge");

  var _badge2 = babelHelpers.interopRequireDefault(_badge);

  var _Icon = require(_dependencyMap[5], "../icons/Icon");

  var _Icon2 = babelHelpers.interopRequireDefault(_Icon);

  var _Text = require(_dependencyMap[6], "../text/Text");

  var _Text2 = babelHelpers.interopRequireDefault(_Text);

  var _colors = require(_dependencyMap[7], "../config/colors");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var _fonts = require(_dependencyMap[8], "../config/fonts");

  var _fonts2 = babelHelpers.interopRequireDefault(_fonts);

  var _normalizeText = require(_dependencyMap[9], "../helpers/normalizeText");

  var _normalizeText2 = babelHelpers.interopRequireDefault(_normalizeText);

  var _ViewPropTypes = require(_dependencyMap[10], "../config/ViewPropTypes");

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var ListItem = function ListItem(props) {
    var onPress = props.onPress,
        title = props.title,
        leftIcon = props.leftIcon,
        rightIcon = props.rightIcon,
        leftIconOnPress = props.leftIconOnPress,
        leftIconOnLongPress = props.leftIconOnLongPress,
        leftIconUnderlayColor = props.leftIconUnderlayColor,
        leftIconContainerStyle = props.leftIconContainerStyle,
        avatarStyle = props.avatarStyle,
        avatarContainerStyle = props.avatarContainerStyle,
        avatarOverlayContainerStyle = props.avatarOverlayContainerStyle,
        underlayColor = props.underlayColor,
        subtitle = props.subtitle,
        subtitleStyle = props.subtitleStyle,
        containerStyle = props.containerStyle,
        wrapperStyle = props.wrapperStyle,
        titleNumberOfLines = props.titleNumberOfLines,
        titleStyle = props.titleStyle,
        titleContainerStyle = props.titleContainerStyle,
        hideChevron = props.hideChevron,
        chevronColor = props.chevronColor,
        roundAvatar = props.roundAvatar,
        component = props.component,
        fontFamily = props.fontFamily,
        rightTitle = props.rightTitle,
        rightTitleContainerStyle = props.rightTitleContainerStyle,
        rightTitleStyle = props.rightTitleStyle,
        rightTitleNumberOfLines = props.rightTitleNumberOfLines,
        subtitleContainerStyle = props.subtitleContainerStyle,
        subtitleNumberOfLines = props.subtitleNumberOfLines,
        badge = props.badge,
        label = props.label,
        onLongPress = props.onLongPress,
        switchButton = props.switchButton,
        onSwitch = props.onSwitch,
        switchDisabled = props.switchDisabled,
        switchOnTintColor = props.switchOnTintColor,
        switchThumbTintColor = props.switchThumbTintColor,
        switchTintColor = props.switchTintColor,
        switched = props.switched,
        textInput = props.textInput,
        textInputAutoCapitalize = props.textInputAutoCapitalize,
        textInputAutoCorrect = props.textInputAutoCorrect,
        textInputAutoFocus = props.textInputAutoFocus,
        textInputEditable = props.textInputEditable,
        textInputKeyboardType = props.textInputKeyboardType,
        textInputMaxLength = props.textInputMaxLength,
        textInputMultiline = props.textInputMultiline,
        textInputOnChangeText = props.textInputOnChangeText,
        textInputOnFocus = props.textInputOnFocus,
        textInputOnBlur = props.textInputOnBlur,
        textInputSelectTextOnFocus = props.textInputSelectTextOnFocus,
        textInputReturnKeyType = props.textInputReturnKeyType,
        textInputValue = props.textInputValue,
        textInputSecure = props.textInputSecure,
        textInputStyle = props.textInputStyle,
        textInputContainerStyle = props.textInputContainerStyle,
        textInputPlaceholder = props.textInputPlaceholder,
        onPressRightIcon = props.onPressRightIcon,
        disabled = props.disabled,
        disabledStyle = props.disabledStyle,
        attributes = babelHelpers.objectWithoutProperties(props, ["onPress", "title", "leftIcon", "rightIcon", "leftIconOnPress", "leftIconOnLongPress", "leftIconUnderlayColor", "leftIconContainerStyle", "avatarStyle", "avatarContainerStyle", "avatarOverlayContainerStyle", "underlayColor", "subtitle", "subtitleStyle", "containerStyle", "wrapperStyle", "titleNumberOfLines", "titleStyle", "titleContainerStyle", "hideChevron", "chevronColor", "roundAvatar", "component", "fontFamily", "rightTitle", "rightTitleContainerStyle", "rightTitleStyle", "rightTitleNumberOfLines", "subtitleContainerStyle", "subtitleNumberOfLines", "badge", "label", "onLongPress", "switchButton", "onSwitch", "switchDisabled", "switchOnTintColor", "switchThumbTintColor", "switchTintColor", "switched", "textInput", "textInputAutoCapitalize", "textInputAutoCorrect", "textInputAutoFocus", "textInputEditable", "textInputKeyboardType", "textInputMaxLength", "textInputMultiline", "textInputOnChangeText", "textInputOnFocus", "textInputOnBlur", "textInputSelectTextOnFocus", "textInputReturnKeyType", "textInputValue", "textInputSecure", "textInputStyle", "textInputContainerStyle", "textInputPlaceholder", "onPressRightIcon", "disabled", "disabledStyle"]);
    var avatar = props.avatar;
    var Component = onPress || onLongPress ? _reactNative.TouchableHighlight : _reactNative.View;
    var LeftIconWrapper = leftIconOnPress || leftIconOnLongPress ? _reactNative.TouchableHighlight : _reactNative.View;

    if (component) {
      Component = component;
    }

    if (typeof avatar === 'string') {
      avatar = {
        uri: avatar
      };
    }

    return _react2.default.createElement(
      Component,
      babelHelpers.extends({}, attributes, {
        onLongPress: onLongPress,
        onPress: onPress,
        disabled: disabled,
        underlayColor: underlayColor,
        style: [styles.container, containerStyle && containerStyle, disabled && styles.disabled, disabled && disabledStyle && disabledStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 100
        }
      }),
      _react2.default.createElement(
        _reactNative.View,
        {
          style: [styles.wrapper, wrapperStyle && wrapperStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 113
          }
        },
        _react2.default.isValidElement(leftIcon) ? leftIcon : leftIcon && leftIcon.name && _react2.default.createElement(
          LeftIconWrapper,
          {
            onLongPress: leftIconOnLongPress,
            onPress: leftIconOnPress,
            disabled: disabled,
            underlayColor: leftIconUnderlayColor,
            style: [styles.iconStyle, leftIconContainerStyle && leftIconContainerStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 118
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 128
              }
            },
            _react2.default.createElement(_Icon2.default, {
              type: leftIcon.type,
              iconStyle: [styles.icon, leftIcon.style && leftIcon.style],
              name: leftIcon.name,
              color: leftIcon.color || _colors2.default.grey4,
              size: leftIcon.size || 24,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 129
              }
            })
          )
        ),
        avatar && _react2.default.isValidElement(avatar) ? avatar : avatar && !_react2.default.isValidElement(avatar) && _react2.default.createElement(_Avatar2.default, {
          avatarStyle: avatarStyle && avatarStyle,
          containerStyle: avatarContainerStyle && avatarContainerStyle,
          overlayContainerStyle: avatarOverlayContainerStyle && avatarOverlayContainerStyle,
          rounded: roundAvatar,
          source: avatar,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 143
          }
        }),
        _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.titleSubtitleContainer,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 153
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: titleContainerStyle,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 154
              }
            },
            title !== null && (typeof title === 'string' || typeof title === 'number') ? _react2.default.createElement(
              _Text2.default,
              {
                numberOfLines: titleNumberOfLines,
                style: [styles.title, !leftIcon && {
                  marginLeft: 10
                }, titleStyle && titleStyle, fontFamily && {
                  fontFamily: fontFamily
                }],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 157
                }
              },
              title
            ) : _react2.default.createElement(
              _reactNative.View,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 169
                }
              },
              title
            )
          ),
          _react2.default.createElement(
            _reactNative.View,
            {
              style: subtitleContainerStyle,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 172
              }
            },
            subtitle !== null && (typeof subtitle === 'string' || typeof subtitle === 'number') ? _react2.default.createElement(
              _Text2.default,
              {
                numberOfLines: subtitleNumberOfLines,
                style: [styles.subtitle, !leftIcon && {
                  marginLeft: 10
                }, subtitleStyle && subtitleStyle, fontFamily && {
                  fontFamily: fontFamily
                }],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 175
                }
              },
              subtitle
            ) : _react2.default.createElement(
              _reactNative.View,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 187
                }
              },
              subtitle
            )
          )
        ),
        rightTitle && rightTitle !== '' && !textInput && _react2.default.createElement(
          _reactNative.View,
          {
            style: [styles.rightTitleContainer, rightTitleContainerStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 194
            }
          },
          _react2.default.createElement(
            _Text2.default,
            {
              numberOfLines: rightTitleNumberOfLines,
              style: [styles.rightTitleStyle, rightTitleStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 197
              }
            },
            rightTitle
          )
        ),
        textInput && _react2.default.createElement(
          _reactNative.View,
          {
            style: [styles.rightTitleContainer, styles.textInputContainerStyle, textInputContainerStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 206
            }
          },
          _react2.default.createElement(_reactNative.TextInput, {
            style: [styles.textInputStyle, textInputStyle],
            underlineColorAndroid: 'transparent',
            defaultValue: rightTitle,
            value: textInputValue,
            placeholder: textInputPlaceholder,
            autoCapitalize: textInputAutoCapitalize,
            autoCorrect: textInputAutoCorrect,
            autoFocus: textInputAutoFocus,
            editable: disabled ? false : textInputEditable,
            keyboardType: textInputKeyboardType,
            maxLength: textInputMaxLength,
            multiline: textInputMultiline,
            onChangeText: textInputOnChangeText,
            onFocus: textInputOnFocus,
            onBlur: textInputOnBlur,
            secureTextEntry: textInputSecure,
            selectTextOnFocus: textInputSelectTextOnFocus,
            returnKeyType: textInputReturnKeyType,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 213
            }
          })
        ),
        badge && !rightTitle && _react2.default.createElement(_badge2.default, babelHelpers.extends({}, badge, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 235
          }
        })),
        !hideChevron && (_react2.default.isValidElement(rightIcon) ? rightIcon : _react2.default.createElement(
          _reactNative.TouchableOpacity,
          {
            onPress: onPressRightIcon,
            disabled: disabled ? disabled : !onPressRightIcon,
            style: styles.chevronContainer,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 240
            }
          },
          _react2.default.createElement(_Icon2.default, {
            type: rightIcon.type,
            iconStyle: rightIcon.style,
            size: 28,
            name: rightIcon.name || 'chevron-right',
            color: rightIcon.color || chevronColor,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 245
            }
          })
        )),
        switchButton && hideChevron && _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.switchContainer,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 256
            }
          },
          _react2.default.createElement(_reactNative.Switch, {
            onValueChange: onSwitch,
            disabled: disabled ? disabled : switchDisabled,
            onTintColor: switchOnTintColor,
            thumbTintColor: switchThumbTintColor,
            tintColor: switchTintColor,
            value: switched,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 257
            }
          })
        ),
        label && label
      )
    );
  };

  ListItem.defaultProps = {
    underlayColor: 'white',
    leftIconUnderlayColor: 'white',
    chevronColor: _colors2.default.grey4,
    rightIcon: {
      name: 'chevron-right'
    },
    hideChevron: false,
    roundAvatar: false,
    switchButton: false,
    textInputEditable: true,
    titleNumberOfLines: 1,
    subtitleNumberOfLines: 1,
    rightTitleNumberOfLines: 1,
    disabled: false
  };
  ListItem.propTypes = {
    title: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.object]),
    avatar: _propTypes2.default.any,
    icon: _propTypes2.default.any,
    onPress: _propTypes2.default.func,
    rightIcon: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.object]),
    underlayColor: _propTypes2.default.string,
    subtitle: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.object]),
    subtitleStyle: _propTypes2.default.any,
    subtitleNumberOfLines: _propTypes2.default.number,
    containerStyle: _propTypes2.default.any,
    wrapperStyle: _propTypes2.default.any,
    titleStyle: _propTypes2.default.any,
    titleContainerStyle: _propTypes2.default.any,
    titleNumberOfLines: _propTypes2.default.number,
    hideChevron: _propTypes2.default.bool,
    chevronColor: _propTypes2.default.string,
    roundAvatar: _propTypes2.default.bool,
    badge: _propTypes2.default.any,
    switchButton: _propTypes2.default.bool,
    onSwitch: _propTypes2.default.func,
    switchDisabled: _propTypes2.default.bool,
    switchOnTintColor: _propTypes2.default.string,
    switchThumbTintColor: _propTypes2.default.string,
    switchTintColor: _propTypes2.default.string,
    switched: _propTypes2.default.bool,
    textInput: _propTypes2.default.bool,
    textInputAutoCapitalize: _propTypes2.default.oneOf(['none', 'sentences', 'words', 'characters']),
    textInputAutoCorrect: _propTypes2.default.bool,
    textInputAutoFocus: _propTypes2.default.bool,
    textInputEditable: _propTypes2.default.bool,
    textInputKeyboardType: _propTypes2.default.oneOf(['default', 'email-address', 'numeric', 'phone-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'number-pad', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search']),
    textInputMaxLength: _propTypes2.default.number,
    textInputMultiline: _propTypes2.default.bool,
    textInputOnChangeText: _propTypes2.default.func,
    textInputOnFocus: _propTypes2.default.func,
    textInputOnBlur: _propTypes2.default.func,
    textInputSelectTextOnFocus: _propTypes2.default.bool,
    textInputReturnKeyType: _propTypes2.default.string,
    textInputValue: _propTypes2.default.string,
    textInputSecure: _propTypes2.default.bool,
    textInputStyle: _propTypes2.default.any,
    textInputContainerStyle: _propTypes2.default.any,
    textInputPlaceholder: _propTypes2.default.string,
    component: _propTypes2.default.any,
    fontFamily: _propTypes2.default.string,
    rightTitle: _propTypes2.default.string,
    rightTitleContainerStyle: _ViewPropTypes2.default.style,
    rightTitleStyle: _Text2.default.propTypes.style,
    rightTitleNumberOfLines: _propTypes2.default.number,
    subtitleContainerStyle: _ViewPropTypes2.default.style,
    label: _propTypes2.default.any,
    onLongPress: _propTypes2.default.func,
    leftIcon: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.object]),
    leftIconOnPress: _propTypes2.default.func,
    leftIconOnLongPress: _propTypes2.default.func,
    leftIconUnderlayColor: _propTypes2.default.string,
    leftIconContainerStyle: _ViewPropTypes2.default.style,
    avatarStyle: _reactNative.Image.propTypes.style,
    avatarContainerStyle: _ViewPropTypes2.default.style,
    avatarOverlayContainerStyle: _ViewPropTypes2.default.style,
    onPressRightIcon: _propTypes2.default.func,
    disabled: _propTypes2.default.bool,
    disabledStyle: _ViewPropTypes2.default.style
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      paddingTop: 10,
      paddingRight: 10,
      paddingBottom: 10,
      borderBottomColor: _colors2.default.greyOutline,
      borderBottomWidth: 1,
      backgroundColor: 'transparent'
    },
    wrapper: {
      flexDirection: 'row',
      marginLeft: 10,
      alignItems: 'center'
    },
    iconStyle: {
      justifyContent: 'center',
      alignItems: 'center'
    },
    icon: {
      marginRight: 8
    },
    title: {
      fontSize: (0, _normalizeText2.default)(14),
      color: _colors2.default.grey1
    },
    subtitle: babelHelpers.extends({
      color: _colors2.default.grey3,
      fontSize: (0, _normalizeText2.default)(12),
      marginTop: 1
    }, _reactNative.Platform.select({
      ios: {
        fontWeight: '600'
      },
      android: babelHelpers.extends({}, _fonts2.default.android.bold)
    })),
    titleSubtitleContainer: {
      justifyContent: 'center',
      flex: 1
    },
    chevronContainer: {
      alignItems: 'flex-end',
      justifyContent: 'center'
    },
    switchContainer: {
      alignItems: 'flex-end',
      justifyContent: 'center',
      marginRight: 5
    },
    rightTitleContainer: {
      flex: 1,
      alignItems: 'flex-end',
      justifyContent: 'center'
    },
    rightTitleStyle: {
      marginRight: 5,
      color: _colors2.default.grey4
    },
    textInputContainerStyle: {
      alignItems: null
    },
    textInputStyle: {
      height: 20,
      flex: 1,
      textAlign: 'right'
    },
    disabled: {
      opacity: 0.5
    }
  });

  exports.default = ListItem;
},710,[127,108,12,711,712,708,676,675,677,678,707],"react-native-elements/src/list/ListItem.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-elements/src/avatar/Avatar.js";

  var _propTypes = require(_dependencyMap[0], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = require(_dependencyMap[1], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _ViewPropTypes = require(_dependencyMap[3], "../config/ViewPropTypes");

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var _Icon = require(_dependencyMap[4], "../icons/Icon");

  var _Icon2 = babelHelpers.interopRequireDefault(_Icon);

  var _Text = require(_dependencyMap[5], "../text/Text");

  var _Text2 = babelHelpers.interopRequireDefault(_Text);

  var DEFAULT_COLORS = ['#000', '#333', '#555', '#888', '#aaa', '#ddd'];

  var Avatar = function Avatar(props) {
    var component = props.component,
        onPress = props.onPress,
        onLongPress = props.onLongPress,
        containerStyle = props.containerStyle,
        icon = props.icon,
        iconStyle = props.iconStyle,
        source = props.source,
        small = props.small,
        medium = props.medium,
        large = props.large,
        xlarge = props.xlarge,
        avatarStyle = props.avatarStyle,
        rounded = props.rounded,
        title = props.title,
        titleStyle = props.titleStyle,
        overlayContainerStyle = props.overlayContainerStyle,
        activeOpacity = props.activeOpacity,
        showEditButton = props.showEditButton,
        editButton = props.editButton,
        onEditPress = props.onEditPress,
        imageProps = props.imageProps,
        attributes = babelHelpers.objectWithoutProperties(props, ["component", "onPress", "onLongPress", "containerStyle", "icon", "iconStyle", "source", "small", "medium", "large", "xlarge", "avatarStyle", "rounded", "title", "titleStyle", "overlayContainerStyle", "activeOpacity", "showEditButton", "editButton", "onEditPress", "imageProps"]);
    var width = props.width,
        height = props.height;

    if (small) {
      width = 34;
      height = 34;
    } else if (medium) {
      width = 50;
      height = 50;
    } else if (large) {
      width = 75;
      height = 75;
    } else if (xlarge) {
      width = 150;
      height = 150;
    } else if (!width && !height) {
      width = 34;
      height = 34;
    } else if (!width) {
      width = height;
    } else if (!height) {
      height = width;
    }

    var titleSize = width / 2;
    var iconSize = width / 2;
    var Component = onPress || onLongPress ? _reactNative.TouchableOpacity : _reactNative.View;

    if (component) {
      Component = component;
    }

    var renderUtils = function renderUtils() {
      if (showEditButton) {
        var editButtonProps = babelHelpers.extends({}, editButton);
        var defaultEditButtonSize = (width + height) / 2 / 3;
        var editButtonSize = editButton.size || defaultEditButtonSize;
        var editButtonSizeStyle = {
          width: editButtonSize,
          height: editButtonSize,
          borderRadius: editButtonSize / 2
        };
        var editButtonIconSize = editButtonSize * 0.8;
        return _react2.default.createElement(
          _reactNative.TouchableHighlight,
          {
            style: [styles.editButton, editButtonSizeStyle, editButtonProps.style],
            underlayColor: editButtonProps.underlayColor,
            onPress: onEditPress,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 92
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 101
              }
            },
            _react2.default.createElement(_Icon2.default, {
              size: editButtonIconSize,
              name: editButtonProps.iconName,
              type: editButtonProps.iconType,
              color: editButtonProps.iconColor,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 102
              }
            })
          )
        );
      }
    };

    var renderContent = function renderContent() {
      if (source) {
        return _react2.default.createElement(_reactNative.Image, babelHelpers.extends({
          style: [styles.avatar, rounded && {
            borderRadius: width / 2
          }, avatarStyle && avatarStyle],
          source: source
        }, imageProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 117
          }
        }));
      } else if (title) {
        return _react2.default.createElement(
          _Text2.default,
          {
            style: [styles.title, titleStyle && titleStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 129
            }
          },
          title
        );
      } else if (icon) {
        return _react2.default.createElement(_Icon2.default, {
          style: iconStyle && iconStyle,
          color: icon.color || 'white',
          name: icon.name || 'user',
          size: icon.size || iconSize,
          type: icon.type && icon.type,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 135
          }
        });
      }
    };

    var styles = _reactNative.StyleSheet.create({
      container: {
        paddingTop: 10,
        paddingRight: 10,
        paddingBottom: 10,
        backgroundColor: 'transparent',
        width: width,
        height: height
      },
      avatar: {
        width: width,
        height: height
      },
      overlayContainer: {
        flex: 1,
        alignItems: 'center',
        backgroundColor: 'rgba(0,0,0,0.2)',
        alignSelf: 'stretch',
        justifyContent: 'center',
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
      },
      title: {
        color: '#ffffff',
        fontSize: titleSize,
        backgroundColor: 'rgba(0,0,0,0)',
        textAlign: 'center'
      },
      editButton: babelHelpers.extends({
        position: 'absolute',
        bottom: 0,
        right: 0,
        alignItems: 'center',
        justifyContent: 'center',
        backgroundColor: DEFAULT_COLORS[4]
      }, _reactNative.Platform.select({
        ios: {
          shadowColor: DEFAULT_COLORS[0],
          shadowOffset: {
            width: 1,
            height: 1
          },
          shadowRadius: 2,
          shadowOpacity: 0.5
        },
        android: {
          elevation: 1
        }
      }))
    });

    return _react2.default.createElement(
      Component,
      babelHelpers.extends({}, attributes, {
        onPress: onPress,
        onLongPress: onLongPress,
        activeOpacity: activeOpacity,
        style: [styles.container, rounded && {
          borderRadius: width / 2
        }, containerStyle && containerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 199
        }
      }),
      _react2.default.createElement(
        _reactNative.View,
        {
          style: [styles.overlayContainer, rounded && {
            borderRadius: width / 2
          }, overlayContainerStyle && overlayContainerStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 210
          }
        },
        renderContent()
      ),
      renderUtils()
    );
  };

  var defaultProps = {
    showEditButton: false,
    onEditPress: null,
    editButton: {
      size: null,
      iconName: 'mode-edit',
      iconType: 'material',
      iconColor: '#fff',
      underlayColor: DEFAULT_COLORS[0],
      style: null
    }
  };
  Avatar.propTypes = {
    component: _propTypes2.default.oneOf([_reactNative.View, _reactNative.TouchableOpacity, _reactNative.TouchableHighlight, _reactNative.TouchableNativeFeedback, _reactNative.TouchableWithoutFeedback]),
    width: _propTypes2.default.number,
    height: _propTypes2.default.number,
    onPress: _propTypes2.default.func,
    onLongPress: _propTypes2.default.func,
    containerStyle: _propTypes2.default.any,
    source: _reactNative.Image.propTypes.source,
    avatarStyle: _propTypes2.default.any,
    rounded: _propTypes2.default.bool,
    title: _propTypes2.default.string,
    titleStyle: _reactNative.Text.propTypes.style,
    overlayContainerStyle: _propTypes2.default.any,
    activeOpacity: _propTypes2.default.number,
    icon: _propTypes2.default.object,
    iconStyle: _reactNative.Text.propTypes.style,
    small: _propTypes2.default.bool,
    medium: _propTypes2.default.bool,
    large: _propTypes2.default.bool,
    xlarge: _propTypes2.default.bool,
    showEditButton: _propTypes2.default.bool,
    onEditPress: _propTypes2.default.func,
    editButton: _propTypes2.default.shape({
      size: _propTypes2.default.number,
      iconName: _propTypes2.default.string,
      iconType: _propTypes2.default.string,
      iconColor: _propTypes2.default.string,
      underlayColor: _propTypes2.default.string,
      style: _ViewPropTypes2.default.style
    }),
    imageProps: _propTypes2.default.object
  };
  Avatar.defaultProps = defaultProps;
  exports.default = Avatar;
},711,[127,108,12,707,708,676],"react-native-elements/src/avatar/Avatar.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-elements/src/badge/badge.js";

  var _propTypes = require(_dependencyMap[0], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = require(_dependencyMap[1], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _colors = require(_dependencyMap[3], "../config/colors");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var _ViewPropTypes = require(_dependencyMap[4], "../config/ViewPropTypes");

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var Badge = function Badge(props) {
    var containerStyle = props.containerStyle,
        textStyle = props.textStyle,
        wrapperStyle = props.wrapperStyle,
        onPress = props.onPress,
        component = props.component,
        value = props.value,
        children = props.children,
        element = props.element,
        attributes = babelHelpers.objectWithoutProperties(props, ["containerStyle", "textStyle", "wrapperStyle", "onPress", "component", "value", "children", "element"]);
    if (element) return element;
    var Component = _reactNative.View;

    var childElement = _react2.default.createElement(
      _reactNative.Text,
      {
        style: [styles.text, textStyle && textStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 25
        }
      },
      value
    );

    if (children) {
      childElement = children;
    }

    if (children && value) {
      console.error('Badge can only contain either child element or value');
    }

    if (!component && onPress) {
      Component = _reactNative.TouchableOpacity;
    }

    if (_react2.default.isValidElement(component)) {
      Component = component;
    }

    return _react2.default.createElement(
      _reactNative.View,
      {
        style: [styles.container && wrapperStyle && wrapperStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 47
        }
      },
      _react2.default.createElement(
        Component,
        babelHelpers.extends({}, attributes, {
          style: [styles.badge, containerStyle && containerStyle],
          onPress: onPress,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 48
          }
        }),
        childElement
      )
    );
  };

  Badge.propTypes = {
    containerStyle: _ViewPropTypes2.default.style,
    wrapperStyle: _ViewPropTypes2.default.style,
    textStyle: _reactNative.Text.propTypes.style,
    children: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.arrayOf(_propTypes2.default.element)]),
    value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    onPress: _propTypes2.default.func,
    component: _propTypes2.default.func,
    element: _propTypes2.default.element
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row'
    },
    badge: {
      padding: 12,
      paddingTop: 3,
      paddingBottom: 3,
      backgroundColor: _colors2.default.grey1,
      borderRadius: 20,
      alignItems: 'center',
      justifyContent: 'center'
    },
    text: {
      fontSize: 14,
      color: 'white'
    }
  });

  exports.default = Badge;
},712,[127,108,12,675,707],"react-native-elements/src/badge/badge.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _colors,
      _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-elements/src/social/SocialIcon.js";

  var _propTypes = require(_dependencyMap[0], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = require(_dependencyMap[1], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _FontAwesome = require(_dependencyMap[3], "react-native-vector-icons/FontAwesome");

  var _FontAwesome2 = babelHelpers.interopRequireDefault(_FontAwesome);

  var _Text = require(_dependencyMap[4], "../text/Text");

  var _Text2 = babelHelpers.interopRequireDefault(_Text);

  var _fonts = require(_dependencyMap[5], "../config/fonts");

  var _fonts2 = babelHelpers.interopRequireDefault(_fonts);

  var _ViewPropTypes = require(_dependencyMap[6], "../config/ViewPropTypes");

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var log = function log() {
    console.log('please attach method to this component');
  };

  var colors = (_colors = {}, babelHelpers.defineProperty(_colors, 'github-alt', '#000000'), babelHelpers.defineProperty(_colors, 'google-plus-official', '#dd4b39'), babelHelpers.defineProperty(_colors, 'reddit-alien', '#fc461e'), babelHelpers.defineProperty(_colors, 'stack-overflow', '#f27f33'), babelHelpers.defineProperty(_colors, "angellist", '#1c4082'), babelHelpers.defineProperty(_colors, "codepen", '#000000'), babelHelpers.defineProperty(_colors, "envelope", '#000000'), babelHelpers.defineProperty(_colors, "etsy", '#f2581e'), babelHelpers.defineProperty(_colors, "facebook", '#3b5998'), babelHelpers.defineProperty(_colors, "foursquare", '#0072b1'), babelHelpers.defineProperty(_colors, "github", '#000000'), babelHelpers.defineProperty(_colors, "gitlab", '#e14329'), babelHelpers.defineProperty(_colors, "instagram", '#517fa4'), babelHelpers.defineProperty(_colors, "linkedin", '#007bb6'), babelHelpers.defineProperty(_colors, "medium", '#02b875'), babelHelpers.defineProperty(_colors, "pinterest", '#cb2027'), babelHelpers.defineProperty(_colors, "quora", '#a82400'), babelHelpers.defineProperty(_colors, "soundcloud", '#f50'), babelHelpers.defineProperty(_colors, "steam", '#c6c3c1'), babelHelpers.defineProperty(_colors, "stumbleupon", '#EB4823'), babelHelpers.defineProperty(_colors, "tumblr", '#32506d'), babelHelpers.defineProperty(_colors, "twitch", '#6441A5'), babelHelpers.defineProperty(_colors, "twitter", '#00aced'), babelHelpers.defineProperty(_colors, "vimeo", '#aad450'), babelHelpers.defineProperty(_colors, "wordpress", '#21759b'), babelHelpers.defineProperty(_colors, "youtube", '#bb0000'), _colors);

  var SocialIcon = function SocialIcon(props) {
    var activityIndicatorStyle = props.activityIndicatorStyle,
        button = props.button,
        component = props.component,
        disabled = props.disabled,
        fontFamily = props.fontFamily,
        fontStyle = props.fontStyle,
        fontWeight = props.fontWeight,
        iconColor = props.iconColor,
        iconSize = props.iconSize,
        iconStyle = props.iconStyle,
        light = props.light,
        loading = props.loading,
        onLongPress = props.onLongPress,
        onPress = props.onPress,
        raised = props.raised,
        small = props.small,
        style = props.style,
        title = props.title,
        type = props.type,
        underlayColor = props.underlayColor,
        attributes = babelHelpers.objectWithoutProperties(props, ["activityIndicatorStyle", "button", "component", "disabled", "fontFamily", "fontStyle", "fontWeight", "iconColor", "iconSize", "iconStyle", "light", "loading", "onLongPress", "onPress", "raised", "small", "style", "title", "type", "underlayColor"]);
    var Component = onPress || onLongPress ? component || _reactNative.TouchableHighlight : _reactNative.View;
    var loadingElement = void 0;

    if (loading) {
      loadingElement = _react2.default.createElement(_reactNative.ActivityIndicator, {
        animating: true,
        style: [styles.activityIndicatorStyle, activityIndicatorStyle],
        color: iconColor || 'white',
        size: small && 'small' || 'large',
        __source: {
          fileName: _jsxFileName,
          lineNumber: 79
        }
      });
    }

    return _react2.default.createElement(
      Component,
      babelHelpers.extends({}, attributes, {
        underlayColor: light ? 'white' : underlayColor || colors[type],
        onLongPress: disabled ? null : onLongPress || log,
        onPress: (!disabled || log) && (onPress || log),
        disabled: disabled || false,
        style: [raised && styles.raised, styles.container, button && styles.button, !button && raised && styles.icon, !button && !light && !raised && {
          width: iconSize * 2 + 4,
          height: iconSize * 2 + 4,
          borderRadius: iconSize * 2
        }, {
          backgroundColor: colors[type]
        }, light && {
          backgroundColor: 'white'
        }, style && style],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 88
        }
      }),
      _react2.default.createElement(
        _reactNative.View,
        {
          style: styles.wrapper,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 111
          }
        },
        _react2.default.createElement(_FontAwesome2.default, {
          style: [iconStyle && iconStyle],
          color: light ? colors[type] : iconColor,
          name: type,
          size: iconSize,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 112
          }
        }),
        button && title && _react2.default.createElement(
          _Text2.default,
          {
            style: [styles.title, light && {
              color: colors[type]
            }, fontFamily && {
              fontFamily: fontFamily
            }, fontWeight && {
              fontWeight: fontWeight
            }, fontStyle && fontStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 120
            }
          },
          title
        ),
        loading && loadingElement
      )
    );
  };

  SocialIcon.propTypes = {
    component: _propTypes2.default.func,
    type: _propTypes2.default.string,
    button: _propTypes2.default.bool,
    onPress: _propTypes2.default.func,
    onLongPress: _propTypes2.default.func,
    iconStyle: _ViewPropTypes2.default.style,
    style: _ViewPropTypes2.default.style,
    iconColor: _propTypes2.default.string,
    underlayColor: _propTypes2.default.string,
    title: _propTypes2.default.string,
    raised: _propTypes2.default.bool,
    disabled: _propTypes2.default.bool,
    loading: _propTypes2.default.bool,
    activityIndicatorStyle: _ViewPropTypes2.default.style,
    small: _propTypes2.default.string,
    iconSize: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    light: _propTypes2.default.bool,
    fontWeight: _propTypes2.default.string,
    fontStyle: _reactNative.Text.propTypes.style,
    fontFamily: _propTypes2.default.string
  };
  SocialIcon.defaultProps = {
    raised: true,
    iconColor: 'white',
    iconSize: 24,
    button: false
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      margin: 7,
      borderRadius: 30,
      flexDirection: 'row',
      justifyContent: 'center',
      alignItems: 'center'
    },
    button: {
      paddingTop: 14,
      paddingBottom: 14
    },
    raised: babelHelpers.extends({}, _reactNative.Platform.select({
      ios: {
        shadowColor: 'rgba(0,0,0, .4)',
        shadowOffset: {
          height: 1,
          width: 1
        },
        shadowOpacity: 1,
        shadowRadius: 1
      },
      android: {
        elevation: 2
      }
    })),
    wrapper: {
      flexDirection: 'row',
      justifyContent: 'center',
      alignItems: 'center'
    },
    title: babelHelpers.extends({
      color: 'white',
      marginLeft: 15
    }, _reactNative.Platform.select({
      ios: {
        fontWeight: 'bold'
      },
      android: babelHelpers.extends({}, _fonts2.default.android.black)
    })),
    icon: {
      height: 52,
      width: 52
    },
    activityIndicatorStyle: {
      marginHorizontal: 10,
      height: 0
    }
  });

  exports.default = SocialIcon;
},713,[127,108,12,701,676,677,707],"react-native-elements/src/social/SocialIcon.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-elements/src/checkbox/CheckBox.js";

  var _propTypes = require(_dependencyMap[0], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = require(_dependencyMap[1], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _Text = require(_dependencyMap[3], "../text/Text");

  var _Text2 = babelHelpers.interopRequireDefault(_Text);

  var _fonts = require(_dependencyMap[4], "../config/fonts");

  var _fonts2 = babelHelpers.interopRequireDefault(_fonts);

  var _colors = require(_dependencyMap[5], "../config/colors");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var _FontAwesome = require(_dependencyMap[6], "react-native-vector-icons/FontAwesome");

  var _FontAwesome2 = babelHelpers.interopRequireDefault(_FontAwesome);

  var _getIconType = require(_dependencyMap[7], "../helpers/getIconType");

  var _getIconType2 = babelHelpers.interopRequireDefault(_getIconType);

  var _ViewPropTypes = require(_dependencyMap[8], "../config/ViewPropTypes");

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var CheckBox = function CheckBox(props) {
    var component = props.component,
        checked = props.checked,
        iconRight = props.iconRight,
        title = props.title,
        center = props.center,
        right = props.right,
        containerStyle = props.containerStyle,
        textStyle = props.textStyle,
        onPress = props.onPress,
        onLongPress = props.onLongPress,
        onIconPress = props.onIconPress,
        onLongIconPress = props.onLongIconPress,
        size = props.size,
        checkedIcon = props.checkedIcon,
        uncheckedIcon = props.uncheckedIcon,
        iconType = props.iconType,
        checkedColor = props.checkedColor,
        uncheckedColor = props.uncheckedColor,
        checkedTitle = props.checkedTitle,
        fontFamily = props.fontFamily,
        attributes = babelHelpers.objectWithoutProperties(props, ["component", "checked", "iconRight", "title", "center", "right", "containerStyle", "textStyle", "onPress", "onLongPress", "onIconPress", "onLongIconPress", "size", "checkedIcon", "uncheckedIcon", "iconType", "checkedColor", "uncheckedColor", "checkedTitle", "fontFamily"]);
    var Icon = _FontAwesome2.default;

    if (iconType) {
      Icon = (0, _getIconType2.default)(iconType);
    }

    var Component = component || _reactNative.TouchableOpacity;
    var iconName = uncheckedIcon;

    if (checked) {
      iconName = checkedIcon;
    }

    return _react2.default.createElement(
      Component,
      babelHelpers.extends({}, attributes, {
        onLongPress: onLongPress,
        onPress: onPress,
        style: [styles.container, containerStyle && containerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 52
        }
      }),
      _react2.default.createElement(
        _reactNative.View,
        {
          style: [styles.wrapper, right && {
            justifyContent: 'flex-end'
          }, center && {
            justifyContent: 'center'
          }],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 58
          }
        },
        !iconRight && _react2.default.createElement(Icon, {
          color: checked ? checkedColor : uncheckedColor,
          name: iconName,
          size: size || 24,
          onLongPress: onLongIconPress,
          onPress: onIconPress,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 66
          }
        }),
        _react2.default.isValidElement(title) ? title : _react2.default.createElement(
          _Text2.default,
          {
            style: [styles.text, textStyle && textStyle, fontFamily && {
              fontFamily: fontFamily
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 76
            }
          },
          checked ? checkedTitle || title : title
        ),
        iconRight && _react2.default.createElement(Icon, {
          color: checked ? checkedColor : uncheckedColor,
          name: iconName,
          size: size || 24,
          onLongPress: onLongIconPress,
          onPress: onIconPress,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 87
          }
        })
      )
    );
  };

  CheckBox.defaultProps = {
    checked: false,
    iconRight: false,
    right: false,
    center: false,
    checkedColor: 'green',
    uncheckedColor: '#bfbfbf',
    checkedIcon: 'check-square-o',
    uncheckedIcon: 'square-o',
    size: 24
  };
  CheckBox.propTypes = {
    component: _propTypes2.default.any,
    checked: _propTypes2.default.bool,
    iconRight: _propTypes2.default.bool,
    title: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),
    center: _propTypes2.default.bool,
    right: _propTypes2.default.bool,
    containerStyle: _ViewPropTypes2.default.style,
    textStyle: _reactNative.Text.propTypes.style,
    onPress: _propTypes2.default.func,
    onLongPress: _propTypes2.default.func,
    checkedIcon: _propTypes2.default.string,
    uncheckedIcon: _propTypes2.default.string,
    iconType: _propTypes2.default.string,
    size: _propTypes2.default.number,
    checkedColor: _propTypes2.default.string,
    uncheckedColor: _propTypes2.default.string,
    checkedTitle: _propTypes2.default.string,
    onIconPress: _propTypes2.default.func,
    onLongIconPress: _propTypes2.default.func,
    fontFamily: _propTypes2.default.string
  };

  var styles = _reactNative.StyleSheet.create({
    wrapper: {
      flexDirection: 'row',
      alignItems: 'center'
    },
    container: {
      margin: 5,
      marginLeft: 10,
      marginRight: 10,
      backgroundColor: '#fafafa',
      borderColor: '#ededed',
      borderWidth: 1,
      padding: 10,
      borderRadius: 3
    },
    text: babelHelpers.extends({
      marginLeft: 10,
      marginRight: 10,
      color: _colors2.default.grey1
    }, _reactNative.Platform.select({
      ios: {
        fontWeight: 'bold'
      },
      android: babelHelpers.extends({}, _fonts2.default.android.bold)
    }))
  });

  exports.default = CheckBox;
},714,[127,108,12,676,677,675,701,686,707],"react-native-elements/src/checkbox/CheckBox.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-elements/src/divider/Divider.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _colors = require(_dependencyMap[2], "../config/colors");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var _ViewPropTypes = require(_dependencyMap[3], "../config/ViewPropTypes");

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var styles = {};

  var Divider = function Divider(_ref) {
    var style = _ref.style;
    return _react2.default.createElement(_reactNative.View, {
      style: [styles.container, style && style],
      __source: {
        fileName: _jsxFileName,
        lineNumber: 9
      }
    });
  };

  Divider.propTypes = {
    style: _ViewPropTypes2.default.style
  };
  styles = _reactNative.StyleSheet.create({
    container: {
      height: 1,
      backgroundColor: _colors2.default.grey5
    }
  });
  exports.default = Divider;
},715,[108,12,675,707],"react-native-elements/src/divider/Divider.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-elements/src/slider/Slider.js";

  var _propTypes = require(_dependencyMap[0], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = require(_dependencyMap[1], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _ViewPropTypes = require(_dependencyMap[3], "../config/ViewPropTypes");

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var TRACK_SIZE = 4;
  var THUMB_SIZE = 20;
  var DEFAULT_ANIMATION_CONFIGS = {
    spring: {
      friction: 7,
      tension: 100
    },
    timing: {
      duration: 150,
      easing: _reactNative.Easing.inOut(_reactNative.Easing.ease),
      delay: 0
    }
  };

  function Rect(x, y, width, height) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }

  Rect.prototype.containsPoint = function (x, y) {
    return x >= this.x && y >= this.y && x <= this.x + this.width && y <= this.y + this.height;
  };

  var Slider = function (_Component) {
    babelHelpers.inherits(Slider, _Component);

    function Slider(props) {
      babelHelpers.classCallCheck(this, Slider);

      var _this = babelHelpers.possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).call(this, props));

      _this.state = {
        containerSize: {
          width: 0,
          height: 0
        },
        trackSize: {
          width: 0,
          height: 0
        },
        thumbSize: {
          width: 0,
          height: 0
        },
        allMeasured: false,
        value: new _reactNative.Animated.Value(props.value)
      };
      return _this;
    }

    babelHelpers.createClass(Slider, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this.panResponder = _reactNative.PanResponder.create({
          onStartShouldSetPanResponder: this.handleStartShouldSetPanResponder.bind(this),
          onMoveShouldSetPanResponder: this.handleMoveShouldSetPanResponder.bind(this),
          onPanResponderGrant: this.handlePanResponderGrant.bind(this),
          onPanResponderMove: this.handlePanResponderMove.bind(this),
          onPanResponderRelease: this.handlePanResponderEnd.bind(this),
          onPanResponderTerminationRequest: this.handlePanResponderRequestEnd.bind(this),
          onPanResponderTerminate: this.handlePanResponderEnd.bind(this)
        });
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        var newValue = nextProps.value;

        if (this.props.value !== newValue) {
          if (this.props.animateTransitions) {
            this.setCurrentValueAnimated(newValue);
          } else {
            this.setCurrentValue(newValue);
          }
        }
      }
    }, {
      key: "setCurrentValue",
      value: function setCurrentValue(value) {
        this.state.value.setValue(value);
      }
    }, {
      key: "setCurrentValueAnimated",
      value: function setCurrentValueAnimated(value) {
        var animationType = this.props.animationType;
        var animationConfig = babelHelpers.extends({}, DEFAULT_ANIMATION_CONFIGS[animationType], this.props.animationConfig, {
          toValue: value
        });

        _reactNative.Animated[animationType](this.state.value, animationConfig).start();
      }
    }, {
      key: "handleMoveShouldSetPanResponder",
      value: function handleMoveShouldSetPanResponder() {
        return false;
      }
    }, {
      key: "handlePanResponderGrant",
      value: function handlePanResponderGrant() {
        this._previousLeft = this.getThumbLeft(this.getCurrentValue());
        this.fireChangeEvent('onSlidingStart');
      }
    }, {
      key: "handlePanResponderMove",
      value: function handlePanResponderMove(e, gestureState) {
        if (this.props.disabled) {
          return;
        }

        this.setCurrentValue(this.getValue(gestureState));
        this.fireChangeEvent('onValueChange');
      }
    }, {
      key: "handlePanResponderRequestEnd",
      value: function handlePanResponderRequestEnd() {
        return false;
      }
    }, {
      key: "handlePanResponderEnd",
      value: function handlePanResponderEnd(e, gestureState) {
        if (this.props.disabled) {
          return;
        }

        this.setCurrentValue(this.getValue(gestureState));
        this.fireChangeEvent('onSlidingComplete');
      }
    }, {
      key: "thumbHitTest",
      value: function thumbHitTest(e) {
        var nativeEvent = e.nativeEvent;
        var thumbTouchRect = this.getThumbTouchRect();
        return thumbTouchRect.containsPoint(nativeEvent.locationX, nativeEvent.locationY);
      }
    }, {
      key: "handleStartShouldSetPanResponder",
      value: function handleStartShouldSetPanResponder(e) {
        return this.thumbHitTest(e);
      }
    }, {
      key: "fireChangeEvent",
      value: function fireChangeEvent(event) {
        if (this.props[event]) {
          this.props[event](this.getCurrentValue());
        }
      }
    }, {
      key: "getTouchOverflowSize",
      value: function getTouchOverflowSize() {
        var state = this.state;
        var props = this.props;
        var size = {};

        if (state.allMeasured === true) {
          size.width = Math.max(0, props.thumbTouchSize.width - state.thumbSize.width);
          size.height = Math.max(0, props.thumbTouchSize.height - state.containerSize.height);
        }

        return size;
      }
    }, {
      key: "getTouchOverflowStyle",
      value: function getTouchOverflowStyle() {
        var _getTouchOverflowSize = this.getTouchOverflowSize(),
            width = _getTouchOverflowSize.width,
            height = _getTouchOverflowSize.height;

        var touchOverflowStyle = {};

        if (width !== undefined && height !== undefined) {
          var verticalMargin = -height / 2;
          touchOverflowStyle.marginTop = verticalMargin;
          touchOverflowStyle.marginBottom = verticalMargin;
          var horizontalMargin = -width / 2;
          touchOverflowStyle.marginLeft = horizontalMargin;
          touchOverflowStyle.marginRight = horizontalMargin;
        }

        if (this.props.debugTouchArea === true) {
          touchOverflowStyle.backgroundColor = 'orange';
          touchOverflowStyle.opacity = 0.5;
        }

        return touchOverflowStyle;
      }
    }, {
      key: "handleMeasure",
      value: function handleMeasure(name, x) {
        var _x$nativeEvent$layout = x.nativeEvent.layout,
            width = _x$nativeEvent$layout.width,
            height = _x$nativeEvent$layout.height;
        var size = {
          width: width,
          height: height
        };
        var storeName = "_" + name;
        var currentSize = this[storeName];

        if (currentSize && width === currentSize.width && height === currentSize.height) {
          return;
        }

        this[storeName] = size;

        if (this._containerSize && this._trackSize && this._thumbSize) {
          this.setState({
            containerSize: this._containerSize,
            trackSize: this._trackSize,
            thumbSize: this._thumbSize,
            allMeasured: true
          });
        }
      }
    }, {
      key: "measureContainer",
      value: function measureContainer(x) {
        this.handleMeasure('containerSize', x);
      }
    }, {
      key: "measureTrack",
      value: function measureTrack(x) {
        this.handleMeasure('trackSize', x);
      }
    }, {
      key: "measureThumb",
      value: function measureThumb(x) {
        this.handleMeasure('thumbSize', x);
      }
    }, {
      key: "getValue",
      value: function getValue(gestureState) {
        var length = this.state.containerSize.width - this.state.thumbSize.width;
        var thumbLeft = this._previousLeft + (this.props.orientation === 'vertical' ? gestureState.dy : gestureState.dx);
        var ratio = thumbLeft / length;

        if (this.props.step) {
          return Math.max(this.props.minimumValue, Math.min(this.props.maximumValue, this.props.minimumValue + Math.round(ratio * (this.props.maximumValue - this.props.minimumValue) / this.props.step) * this.props.step));
        } else {
          return Math.max(this.props.minimumValue, Math.min(this.props.maximumValue, ratio * (this.props.maximumValue - this.props.minimumValue) + this.props.minimumValue));
        }
      }
    }, {
      key: "getCurrentValue",
      value: function getCurrentValue() {
        return this.state.value.__getValue();
      }
    }, {
      key: "getRatio",
      value: function getRatio(value) {
        return (value - this.props.minimumValue) / (this.props.maximumValue - this.props.minimumValue);
      }
    }, {
      key: "getThumbLeft",
      value: function getThumbLeft(value) {
        var ratio = this.getRatio(value);
        return ratio * (this.state.containerSize.width - this.state.thumbSize.width);
      }
    }, {
      key: "getThumbTouchRect",
      value: function getThumbTouchRect() {
        var state = this.state;
        var props = this.props;
        var touchOverflowSize = this.getTouchOverflowSize();
        return new Rect(touchOverflowSize.width / 2 + this.getThumbLeft(this.getCurrentValue()) + (state.thumbSize.width - props.thumbTouchSize.width) / 2, touchOverflowSize.height / 2 + (state.containerSize.height - props.thumbTouchSize.height) / 2, props.thumbTouchSize.width, props.thumbTouchSize.height);
      }
    }, {
      key: "renderDebugThumbTouchRect",
      value: function renderDebugThumbTouchRect(thumbLeft) {
        var thumbTouchRect = this.getThumbTouchRect();
        var positionStyle = {
          left: thumbLeft,
          top: thumbTouchRect.y,
          width: thumbTouchRect.width,
          height: thumbTouchRect.height
        };
        return _react2.default.createElement(_reactNative.Animated.View, {
          style: positionStyle,
          pointerEvents: "none",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 335
          }
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            minimumValue = _props.minimumValue,
            maximumValue = _props.maximumValue,
            minimumTrackTintColor = _props.minimumTrackTintColor,
            maximumTrackTintColor = _props.maximumTrackTintColor,
            thumbTintColor = _props.thumbTintColor,
            containerStyle = _props.containerStyle,
            style = _props.style,
            trackStyle = _props.trackStyle,
            thumbStyle = _props.thumbStyle,
            debugTouchArea = _props.debugTouchArea,
            orientation = _props.orientation,
            other = babelHelpers.objectWithoutProperties(_props, ["minimumValue", "maximumValue", "minimumTrackTintColor", "maximumTrackTintColor", "thumbTintColor", "containerStyle", "style", "trackStyle", "thumbStyle", "debugTouchArea", "orientation"]);
        var _state = this.state,
            value = _state.value,
            containerSize = _state.containerSize,
            trackSize = _state.trackSize,
            thumbSize = _state.thumbSize,
            allMeasured = _state.allMeasured;
        var mainStyles = containerStyle || styles;
        var thumbLeft = value.interpolate({
          inputRange: [minimumValue, maximumValue],
          outputRange: [0, containerSize.width - thumbSize.width]
        });
        var valueVisibleStyle = {};

        if (!allMeasured) {
          valueVisibleStyle.opacity = 0;
        }

        var minimumTrackStyle = babelHelpers.extends({
          position: 'absolute',
          width: _reactNative.Animated.add(thumbLeft, thumbSize.width / 2),
          marginTop: -trackSize.height,
          backgroundColor: minimumTrackTintColor
        }, valueVisibleStyle);
        var touchOverflowStyle = this.getTouchOverflowStyle();
        return _react2.default.createElement(
          _reactNative.View,
          babelHelpers.extends({}, other, {
            style: [mainStyles.container, orientation === 'vertical' && {
              transform: [{
                rotate: '90deg'
              }]
            }, style],
            onLayout: this.measureContainer.bind(this),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 384
            }
          }),
          _react2.default.createElement(_reactNative.View, {
            style: [{
              backgroundColor: maximumTrackTintColor
            }, mainStyles.track, trackStyle],
            onLayout: this.measureTrack.bind(this),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 393
            }
          }),
          _react2.default.createElement(_reactNative.Animated.View, {
            style: [mainStyles.track, trackStyle, minimumTrackStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 401
            }
          }),
          _react2.default.createElement(_reactNative.Animated.View, {
            onLayout: this.measureThumb.bind(this),
            style: [{
              backgroundColor: thumbTintColor
            }, mainStyles.thumb, thumbStyle, babelHelpers.extends({
              transform: [{
                translateX: thumbLeft
              }, {
                translateY: -(trackSize.height + thumbSize.height) / 2
              }]
            }, valueVisibleStyle)],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 404
            }
          }),
          _react2.default.createElement(
            _reactNative.View,
            babelHelpers.extends({
              style: [styles.touchArea, touchOverflowStyle]
            }, this.panResponder.panHandlers, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 419
              }
            }),
            debugTouchArea === true && this.renderDebugThumbTouchRect(thumbLeft)
          )
        );
      }
    }]);
    return Slider;
  }(_react.Component);

  exports.default = Slider;
  Slider.propTypes = {
    value: _propTypes2.default.number,
    disabled: _propTypes2.default.bool,
    minimumValue: _propTypes2.default.number,
    maximumValue: _propTypes2.default.number,
    step: _propTypes2.default.number,
    minimumTrackTintColor: _propTypes2.default.string,
    maximumTrackTintColor: _propTypes2.default.string,
    thumbTintColor: _propTypes2.default.string,
    thumbTouchSize: _propTypes2.default.shape({
      width: _propTypes2.default.number,
      height: _propTypes2.default.number
    }),
    onValueChange: _propTypes2.default.func,
    onSlidingStart: _propTypes2.default.func,
    onSlidingComplete: _propTypes2.default.func,
    style: _ViewPropTypes2.default.style,
    trackStyle: _ViewPropTypes2.default.style,
    thumbStyle: _ViewPropTypes2.default.style,
    debugTouchArea: _propTypes2.default.bool,
    animateTransitions: _propTypes2.default.bool,
    animationType: _propTypes2.default.oneOf(['spring', 'timing']),
    orientation: _propTypes2.default.oneOf(['horizontal', 'vertical']),
    animationConfig: _propTypes2.default.object,
    containerStyle: _ViewPropTypes2.default.style
  };
  Slider.defaultProps = {
    value: 0,
    minimumValue: 0,
    maximumValue: 1,
    step: 0,
    minimumTrackTintColor: '#3f3f3f',
    maximumTrackTintColor: '#b3b3b3',
    thumbTintColor: 'red',
    thumbTouchSize: {
      width: 40,
      height: 40
    },
    debugTouchArea: false,
    animationType: 'timing',
    orientation: 'horizontal'
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      height: 40,
      justifyContent: 'center'
    },
    track: {
      height: TRACK_SIZE,
      borderRadius: TRACK_SIZE / 2
    },
    thumb: {
      position: 'absolute',
      width: THUMB_SIZE,
      height: THUMB_SIZE,
      borderRadius: THUMB_SIZE / 2,
      top: 22
    },
    touchArea: {
      position: 'absolute',
      backgroundColor: 'transparent',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    debugThumbTouchArea: {
      position: 'absolute',
      backgroundColor: 'green',
      opacity: 0.5
    }
  });
},716,[127,108,12,707],"react-native-elements/src/slider/Slider.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-elements/src/buttons/ButtonGroup.js";

  var _propTypes = require(_dependencyMap[0], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = require(_dependencyMap[1], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _colors = require(_dependencyMap[3], "../config/colors");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var _Text = require(_dependencyMap[4], "../text/Text");

  var _Text2 = babelHelpers.interopRequireDefault(_Text);

  var _normalizeText = require(_dependencyMap[5], "../helpers/normalizeText");

  var _normalizeText2 = babelHelpers.interopRequireDefault(_normalizeText);

  var _ViewPropTypes = require(_dependencyMap[6], "../config/ViewPropTypes");

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var ButtonGroup = function ButtonGroup(props) {
    var component = props.component,
        buttons = props.buttons,
        onPress = props.onPress,
        selectedIndex = props.selectedIndex,
        containerStyle = props.containerStyle,
        innerBorderStyle = props.innerBorderStyle,
        lastBorderStyle = props.lastBorderStyle,
        buttonStyle = props.buttonStyle,
        textStyle = props.textStyle,
        selectedTextStyle = props.selectedTextStyle,
        selectedButtonStyle = props.selectedButtonStyle,
        underlayColor = props.underlayColor,
        activeOpacity = props.activeOpacity,
        onHideUnderlay = props.onHideUnderlay,
        onShowUnderlay = props.onShowUnderlay,
        setOpacityTo = props.setOpacityTo,
        containerBorderRadius = props.containerBorderRadius,
        disableSelected = props.disableSelected,
        attributes = babelHelpers.objectWithoutProperties(props, ["component", "buttons", "onPress", "selectedIndex", "containerStyle", "innerBorderStyle", "lastBorderStyle", "buttonStyle", "textStyle", "selectedTextStyle", "selectedButtonStyle", "underlayColor", "activeOpacity", "onHideUnderlay", "onShowUnderlay", "setOpacityTo", "containerBorderRadius", "disableSelected"]);
    var Component = component || _reactNative.TouchableHighlight;
    return _react2.default.createElement(
      _reactNative.View,
      babelHelpers.extends({}, attributes, {
        style: [styles.container, containerStyle && containerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 40
        }
      }),
      buttons.map(function (button, i) {
        var containerRadius = !isNaN(containerBorderRadius) ? containerBorderRadius : 3;
        return _react2.default.createElement(
          Component,
          {
            activeOpacity: activeOpacity,
            setOpacityTo: setOpacityTo,
            onHideUnderlay: onHideUnderlay,
            onShowUnderlay: onShowUnderlay,
            underlayColor: underlayColor || '#ffffff',
            disabled: disableSelected && i === selectedIndex ? true : false,
            onPress: onPress ? function () {
              return onPress(i);
            } : function () {},
            key: i,
            style: [styles.button, i < buttons.length - 1 && {
              borderRightWidth: i === 0 ? 0 : innerBorderStyle && innerBorderStyle.width || 1,
              borderRightColor: innerBorderStyle && innerBorderStyle.color || _colors2.default.grey4
            }, i === 1 && {
              borderLeftWidth: innerBorderStyle && innerBorderStyle.width || 1,
              borderLeftColor: innerBorderStyle && innerBorderStyle.color || _colors2.default.grey4
            }, i === buttons.length - 1 && babelHelpers.extends({}, lastBorderStyle, {
              borderTopRightRadius: containerRadius,
              borderBottomRightRadius: containerRadius
            }), i === 0 && {
              borderTopLeftRadius: containerRadius,
              borderBottomLeftRadius: containerRadius
            }, selectedIndex === i && {
              backgroundColor: 'white'
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 49
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: [styles.textContainer, buttonStyle && buttonStyle, selectedIndex === i && selectedButtonStyle && selectedButtonStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 90
              }
            },
            button.element ? _react2.default.createElement(button.element, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 100
              }
            }) : _react2.default.createElement(
              _Text2.default,
              {
                style: [styles.buttonText, textStyle && textStyle, selectedIndex === i && {
                  color: _colors2.default.grey1
                }, selectedIndex === i && selectedTextStyle],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 102
                }
              },
              button
            )
          )
        );
      })
    );
  };

  var styles = _reactNative.StyleSheet.create({
    button: {
      flex: 1
    },
    textContainer: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center'
    },
    container: {
      marginLeft: 10,
      marginRight: 10,
      marginBottom: 5,
      marginTop: 5,
      borderColor: '#e3e3e3',
      borderWidth: 1,
      flexDirection: 'row',
      borderRadius: 3,
      overflow: 'hidden',
      backgroundColor: '#f5f5f5',
      height: 40
    },
    buttonText: babelHelpers.extends({
      fontSize: (0, _normalizeText2.default)(13),
      color: _colors2.default.grey2
    }, _reactNative.Platform.select({
      ios: {
        fontWeight: '500'
      }
    }))
  });

  ButtonGroup.propTypes = {
    button: _propTypes2.default.object,
    component: _propTypes2.default.any,
    onPress: _propTypes2.default.func,
    buttons: _propTypes2.default.array,
    containerStyle: _ViewPropTypes2.default.style,
    textStyle: _reactNative.Text.propTypes.style,
    selectedTextStyle: _reactNative.Text.propTypes.style,
    selectedButtonStyle: _ViewPropTypes2.default.style,
    underlayColor: _propTypes2.default.string,
    selectedIndex: _propTypes2.default.number,
    activeOpacity: _propTypes2.default.number,
    onHideUnderlay: _propTypes2.default.func,
    onShowUnderlay: _propTypes2.default.func,
    setOpacityTo: _propTypes2.default.any,
    innerBorderStyle: _propTypes2.default.shape({
      color: _propTypes2.default.string,
      width: _propTypes2.default.number
    }),
    lastBorderStyle: _propTypes2.default.oneOfType([_ViewPropTypes2.default.style, _reactNative.Text.propTypes.style]),
    buttonStyle: _ViewPropTypes2.default.style,
    containerBorderRadius: _propTypes2.default.number,
    disableSelected: _propTypes2.default.bool
  };
  exports.default = ButtonGroup;
},717,[127,108,12,675,676,678,707],"react-native-elements/src/buttons/ButtonGroup.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-elements/src/card/Card.js";

  var _propTypes = require(_dependencyMap[0], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = require(_dependencyMap[1], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _fonts = require(_dependencyMap[3], "../config/fonts");

  var _fonts2 = babelHelpers.interopRequireDefault(_fonts);

  var _colors = require(_dependencyMap[4], "../config/colors");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var _Text = require(_dependencyMap[5], "../text/Text");

  var _Text2 = babelHelpers.interopRequireDefault(_Text);

  var _Divider = require(_dependencyMap[6], "../divider/Divider");

  var _Divider2 = babelHelpers.interopRequireDefault(_Divider);

  var _normalizeText = require(_dependencyMap[7], "../helpers/normalizeText");

  var _normalizeText2 = babelHelpers.interopRequireDefault(_normalizeText);

  var _ViewPropTypes = require(_dependencyMap[8], "../config/ViewPropTypes");

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var _BackgroundImage = require(_dependencyMap[9], "../config/BackgroundImage");

  var _BackgroundImage2 = babelHelpers.interopRequireDefault(_BackgroundImage);

  var Card = function Card(props) {
    var children = props.children,
        flexDirection = props.flexDirection,
        containerStyle = props.containerStyle,
        wrapperStyle = props.wrapperStyle,
        imageWrapperStyle = props.imageWrapperStyle,
        title = props.title,
        titleStyle = props.titleStyle,
        titleNumberOfLines = props.titleNumberOfLines,
        featuredTitle = props.featuredTitle,
        featuredTitleStyle = props.featuredTitleStyle,
        featuredSubtitle = props.featuredSubtitle,
        featuredSubtitleStyle = props.featuredSubtitleStyle,
        dividerStyle = props.dividerStyle,
        image = props.image,
        imageStyle = props.imageStyle,
        fontFamily = props.fontFamily,
        imageProps = props.imageProps,
        attributes = babelHelpers.objectWithoutProperties(props, ["children", "flexDirection", "containerStyle", "wrapperStyle", "imageWrapperStyle", "title", "titleStyle", "titleNumberOfLines", "featuredTitle", "featuredTitleStyle", "featuredSubtitle", "featuredSubtitleStyle", "dividerStyle", "image", "imageStyle", "fontFamily", "imageProps"]);
    return _react2.default.createElement(
      _reactNative.View,
      babelHelpers.extends({}, attributes, {
        style: [styles.container, image && {
          padding: 0
        }, containerStyle && containerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 41
        }
      }),
      _react2.default.createElement(
        _reactNative.View,
        {
          style: [styles.wrapper, wrapperStyle && wrapperStyle, flexDirection && {
            flexDirection: flexDirection
          }],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 49
          }
        },
        title === '' || title && title.length > 0 && _react2.default.createElement(
          _reactNative.View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 59
            }
          },
          _react2.default.createElement(
            _Text2.default,
            {
              style: [styles.cardTitle, image && styles.imageCardTitle, titleStyle && titleStyle, fontFamily && {
                fontFamily: fontFamily
              }],
              numberOfLines: titleNumberOfLines,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 60
              }
            },
            title
          ),
          !image && _react2.default.createElement(_Divider2.default, {
            style: [styles.divider, dividerStyle && dividerStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 72
            }
          })
        ),
        image && _react2.default.createElement(
          _reactNative.View,
          {
            style: imageWrapperStyle && imageWrapperStyle,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 77
            }
          },
          _react2.default.createElement(
            _BackgroundImage2.default,
            babelHelpers.extends({
              resizeMode: "cover",
              style: [{
                width: null,
                height: 150
              }, imageStyle && imageStyle],
              source: image
            }, imageProps, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 78
              }
            }),
            (featuredTitle || featuredSubtitle) && _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.overlayContainer,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 85
                }
              },
              featuredTitle && _react2.default.createElement(
                _Text2.default,
                {
                  style: [styles.featuredTitle, featuredTitleStyle && featuredTitleStyle],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 87
                  }
                },
                featuredTitle
              ),
              featuredSubtitle && _react2.default.createElement(
                _Text2.default,
                {
                  style: [styles.featuredSubtitle, featuredSubtitleStyle && featuredSubtitleStyle],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 96
                  }
                },
                featuredSubtitle
              )
            )
          ),
          _react2.default.createElement(
            _reactNative.View,
            {
              style: [{
                padding: 10
              }, wrapperStyle && wrapperStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 106
              }
            },
            children
          )
        ),
        !image && children
      )
    );
  };

  Card.propTypes = {
    children: _propTypes2.default.any,
    flexDirection: _propTypes2.default.string,
    containerStyle: _ViewPropTypes2.default.style,
    wrapperStyle: _ViewPropTypes2.default.style,
    overlayStyle: _ViewPropTypes2.default.style,
    title: _propTypes2.default.string,
    titleStyle: _reactNative.Text.propTypes.style,
    featuredTitle: _propTypes2.default.string,
    featuredTitleStyle: _Text2.default.propTypes.style,
    featuredSubtitle: _propTypes2.default.string,
    featuredSubtitleStyle: _Text2.default.propTypes.style,
    dividerStyle: _ViewPropTypes2.default.style,
    image: _reactNative.Image.propTypes.source,
    imageStyle: _ViewPropTypes2.default.style,
    imageWrapperStyle: _ViewPropTypes2.default.style,
    fontFamily: _propTypes2.default.string,
    imageProps: _propTypes2.default.object,
    titleNumberOfLines: _propTypes2.default.number
  };

  var styles = _reactNative.StyleSheet.create({
    container: babelHelpers.extends({
      backgroundColor: 'white',
      borderColor: _colors2.default.grey5,
      borderWidth: 1,
      padding: 15,
      margin: 15,
      marginBottom: 0
    }, _reactNative.Platform.select({
      ios: {
        shadowColor: 'rgba(0,0,0, .2)',
        shadowOffset: {
          height: 0,
          width: 0
        },
        shadowOpacity: 1,
        shadowRadius: 1
      },
      android: {
        elevation: 1
      }
    })),
    featuredTitle: babelHelpers.extends({
      fontSize: (0, _normalizeText2.default)(18),
      marginBottom: 8,
      color: 'white'
    }, _reactNative.Platform.select({
      ios: {
        fontWeight: '800'
      },
      android: babelHelpers.extends({}, _fonts2.default.android.black)
    })),
    featuredSubtitle: babelHelpers.extends({
      fontSize: (0, _normalizeText2.default)(13),
      marginBottom: 8,
      color: 'white'
    }, _reactNative.Platform.select({
      ios: {
        fontWeight: '400'
      },
      android: babelHelpers.extends({}, _fonts2.default.android.black)
    })),
    wrapper: {
      backgroundColor: 'transparent'
    },
    divider: {
      marginBottom: 15
    },
    cardTitle: babelHelpers.extends({
      fontSize: (0, _normalizeText2.default)(14)
    }, _reactNative.Platform.select({
      ios: {
        fontWeight: 'bold'
      },
      android: babelHelpers.extends({}, _fonts2.default.android.black)
    }), {
      textAlign: 'center',
      marginBottom: 15,
      color: _colors2.default.grey1
    }),
    imageCardTitle: {
      marginTop: 15
    },
    overlayContainer: {
      flex: 1,
      alignItems: 'center',
      backgroundColor: 'rgba(0, 0, 0, 0.2)',
      alignSelf: 'stretch',
      justifyContent: 'center',
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    }
  });

  exports.default = Card;
},718,[127,108,12,677,675,676,715,678,707,719],"react-native-elements/src/card/Card.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var BackgroundImage = _reactNative.ImageBackground || _reactNative.Image;
  exports.default = BackgroundImage;
},719,[12],"react-native-elements/src/config/BackgroundImage.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-elements/src/tile/Tile.js";

  var _propTypes = require(_dependencyMap[0], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = require(_dependencyMap[1], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _Text = require(_dependencyMap[3], "../text/Text");

  var _Text2 = babelHelpers.interopRequireDefault(_Text);

  var _Icon = require(_dependencyMap[4], "../icons/Icon");

  var _Icon2 = babelHelpers.interopRequireDefault(_Icon);

  var _FeaturedTile = require(_dependencyMap[5], "./FeaturedTile");

  var _FeaturedTile2 = babelHelpers.interopRequireDefault(_FeaturedTile);

  var _ViewPropTypes = require(_dependencyMap[6], "../config/ViewPropTypes");

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var _BackgroundImage = require(_dependencyMap[7], "../config/BackgroundImage");

  var _BackgroundImage2 = babelHelpers.interopRequireDefault(_BackgroundImage);

  var Tile = function Tile(props) {
    var featured = props.featured,
        imageSrc = props.imageSrc,
        icon = props.icon,
        title = props.title,
        children = props.children,
        caption = props.caption,
        titleStyle = props.titleStyle,
        onPress = props.onPress,
        activeOpacity = props.activeOpacity,
        overlayContainerStyle = props.overlayContainerStyle,
        captionStyle = props.captionStyle,
        iconContainerStyle = props.iconContainerStyle,
        imageContainerStyle = props.imageContainerStyle,
        containerStyle = props.containerStyle,
        contentContainerStyle = props.contentContainerStyle,
        titleNumberOfLines = props.titleNumberOfLines,
        attributes = babelHelpers.objectWithoutProperties(props, ["featured", "imageSrc", "icon", "title", "children", "caption", "titleStyle", "onPress", "activeOpacity", "overlayContainerStyle", "captionStyle", "iconContainerStyle", "imageContainerStyle", "containerStyle", "contentContainerStyle", "titleNumberOfLines"]);
    var width = props.width,
        height = props.height;

    if (!width) {
      width = _reactNative.Dimensions.get('window').width;
    }

    if (!height) {
      height = width * 0.8;
    }

    var styles = _reactNative.StyleSheet.create({
      container: {
        width: width,
        height: height
      },
      imageContainer: {
        alignItems: 'center',
        justifyContent: 'center',
        backgroundColor: '#ffffff',
        flex: 2
      },
      text: {
        backgroundColor: 'rgba(0,0,0,0)',
        marginBottom: 5
      },
      contentContainer: {
        paddingTop: 15,
        paddingBottom: 5,
        paddingLeft: 15,
        paddingRight: 15
      },
      iconContainer: {
        justifyContent: 'center',
        alignItems: 'center',
        alignSelf: 'center'
      }
    });

    if (featured) {
      var featuredProps = {
        title: title,
        icon: icon,
        caption: caption,
        imageSrc: imageSrc,
        onPress: onPress,
        activeOpacity: activeOpacity,
        containerStyle: containerStyle,
        imageContainerStyle: imageContainerStyle,
        overlayContainerStyle: overlayContainerStyle,
        titleStyle: titleStyle,
        captionStyle: captionStyle,
        width: width,
        height: height
      };
      return _react2.default.createElement(_FeaturedTile2.default, babelHelpers.extends({}, featuredProps, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 92
        }
      }));
    }

    return _react2.default.createElement(
      _reactNative.TouchableOpacity,
      babelHelpers.extends({}, attributes, {
        onPress: onPress,
        style: [styles.container, containerStyle && containerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 96
        }
      }),
      _react2.default.createElement(
        _BackgroundImage2.default,
        {
          source: imageSrc,
          style: [styles.imageContainer, imageContainerStyle && imageContainerStyle],
          resizeMode: "cover",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 101
          }
        },
        _react2.default.createElement(
          _reactNative.View,
          {
            style: [styles.iconContainer, iconContainerStyle && iconContainerStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 109
            }
          },
          icon && _react2.default.createElement(_Icon2.default, babelHelpers.extends({}, icon, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 115
            }
          }))
        )
      ),
      _react2.default.createElement(
        _reactNative.View,
        {
          style: [styles.contentContainer, contentContainerStyle && contentContainerStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 118
          }
        },
        _react2.default.createElement(
          _Text2.default,
          {
            h4: true,
            style: [styles.text, titleStyle && titleStyle],
            numberOfLines: titleNumberOfLines,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 124
            }
          },
          title
        ),
        children
      )
    );
  };

  Tile.propTypes = {
    title: _propTypes2.default.string,
    icon: _propTypes2.default.object,
    caption: _propTypes2.default.string,
    imageSrc: _reactNative.Image.propTypes.source.isRequired,
    onPress: _propTypes2.default.func,
    activeOpacity: _propTypes2.default.number,
    containerStyle: _ViewPropTypes2.default.style,
    imageContainerStyle: _ViewPropTypes2.default.style,
    iconContainerStyle: _ViewPropTypes2.default.style,
    overlayContainerStyle: _ViewPropTypes2.default.style,
    titleStyle: _reactNative.Text.propTypes.style,
    captionStyle: _reactNative.Text.propTypes.style,
    width: _propTypes2.default.number,
    height: _propTypes2.default.number,
    featured: _propTypes2.default.bool,
    children: _propTypes2.default.any,
    contentContainerStyle: _ViewPropTypes2.default.style,
    titleNumberOfLines: _propTypes2.default.number
  };
  exports.default = Tile;
},720,[127,108,12,676,708,721,707,719],"react-native-elements/src/tile/Tile.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-elements/src/tile/FeaturedTile.js";

  var _propTypes = require(_dependencyMap[0], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = require(_dependencyMap[1], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _Text = require(_dependencyMap[3], "../text/Text");

  var _Text2 = babelHelpers.interopRequireDefault(_Text);

  var _Icon = require(_dependencyMap[4], "../icons/Icon");

  var _Icon2 = babelHelpers.interopRequireDefault(_Icon);

  var _ViewPropTypes = require(_dependencyMap[5], "../config/ViewPropTypes");

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var _BackgroundImage = require(_dependencyMap[6], "../config/BackgroundImage");

  var _BackgroundImage2 = babelHelpers.interopRequireDefault(_BackgroundImage);

  var FeaturedTile = function FeaturedTile(props) {
    var title = props.title,
        icon = props.icon,
        caption = props.caption,
        imageSrc = props.imageSrc,
        containerStyle = props.containerStyle,
        imageContainerStyle = props.imageContainerStyle,
        overlayContainerStyle = props.overlayContainerStyle,
        iconContainerStyle = props.iconContainerStyle,
        titleStyle = props.titleStyle,
        captionStyle = props.captionStyle,
        attributes = babelHelpers.objectWithoutProperties(props, ["title", "icon", "caption", "imageSrc", "containerStyle", "imageContainerStyle", "overlayContainerStyle", "iconContainerStyle", "titleStyle", "captionStyle"]);
    var width = props.width,
        height = props.height;

    if (!width) {
      width = _reactNative.Dimensions.get('window').width;
    }

    if (!height) {
      height = width * 0.8;
    }

    var styles = _reactNative.StyleSheet.create({
      container: {
        width: width,
        height: height
      },
      imageContainer: {
        alignItems: 'center',
        justifyContent: 'center',
        backgroundColor: '#ffffff',
        width: width,
        height: height
      },
      overlayContainer: {
        flex: 1,
        alignItems: 'center',
        backgroundColor: 'rgba(0,0,0,0.2)',
        alignSelf: 'stretch',
        justifyContent: 'center',
        paddingLeft: 25,
        paddingRight: 25,
        paddingTop: 45,
        paddingBottom: 40,
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
      },
      text: {
        color: '#ffffff',
        backgroundColor: 'rgba(0,0,0,0)',
        marginBottom: 15,
        textAlign: 'center'
      },
      iconContainer: {
        justifyContent: 'center',
        alignItems: 'center',
        alignSelf: 'center'
      }
    });

    return _react2.default.createElement(
      _reactNative.TouchableOpacity,
      babelHelpers.extends({}, attributes, {
        style: [styles.container, containerStyle && containerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 82
        }
      }),
      _react2.default.createElement(
        _BackgroundImage2.default,
        {
          source: imageSrc,
          style: [styles.imageContainer, imageContainerStyle && imageContainerStyle],
          resizeMode: "cover",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 86
          }
        },
        _react2.default.createElement(
          _reactNative.View,
          {
            style: [styles.overlayContainer, overlayContainerStyle && overlayContainerStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 94
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: [styles.iconContainer, iconContainerStyle && iconContainerStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 100
              }
            },
            icon && _react2.default.createElement(_Icon2.default, babelHelpers.extends({}, icon, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 106
              }
            }))
          ),
          _react2.default.createElement(
            _Text2.default,
            {
              h4: true,
              style: [styles.text, titleStyle && titleStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 108
              }
            },
            title
          ),
          _react2.default.createElement(
            _Text2.default,
            {
              style: [styles.text, captionStyle && captionStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 111
              }
            },
            caption
          )
        )
      )
    );
  };

  FeaturedTile.propTypes = {
    title: _propTypes2.default.string,
    icon: _propTypes2.default.object,
    caption: _propTypes2.default.string,
    imageSrc: _reactNative.Image.propTypes.source.isRequired,
    onPress: _propTypes2.default.func,
    containerStyle: _ViewPropTypes2.default.style,
    iconContainerStyle: _ViewPropTypes2.default.style,
    imageContainerStyle: _ViewPropTypes2.default.style,
    overlayContainerStyle: _ViewPropTypes2.default.style,
    titleStyle: _reactNative.Text.propTypes.style,
    captionStyle: _reactNative.Text.propTypes.style,
    width: _propTypes2.default.number,
    height: _propTypes2.default.number
  };
  exports.default = FeaturedTile;
},721,[127,108,12,676,708,707,719],"react-native-elements/src/tile/FeaturedTile.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-elements/src/rating/Rating.js";

  var _lodash = require(_dependencyMap[0], "lodash.times");

  var _lodash2 = babelHelpers.interopRequireDefault(_lodash);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = require(_dependencyMap[2], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[3], "react-native");

  var _Text = require(_dependencyMap[4], "../text/Text");

  var _Text2 = babelHelpers.interopRequireDefault(_Text);

  var _ViewPropTypes = require(_dependencyMap[5], "../config/ViewPropTypes");

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var STAR_IMAGE = require(_dependencyMap[6], './images/star.png');

  var HEART_IMAGE = require(_dependencyMap[7], './images/heart.png');

  var ROCKET_IMAGE = require(_dependencyMap[8], './images/rocket.png');

  var BELL_IMAGE = require(_dependencyMap[9], './images/bell.png');

  var STAR_WIDTH = 60;
  var TYPES = {
    star: {
      source: STAR_IMAGE,
      color: '#f1c40f',
      backgroundColor: 'white'
    },
    heart: {
      source: HEART_IMAGE,
      color: '#e74c3c',
      backgroundColor: 'white'
    },
    rocket: {
      source: ROCKET_IMAGE,
      color: '#2ecc71',
      backgroundColor: 'white'
    },
    bell: {
      source: BELL_IMAGE,
      color: '#f39c12',
      backgroundColor: 'white'
    }
  };

  var Rating = function (_Component) {
    babelHelpers.inherits(Rating, _Component);

    function Rating(props) {
      babelHelpers.classCallCheck(this, Rating);

      var _this = babelHelpers.possibleConstructorReturn(this, (Rating.__proto__ || Object.getPrototypeOf(Rating)).call(this, props));

      var _this$props = _this.props,
          onFinishRating = _this$props.onFinishRating,
          fractions = _this$props.fractions;
      var position = new _reactNative.Animated.ValueXY();

      var panResponder = _reactNative.PanResponder.create({
        onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {
          return true;
        },
        onPanResponderMove: function onPanResponderMove(event, gesture) {
          var newPosition = new _reactNative.Animated.ValueXY();
          newPosition.setValue({
            x: gesture.dx,
            y: 0
          });

          _this.setState({
            position: newPosition,
            value: gesture.dx
          });
        },
        onPanResponderRelease: function onPanResponderRelease() {
          var rating = _this.getCurrentRating();

          if (!fractions) {
            _this.setCurrentRating(rating);
          }

          onFinishRating(rating);
        }
      });

      _this.state = {
        panResponder: panResponder,
        position: position
      };
      return _this;
    }

    babelHelpers.createClass(Rating, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.setCurrentRating(this.props.startingValue);
      }
    }, {
      key: "getPrimaryViewStyle",
      value: function getPrimaryViewStyle() {
        var position = this.state.position;
        var _props = this.props,
            imageSize = _props.imageSize,
            ratingCount = _props.ratingCount,
            type = _props.type;
        var color = TYPES[type].color;
        var width = position.x.interpolate({
          inputRange: [-ratingCount * (imageSize / 2), 0, ratingCount * (imageSize / 2)],
          outputRange: [0, ratingCount * imageSize / 2, ratingCount * imageSize],
          extrapolate: 'clamp'
        }, {
          useNativeDriver: true
        });
        return {
          backgroundColor: color,
          width: width,
          height: width ? imageSize : 0
        };
      }
    }, {
      key: "getSecondaryViewStyle",
      value: function getSecondaryViewStyle() {
        var position = this.state.position;
        var _props2 = this.props,
            imageSize = _props2.imageSize,
            ratingCount = _props2.ratingCount,
            type = _props2.type;
        var backgroundColor = TYPES[type].backgroundColor;
        var width = position.x.interpolate({
          inputRange: [-ratingCount * (imageSize / 2), 0, ratingCount * (imageSize / 2)],
          outputRange: [ratingCount * imageSize, ratingCount * imageSize / 2, 0],
          extrapolate: 'clamp'
        }, {
          useNativeDriver: true
        });
        return {
          backgroundColor: backgroundColor,
          width: width,
          height: width ? imageSize : 0
        };
      }
    }, {
      key: "renderRatings",
      value: function renderRatings() {
        var _props3 = this.props,
            imageSize = _props3.imageSize,
            ratingCount = _props3.ratingCount,
            type = _props3.type;
        var source = TYPES[type].source;
        return (0, _lodash2.default)(ratingCount, function (index) {
          return _react2.default.createElement(
            _reactNative.View,
            {
              key: index,
              style: styles.starContainer,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 148
              }
            },
            _react2.default.createElement(_reactNative.Image, {
              source: source,
              style: {
                width: imageSize,
                height: imageSize
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 149
              }
            })
          );
        });
      }
    }, {
      key: "getCurrentRating",
      value: function getCurrentRating() {
        var value = this.state.value;
        var _props4 = this.props,
            fractions = _props4.fractions,
            imageSize = _props4.imageSize,
            ratingCount = _props4.ratingCount;
        var startingValue = ratingCount / 2;
        var currentRating = 0;

        if (value > ratingCount * imageSize / 2) {
          currentRating = ratingCount;
        } else if (value < -ratingCount * imageSize / 2) {
          currentRating = 0;
        } else if (value < imageSize || value > imageSize) {
          currentRating = startingValue + value / imageSize;
          currentRating = !fractions ? Math.ceil(currentRating) : +currentRating.toFixed(fractions);
        } else {
          currentRating = !fractions ? Math.ceil(startingValue) : +startingValue.toFixed(fractions);
        }

        return currentRating;
      }
    }, {
      key: "setCurrentRating",
      value: function setCurrentRating(rating) {
        var _props5 = this.props,
            imageSize = _props5.imageSize,
            ratingCount = _props5.ratingCount;
        var initialRating = ratingCount / 2;
        var value = null;

        if (rating > ratingCount) {
          value = ratingCount * imageSize / 2;
        } else if (rating < 0) {
          value = -ratingCount * imageSize / 2;
        } else if (rating < ratingCount / 2 || rating > ratingCount / 2) {
          value = (rating - initialRating) * imageSize;
        } else {
          value = 0;
        }

        var newPosition = new _reactNative.Animated.ValueXY();
        newPosition.setValue({
          x: value,
          y: 0
        });
        this.setState({
          position: newPosition,
          value: value
        });
      }
    }, {
      key: "displayCurrentRating",
      value: function displayCurrentRating() {
        var _props6 = this.props,
            ratingCount = _props6.ratingCount,
            type = _props6.type,
            readonly = _props6.readonly;
        var color = TYPES[type].color;
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.showRatingView,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 209
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.ratingView,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 210
              }
            },
            _react2.default.createElement(
              _Text2.default,
              {
                style: styles.ratingText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 211
                }
              },
              "Rating: "
            ),
            _react2.default.createElement(
              _Text2.default,
              {
                style: [styles.currentRatingText, {
                  color: color
                }],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 212
                }
              },
              this.getCurrentRating()
            ),
            _react2.default.createElement(
              _Text2.default,
              {
                style: styles.maxRatingText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 215
                }
              },
              "/",
              ratingCount
            )
          ),
          _react2.default.createElement(
            _reactNative.View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 219
              }
            },
            readonly && _react2.default.createElement(
              _Text2.default,
              {
                style: styles.readonlyLabel,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 220
                }
              },
              "(readonly)"
            )
          )
        );
      }
    }, {
      key: "render",
      value: function render() {
        var _props7 = this.props,
            readonly = _props7.readonly,
            type = _props7.type,
            ratingImage = _props7.ratingImage,
            ratingColor = _props7.ratingColor,
            ratingBackgroundColor = _props7.ratingBackgroundColor,
            style = _props7.style,
            showRating = _props7.showRating;

        if (type === 'custom') {
          var custom = {
            source: ratingImage,
            color: ratingColor,
            backgroundColor: ratingBackgroundColor
          };
          TYPES.custom = custom;
        }

        return _react2.default.createElement(
          _reactNative.View,
          {
            pointerEvents: readonly ? 'none' : 'auto',
            style: style,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 247
            }
          },
          showRating && this.displayCurrentRating(),
          _react2.default.createElement(
            _reactNative.View,
            babelHelpers.extends({
              style: styles.starsWrapper
            }, this.state.panResponder.panHandlers, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 249
              }
            }),
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.starsInsideWrapper,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 253
                }
              },
              _react2.default.createElement(_reactNative.Animated.View, {
                style: this.getPrimaryViewStyle(),
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 254
                }
              }),
              _react2.default.createElement(_reactNative.Animated.View, {
                style: this.getSecondaryViewStyle(),
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 255
                }
              })
            ),
            this.renderRatings()
          )
        );
      }
    }]);
    return Rating;
  }(_react.Component);

  Rating.defaultProps = {
    type: 'star',
    ratingImage: require(_dependencyMap[6], './images/star.png'),
    ratingColor: '#f1c40f',
    ratingBackgroundColor: 'white',
    ratingCount: 5,
    imageSize: STAR_WIDTH,
    onFinishRating: function onFinishRating() {
      return console.log('Attach a function here.');
    }
  };
  exports.default = Rating;

  var styles = _reactNative.StyleSheet.create({
    starsWrapper: {
      flexDirection: 'row'
    },
    starsInsideWrapper: {
      position: 'absolute',
      top: 0,
      left: 0,
      flexDirection: 'row'
    },
    showRatingView: {
      flexDirection: 'column',
      justifyContent: 'center',
      alignItems: 'center',
      paddingBottom: 5
    },
    ratingView: {
      flexDirection: 'row',
      justifyContent: 'center',
      alignItems: 'center',
      paddingBottom: 5
    },
    ratingText: {
      fontSize: 15,
      textAlign: 'center',
      fontFamily: _reactNative.Platform.OS === 'ios' ? 'Trebuchet MS' : null,
      color: '#34495e'
    },
    readonlyLabel: {
      justifyContent: 'center',
      alignItems: 'center',
      fontSize: 12,
      textAlign: 'center',
      fontFamily: _reactNative.Platform.OS === 'ios' ? 'Trebuchet MS' : null,
      color: '#34495a'
    },
    currentRatingText: {
      fontSize: 30,
      textAlign: 'center',
      fontFamily: _reactNative.Platform.OS === 'ios' ? 'Trebuchet MS' : null
    },
    maxRatingText: {
      fontSize: 18,
      textAlign: 'center',
      fontFamily: _reactNative.Platform.OS === 'ios' ? 'Trebuchet MS' : null,
      color: '#34495e'
    }
  });

  var fractionsType = function fractionsType(props, propName, componentName) {
    if (props[propName]) {
      var value = props[propName];

      if (typeof value === 'number') {
        return value >= 0 && value <= 20 ? null : new Error("`" + propName + "` in `" + componentName + "` must be between 0 and 20");
      }

      return new Error("`" + propName + "` in `" + componentName + "` must be a number");
    }
  };

  Rating.propTypes = {
    type: _propTypes2.default.string,
    ratingImage: _reactNative.Image.propTypes.source,
    ratingColor: _propTypes2.default.string,
    ratingBackgroundColor: _propTypes2.default.string,
    ratingCount: _propTypes2.default.number,
    imageSize: _propTypes2.default.number,
    onFinishRating: _propTypes2.default.func,
    showRating: _propTypes2.default.bool,
    style: _ViewPropTypes2.default.style,
    readonly: _propTypes2.default.bool,
    startingValue: _propTypes2.default.number,
    fractions: fractionsType
  };
},722,[723,127,108,12,676,707,724,725,726,727],"react-native-elements/src/rating/Rating.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;
  var MAX_ARRAY_LENGTH = 4294967295;
  var symbolTag = '[object Symbol]';
  var reTrim = /^\s+|\s+$/g;
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  var reIsBinary = /^0b[01]+$/i;
  var reIsOctal = /^0o[0-7]+$/i;
  var freeParseInt = parseInt;

  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }

    return result;
  }

  var objectProto = Object.prototype;
  var objectToString = objectProto.toString;
  var nativeMin = Math.min;

  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
  }

  function toFinite(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }

    value = toNumber(value);

    if (value === INFINITY || value === -INFINITY) {
      var sign = value < 0 ? -1 : 1;
      return sign * MAX_INTEGER;
    }

    return value === value ? value : 0;
  }

  function toInteger(value) {
    var result = toFinite(value),
        remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
  }

  function toNumber(value) {
    if (typeof value == 'number') {
      return value;
    }

    if (isSymbol(value)) {
      return NAN;
    }

    if (isObject(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject(other) ? other + '' : other;
    }

    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }

    value = value.replace(reTrim, '');
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }

  function identity(value) {
    return value;
  }

  function times(n, iteratee) {
    n = toInteger(n);

    if (n < 1 || n > MAX_SAFE_INTEGER) {
      return [];
    }

    var index = MAX_ARRAY_LENGTH,
        length = nativeMin(n, MAX_ARRAY_LENGTH);
    iteratee = typeof iteratee == 'function' ? iteratee : identity;
    n -= MAX_ARRAY_LENGTH;
    var result = baseTimes(length, iteratee);

    while (++index < n) {
      iteratee(index);
    }

    return result;
  }

  module.exports = times;
},723,[],"lodash.times/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
   module.exports = require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
      "__packager_asset": true,
      "httpServerLocation": "/assets/node_modules/react-native-elements/src/rating/images",
      "width": 50,
      "height": 50,
      "scales": [1],
      "hash": "004c2bbb035d8d06bb830efc4673c886",
      "name": "star",
      "type": "png"
   });
},724,[161],"node_modules/react-native-elements/src/rating/images/star.png");
__d(function (global, require, module, exports, _dependencyMap) {
   module.exports = require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
      "__packager_asset": true,
      "httpServerLocation": "/assets/node_modules/react-native-elements/src/rating/images",
      "width": 50,
      "height": 50,
      "scales": [1],
      "hash": "2327736b3ea09c41abfb69be1221f430",
      "name": "heart",
      "type": "png"
   });
},725,[161],"node_modules/react-native-elements/src/rating/images/heart.png");
__d(function (global, require, module, exports, _dependencyMap) {
   module.exports = require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
      "__packager_asset": true,
      "httpServerLocation": "/assets/node_modules/react-native-elements/src/rating/images",
      "width": 50,
      "height": 50,
      "scales": [1],
      "hash": "51671417ef20e0bbc32f0a2bc6edfa95",
      "name": "rocket",
      "type": "png"
   });
},726,[161],"node_modules/react-native-elements/src/rating/images/rocket.png");
__d(function (global, require, module, exports, _dependencyMap) {
   module.exports = require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
      "__packager_asset": true,
      "httpServerLocation": "/assets/node_modules/react-native-elements/src/rating/images",
      "width": 50,
      "height": 50,
      "scales": [1],
      "hash": "a7b9dc9de5f8f1fb1afbef917619a5ac",
      "name": "bell",
      "type": "png"
   });
},727,[161],"node_modules/react-native-elements/src/rating/images/bell.png");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-elements/src/header/Header.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _lodash = require(_dependencyMap[3], "lodash.isempty");

  var _lodash2 = babelHelpers.interopRequireDefault(_lodash);

  var _DummyNavButton = require(_dependencyMap[4], "./DummyNavButton");

  var _DummyNavButton2 = babelHelpers.interopRequireDefault(_DummyNavButton);

  var _NavButton = require(_dependencyMap[5], "./NavButton");

  var _NavButton2 = babelHelpers.interopRequireDefault(_NavButton);

  var _Title = require(_dependencyMap[6], "./Title");

  var _Title2 = babelHelpers.interopRequireDefault(_Title);

  var _ViewPropTypes = require(_dependencyMap[7], "../config/ViewPropTypes");

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  function generateChild(value, type) {
    if (_react2.default.isValidElement(value)) {
      return _react2.default.createElement(
        _reactNative.View,
        {
          key: type,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 12
          }
        },
        value
      );
    } else if (typeof value === 'object' && !(0, _lodash2.default)(value)) {
      return type === 'center' ? _react2.default.createElement(_Title2.default, babelHelpers.extends({}, value, {
        key: type,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 15
        }
      })) : _react2.default.createElement(_NavButton2.default, babelHelpers.extends({}, value, {
        key: type,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 17
        }
      }));
    }

    return type === 'center' ? null : _react2.default.createElement(_DummyNavButton2.default, {
      key: type,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 20
      }
    });
  }

  function populateChildren(propChildren) {
    var childrenArray = [];
    var leftComponent = generateChild(propChildren.leftComponent, 'left');
    var centerComponent = generateChild(propChildren.centerComponent, 'center');
    var rightComponent = generateChild(propChildren.rightComponent, 'right');
    childrenArray.push(leftComponent, centerComponent, rightComponent);
    return childrenArray;
  }

  var Header = function Header(props) {
    var children = props.children,
        statusBarProps = props.statusBarProps,
        leftComponent = props.leftComponent,
        centerComponent = props.centerComponent,
        rightComponent = props.rightComponent,
        backgroundColor = props.backgroundColor,
        outerContainerStyles = props.outerContainerStyles,
        innerContainerStyles = props.innerContainerStyles,
        attributes = babelHelpers.objectWithoutProperties(props, ["children", "statusBarProps", "leftComponent", "centerComponent", "rightComponent", "backgroundColor", "outerContainerStyles", "innerContainerStyles"]);
    var propChildren = [];

    if (leftComponent || centerComponent || rightComponent) {
      propChildren = populateChildren({
        leftComponent: leftComponent,
        centerComponent: centerComponent,
        rightComponent: rightComponent
      });
    }

    return _react2.default.createElement(
      _reactNative.View,
      babelHelpers.extends({}, attributes, {
        style: [styles.outerContainer, backgroundColor && {
          backgroundColor: backgroundColor
        }, outerContainerStyles],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 59
        }
      }),
      _react2.default.createElement(_reactNative.StatusBar, babelHelpers.extends({}, statusBarProps, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 67
        }
      })),
      _react2.default.createElement(
        _reactNative.View,
        {
          style: [styles.innerContainer, innerContainerStyles],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 68
          }
        },
        propChildren.length > 0 ? propChildren : children
      )
    );
  };

  Header.propTypes = {
    leftComponent: _propTypes2.default.object,
    centerComponent: _propTypes2.default.object,
    rightComponent: _propTypes2.default.object,
    backgroundColor: _propTypes2.default.string,
    outerContainerStyles: _ViewPropTypes2.default.style,
    innerContainerStyles: _ViewPropTypes2.default.style,
    children: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.arrayOf(_propTypes2.default.element)]),
    statusBarProps: _propTypes2.default.object
  };

  var styles = _reactNative.StyleSheet.create({
    innerContainer: {
      flex: 1,
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'flex-end'
    },
    outerContainer: {
      backgroundColor: '#476DC5',
      borderBottomColor: '#f2f2f2',
      borderBottomWidth: 1,
      padding: 15,
      height: 70
    }
  });

  exports.default = Header;
},728,[108,127,12,729,730,731,732,707],"react-native-elements/src/header/Header.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = '[object Arguments]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      setTag = '[object Set]',
      weakMapTag = '[object WeakMap]';
  var dataViewTag = '[object DataView]';
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function('return this')();
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;

  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  function isHostObject(value) {
    var result = false;

    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }

    return result;
  }

  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  var funcProto = Function.prototype,
      objectProto = Object.prototype;
  var coreJsData = root['__core-js_shared__'];

  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();

  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  var Buffer = moduleExports ? root.Buffer : undefined,
      propertyIsEnumerable = objectProto.propertyIsEnumerable;
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
      nativeKeys = overArg(Object.keys, Object);
  var DataView = getNative(root, 'DataView'),
      Map = getNative(root, 'Map'),
      Promise = getNative(root, 'Promise'),
      Set = getNative(root, 'Set'),
      WeakMap = getNative(root, 'WeakMap');
  var nonEnumShadows = !propertyIsEnumerable.call({
    'valueOf': 1
  }, 'valueOf');
  var dataViewCtorString = toSource(DataView),
      mapCtorString = toSource(Map),
      promiseCtorString = toSource(Promise),
      setCtorString = toSource(Set),
      weakMapCtorString = toSource(WeakMap);

  function baseGetTag(value) {
    return objectToString.call(value);
  }

  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }

    var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  var getTag = baseGetTag;

  if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
    getTag = function getTag(value) {
      var result = objectToString.call(value),
          Ctor = result == objectTag ? value.constructor : undefined,
          ctorString = Ctor ? toSource(Ctor) : undefined;

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag;

          case mapCtorString:
            return mapTag;

          case promiseCtorString:
            return promiseTag;

          case setCtorString:
            return setTag;

          case weakMapCtorString:
            return weakMapTag;
        }
      }

      return result;
    };
  }

  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
  }

  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}

      try {
        return func + '';
      } catch (e) {}
    }

    return '';
  }

  function isArguments(value) {
    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
  }

  var isArray = Array.isArray;

  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  var isBuffer = nativeIsBuffer || stubFalse;

  function isEmpty(value) {
    if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isArguments(value))) {
      return !value.length;
    }

    var tag = getTag(value);

    if (tag == mapTag || tag == setTag) {
      return !value.size;
    }

    if (nonEnumShadows || isPrototype(value)) {
      return !nativeKeys(value).length;
    }

    for (var key in value) {
      if (hasOwnProperty.call(value, key)) {
        return false;
      }
    }

    return true;
  }

  function isFunction(value) {
    var tag = isObject(value) ? objectToString.call(value) : '';
    return tag == funcTag || tag == genTag;
  }

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  function stubFalse() {
    return false;
  }

  module.exports = isEmpty;
},729,[],"lodash.isempty/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-elements/src/header/DummyNavButton.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var DummyNavButton = function DummyNavButton() {
    return _react2.default.createElement(_reactNative.View, {
      style: styles.dummyNavBtn,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 4
      }
    });
  };

  var styles = _reactNative.StyleSheet.create({
    dummyNavBtn: {
      height: 24,
      width: 24
    }
  });

  exports.default = DummyNavButton;
},730,[108,12],"react-native-elements/src/header/DummyNavButton.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-elements/src/header/NavButton.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _Icon = require(_dependencyMap[2], "../icons/Icon");

  var _Icon2 = babelHelpers.interopRequireDefault(_Icon);

  var NavButton = function NavButton(props) {
    var icon = props.icon,
        attributes = babelHelpers.objectWithoutProperties(props, ["icon"]);
    return _react2.default.createElement(_Icon2.default, babelHelpers.extends({}, attributes, {
      name: icon,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 8
      }
    }));
  };

  NavButton.propTypes = {
    icon: _propTypes2.default.string
  };
  exports.default = NavButton;
},731,[108,127,708],"react-native-elements/src/header/NavButton.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-elements/src/header/Title.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _Text = require(_dependencyMap[2], "../text/Text");

  var _Text2 = babelHelpers.interopRequireDefault(_Text);

  var Title = function Title(props) {
    var text = props.text,
        attributes = babelHelpers.objectWithoutProperties(props, ["text"]);
    return _react2.default.createElement(
      _Text2.default,
      babelHelpers.extends({
        numberOfLines: 1
      }, attributes, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 10
        }
      }),
      text
    );
  };

  Title.propTypes = {
    text: _propTypes2.default.string
  };
  exports.default = Title;
},732,[108,127,676],"react-native-elements/src/header/Title.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-elements/src/pricing/PricingCard.js";

  var _propTypes = require(_dependencyMap[0], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = require(_dependencyMap[1], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _Text = require(_dependencyMap[3], "../text/Text");

  var _Text2 = babelHelpers.interopRequireDefault(_Text);

  var _fonts = require(_dependencyMap[4], "../config/fonts");

  var _fonts2 = babelHelpers.interopRequireDefault(_fonts);

  var _colors = require(_dependencyMap[5], "../config/colors");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var _Button = require(_dependencyMap[6], "../buttons/Button");

  var _Button2 = babelHelpers.interopRequireDefault(_Button);

  var _normalizeText = require(_dependencyMap[7], "../helpers/normalizeText");

  var _normalizeText2 = babelHelpers.interopRequireDefault(_normalizeText);

  var _ViewPropTypes = require(_dependencyMap[8], "../config/ViewPropTypes");

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var PricingCard = function PricingCard(props) {
    var containerStyle = props.containerStyle,
        wrapperStyle = props.wrapperStyle,
        title = props.title,
        price = props.price,
        info = props.info,
        button = props.button,
        color = props.color,
        titleFont = props.titleFont,
        pricingFont = props.pricingFont,
        infoFont = props.infoFont,
        buttonFont = props.buttonFont,
        onButtonPress = props.onButtonPress,
        attributes = babelHelpers.objectWithoutProperties(props, ["containerStyle", "wrapperStyle", "title", "price", "info", "button", "color", "titleFont", "pricingFont", "infoFont", "buttonFont", "onButtonPress"]);
    return _react2.default.createElement(
      _reactNative.View,
      babelHelpers.extends({}, attributes, {
        style: [styles.container, containerStyle && containerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 28
        }
      }),
      _react2.default.createElement(
        _reactNative.View,
        {
          style: [styles.wrapper, wrapperStyle && wrapperStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 32
          }
        },
        _react2.default.createElement(
          _Text2.default,
          {
            style: [styles.pricingTitle, {
              color: color
            }, titleFont && {
              fontFamily: titleFont
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 33
            }
          },
          title
        ),
        _react2.default.createElement(
          _Text2.default,
          {
            style: [styles.pricingPrice, pricingFont && {
              fontFamily: pricingFont
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 42
            }
          },
          price
        ),
        info.map(function (item, i) {
          return _react2.default.createElement(
            _Text2.default,
            {
              key: i,
              style: [styles.pricingInfo, infoFont && {
                fontFamily: infoFont
              }],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 52
              }
            },
            item
          );
        }),
        _react2.default.createElement(_Button2.default, {
          icon: {
            name: button.icon
          },
          buttonStyle: [styles.button, button.buttonStyle, {
            backgroundColor: color
          }],
          fontFamily: buttonFont && buttonFont,
          title: button.title,
          onPress: onButtonPress,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 60
          }
        })
      )
    );
  };

  PricingCard.propTypes = {
    containerStyle: _ViewPropTypes2.default.style,
    wrapperStyle: _ViewPropTypes2.default.style,
    title: _propTypes2.default.string,
    price: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    info: _propTypes2.default.array,
    button: _propTypes2.default.object,
    color: _propTypes2.default.string,
    onButtonPress: _propTypes2.default.any,
    titleFont: _propTypes2.default.string,
    pricingFont: _propTypes2.default.string,
    infoFont: _propTypes2.default.string,
    buttonFont: _propTypes2.default.string
  };
  PricingCard.defaultProps = {
    color: _colors2.default.primary
  };

  var styles = _reactNative.StyleSheet.create({
    container: babelHelpers.extends({
      margin: 15,
      marginBottom: 15,
      backgroundColor: 'white',
      borderColor: _colors2.default.grey5,
      borderWidth: 1,
      padding: 15
    }, _reactNative.Platform.select({
      ios: {
        shadowColor: 'rgba(0,0,0, .2)',
        shadowOffset: {
          height: 1,
          width: 0
        },
        shadowOpacity: 0.5,
        shadowRadius: 0.5
      },
      android: {
        elevation: 1
      }
    })),
    wrapper: {
      backgroundColor: 'transparent'
    },
    pricingTitle: babelHelpers.extends({
      textAlign: 'center',
      color: _colors2.default.primary,
      fontSize: (0, _normalizeText2.default)(30)
    }, _reactNative.Platform.select({
      ios: {
        fontWeight: '800'
      },
      android: babelHelpers.extends({}, _fonts2.default.android.black)
    })),
    pricingPrice: babelHelpers.extends({
      textAlign: 'center',
      marginTop: 10,
      marginBottom: 10,
      fontSize: (0, _normalizeText2.default)(40)
    }, _reactNative.Platform.select({
      ios: {
        fontWeight: '700'
      },
      android: babelHelpers.extends({}, _fonts2.default.android.bold)
    })),
    pricingInfo: babelHelpers.extends({
      textAlign: 'center',
      marginTop: 5,
      marginBottom: 5,
      color: _colors2.default.grey3
    }, _reactNative.Platform.select({
      ios: {
        fontWeight: '600'
      },
      android: babelHelpers.extends({}, _fonts2.default.android.bold)
    })),
    button: {
      marginTop: 15,
      marginBottom: 10
    }
  });

  exports.default = PricingCard;
},733,[127,108,12,676,677,675,674,678,707],"react-native-elements/src/pricing/PricingCard.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-elements/src/form/FormInput.js";

  var _propTypes = require(_dependencyMap[0], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = require(_dependencyMap[1], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _colors = require(_dependencyMap[3], "../config/colors");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var _normalizeText = require(_dependencyMap[4], "../helpers/normalizeText");

  var _normalizeText2 = babelHelpers.interopRequireDefault(_normalizeText);

  var _ViewPropTypes = require(_dependencyMap[5], "../config/ViewPropTypes");

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      width = _Dimensions$get.width;

  var FormInput = function (_Component) {
    babelHelpers.inherits(FormInput, _Component);

    function FormInput(props) {
      babelHelpers.classCallCheck(this, FormInput);

      var _this = babelHelpers.possibleConstructorReturn(this, (FormInput.__proto__ || Object.getPrototypeOf(FormInput)).call(this, props));

      _this.getRef = function () {
        return _this.input || _this.refs[_this.props.textInputRef];
      };

      _this.getRefHandler = function () {
        if (_this.props.textInputRef) {
          if (typeof _this.props.textInputRef === 'function') {
            return function (input) {
              _this.input = input;

              _this.props.textInputRef(input);
            };
          } else {
            return _this.props.textInputRef;
          }
        } else {
          return function (input) {
            return _this.input = input;
          };
        }
      };

      _this.shake = _this.shake.bind(_this);
      return _this;
    }

    babelHelpers.createClass(FormInput, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this.shakeAnimationValue = new _reactNative.Animated.Value(0);
        this.props.shake && this.shake();
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        nextProps.shake && this.props.shake !== nextProps.shake && this.shake();
      }
    }, {
      key: "focus",
      value: function focus() {
        this.getRef() && this.getRef().focus();
      }
    }, {
      key: "blur",
      value: function blur() {
        this.getRef() && this.getRef().blur();
      }
    }, {
      key: "clearText",
      value: function clearText() {
        this.getRef() && this.getRef().clear();
      }
    }, {
      key: "shake",
      value: function shake() {
        var shakeAnimationValue = this.shakeAnimationValue;
        shakeAnimationValue.setValue(0);

        _reactNative.Animated.timing(shakeAnimationValue, {
          duration: 375,
          toValue: 3,
          ease: _reactNative.Easing.bounce
        }).start();
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            containerStyle = _props.containerStyle,
            inputStyle = _props.inputStyle,
            containerRef = _props.containerRef,
            normalizeFontSize = _props.normalizeFontSize,
            attributes = babelHelpers.objectWithoutProperties(_props, ["containerStyle", "inputStyle", "containerRef", "normalizeFontSize"]);
        var translateX = this.shakeAnimationValue.interpolate({
          inputRange: [0, 0.5, 1, 1.5, 2, 2.5, 3],
          outputRange: [0, -15, 0, 15, 0, -15, 0]
        });
        return _react2.default.createElement(
          _reactNative.Animated.View,
          {
            ref: containerRef,
            style: [styles.container, containerStyle && containerStyle, {
              transform: [{
                translateX: translateX
              }]
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 87
            }
          },
          _react2.default.createElement(_reactNative.TextInput, babelHelpers.extends({}, attributes, {
            ref: this.getRefHandler(),
            style: [styles.input, {
              fontSize: normalizeFontSize ? (0, _normalizeText2.default)(14) : 14
            }, inputStyle && inputStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 97
            }
          }))
        );
      }
    }]);
    return FormInput;
  }(_react.Component);

  FormInput.propTypes = {
    containerStyle: _ViewPropTypes2.default.style,
    inputStyle: _reactNative.Text.propTypes.style,
    textInputRef: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
    containerRef: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
    normalizeFontSize: _propTypes2.default.bool,
    shake: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool, _propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  };
  FormInput.defaultProps = {
    normalizeFontSize: true
  };

  var styles = _reactNative.StyleSheet.create({
    container: babelHelpers.extends({
      marginLeft: 15,
      marginRight: 15
    }, _reactNative.Platform.select({
      ios: {
        borderBottomColor: _colors2.default.grey4,
        borderBottomWidth: 1,
        marginLeft: 20,
        marginRight: 20
      }
    })),
    input: babelHelpers.extends({}, _reactNative.Platform.select({
      android: {
        minHeight: 46,
        width: width - 30
      },
      ios: {
        minHeight: 36,
        width: width
      }
    }), {
      color: _colors2.default.grey3
    })
  });

  exports.default = FormInput;
},734,[127,108,12,675,678,707],"react-native-elements/src/form/FormInput.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-elements/src/form/FormLabel.js";

  var _propTypes = require(_dependencyMap[0], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = require(_dependencyMap[1], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _colors = require(_dependencyMap[3], "../config/colors");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var _fonts = require(_dependencyMap[4], "../config/fonts");

  var _fonts2 = babelHelpers.interopRequireDefault(_fonts);

  var _Text = require(_dependencyMap[5], "../text/Text");

  var _Text2 = babelHelpers.interopRequireDefault(_Text);

  var _normalizeText = require(_dependencyMap[6], "../helpers/normalizeText");

  var _normalizeText2 = babelHelpers.interopRequireDefault(_normalizeText);

  var _ViewPropTypes = require(_dependencyMap[7], "../config/ViewPropTypes");

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var FormLabel = function FormLabel(props) {
    var containerStyle = props.containerStyle,
        labelStyle = props.labelStyle,
        children = props.children,
        fontFamily = props.fontFamily,
        attributes = babelHelpers.objectWithoutProperties(props, ["containerStyle", "labelStyle", "children", "fontFamily"]);
    return _react2.default.createElement(
      _reactNative.View,
      babelHelpers.extends({}, attributes, {
        style: [styles.container, containerStyle && containerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 19
        }
      }),
      _react2.default.createElement(
        _Text2.default,
        {
          style: [styles.label, labelStyle && labelStyle, fontFamily && {
            fontFamily: fontFamily
          }],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 23
          }
        },
        children
      )
    );
  };

  FormLabel.propTypes = {
    containerStyle: _ViewPropTypes2.default.style,
    labelStyle: _reactNative.Text.propTypes.style,
    children: _propTypes2.default.any,
    fontFamily: _propTypes2.default.string
  };

  var styles = _reactNative.StyleSheet.create({
    container: {},
    label: babelHelpers.extends({
      marginLeft: 20,
      marginRight: 20,
      marginTop: 15,
      marginBottom: 1,
      color: _colors2.default.grey3,
      fontSize: (0, _normalizeText2.default)(12)
    }, _reactNative.Platform.select({
      ios: {
        fontWeight: 'bold'
      },
      android: babelHelpers.extends({}, _fonts2.default.android.bold)
    }))
  });

  exports.default = FormLabel;
},735,[127,108,12,675,677,676,678,707],"react-native-elements/src/form/FormLabel.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-elements/src/form/FormValidationMessage.js";

  var _propTypes = require(_dependencyMap[0], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = require(_dependencyMap[1], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _colors = require(_dependencyMap[3], "../config/colors");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var _Text = require(_dependencyMap[4], "../text/Text");

  var _Text2 = babelHelpers.interopRequireDefault(_Text);

  var _normalizeText = require(_dependencyMap[5], "../helpers/normalizeText");

  var _normalizeText2 = babelHelpers.interopRequireDefault(_normalizeText);

  var _ViewPropTypes = require(_dependencyMap[6], "../config/ViewPropTypes");

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var FormValidationMessage = function FormValidationMessage(props) {
    var containerStyle = props.containerStyle,
        labelStyle = props.labelStyle,
        children = props.children,
        fontFamily = props.fontFamily,
        attributes = babelHelpers.objectWithoutProperties(props, ["containerStyle", "labelStyle", "children", "fontFamily"]);
    return _react2.default.createElement(
      _reactNative.View,
      babelHelpers.extends({}, attributes, {
        style: [styles.container, containerStyle && containerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 18
        }
      }),
      _react2.default.createElement(
        _Text2.default,
        {
          style: [styles.label, labelStyle && labelStyle, fontFamily && {
            fontFamily: fontFamily
          }],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 22
          }
        },
        children
      )
    );
  };

  FormValidationMessage.propTypes = {
    containerStyle: _ViewPropTypes2.default.style,
    labelStyle: _reactNative.Text.propTypes.style,
    children: _propTypes2.default.any,
    fontFamily: _propTypes2.default.string
  };

  var styles = _reactNative.StyleSheet.create({
    container: {},
    label: {
      marginLeft: 20,
      marginRight: 20,
      marginTop: 5,
      marginBottom: 1,
      color: _colors2.default.error,
      fontSize: (0, _normalizeText2.default)(12)
    }
  });

  exports.default = FormValidationMessage;
},736,[127,108,12,675,676,678,707],"react-native-elements/src/form/FormValidationMessage.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/node_modules/react-native-elements/src/input/Search.js";

  var _propTypes = require(_dependencyMap[0], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = require(_dependencyMap[1], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _MaterialIcons = require(_dependencyMap[3], "react-native-vector-icons/MaterialIcons");

  var _MaterialIcons2 = babelHelpers.interopRequireDefault(_MaterialIcons);

  var _colors = require(_dependencyMap[4], "../config/colors");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var _normalizeText = require(_dependencyMap[5], "../helpers/normalizeText");

  var _normalizeText2 = babelHelpers.interopRequireDefault(_normalizeText);

  var _ViewPropTypes = require(_dependencyMap[6], "../config/ViewPropTypes");

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var _getIconType = require(_dependencyMap[7], "../helpers/getIconType");

  var _getIconType2 = babelHelpers.interopRequireDefault(_getIconType);

  var Search = function (_Component) {
    babelHelpers.inherits(Search, _Component);

    function Search() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, Search);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = Search.__proto__ || Object.getPrototypeOf(Search)).call.apply(_ref, [this].concat(args))), _this), _this.getRef = function () {
        return _this.input || _this.refs[_this.props.textInputRef];
      }, _this.getRefHandler = function () {
        if (_this.props.textInputRef) {
          if (typeof _this.props.textInputRef === 'function') {
            return function (input) {
              _this.input = input;

              _this.props.textInputRef(input);
            };
          } else {
            return _this.props.textInputRef;
          }
        } else {
          return function (input) {
            return _this.input = input;
          };
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(Search, [{
      key: "focus",
      value: function focus() {
        this.getRef() && this.getRef().focus();
      }
    }, {
      key: "blur",
      value: function blur() {
        this.getRef() && this.getRef().blur();
      }
    }, {
      key: "clearText",
      value: function clearText() {
        this.getRef() && this.getRef().clear();
        this.props.onChangeText && this.props.onChangeText('');
        this.props.onClearText && this.props.onClearText();
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            containerStyle = _props.containerStyle,
            inputStyle = _props.inputStyle,
            icon = _props.icon,
            noIcon = _props.noIcon,
            lightTheme = _props.lightTheme,
            round = _props.round,
            showLoadingIcon = _props.showLoadingIcon,
            loadingIcon = _props.loadingIcon,
            clearIcon = _props.clearIcon,
            containerRef = _props.containerRef,
            underlineColorAndroid = _props.underlineColorAndroid,
            attributes = babelHelpers.objectWithoutProperties(_props, ["containerStyle", "inputStyle", "icon", "noIcon", "lightTheme", "round", "showLoadingIcon", "loadingIcon", "clearIcon", "containerRef", "underlineColorAndroid"]);
        var Icon = _MaterialIcons2.default;

        if (icon.type) {
          Icon = (0, _getIconType2.default)(icon.type);
        }

        return _react2.default.createElement(
          _reactNative.View,
          {
            ref: containerRef,
            style: [styles.container, lightTheme && styles.containerLight, containerStyle && containerStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 73
            }
          },
          _react2.default.createElement(_reactNative.TextInput, babelHelpers.extends({}, attributes, {
            ref: this.getRefHandler(),
            underlineColorAndroid: underlineColorAndroid ? underlineColorAndroid : 'transparent',
            style: [styles.input, lightTheme && styles.inputLight, noIcon && {
              paddingLeft: 9
            }, round && {
              borderRadius: _reactNative.Platform.OS === 'ios' ? 15 : 20
            }, inputStyle && inputStyle, clearIcon && showLoadingIcon && {
              paddingRight: 50
            }, (clearIcon && !showLoadingIcon || !clearIcon && showLoadingIcon) && {
              paddingRight: 30
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 81
            }
          })),
          !noIcon && _react2.default.createElement(Icon, {
            size: 16,
            style: [styles.icon, styles.searchIcon, icon.style && icon.style],
            name: icon.name || 'search',
            color: icon.color || _colors2.default.grey3,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 99
            }
          }),
          clearIcon && _react2.default.createElement(Icon, {
            size: 16,
            style: [styles.icon, styles.clearIcon, clearIcon.style && clearIcon.style],
            name: clearIcon.name || 'close',
            onPress: this.clearText.bind(this),
            color: clearIcon.color || _colors2.default.grey3,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 107
            }
          }),
          showLoadingIcon && _react2.default.createElement(_reactNative.ActivityIndicator, {
            style: [styles.loadingIcon, loadingIcon.style && loadingIcon.style, clearIcon && {
              right: 35
            }],
            color: icon.color || _colors2.default.grey3,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 120
            }
          })
        );
      }
    }]);
    return Search;
  }(_react.Component);

  Search.propTypes = {
    icon: _propTypes2.default.object,
    noIcon: _propTypes2.default.bool,
    lightTheme: _propTypes2.default.bool,
    containerStyle: _ViewPropTypes2.default.style,
    inputStyle: _reactNative.Text.propTypes.style,
    round: _propTypes2.default.bool,
    showLoadingIcon: _propTypes2.default.bool,
    loadingIcon: _propTypes2.default.object,
    clearIcon: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.bool]),
    textInputRef: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
    containerRef: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
    underlineColorAndroid: _propTypes2.default.string,
    onChangeText: _propTypes2.default.func,
    onClearText: _propTypes2.default.func
  };
  Search.defaultProps = {
    placeholderTextColor: _colors2.default.grey3,
    lightTheme: false,
    noIcon: false,
    round: false,
    icon: {},
    showLoadingIcon: false,
    loadingIcon: {}
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      borderTopWidth: 1,
      borderBottomWidth: 1,
      borderBottomColor: '#000',
      borderTopColor: '#000',
      backgroundColor: _colors2.default.grey0
    },
    containerLight: {
      backgroundColor: _colors2.default.grey5,
      borderTopColor: '#e1e1e1',
      borderBottomColor: '#e1e1e1'
    },
    icon: babelHelpers.extends({
      backgroundColor: 'transparent',
      position: 'absolute',
      top: 15.5
    }, _reactNative.Platform.select({
      android: {
        top: 20
      }
    })),
    loadingIcon: babelHelpers.extends({
      backgroundColor: 'transparent',
      position: 'absolute',
      right: 16,
      top: 13
    }, _reactNative.Platform.select({
      android: {
        top: 18
      }
    })),
    input: babelHelpers.extends({
      paddingLeft: 26,
      paddingRight: 19,
      margin: 8,
      borderRadius: 3,
      overflow: 'hidden',
      backgroundColor: _colors2.default.searchBg,
      fontSize: (0, _normalizeText2.default)(14),
      color: _colors2.default.grey3,
      height: 40
    }, _reactNative.Platform.select({
      ios: {
        height: 30
      },
      android: {
        borderWidth: 0
      }
    })),
    inputLight: {
      backgroundColor: _colors2.default.grey4
    },
    searchIcon: {
      left: 16
    },
    clearIcon: {
      right: 16
    }
  });

  exports.default = Search;
},737,[127,108,12,679,675,678,707,686],"react-native-elements/src/input/Search.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/screens/RegisterCustomer.js";

    var _react = require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = require(_dependencyMap[1], "react-native");

    var _nativeBase = require(_dependencyMap[2], "native-base");

    var _reactNativeSqliteStorage = require(_dependencyMap[3], "react-native-sqlite-storage");

    var _reactNativeSqliteStorage2 = babelHelpers.interopRequireDefault(_reactNativeSqliteStorage);

    var _events = require(_dependencyMap[4], "../utils/events");

    var _events2 = babelHelpers.interopRequireDefault(_events);

    var RegisterCustomerScreen = function (_Component) {
        babelHelpers.inherits(RegisterCustomerScreen, _Component);

        function RegisterCustomerScreen(props) {
            babelHelpers.classCallCheck(this, RegisterCustomerScreen);

            var _this = babelHelpers.possibleConstructorReturn(this, (RegisterCustomerScreen.__proto__ || Object.getPrototypeOf(RegisterCustomerScreen)).call(this, props));

            _this.state = {
                name: '',
                code: ''
            };
            return _this;
        }

        babelHelpers.createClass(RegisterCustomerScreen, [{
            key: "insert",
            value: function insert() {
                var db = _reactNativeSqliteStorage2.default.openDatabase('syncapp', '1.0', 'SyncApp Database', 200000, this.openCB, this.errorCB);

                db.executeSql('INSERT INTO customer(name, code) VALUES(?, ?);', [this.state.name, this.state.code]);

                _events2.default.publish('RefreshCustomer');

                this.props.navigation.goBack();
            }
        }, {
            key: "errorCB",
            value: function errorCB(err) {
                console.log("SQLite3 Error: " + err);
            }
        }, {
            key: "openCB",
            value: function openCB() {
                console.log("Database OPENED");
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                var _state = this.state,
                    name = _state.name,
                    code = _state.code;
                return _react2.default.createElement(
                    _nativeBase.Container,
                    {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 50
                        }
                    },
                    _react2.default.createElement(
                        _nativeBase.Header,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 51
                            }
                        },
                        _react2.default.createElement(
                            _nativeBase.Left,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 52
                                }
                            },
                            _react2.default.createElement(
                                _nativeBase.Button,
                                {
                                    transparent: true,
                                    onPress: function onPress() {
                                        return _this2.props.navigation.goBack();
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 53
                                    }
                                },
                                _react2.default.createElement(_nativeBase.Icon, {
                                    name: "arrow-back",
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 54
                                    }
                                })
                            )
                        ),
                        _react2.default.createElement(
                            _nativeBase.Body,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 57
                                }
                            },
                            _react2.default.createElement(
                                _nativeBase.Title,
                                {
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 58
                                    }
                                },
                                "Cadastrar"
                            )
                        ),
                        _react2.default.createElement(_nativeBase.Right, {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 60
                            }
                        })
                    ),
                    _react2.default.createElement(
                        _nativeBase.Content,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 62
                            }
                        },
                        _react2.default.createElement(
                            _nativeBase.Form,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 63
                                }
                            },
                            _react2.default.createElement(
                                _nativeBase.Item,
                                {
                                    floatingLabel: true,
                                    last: true,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 64
                                    }
                                },
                                _react2.default.createElement(
                                    _nativeBase.Label,
                                    {
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 65
                                        }
                                    },
                                    "Nome"
                                ),
                                _react2.default.createElement(_nativeBase.Input, {
                                    onChangeText: function onChangeText(name) {
                                        return _this2.setState({
                                            name: name
                                        });
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 66
                                    }
                                })
                            ),
                            _react2.default.createElement(
                                _nativeBase.Item,
                                {
                                    floatingLabel: true,
                                    last: true,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 68
                                    }
                                },
                                _react2.default.createElement(
                                    _nativeBase.Label,
                                    {
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 69
                                        }
                                    },
                                    "C\xF3digo"
                                ),
                                _react2.default.createElement(_nativeBase.Input, {
                                    onChangeText: function onChangeText(code) {
                                        return _this2.setState({
                                            code: code
                                        });
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 70
                                    }
                                })
                            )
                        ),
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: {
                                    margin: 15
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 73
                                }
                            },
                            _react2.default.createElement(
                                _nativeBase.Button,
                                {
                                    full: true,
                                    danger: true,
                                    onPress: function onPress() {
                                        _reactNative.Keyboard.dismiss();

                                        _this2.insert();

                                        _this2.props.navigation.goBack();
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 74
                                    }
                                },
                                _react2.default.createElement(
                                    _nativeBase.Text,
                                    {
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 86
                                        }
                                    },
                                    "Cadastrar"
                                )
                            )
                        )
                    )
                );
            }
        }]);
        return RegisterCustomerScreen;
    }(_react.Component);

    exports.default = RegisterCustomerScreen;
},738,[108,12,403,400,671],"syncapp-mobile/screens/RegisterCustomer.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/screens/RegisterPhones.js";

    var _react = require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = require(_dependencyMap[1], "react-native");

    var _nativeBase = require(_dependencyMap[2], "native-base");

    var _reactNativeSqliteStorage = require(_dependencyMap[3], "react-native-sqlite-storage");

    var _reactNativeSqliteStorage2 = babelHelpers.interopRequireDefault(_reactNativeSqliteStorage);

    var _events = require(_dependencyMap[4], "../utils/events");

    var _events2 = babelHelpers.interopRequireDefault(_events);

    var RegisterPhonesScreen = function (_Component) {
        babelHelpers.inherits(RegisterPhonesScreen, _Component);

        function RegisterPhonesScreen(props) {
            babelHelpers.classCallCheck(this, RegisterPhonesScreen);

            var _this = babelHelpers.possibleConstructorReturn(this, (RegisterPhonesScreen.__proto__ || Object.getPrototypeOf(RegisterPhonesScreen)).call(this, props));

            var params = props.navigation.state.params;
            _this.state = {
                customer: params.customer,
                phone: ''
            };
            return _this;
        }

        babelHelpers.createClass(RegisterPhonesScreen, [{
            key: "insert",
            value: function insert() {
                var db = _reactNativeSqliteStorage2.default.openDatabase('syncapp', '1.0', 'SyncApp Database', 200000, this.openCB, this.errorCB);

                db.executeSql('INSERT INTO phone(customer_id, number) VALUES(?, ?);', [this.state.customer.id, this.state.phone]);

                _events2.default.publish('RefreshNumbers');

                this.props.navigation.goBack();
            }
        }, {
            key: "errorCB",
            value: function errorCB(err) {
                console.log("SQLite3 Error: " + err);
            }
        }, {
            key: "openCB",
            value: function openCB() {
                console.log("Database OPENED");
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                return _react2.default.createElement(
                    _nativeBase.Container,
                    {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 49
                        }
                    },
                    _react2.default.createElement(
                        _nativeBase.Header,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 50
                            }
                        },
                        _react2.default.createElement(
                            _nativeBase.Left,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 51
                                }
                            },
                            _react2.default.createElement(
                                _nativeBase.Button,
                                {
                                    transparent: true,
                                    onPress: function onPress() {
                                        return _this2.props.navigation.goBack();
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 52
                                    }
                                },
                                _react2.default.createElement(_nativeBase.Icon, {
                                    name: "arrow-back",
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 53
                                    }
                                })
                            )
                        ),
                        _react2.default.createElement(
                            _nativeBase.Body,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 56
                                }
                            },
                            _react2.default.createElement(
                                _nativeBase.Title,
                                {
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 57
                                    }
                                },
                                this.state.customer.name
                            )
                        ),
                        _react2.default.createElement(_nativeBase.Right, {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 59
                            }
                        })
                    ),
                    _react2.default.createElement(
                        _nativeBase.Content,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 61
                            }
                        },
                        _react2.default.createElement(
                            _nativeBase.Form,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 62
                                }
                            },
                            _react2.default.createElement(
                                _nativeBase.Item,
                                {
                                    floatingLabel: true,
                                    last: true,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 63
                                    }
                                },
                                _react2.default.createElement(
                                    _nativeBase.Label,
                                    {
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 64
                                        }
                                    },
                                    "Telefone"
                                ),
                                _react2.default.createElement(_nativeBase.Input, {
                                    onChangeText: function onChangeText(phone) {
                                        return _this2.setState({
                                            phone: phone
                                        });
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 65
                                    }
                                })
                            )
                        ),
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: {
                                    margin: 15
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 68
                                }
                            },
                            _react2.default.createElement(
                                _nativeBase.Button,
                                {
                                    full: true,
                                    danger: true,
                                    onPress: function onPress() {
                                        _reactNative.Keyboard.dismiss();

                                        _this2.insert();
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 69
                                    }
                                },
                                _react2.default.createElement(
                                    _nativeBase.Text,
                                    {
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 79
                                        }
                                    },
                                    "Cadastrar"
                                )
                            )
                        )
                    )
                );
            }
        }]);
        return RegisterPhonesScreen;
    }(_react.Component);

    exports.default = RegisterPhonesScreen;
},739,[108,12,403,400,671],"syncapp-mobile/screens/RegisterPhones.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/screens/UpdateCustomer.js";

    var _react = require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = require(_dependencyMap[1], "react-native");

    var _nativeBase = require(_dependencyMap[2], "native-base");

    var _reactNativeSqliteStorage = require(_dependencyMap[3], "react-native-sqlite-storage");

    var _reactNativeSqliteStorage2 = babelHelpers.interopRequireDefault(_reactNativeSqliteStorage);

    var _events = require(_dependencyMap[4], "../utils/events");

    var _events2 = babelHelpers.interopRequireDefault(_events);

    var UpdateCustomerScreen = function (_Component) {
        babelHelpers.inherits(UpdateCustomerScreen, _Component);

        function UpdateCustomerScreen(props) {
            babelHelpers.classCallCheck(this, UpdateCustomerScreen);

            var _this = babelHelpers.possibleConstructorReturn(this, (UpdateCustomerScreen.__proto__ || Object.getPrototypeOf(UpdateCustomerScreen)).call(this, props));

            var params = props.navigation.state.params;
            _this.state = {
                customer: params.customer,
                name: params ? params.customer.name : null,
                code: params ? params.customer.code : null
            };
            return _this;
        }

        babelHelpers.createClass(UpdateCustomerScreen, [{
            key: "update",
            value: function update() {
                var id = this.state.customer.id;
                var name = this.state.name;
                var code = this.state.code;

                var db = _reactNativeSqliteStorage2.default.openDatabase('syncapp', '1.0', 'SyncApp Database', 200000, this.openCB, this.errorCB);

                db.executeSql('UPDATE customer SET name = ?, code = ? WHERE id = ?;', [name, code, id]);

                _events2.default.publish('RefreshCustomer');

                this.props.navigation.goBack();
            }
        }, {
            key: "errorCB",
            value: function errorCB(err) {
                console.log("SQLite3 Error: " + err);
            }
        }, {
            key: "openCB",
            value: function openCB() {
                console.log("Database");
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                var _state = this.state,
                    name = _state.name,
                    code = _state.code;
                return _react2.default.createElement(
                    _nativeBase.Container,
                    {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 55
                        }
                    },
                    _react2.default.createElement(
                        _nativeBase.Header,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 56
                            }
                        },
                        _react2.default.createElement(
                            _nativeBase.Left,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 57
                                }
                            },
                            _react2.default.createElement(
                                _nativeBase.Button,
                                {
                                    transparent: true,
                                    onPress: function onPress() {
                                        return _this2.props.navigation.goBack();
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 58
                                    }
                                },
                                _react2.default.createElement(_nativeBase.Icon, {
                                    name: "arrow-back",
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 59
                                    }
                                })
                            )
                        ),
                        _react2.default.createElement(
                            _nativeBase.Body,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 62
                                }
                            },
                            _react2.default.createElement(
                                _nativeBase.Title,
                                {
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 63
                                    }
                                },
                                "Atualizar"
                            )
                        ),
                        _react2.default.createElement(_nativeBase.Right, {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 65
                            }
                        })
                    ),
                    _react2.default.createElement(
                        _nativeBase.Content,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 67
                            }
                        },
                        _react2.default.createElement(
                            _nativeBase.Form,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 68
                                }
                            },
                            _react2.default.createElement(
                                _nativeBase.Item,
                                {
                                    floatingLabel: true,
                                    last: true,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 69
                                    }
                                },
                                _react2.default.createElement(
                                    _nativeBase.Label,
                                    {
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 70
                                        }
                                    },
                                    "Nome"
                                ),
                                _react2.default.createElement(_nativeBase.Input, {
                                    value: this.state.name,
                                    onChangeText: function onChangeText(name) {
                                        return _this2.setState({
                                            name: name
                                        });
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 71
                                    }
                                })
                            ),
                            _react2.default.createElement(
                                _nativeBase.Item,
                                {
                                    floatingLabel: true,
                                    last: true,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 73
                                    }
                                },
                                _react2.default.createElement(
                                    _nativeBase.Label,
                                    {
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 74
                                        }
                                    },
                                    "C\xF3digo"
                                ),
                                _react2.default.createElement(_nativeBase.Input, {
                                    value: this.state.code,
                                    onChangeText: function onChangeText(code) {
                                        return _this2.setState({
                                            code: code
                                        });
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 75
                                    }
                                })
                            )
                        ),
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: {
                                    margin: 15
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 78
                                }
                            },
                            _react2.default.createElement(
                                _nativeBase.Button,
                                {
                                    full: true,
                                    danger: true,
                                    onPress: function onPress() {
                                        _reactNative.Keyboard.dismiss();

                                        _this2.update();
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 79
                                    }
                                },
                                _react2.default.createElement(
                                    _nativeBase.Text,
                                    {
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 89
                                        }
                                    },
                                    "Atualizar"
                                )
                            )
                        )
                    )
                );
            }
        }]);
        return UpdateCustomerScreen;
    }(_react.Component);

    exports.default = UpdateCustomerScreen;
},740,[108,12,403,400,671],"syncapp-mobile/screens/UpdateCustomer.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/home/mzdev/Development/Playground/SyncAppMobile/screens/UpdatePhone.js";

    var _react = require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = require(_dependencyMap[1], "react-native");

    var _nativeBase = require(_dependencyMap[2], "native-base");

    var _reactNativeSqliteStorage = require(_dependencyMap[3], "react-native-sqlite-storage");

    var _reactNativeSqliteStorage2 = babelHelpers.interopRequireDefault(_reactNativeSqliteStorage);

    var _events = require(_dependencyMap[4], "../utils/events");

    var _events2 = babelHelpers.interopRequireDefault(_events);

    var UpdatePhonesScreen = function (_Component) {
        babelHelpers.inherits(UpdatePhonesScreen, _Component);

        function UpdatePhonesScreen(props) {
            babelHelpers.classCallCheck(this, UpdatePhonesScreen);

            var _this = babelHelpers.possibleConstructorReturn(this, (UpdatePhonesScreen.__proto__ || Object.getPrototypeOf(UpdatePhonesScreen)).call(this, props));

            var params = props.navigation.state.params;
            _this.state = {
                name: params ? params.name : null,
                phone: params ? params.phone : null,
                number: params ? params.phone.number : null
            };
            return _this;
        }

        babelHelpers.createClass(UpdatePhonesScreen, [{
            key: "update",
            value: function update() {
                var id = this.state.phone.id;
                var number = this.state.number;

                var db = _reactNativeSqliteStorage2.default.openDatabase('syncapp', '1.0', 'SyncApp Database', 200000, this.openCB, this.errorCB);

                db.executeSql('UPDATE phone SET number = ? WHERE id = ?;', [number, id]);

                _events2.default.publish('RefreshNumbers');

                this.props.navigation.goBack();
            }
        }, {
            key: "errorCB",
            value: function errorCB(err) {
                console.log("SQLite3 Error: " + err);
            }
        }, {
            key: "openCB",
            value: function openCB() {
                console.log("Database OPENED");
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                return _react2.default.createElement(
                    _nativeBase.Container,
                    {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 52
                        }
                    },
                    _react2.default.createElement(
                        _nativeBase.Header,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 53
                            }
                        },
                        _react2.default.createElement(
                            _nativeBase.Left,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 54
                                }
                            },
                            _react2.default.createElement(
                                _nativeBase.Button,
                                {
                                    transparent: true,
                                    onPress: function onPress() {
                                        return _this2.props.navigation.goBack();
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 55
                                    }
                                },
                                _react2.default.createElement(_nativeBase.Icon, {
                                    name: "arrow-back",
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 56
                                    }
                                })
                            )
                        ),
                        _react2.default.createElement(
                            _nativeBase.Body,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 59
                                }
                            },
                            _react2.default.createElement(
                                _nativeBase.Title,
                                {
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 60
                                    }
                                },
                                this.state.name
                            )
                        ),
                        _react2.default.createElement(_nativeBase.Right, {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 62
                            }
                        })
                    ),
                    _react2.default.createElement(
                        _nativeBase.Content,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 64
                            }
                        },
                        _react2.default.createElement(
                            _nativeBase.Form,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 65
                                }
                            },
                            _react2.default.createElement(
                                _nativeBase.Item,
                                {
                                    floatingLabel: true,
                                    last: true,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 66
                                    }
                                },
                                _react2.default.createElement(
                                    _nativeBase.Label,
                                    {
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 67
                                        }
                                    },
                                    "Telefone"
                                ),
                                _react2.default.createElement(_nativeBase.Input, {
                                    value: this.state.number,
                                    onChangeText: function onChangeText(number) {
                                        return _this2.setState({
                                            number: number
                                        });
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 68
                                    }
                                })
                            )
                        ),
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: {
                                    margin: 15
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 71
                                }
                            },
                            _react2.default.createElement(
                                _nativeBase.Button,
                                {
                                    full: true,
                                    danger: true,
                                    onPress: function onPress() {
                                        _reactNative.Keyboard.dismiss();

                                        _this2.update();
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 72
                                    }
                                },
                                _react2.default.createElement(
                                    _nativeBase.Text,
                                    {
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 82
                                        }
                                    },
                                    "Atualizar"
                                )
                            )
                        )
                    )
                );
            }
        }]);
        return UpdatePhonesScreen;
    }(_react.Component);

    exports.default = UpdatePhonesScreen;
},741,[108,12,403,400,671],"syncapp-mobile/screens/UpdatePhone.js");
require(23);
require(11);